//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 12 19:49:21 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: safe_div_func_uint32_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
unsigned_divide_32            1                             
--------------------------------------------------------------------------------
Function: safe_lshift_func_uint16_t_u_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_sub_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_uint16_t_u_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: transparent_crc
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: platform_main_end
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_8bytes
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: platform_main_begin
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_gentab
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: func_1
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: crc32_byte
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: func_3
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: safe_mul_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_div_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
signed_divide_32              1                             
--------------------------------------------------------------------------------
Function: safe_sub_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_div_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
unsigned_divide_8             1                             
--------------------------------------------------------------------------------
Function: safe_mod_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
signed_modulus_32             1                             
--------------------------------------------------------------------------------
Function: func_13
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: func_15
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: safe_rshift_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_mod_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
unsigned_modulus_8            1                             
--------------------------------------------------------------------------------
Function: safe_mul_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_lshift_func_uint8_t_u_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_int32_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: legup_memcpy_1
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: legup_memcpy_2
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: legup_memcpy_4
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             

Running Bipartite Weighted Matching on function: platform_main_begin

Running Bipartite Weighted Matching on function: crc32_gentab
State: LEGUP_F_crc32_gentab_BB__15
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  crc32_gentab_mem_dual_port_0  
  store i32 %crc.0, i32* %scev... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_gentab_mem_dual_port_0  
  store i32 %crc.0, i32* %scev... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %crc.0, i32* %scev... (idx: 0) -> crc32_gentab_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: platform_main_end

Running Bipartite Weighted Matching on function: crc32_byte
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %1 = load i32* @crc32_contex... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %1 = load i32* @crc32_contex... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i32* @crc32_contex... (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %5, align 4 can share an output register with another operation already assigned to crc32_byte_mem_dual_port_0
                                                  crc32_byte_mem_dual_port_0    
  %6 = load i32* %5, align 4 (idx: 0)             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %6 = load i32* %5, align 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %5, align 4 (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* @crc32_co... can share an output register with another operation already assigned to crc32_byte_mem_dual_port_0
                                                  crc32_byte_mem_dual_port_0    
  store i32 %7, i32* @crc32_co... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  store i32 %7, i32* @crc32_co... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* @crc32_co... (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: safe_mul_func_int8_t_s_s

Running Bipartite Weighted Matching on function: safe_add_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: safe_div_func_int16_t_s_s
State: LEGUP_F_safe_div_func_int16_t_s_s_BB__8
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  safe_div_func_int16_t_s_s_signed_divide_32_0
  %11 = sdiv i32 %9, %10 (idx: 0)                 20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_int16_t_s_s_signed_divide_32_0
  %11 = sdiv i32 %9, %10 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %11 = sdiv i32 %9, %10 (idx: 0) -> safe_div_func_int16_t_s_s_signed_divide_32_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: safe_sub_func_int8_t_s_s

Running Bipartite Weighted Matching on function: safe_div_func_uint8_t_u_u
State: LEGUP_F_safe_div_func_uint8_t_u_u_BB__3
Binding functional unit type: unsigned_divide_8
Weight matrix for operation/function unit matching:
                                                  safe_div_func_uint8_t_u_u_unsigned_divide_8_0
  %div = udiv i8 %ui1, %ui2 (idx: 0)              0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_uint8_t_u_u_unsigned_divide_8_0
  %div = udiv i8 %ui1, %ui2 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %div = udiv i8 %ui1, %ui2 (idx: 0) -> safe_div_func_uint8_t_u_u_unsigned_divide_8_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: safe_mod_func_int16_t_s_s
State: LEGUP_F_safe_mod_func_int16_t_s_s_BB__8
Binding functional unit type: signed_modulus_32
Weight matrix for operation/function unit matching:
                                                  safe_mod_func_int16_t_s_s_signed_modulus_32_0
  %11 = srem i32 %9, %10 (idx: 0)                 20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_mod_func_int16_t_s_s_signed_modulus_32_0
  %11 = srem i32 %9, %10 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %11 = srem i32 %9, %10 (idx: 0) -> safe_mod_func_int16_t_s_s_signed_modulus_32_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: safe_rshift_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: safe_div_func_uint32_t_u_u
State: LEGUP_F_safe_div_func_uint32_t_u_u_BB__3
Binding functional unit type: unsigned_divide_32
Weight matrix for operation/function unit matching:
                                                  safe_div_func_uint32_t_u_u_unsigned_divide_32_0
  %4 = udiv i32 %ui1, %ui2 (idx: 0)               0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_uint32_t_u_u_unsigned_divide_32_0
  %4 = udiv i32 %ui1, %ui2 (idx: 0)               1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = udiv i32 %ui1, %ui2 (idx: 0) -> safe_div_func_uint32_t_u_u_unsigned_divide_32_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: safe_lshift_func_uint16_t_u_s

Running Bipartite Weighted Matching on function: safe_sub_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_rshift_func_uint16_t_u_s

Running Bipartite Weighted Matching on function: safe_add_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_add_func_int8_t_s_s

Running Bipartite Weighted Matching on function: safe_mod_func_uint8_t_u_u
State: LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3
Binding functional unit type: unsigned_modulus_8
Weight matrix for operation/function unit matching:
                                                  safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0
  %4 = urem i8 %ui1, %ui2 (idx: 0)                0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0
  %4 = urem i8 %ui1, %ui2 (idx: 0)                1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = urem i8 %ui1, %ui2 (idx: 0) -> safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: safe_mul_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_lshift_func_uint8_t_u_s

Running Bipartite Weighted Matching on function: safe_add_func_int32_t_s_s

Running Bipartite Weighted Matching on function: legup_memcpy_1
State: LEGUP_F_legup_memcpy_1_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        10                            10                            
  store i8* %d, i8** %dt, alig... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        1                             0                             
  store i8* %d, i8** %dt, alig... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %1, align... (idx: 0) -> legup_memcpy_1_mem_dual_port_0 (mux inputs: 1)
  store i8* %d, i8** %dt, alig... (idx: 1) -> legup_memcpy_1_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memcpy_1_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %s, i8** %st, alig... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i8* %s, i8** %st, alig... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8* %s, i8** %st, alig... (idx: 0)        6                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8* %s, i8** %st, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %s, i8** %st, alig... (idx: 0) -> legup_memcpy_1_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_1_BB__2
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %3 = load i32* %1, align 4 can share an input with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  %3 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  %3 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  %3 = load i32* %1, align 4 (idx: 0)             -3                            6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  %3 = load i32* %1, align 4 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* %1, align 4 (idx: 0) -> legup_memcpy_1_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_1_BB__2
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %4, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i32 %4, i32* %1, align... (idx: 0)        7                             16                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i32 %4, i32* %1, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %1, align... (idx: 0) -> legup_memcpy_1_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memcpy_1_BB__6
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %7 = load i8** %st, align 4 can share an input with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  %7 = load i8** %st, align 4 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  %7 = load i8** %st, align 4 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
  %10 = load i8** %dt, align 4 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  %10 = load i8** %dt, align 4 can share an input with another operation already assigned to legup_memcpy_1_mem_dual_port_1
  %10 = load i8** %dt, align 4 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  %7 = load i8** %st, align 4 (idx: 0)            -2                            6                             
  %10 = load i8** %dt, align 4 (idx: 1)           8                             -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  %7 = load i8** %st, align 4 (idx: 0)            1                             0                             
  %10 = load i8** %dt, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %7 = load i8** %st, align 4 (idx: 0) -> legup_memcpy_1_mem_dual_port_0 (mux inputs: 3)
  %10 = load i8** %dt, align 4 (idx: 1) -> legup_memcpy_1_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memcpy_1_BB__6
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %8, i8** %st, alig... can share an input with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i8* %8, i8** %st, alig... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i8* %8, i8** %st, alig... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
  %9 = load i8* %7, align 1 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  %9 = load i8* %7, align 1 can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8* %8, i8** %st, alig... (idx: 0)        8                             16                            
  %9 = load i8* %7, align 1 (idx: 1)              8                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8* %8, i8** %st, alig... (idx: 0)        1                             0                             
  %9 = load i8* %7, align 1 (idx: 1)              0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %8, i8** %st, alig... (idx: 0) -> legup_memcpy_1_mem_dual_port_0 (mux inputs: 4)
  %9 = load i8* %7, align 1 (idx: 1) -> legup_memcpy_1_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_1_BB__6
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %11, i8** %dt, ali... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i8* %11, i8** %dt, ali... can share an input with another operation already assigned to legup_memcpy_1_mem_dual_port_1
  store i8* %11, i8** %dt, ali... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8* %11, i8** %dt, ali... (idx: 0)        19                            7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8* %11, i8** %dt, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %11, i8** %dt, ali... (idx: 0) -> legup_memcpy_1_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_legup_memcpy_1_BB__6
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %9, i8* %10, align ... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_0
  store i8 %9, i8* %10, align ... can share an output register with another operation already assigned to legup_memcpy_1_mem_dual_port_1
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8 %9, i8* %10, align ... (idx: 0)        19                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_1_mem_dual_port_0legup_memcpy_1_mem_dual_port_1
  store i8 %9, i8* %10, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %9, i8* %10, align ... (idx: 0) -> legup_memcpy_1_mem_dual_port_1 (mux inputs: 5)

Running Bipartite Weighted Matching on function: legup_memcpy_2
State: LEGUP_F_legup_memcpy_2_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        10                            10                            
  store i16* %2, i16** %dt, al... (idx: 1)        20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        1                             0                             
  store i16* %2, i16** %dt, al... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %1, align... (idx: 0) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 1)
  store i16* %2, i16** %dt, al... (idx: 1) -> legup_memcpy_2_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_2_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16* %3, i16** %st, al... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i16* %3, i16** %st, al... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  store i32 %4, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16* %3, i16** %st, al... (idx: 0)        16                            17                            
  store i32 %4, i32* %1, align... (idx: 1)        6                             17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16* %3, i16** %st, al... (idx: 0)        0                             1                             
  store i32 %4, i32* %1, align... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %1, align... (idx: 1) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 2)
  store i16* %3, i16** %st, al... (idx: 0) -> legup_memcpy_2_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_2_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %1, align 4 can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             -3                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %1, align 4 (idx: 0) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_2_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        7                             19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* %1, align... (idx: 0) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memcpy_2_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i16** %st, align ... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  %10 = load i16** %st, align ... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  %10 = load i16** %st, align ... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  %13 = load i16** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  %13 = load i16** %dt, align ... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  %13 = load i16** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  %10 = load i16** %st, align ... (idx: 0)        8                             -1                            
  %13 = load i16** %dt, align ... (idx: 1)        8                             -1                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  %10 = load i16** %st, align ... (idx: 0)        1                             0                             
  %13 = load i16** %dt, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i16** %st, align ... (idx: 0) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 4)
  %13 = load i16** %dt, align ... (idx: 1) -> legup_memcpy_2_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_2_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16* %11, i16** %st, a... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i16* %11, i16** %st, a... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i16* %11, i16** %st, a... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  store i16* %11, i16** %st, a... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  %12 = load i16* %10, align 2 can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  %12 = load i16* %10, align 2 can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16* %11, i16** %st, a... (idx: 0)        9                             9                             
  %12 = load i16* %10, align 2 (idx: 1)           9                             9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16* %11, i16** %st, a... (idx: 0)        1                             0                             
  %12 = load i16* %10, align 2 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16* %11, i16** %st, a... (idx: 0) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 5)
  %12 = load i16* %10, align 2 (idx: 1) -> legup_memcpy_2_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_legup_memcpy_2_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16* %14, i16** %dt, a... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i16* %14, i16** %dt, a... can share an input with another operation already assigned to legup_memcpy_2_mem_dual_port_1
  store i16* %14, i16** %dt, a... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16* %14, i16** %dt, a... (idx: 0)        20                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16* %14, i16** %dt, a... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16* %14, i16** %dt, a... (idx: 0) -> legup_memcpy_2_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_legup_memcpy_2_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %12, i16* %13, ali... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_0
  store i16 %12, i16* %13, ali... can share an output register with another operation already assigned to legup_memcpy_2_mem_dual_port_1
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16 %12, i16* %13, ali... (idx: 0)        20                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_2_mem_dual_port_0legup_memcpy_2_mem_dual_port_1
  store i16 %12, i16* %13, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %12, i16* %13, ali... (idx: 0) -> legup_memcpy_2_mem_dual_port_0 (mux inputs: 7)

Running Bipartite Weighted Matching on function: legup_memcpy_4
State: LEGUP_F_legup_memcpy_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        10                            10                            
  store i32* %2, i32** %dt, al... (idx: 1)        20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        1                             0                             
  store i32* %2, i32** %dt, al... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %1, align... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 1)
  store i32* %2, i32** %dt, al... (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %3, i32** %st, al... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %3, i32** %st, al... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32 %4, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %3, i32** %st, al... (idx: 0)        16                            17                            
  store i32 %4, i32* %1, align... (idx: 1)        6                             17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %3, i32** %st, al... (idx: 0)        0                             1                             
  store i32 %4, i32* %1, align... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %1, align... (idx: 1) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 2)
  store i32* %3, i32** %st, al... (idx: 0) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_4_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %1, align 4 can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             -3                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %1, align 4 (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_4_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        7                             19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* %1, align... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32** %st, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %10 = load i32** %st, align ... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %13 = load i32** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %13 = load i32** %dt, align ... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %13 = load i32** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... (idx: 0)        8                             -1                            
  %13 = load i32** %dt, align ... (idx: 1)        8                             -1                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... (idx: 0)        1                             0                             
  %13 = load i32** %dt, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32** %st, align ... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 4)
  %13 = load i32** %dt, align ... (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %11, i32** %st, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %11, i32** %st, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %11, i32** %st, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %12 = load i32* %10, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %12 = load i32* %10, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... (idx: 0)        9                             9                             
  %12 = load i32* %10, align 4 (idx: 1)           9                             9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... (idx: 0)        1                             0                             
  %12 = load i32* %10, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %11, i32** %st, a... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 5)
  %12 = load i32* %10, align 4 (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %14, i32** %dt, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %14, i32** %dt, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... (idx: 0)        20                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %14, i32** %dt, a... (idx: 0) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* %13, ali... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %12, i32* %13, ali... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %12, i32* %13, ali... (idx: 0)        20                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %12, i32* %13, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* %13, ali... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 7)

Running Bipartite Weighted Matching on function: crc32_8bytes

Running Bipartite Weighted Matching on function: func_13
State: LEGUP_F_func_13_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_13_mem_dual_port_0       
  %3 = load i32* %2, align 4 (idx: 0)             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_13_mem_dual_port_0       
  %3 = load i32* %2, align 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* %2, align 4 (idx: 0) -> func_13_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_13_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %4, i32* %2, align... can share an input with another operation already assigned to func_13_mem_dual_port_0
  store i32 %4, i32* %2, align... can share an output register with another operation already assigned to func_13_mem_dual_port_0
                                                  func_13_mem_dual_port_0       
  store i32 %4, i32* %2, align... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_13_mem_dual_port_0       
  store i32 %4, i32* %2, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %2, align... (idx: 0) -> func_13_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: func_15
State: LEGUP_F_func_15_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_15_mem_dual_port_0       
  store i16 %storemerge, i16* ... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_15_mem_dual_port_0       
  store i16 %storemerge, i16* ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %storemerge, i16* ... (idx: 0) -> func_15_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_15_BB__4
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %5 = load i16* @g_8, align 2 can share an output register with another operation already assigned to func_15_mem_dual_port_0
                                                  func_15_mem_dual_port_0       
  %5 = load i16* @g_8, align 2 (idx: 0)           -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_15_mem_dual_port_0       
  %5 = load i16* @g_8, align 2 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %5 = load i16* @g_8, align 2 (idx: 0) -> func_15_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_15_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load volatile i32* get... can share an output register with another operation already assigned to func_15_mem_dual_port_0
                                                  func_15_mem_dual_port_0       
  %10 = load volatile i32* get... (idx: 0)        -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_15_mem_dual_port_0       
  %10 = load volatile i32* get... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load volatile i32* get... (idx: 0) -> func_15_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_15_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %11, i32*... can share an output register with another operation already assigned to func_15_mem_dual_port_0
                                                  func_15_mem_dual_port_0       
  store volatile i32 %11, i32*... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_15_mem_dual_port_0       
  store volatile i32 %11, i32*... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %11, i32*... (idx: 0) -> func_15_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_func_15_BB__16
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 543781278, i32* %s... can share an output register with another operation already assigned to func_15_mem_dual_port_0
                                                  func_15_mem_dual_port_0       
  store i32 543781278, i32* %s... (idx: 0)        7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_15_mem_dual_port_0       
  store i32 543781278, i32* %s... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 543781278, i32* %s... (idx: 0) -> func_15_mem_dual_port_0 (mux inputs: 3)

Running Bipartite Weighted Matching on function: transparent_crc
State: LEGUP_F_transparent_crc_BB__2
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  transparent_crc_mem_dual_port_0
  %3 = load i32* @crc32_contex... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  transparent_crc_mem_dual_port_0
  %3 = load i32* @crc32_contex... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* @crc32_contex... (idx: 0) -> transparent_crc_mem_dual_port_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: func_3
State: LEGUP_F_func_3_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i16 %4, i16* @g_8, ali... (idx: 0)        10                            10                            
  store i32 -1769391627, i32* ... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i16 %4, i16* @g_8, ali... (idx: 0)        1                             0                             
  store i32 -1769391627, i32* ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %4, i16* @g_8, ali... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 1)
  store i32 -1769391627, i32* ... (idx: 1) -> func_3_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_func_3_BB__8
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %storemerge, i32* ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  store i32 %storemerge, i32* ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i32 %storemerge, i32* ... (idx: 0)        6                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i32 %storemerge, i32* ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %storemerge, i32* ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_func_3_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %13 = load volatile i32* @g_... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %13 = load volatile i32* @g_... can share an output register with another operation already assigned to func_3_mem_dual_port_1
  %16 = load i32* %15, align 4 can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %16 = load i32* %15, align 4 can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %13 = load volatile i32* @g_... (idx: 0)        -3                            -4                            
  %16 = load i32* %15, align 4 (idx: 1)           7                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %13 = load volatile i32* @g_... (idx: 0)        1                             0                             
  %16 = load i32* %15, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %13 = load volatile i32* @g_... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 2)
  %16 = load i32* %15, align 4 (idx: 1) -> func_3_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_func_3_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i8* @g_40, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %19 = load i8* @g_40, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %19 = load i8* @g_40, align ... (idx: 0)        -3                            -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %19 = load i8* @g_40, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i8* @g_40, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_func_3_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %20, i8* @g_40, ali... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  store i8 %20, i8* @g_40, ali... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i8 %20, i8* @g_40, ali... (idx: 0)        7                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i8 %20, i8* @g_40, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %20, i8* @g_40, ali... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_func_3_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %24 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %24 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %24 = load i32* @g_6, align ... (idx: 0)        -2                            -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %24 = load i32* @g_6, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = load i32* @g_6, align ... (idx: 0) -> func_3_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_func_3_BB__28
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %30 = load i32* %29, align 4 can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %30 = load i32* %29, align 4 can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %30 = load i32* %29, align 4 (idx: 0)           8                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %30 = load i32* %29, align 4 (idx: 0)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %30 = load i32* %29, align 4 (idx: 0) -> func_3_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_func_3_BB__32
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %37 = load i16* @g_8, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %37 = load i16* @g_8, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
  %44 = load i8* %43, align 1 can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %44 = load i8* %43, align 1 can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %37 = load i16* @g_8, align ... (idx: 0)        -2                            -2                            
  %44 = load i8* %43, align 1 (idx: 1)            8                             8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %37 = load i16* @g_8, align ... (idx: 0)        1                             0                             
  %44 = load i8* %43, align 1 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %37 = load i16* @g_8, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 3)
  %44 = load i8* %43, align 1 (idx: 1) -> func_3_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_func_3_BB__32
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %46 = load i8* @g_40, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %46 = load i8* @g_40, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %46 = load i8* @g_40, align ... (idx: 0)        -2                            -1                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %46 = load i8* @g_40, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %46 = load i8* @g_40, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_func_3_BB__32
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %45, i8* %43, align... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  store i8 %45, i8* %43, align... can share an input with another operation already assigned to func_3_mem_dual_port_1
  store i8 %45, i8* %43, align... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i8 %45, i8* %43, align... (idx: 0)        18                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i8 %45, i8* %43, align... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %45, i8* %43, align... (idx: 0) -> func_3_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_func_3_BB__32
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %51 = load i32* %50, align 4 can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %51 = load i32* %50, align 4 can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %51 = load i32* %50, align 4 (idx: 0)           8                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %51 = load i32* %50, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %51 = load i32* %50, align 4 (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_func_3_BB__32
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %59 = load i32* getelementpt... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %59 = load i32* getelementpt... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %59 = load i32* getelementpt... (idx: 0)        -1                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %59 = load i32* getelementpt... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %59 = load i32* getelementpt... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_func_3_BB__62
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %63 = load i8* @g_40, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %63 = load i8* @g_40, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %63 = load i8* @g_40, align ... (idx: 0)        -1                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %63 = load i8* @g_40, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %63 = load i8* @g_40, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_func_3_BB__62
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %67 = load i8* @g_55, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %67 = load i8* @g_55, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %67 = load i8* @g_55, align ... (idx: 0)        -1                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %67 = load i8* @g_55, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %67 = load i8* @g_55, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_func_3_BB__62
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %68, i8* @g_55, ali... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  store i8 %68, i8* @g_55, ali... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i8 %68, i8* @g_55, ali... (idx: 0)        9                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  store i8 %68, i8* @g_55, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %68, i8* @g_55, ali... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_func_3_BB__69
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %70 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %70 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %70 = load i32* @g_6, align ... (idx: 0)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %70 = load i32* @g_6, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %70 = load i32* @g_6, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_func_3_BB__74
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %75 = load volatile i32* get... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %75 = load volatile i32* get... can share an output register with another operation already assigned to func_3_mem_dual_port_1
  store i32 %77, i32* @g_64, a... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  store i32 %77, i32* @g_64, a... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %75 = load volatile i32* get... (idx: 0)        0                             0                             
  store i32 %77, i32* @g_64, a... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %75 = load volatile i32* get... (idx: 0)        1                             0                             
  store i32 %77, i32* @g_64, a... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %75 = load volatile i32* get... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
  store i32 %77, i32* @g_64, a... (idx: 1) -> func_3_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_func_3_BB__79
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %80 = load i8* @g_55, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %80 = load i8* @g_55, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %80 = load i8* @g_55, align ... (idx: 0)        0                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %80 = load i8* @g_55, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %80 = load i8* @g_55, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_func_3_BB__82
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %83 = load i32* getelementpt... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %83 = load i32* getelementpt... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %83 = load i32* getelementpt... (idx: 0)        0                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %83 = load i32* getelementpt... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = load i32* getelementpt... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_func_3_BB__89
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %96 = load volatile i32* get... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %96 = load volatile i32* get... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %96 = load volatile i32* get... (idx: 0)        0                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %96 = load volatile i32* get... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %96 = load volatile i32* get... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_func_3_BB__98
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %105 = load i16* @g_8, align... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %105 = load i16* @g_8, align... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %105 = load i16* @g_8, align... (idx: 0)        0                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %105 = load i16* @g_8, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %105 = load i16* @g_8, align... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_func_3_BB__108
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %111 = load i8* %110, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %111 = load i8* %110, align ... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %111 = load i8* %110, align ... (idx: 0)        10                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %111 = load i8* %110, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %111 = load i8* %110, align ... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_func_3_BB__117
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %119 = load i16* %118, align... can share an output register with another operation already assigned to func_3_mem_dual_port_0
  %119 = load i16* %118, align... can share an output register with another operation already assigned to func_3_mem_dual_port_1
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %119 = load i16* %118, align... (idx: 0)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_3_mem_dual_port_0        func_3_mem_dual_port_1        
  %119 = load i16* %118, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %119 = load i16* %118, align... (idx: 0) -> func_3_mem_dual_port_0 (mux inputs: 7)

Running Bipartite Weighted Matching on function: func_1
State: LEGUP_F_func_1_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %2 = load volatile i32* @g_2... (idx: 0)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %2 = load volatile i32* @g_2... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %2 = load volatile i32* @g_2... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_1_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %3, i32* ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store volatile i32 %3, i32* ... (idx: 0)        5                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store volatile i32 %3, i32* ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %3, i32* ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_1_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load volatile i32* @g_2... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %5 = load i32* @g_6, align 4 can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %4 = load volatile i32* @g_2... (idx: 0)        -4                            0                             
  %5 = load i32* @g_6, align 4 (idx: 1)           -4                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %4 = load volatile i32* @g_2... (idx: 0)        1                             0                             
  %5 = load i32* @g_6, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load volatile i32* @g_2... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
  %5 = load i32* @g_6, align 4 (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %8 = load i16* @g_78, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %8 = load i16* @g_78, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %8 = load i16* @g_78, align ... (idx: 0)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %8 = load i16* @g_78, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %8 = load i16* @g_78, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i32* %15, align 4 can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %16 = load i32* %15, align 4 can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %16 = load i32* %15, align 4 (idx: 0)           6                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %16 = load i32* %15, align 4 (idx: 0)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i32* %15, align 4 (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_func_1_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %17, i32* %15, ali... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  store i32 %17, i32* %15, ali... can share an input with another operation already assigned to func_1_mem_dual_port_1
  store i32 %17, i32* %15, ali... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %17, i32* %15, ali... (idx: 0)        16                            6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %17, i32* %15, ali... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %17, i32* %15, ali... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_func_1_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %21 = load i16* @g_78, align... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %21 = load i16* @g_78, align... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %21 = load i16* @g_78, align... (idx: 0)        -4                            -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %21 = load i16* @g_78, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %21 = load i16* @g_78, align... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_1_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %27 = load i32* %26, align 4 can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %27 = load i32* %26, align 4 can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %27 = load i32* %26, align 4 (idx: 0)           6                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %27 = load i32* %26, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %27 = load i32* %26, align 4 (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %2 = load volatile i32* @g_2... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %2 = load volatile i32* @g_2... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %2 = load volatile i32* @g_2... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i32* @g_6, align 4 can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %4 = load i32* @g_6, align 4 (idx: 0)           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %4 = load i32* @g_6, align 4 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i32* @g_6, align 4 (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %12 = load i32* %scevgep2, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %12 = load i32* %scevgep2, a... (idx: 0)        5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %12 = load i32* %scevgep2, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load i32* %scevgep2, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__21
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %22 = load i16* @g_8, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %22 = load i16* @g_8, align ... (idx: 0)        -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %22 = load i16* @g_8, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %22 = load i16* @g_8, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__21
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %24 = load i8* @g_40, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %24 = load i8* @g_40, align ... (idx: 0)        -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %24 = load i8* @g_40, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = load i8* @g_40, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__28
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %29 = load volatile i32* %sc... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %29 = load volatile i32* %sc... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %29 = load volatile i32* %sc... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %29 = load volatile i32* %sc... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %36 = load i8* @g_55, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %36 = load i8* @g_55, align ... (idx: 0)        -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %36 = load i8* @g_55, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %36 = load i8* @g_55, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %38 = load i32* @g_64, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %38 = load i32* @g_64, align... (idx: 0)        -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %38 = load i32* @g_64, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = load i32* @g_64, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %40 = load i16* @g_78, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %40 = load i16* @g_78, align... (idx: 0)        -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %40 = load i16* @g_78, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %40 = load i16* @g_78, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %42 = load i32* @crc32_conte... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %42 = load i32* @crc32_conte... (idx: 0)        -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %42 = load i32* @crc32_conte... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %42 = load i32* @crc32_conte... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)

