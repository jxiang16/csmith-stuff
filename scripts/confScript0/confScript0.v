//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 12 19:49:21 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 39
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %l_52 = alloca [1 x [1 x [9 x i32]]], align 4
`define TAG_func_13_0_l_52 `MEMORY_CONTROLLER_TAG_SIZE'd31
`define TAG_func_13_0_l_52_a {`TAG_func_13_0_l_52, 23'd0}
//   %l_82 = alloca [5 x [1 x i32]], align 4
`define TAG_func_1_0_l_82 `MEMORY_CONTROLLER_TAG_SIZE'd27
`define TAG_func_1_0_l_82_a {`TAG_func_1_0_l_82, 23'd0}
//   %l_10 = alloca [7 x i32], align 4
`define TAG_func_3_0_l_10 `MEMORY_CONTROLLER_TAG_SIZE'd30
`define TAG_func_3_0_l_10_a {`TAG_func_3_0_l_10, 23'd0}
//   %l_41 = alloca [7 x i8], align 1
`define TAG_func_3_0_l_41 `MEMORY_CONTROLLER_TAG_SIZE'd28
`define TAG_func_3_0_l_41_a {`TAG_func_3_0_l_41, 23'd0}
//   %l_67 = alloca [9 x [8 x [2 x i16]]], align 2
`define TAG_func_3_0_l_67 `MEMORY_CONTROLLER_TAG_SIZE'd29
`define TAG_func_3_0_l_67_a {`TAG_func_3_0_l_67, 23'd0}
// @crc32_context = internal global i32 -1, align 4
`define TAG_g_crc32_context `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g_crc32_context_a {`TAG_g_crc32_context, 23'd0}
// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
`define TAG_g_crc32_tab `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g_crc32_tab_a {`TAG_g_crc32_tab, 23'd0}
// @func_13.l_52 = private unnamed_addr constant [1 x [1 x [9 x i32]]] [[1 x [9 x i32]] [[9 x i32] [i32 1100068960, i32 1100068960, i32 2, i32 1100068960, i32 1100068960, i32 2, i32 1100068960, i32 11000...
`define TAG_g_func_13l_52 `MEMORY_CONTROLLER_TAG_SIZE'd26
`define TAG_g_func_13l_52_a {`TAG_g_func_13l_52, 23'd0}
// @func_1.l_82 = private unnamed_addr constant [5 x [1 x i32]] [[1 x i32] [i32 1], [1 x i32] [i32 1], [1 x i32] [i32 1], [1 x i32] [i32 1], [1 x i32] [i32 1]], align 4
`define TAG_g_func_1l_82 `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_g_func_1l_82_a {`TAG_g_func_1l_82, 23'd0}
// @func_3.l_10 = private unnamed_addr constant [7 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 4
`define TAG_g_func_3l_10 `MEMORY_CONTROLLER_TAG_SIZE'd25
`define TAG_g_func_3l_10_a {`TAG_g_func_3l_10, 23'd0}
// @func_3.l_41 = private unnamed_addr constant [7 x i8] c"\00\F9\F9\00\F9\F9\00", align 1
`define TAG_g_func_3l_41 `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_g_func_3l_41_a {`TAG_g_func_3l_41, 23'd0}
// @func_3.l_67 = private unnamed_addr constant [9 x [8 x [2 x i16]]] [[8 x [2 x i16]] [[2 x i16] [i16 6307, i16 0], [2 x i16] [i16 20799, i16 1], [2 x i16] [i16 20799, i16 0], [2 x i16] [i16 6307, i16 6...
`define TAG_g_func_3l_67 `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_g_func_3l_67_a {`TAG_g_func_3l_67, 23'd0}
// @g_2 = internal global i32 8, align 4
`define TAG_g_g_2 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_g_2_a {`TAG_g_g_2, 23'd0}
// @g_40 = internal global i8 -1, align 1
`define TAG_g_g_40 `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_g_40_a {`TAG_g_g_40, 23'd0}
// @g_49 = internal global [4 x i32] [i32 -1309128581, i32 -1309128581, i32 -1309128581, i32 -1309128581], align 4
`define TAG_g_g_49 `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_g_49_a {`TAG_g_g_49, 23'd0}
// @g_55 = internal global i8 -1, align 1
`define TAG_g_g_55 `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_g_55_a {`TAG_g_g_55, 23'd0}
// @g_6 = internal global i32 5, align 4
`define TAG_g_g_6 `MEMORY_CONTROLLER_TAG_SIZE'd4
// @g_64 = internal global i32 -13919540, align 4
`define TAG_g_g_64 `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_g_64_a {`TAG_g_g_64, 23'd0}
`define TAG_g_g_6_a {`TAG_g_g_6, 23'd0}
// @g_7 = internal global [5 x [10 x i32]] [[10 x i32] [i32 -1615740872, i32 6, i32 -1, i32 7, i32 -1, i32 6, i32 -1615740872, i32 -2, i32 -2129845793, i32 4], [10 x i32] [i32 -2, i32 -1993176570, i32 84...
`define TAG_g_g_7 `MEMORY_CONTROLLER_TAG_SIZE'd6
// @g_78 = internal global i16 -2, align 2
`define TAG_g_g_78 `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g_g_78_a {`TAG_g_g_78, 23'd0}
`define TAG_g_g_7_a {`TAG_g_g_7, 23'd0}
// @g_8 = internal global i16 5, align 2
`define TAG_g_g_8 `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_g_8_a {`TAG_g_g_8, 23'd0}
// @.str = private unnamed_addr constant [4 x i8] c"g_2\00", align 1
`define TAG_g_str `MEMORY_CONTROLLER_TAG_SIZE'd3
// @.str1 = private unnamed_addr constant [4 x i8] c"g_6\00", align 1
`define TAG_g_str1 `MEMORY_CONTROLLER_TAG_SIZE'd5
// @.str10 = private unnamed_addr constant [5 x i8] c"g_78\00", align 1
`define TAG_g_str10 `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g_str10_a {`TAG_g_str10, 23'd0}
`define TAG_g_str1_a {`TAG_g_str1, 23'd0}
// @.str2 = private unnamed_addr constant [10 x i8] c"g_7[i][j]\00", align 1
`define TAG_g_str2 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_str2_a {`TAG_g_str2, 23'd0}
// @.str4 = private unnamed_addr constant [4 x i8] c"g_8\00", align 1
`define TAG_g_str4 `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_str4_a {`TAG_g_str4, 23'd0}
// @.str5 = private unnamed_addr constant [5 x i8] c"g_40\00", align 1
`define TAG_g_str5 `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_str5_a {`TAG_g_str5, 23'd0}
// @.str6 = private unnamed_addr constant [8 x i8] c"g_49[i]\00", align 1
`define TAG_g_str6 `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_str6_a {`TAG_g_str6, 23'd0}
// @.str8 = private unnamed_addr constant [5 x i8] c"g_55\00", align 1
`define TAG_g_str8 `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_str8_a {`TAG_g_str8, 23'd0}
// @.str9 = private unnamed_addr constant [5 x i8] c"g_64\00", align 1
`define TAG_g_str9 `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_str9_a {`TAG_g_str9, 23'd0}
`define TAG_g_str_a {`TAG_g_str, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_1_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd32
`define TAG_legup_memcpy_1_0_1_a {`TAG_legup_memcpy_1_0_1, 23'd0}
//   %dt = alloca i8*, align 4
`define TAG_legup_memcpy_1_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd33
`define TAG_legup_memcpy_1_0_dt_a {`TAG_legup_memcpy_1_0_dt, 23'd0}
//   %st = alloca i8*, align 4
`define TAG_legup_memcpy_1_0_st `MEMORY_CONTROLLER_TAG_SIZE'd34
`define TAG_legup_memcpy_1_0_st_a {`TAG_legup_memcpy_1_0_st, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_2_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd35
`define TAG_legup_memcpy_2_0_1_a {`TAG_legup_memcpy_2_0_1, 23'd0}
//   %dt = alloca i16*, align 4
`define TAG_legup_memcpy_2_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd36
`define TAG_legup_memcpy_2_0_dt_a {`TAG_legup_memcpy_2_0_dt, 23'd0}
//   %st = alloca i16*, align 4
`define TAG_legup_memcpy_2_0_st `MEMORY_CONTROLLER_TAG_SIZE'd37
`define TAG_legup_memcpy_2_0_st_a {`TAG_legup_memcpy_2_0_st, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_4_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd38
`define TAG_legup_memcpy_4_0_1_a {`TAG_legup_memcpy_4_0_1, 23'd0}
//   %dt = alloca i32*, align 4
`define TAG_legup_memcpy_4_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd39
`define TAG_legup_memcpy_4_0_dt_a {`TAG_legup_memcpy_4_0_dt, 23'd0}
//   %st = alloca i32*, align 4
`define TAG_legup_memcpy_4_0_st `MEMORY_CONTROLLER_TAG_SIZE'd40
`define TAG_legup_memcpy_4_0_st_a {`TAG_legup_memcpy_4_0_st, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] g_2_address_a;
reg [0:0] g_2_address_b;
reg g_2_write_enable_a;
reg g_2_write_enable_b;
reg [31:0] g_2_in_a;
reg [31:0] g_2_in_b;
wire [31:0] g_2_out_a;
wire [31:0] g_2_out_b;

// @g_2 = internal global i32 8, align 4
ram_dual_port g_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_2_address_a ),
	.address_b( g_2_address_b ),
	.wren_a( g_2_write_enable_a ),
	.wren_b( g_2_write_enable_b ),
	.data_a( g_2_in_a ),
	.data_b( g_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_2_out_a ),
	.q_b( g_2_out_b)
);
defparam g_2.width_a = 32;
defparam g_2.width_b = 32;
defparam g_2.widthad_a = 1;
defparam g_2.widthad_b = 1;
defparam g_2.width_be_a = 1;
defparam g_2.width_be_b = 1;
defparam g_2.numwords_a = 1;
defparam g_2.numwords_b = 1;
defparam g_2.latency = ram_latency;
defparam g_2.init_file = "g_2.mif";

reg [1:0] str_address_a;
reg [1:0] str_address_b;
reg str_write_enable_a;
reg str_write_enable_b;
reg [7:0] str_in_a;
reg [7:0] str_in_b;
wire [7:0] str_out_a;
wire [7:0] str_out_b;

// @.str = private unnamed_addr constant [4 x i8] c"g_2\00", align 1
rom_dual_port str (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str_address_a ),
	.address_b( str_address_b ),
	.q_a( str_out_a ),
	.q_b( str_out_b)
);
defparam str.width_a = 8;
defparam str.width_b = 8;
defparam str.widthad_a = 2;
defparam str.widthad_b = 2;
defparam str.numwords_a = 4;
defparam str.numwords_b = 4;
defparam str.latency = ram_latency;
defparam str.init_file = "str.mif";

reg [0:0] g_6_address_a;
reg [0:0] g_6_address_b;
reg g_6_write_enable_a;
reg g_6_write_enable_b;
reg [31:0] g_6_in_a;
reg [31:0] g_6_in_b;
wire [31:0] g_6_out_a;
wire [31:0] g_6_out_b;

// @g_6 = internal global i32 5, align 4
ram_dual_port g_6 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_6_address_a ),
	.address_b( g_6_address_b ),
	.wren_a( g_6_write_enable_a ),
	.wren_b( g_6_write_enable_b ),
	.data_a( g_6_in_a ),
	.data_b( g_6_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_6_out_a ),
	.q_b( g_6_out_b)
);
defparam g_6.width_a = 32;
defparam g_6.width_b = 32;
defparam g_6.widthad_a = 1;
defparam g_6.widthad_b = 1;
defparam g_6.width_be_a = 1;
defparam g_6.width_be_b = 1;
defparam g_6.numwords_a = 1;
defparam g_6.numwords_b = 1;
defparam g_6.latency = ram_latency;
defparam g_6.init_file = "g_6.mif";

reg [1:0] str1_address_a;
reg [1:0] str1_address_b;
reg str1_write_enable_a;
reg str1_write_enable_b;
reg [7:0] str1_in_a;
reg [7:0] str1_in_b;
wire [7:0] str1_out_a;
wire [7:0] str1_out_b;

// @.str1 = private unnamed_addr constant [4 x i8] c"g_6\00", align 1
rom_dual_port str1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str1_address_a ),
	.address_b( str1_address_b ),
	.q_a( str1_out_a ),
	.q_b( str1_out_b)
);
defparam str1.width_a = 8;
defparam str1.width_b = 8;
defparam str1.widthad_a = 2;
defparam str1.widthad_b = 2;
defparam str1.numwords_a = 4;
defparam str1.numwords_b = 4;
defparam str1.latency = ram_latency;
defparam str1.init_file = "str1.mif";

reg [5:0] g_7_address_a;
reg [5:0] g_7_address_b;
reg g_7_write_enable_a;
reg g_7_write_enable_b;
reg [31:0] g_7_in_a;
reg [31:0] g_7_in_b;
wire [31:0] g_7_out_a;
wire [31:0] g_7_out_b;

// @g_7 = internal global [5 x [10 x i32]] [[10 x i32] [i32 -1615740872, i32 6, i32 -1, i32 7, i32 -1, i32 6, i32 -1615740872, i32 -2, i32 -2129845793, i32 4], [10 x i32] [i32 -2, i32 -1993176570, i32 84...
ram_dual_port g_7 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_7_address_a ),
	.address_b( g_7_address_b ),
	.wren_a( g_7_write_enable_a ),
	.wren_b( g_7_write_enable_b ),
	.data_a( g_7_in_a ),
	.data_b( g_7_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_7_out_a ),
	.q_b( g_7_out_b)
);
defparam g_7.width_a = 32;
defparam g_7.width_b = 32;
defparam g_7.widthad_a = 6;
defparam g_7.widthad_b = 6;
defparam g_7.width_be_a = 1;
defparam g_7.width_be_b = 1;
defparam g_7.numwords_a = 50;
defparam g_7.numwords_b = 50;
defparam g_7.latency = ram_latency;
defparam g_7.init_file = "g_7.mif";

reg [3:0] str2_address_a;
reg [3:0] str2_address_b;
reg str2_write_enable_a;
reg str2_write_enable_b;
reg [7:0] str2_in_a;
reg [7:0] str2_in_b;
wire [7:0] str2_out_a;
wire [7:0] str2_out_b;

// @.str2 = private unnamed_addr constant [10 x i8] c"g_7[i][j]\00", align 1
rom_dual_port str2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str2_address_a ),
	.address_b( str2_address_b ),
	.q_a( str2_out_a ),
	.q_b( str2_out_b)
);
defparam str2.width_a = 8;
defparam str2.width_b = 8;
defparam str2.widthad_a = 4;
defparam str2.widthad_b = 4;
defparam str2.numwords_a = 10;
defparam str2.numwords_b = 10;
defparam str2.latency = ram_latency;
defparam str2.init_file = "str2.mif";

reg [0:0] g_8_address_a;
reg [0:0] g_8_address_b;
reg g_8_write_enable_a;
reg g_8_write_enable_b;
reg [15:0] g_8_in_a;
reg [15:0] g_8_in_b;
wire [15:0] g_8_out_a;
wire [15:0] g_8_out_b;

// @g_8 = internal global i16 5, align 2
ram_dual_port g_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_8_address_a ),
	.address_b( g_8_address_b ),
	.wren_a( g_8_write_enable_a ),
	.wren_b( g_8_write_enable_b ),
	.data_a( g_8_in_a ),
	.data_b( g_8_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_8_out_a ),
	.q_b( g_8_out_b)
);
defparam g_8.width_a = 16;
defparam g_8.width_b = 16;
defparam g_8.widthad_a = 1;
defparam g_8.widthad_b = 1;
defparam g_8.width_be_a = 1;
defparam g_8.width_be_b = 1;
defparam g_8.numwords_a = 1;
defparam g_8.numwords_b = 1;
defparam g_8.latency = ram_latency;
defparam g_8.init_file = "g_8.mif";

reg [1:0] str4_address_a;
reg [1:0] str4_address_b;
reg str4_write_enable_a;
reg str4_write_enable_b;
reg [7:0] str4_in_a;
reg [7:0] str4_in_b;
wire [7:0] str4_out_a;
wire [7:0] str4_out_b;

// @.str4 = private unnamed_addr constant [4 x i8] c"g_8\00", align 1
rom_dual_port str4 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str4_address_a ),
	.address_b( str4_address_b ),
	.q_a( str4_out_a ),
	.q_b( str4_out_b)
);
defparam str4.width_a = 8;
defparam str4.width_b = 8;
defparam str4.widthad_a = 2;
defparam str4.widthad_b = 2;
defparam str4.numwords_a = 4;
defparam str4.numwords_b = 4;
defparam str4.latency = ram_latency;
defparam str4.init_file = "str4.mif";

reg [0:0] g_40_address_a;
reg [0:0] g_40_address_b;
reg g_40_write_enable_a;
reg g_40_write_enable_b;
reg [7:0] g_40_in_a;
reg [7:0] g_40_in_b;
wire [7:0] g_40_out_a;
wire [7:0] g_40_out_b;

// @g_40 = internal global i8 -1, align 1
ram_dual_port g_40 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_40_address_a ),
	.address_b( g_40_address_b ),
	.wren_a( g_40_write_enable_a ),
	.wren_b( g_40_write_enable_b ),
	.data_a( g_40_in_a ),
	.data_b( g_40_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_40_out_a ),
	.q_b( g_40_out_b)
);
defparam g_40.width_a = 8;
defparam g_40.width_b = 8;
defparam g_40.widthad_a = 1;
defparam g_40.widthad_b = 1;
defparam g_40.width_be_a = 1;
defparam g_40.width_be_b = 1;
defparam g_40.numwords_a = 1;
defparam g_40.numwords_b = 1;
defparam g_40.latency = ram_latency;
defparam g_40.init_file = "g_40.mif";

reg [2:0] str5_address_a;
reg [2:0] str5_address_b;
reg str5_write_enable_a;
reg str5_write_enable_b;
reg [7:0] str5_in_a;
reg [7:0] str5_in_b;
wire [7:0] str5_out_a;
wire [7:0] str5_out_b;

// @.str5 = private unnamed_addr constant [5 x i8] c"g_40\00", align 1
rom_dual_port str5 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str5_address_a ),
	.address_b( str5_address_b ),
	.q_a( str5_out_a ),
	.q_b( str5_out_b)
);
defparam str5.width_a = 8;
defparam str5.width_b = 8;
defparam str5.widthad_a = 3;
defparam str5.widthad_b = 3;
defparam str5.numwords_a = 5;
defparam str5.numwords_b = 5;
defparam str5.latency = ram_latency;
defparam str5.init_file = "str5.mif";

reg [1:0] g_49_address_a;
reg [1:0] g_49_address_b;
reg g_49_write_enable_a;
reg g_49_write_enable_b;
reg [31:0] g_49_in_a;
reg [31:0] g_49_in_b;
wire [31:0] g_49_out_a;
wire [31:0] g_49_out_b;

// @g_49 = internal global [4 x i32] [i32 -1309128581, i32 -1309128581, i32 -1309128581, i32 -1309128581], align 4
ram_dual_port g_49 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_49_address_a ),
	.address_b( g_49_address_b ),
	.wren_a( g_49_write_enable_a ),
	.wren_b( g_49_write_enable_b ),
	.data_a( g_49_in_a ),
	.data_b( g_49_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_49_out_a ),
	.q_b( g_49_out_b)
);
defparam g_49.width_a = 32;
defparam g_49.width_b = 32;
defparam g_49.widthad_a = 2;
defparam g_49.widthad_b = 2;
defparam g_49.width_be_a = 1;
defparam g_49.width_be_b = 1;
defparam g_49.numwords_a = 4;
defparam g_49.numwords_b = 4;
defparam g_49.latency = ram_latency;
defparam g_49.init_file = "g_49.mif";

reg [2:0] str6_address_a;
reg [2:0] str6_address_b;
reg str6_write_enable_a;
reg str6_write_enable_b;
reg [7:0] str6_in_a;
reg [7:0] str6_in_b;
wire [7:0] str6_out_a;
wire [7:0] str6_out_b;

// @.str6 = private unnamed_addr constant [8 x i8] c"g_49[i]\00", align 1
rom_dual_port str6 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str6_address_a ),
	.address_b( str6_address_b ),
	.q_a( str6_out_a ),
	.q_b( str6_out_b)
);
defparam str6.width_a = 8;
defparam str6.width_b = 8;
defparam str6.widthad_a = 3;
defparam str6.widthad_b = 3;
defparam str6.numwords_a = 8;
defparam str6.numwords_b = 8;
defparam str6.latency = ram_latency;
defparam str6.init_file = "str6.mif";

reg [0:0] g_55_address_a;
reg [0:0] g_55_address_b;
reg g_55_write_enable_a;
reg g_55_write_enable_b;
reg [7:0] g_55_in_a;
reg [7:0] g_55_in_b;
wire [7:0] g_55_out_a;
wire [7:0] g_55_out_b;

// @g_55 = internal global i8 -1, align 1
ram_dual_port g_55 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_55_address_a ),
	.address_b( g_55_address_b ),
	.wren_a( g_55_write_enable_a ),
	.wren_b( g_55_write_enable_b ),
	.data_a( g_55_in_a ),
	.data_b( g_55_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_55_out_a ),
	.q_b( g_55_out_b)
);
defparam g_55.width_a = 8;
defparam g_55.width_b = 8;
defparam g_55.widthad_a = 1;
defparam g_55.widthad_b = 1;
defparam g_55.width_be_a = 1;
defparam g_55.width_be_b = 1;
defparam g_55.numwords_a = 1;
defparam g_55.numwords_b = 1;
defparam g_55.latency = ram_latency;
defparam g_55.init_file = "g_55.mif";

reg [2:0] str8_address_a;
reg [2:0] str8_address_b;
reg str8_write_enable_a;
reg str8_write_enable_b;
reg [7:0] str8_in_a;
reg [7:0] str8_in_b;
wire [7:0] str8_out_a;
wire [7:0] str8_out_b;

// @.str8 = private unnamed_addr constant [5 x i8] c"g_55\00", align 1
rom_dual_port str8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str8_address_a ),
	.address_b( str8_address_b ),
	.q_a( str8_out_a ),
	.q_b( str8_out_b)
);
defparam str8.width_a = 8;
defparam str8.width_b = 8;
defparam str8.widthad_a = 3;
defparam str8.widthad_b = 3;
defparam str8.numwords_a = 5;
defparam str8.numwords_b = 5;
defparam str8.latency = ram_latency;
defparam str8.init_file = "str8.mif";

reg [0:0] g_64_address_a;
reg [0:0] g_64_address_b;
reg g_64_write_enable_a;
reg g_64_write_enable_b;
reg [31:0] g_64_in_a;
reg [31:0] g_64_in_b;
wire [31:0] g_64_out_a;
wire [31:0] g_64_out_b;

// @g_64 = internal global i32 -13919540, align 4
ram_dual_port g_64 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_64_address_a ),
	.address_b( g_64_address_b ),
	.wren_a( g_64_write_enable_a ),
	.wren_b( g_64_write_enable_b ),
	.data_a( g_64_in_a ),
	.data_b( g_64_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_64_out_a ),
	.q_b( g_64_out_b)
);
defparam g_64.width_a = 32;
defparam g_64.width_b = 32;
defparam g_64.widthad_a = 1;
defparam g_64.widthad_b = 1;
defparam g_64.width_be_a = 1;
defparam g_64.width_be_b = 1;
defparam g_64.numwords_a = 1;
defparam g_64.numwords_b = 1;
defparam g_64.latency = ram_latency;
defparam g_64.init_file = "g_64.mif";

reg [2:0] str9_address_a;
reg [2:0] str9_address_b;
reg str9_write_enable_a;
reg str9_write_enable_b;
reg [7:0] str9_in_a;
reg [7:0] str9_in_b;
wire [7:0] str9_out_a;
wire [7:0] str9_out_b;

// @.str9 = private unnamed_addr constant [5 x i8] c"g_64\00", align 1
rom_dual_port str9 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str9_address_a ),
	.address_b( str9_address_b ),
	.q_a( str9_out_a ),
	.q_b( str9_out_b)
);
defparam str9.width_a = 8;
defparam str9.width_b = 8;
defparam str9.widthad_a = 3;
defparam str9.widthad_b = 3;
defparam str9.numwords_a = 5;
defparam str9.numwords_b = 5;
defparam str9.latency = ram_latency;
defparam str9.init_file = "str9.mif";

reg [0:0] g_78_address_a;
reg [0:0] g_78_address_b;
reg g_78_write_enable_a;
reg g_78_write_enable_b;
reg [15:0] g_78_in_a;
reg [15:0] g_78_in_b;
wire [15:0] g_78_out_a;
wire [15:0] g_78_out_b;

// @g_78 = internal global i16 -2, align 2
ram_dual_port g_78 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_78_address_a ),
	.address_b( g_78_address_b ),
	.wren_a( g_78_write_enable_a ),
	.wren_b( g_78_write_enable_b ),
	.data_a( g_78_in_a ),
	.data_b( g_78_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_78_out_a ),
	.q_b( g_78_out_b)
);
defparam g_78.width_a = 16;
defparam g_78.width_b = 16;
defparam g_78.widthad_a = 1;
defparam g_78.widthad_b = 1;
defparam g_78.width_be_a = 1;
defparam g_78.width_be_b = 1;
defparam g_78.numwords_a = 1;
defparam g_78.numwords_b = 1;
defparam g_78.latency = ram_latency;
defparam g_78.init_file = "g_78.mif";

reg [2:0] str10_address_a;
reg [2:0] str10_address_b;
reg str10_write_enable_a;
reg str10_write_enable_b;
reg [7:0] str10_in_a;
reg [7:0] str10_in_b;
wire [7:0] str10_out_a;
wire [7:0] str10_out_b;

// @.str10 = private unnamed_addr constant [5 x i8] c"g_78\00", align 1
rom_dual_port str10 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str10_address_a ),
	.address_b( str10_address_b ),
	.q_a( str10_out_a ),
	.q_b( str10_out_b)
);
defparam str10.width_a = 8;
defparam str10.width_b = 8;
defparam str10.widthad_a = 3;
defparam str10.widthad_b = 3;
defparam str10.numwords_a = 5;
defparam str10.numwords_b = 5;
defparam str10.latency = ram_latency;
defparam str10.init_file = "str10.mif";

reg [0:0] crc32_context_address_a;
reg [0:0] crc32_context_address_b;
reg crc32_context_write_enable_a;
reg crc32_context_write_enable_b;
reg [31:0] crc32_context_in_a;
reg [31:0] crc32_context_in_b;
wire [31:0] crc32_context_out_a;
wire [31:0] crc32_context_out_b;

// @crc32_context = internal global i32 -1, align 4
ram_dual_port crc32_context (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_context_address_a ),
	.address_b( crc32_context_address_b ),
	.wren_a( crc32_context_write_enable_a ),
	.wren_b( crc32_context_write_enable_b ),
	.data_a( crc32_context_in_a ),
	.data_b( crc32_context_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_context_out_a ),
	.q_b( crc32_context_out_b)
);
defparam crc32_context.width_a = 32;
defparam crc32_context.width_b = 32;
defparam crc32_context.widthad_a = 1;
defparam crc32_context.widthad_b = 1;
defparam crc32_context.width_be_a = 1;
defparam crc32_context.width_be_b = 1;
defparam crc32_context.numwords_a = 1;
defparam crc32_context.numwords_b = 1;
defparam crc32_context.latency = ram_latency;
defparam crc32_context.init_file = "crc32_context.mif";

reg [7:0] crc32_tab_address_a;
reg [7:0] crc32_tab_address_b;
reg crc32_tab_write_enable_a;
reg crc32_tab_write_enable_b;
reg [31:0] crc32_tab_in_a;
reg [31:0] crc32_tab_in_b;
wire [31:0] crc32_tab_out_a;
wire [31:0] crc32_tab_out_b;

// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
ram_dual_port crc32_tab (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_tab_address_a ),
	.address_b( crc32_tab_address_b ),
	.wren_a( crc32_tab_write_enable_a ),
	.wren_b( crc32_tab_write_enable_b ),
	.data_a( crc32_tab_in_a ),
	.data_b( crc32_tab_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_tab_out_a ),
	.q_b( crc32_tab_out_b)
);
defparam crc32_tab.width_a = 32;
defparam crc32_tab.width_b = 32;
defparam crc32_tab.widthad_a = 8;
defparam crc32_tab.widthad_b = 8;
defparam crc32_tab.width_be_a = 1;
defparam crc32_tab.width_be_b = 1;
defparam crc32_tab.numwords_a = 256;
defparam crc32_tab.numwords_b = 256;
defparam crc32_tab.latency = ram_latency;
defparam crc32_tab.init_file = "crc32_tab.mif";

reg [2:0] func_1l_82_address_a;
reg [2:0] func_1l_82_address_b;
reg func_1l_82_write_enable_a;
reg func_1l_82_write_enable_b;
reg [31:0] func_1l_82_in_a;
reg [31:0] func_1l_82_in_b;
wire [31:0] func_1l_82_out_a;
wire [31:0] func_1l_82_out_b;

// @func_1.l_82 = private unnamed_addr constant [5 x [1 x i32]] [[1 x i32] [i32 1], [1 x i32] [i32 1], [1 x i32] [i32 1], [1 x i32] [i32 1], [1 x i32] [i32 1]], align 4
rom_dual_port func_1l_82 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1l_82_address_a ),
	.address_b( func_1l_82_address_b ),
	.q_a( func_1l_82_out_a ),
	.q_b( func_1l_82_out_b)
);
defparam func_1l_82.width_a = 32;
defparam func_1l_82.width_b = 32;
defparam func_1l_82.widthad_a = 3;
defparam func_1l_82.widthad_b = 3;
defparam func_1l_82.numwords_a = 5;
defparam func_1l_82.numwords_b = 5;
defparam func_1l_82.latency = ram_latency;
defparam func_1l_82.init_file = "func_1l_82.mif";

reg [2:0] func_3l_41_address_a;
reg [2:0] func_3l_41_address_b;
reg func_3l_41_write_enable_a;
reg func_3l_41_write_enable_b;
reg [7:0] func_3l_41_in_a;
reg [7:0] func_3l_41_in_b;
wire [7:0] func_3l_41_out_a;
wire [7:0] func_3l_41_out_b;

// @func_3.l_41 = private unnamed_addr constant [7 x i8] c"\00\F9\F9\00\F9\F9\00", align 1
rom_dual_port func_3l_41 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_3l_41_address_a ),
	.address_b( func_3l_41_address_b ),
	.q_a( func_3l_41_out_a ),
	.q_b( func_3l_41_out_b)
);
defparam func_3l_41.width_a = 8;
defparam func_3l_41.width_b = 8;
defparam func_3l_41.widthad_a = 3;
defparam func_3l_41.widthad_b = 3;
defparam func_3l_41.numwords_a = 7;
defparam func_3l_41.numwords_b = 7;
defparam func_3l_41.latency = ram_latency;
defparam func_3l_41.init_file = "func_3l_41.mif";

reg [7:0] func_3l_67_address_a;
reg [7:0] func_3l_67_address_b;
reg func_3l_67_write_enable_a;
reg func_3l_67_write_enable_b;
reg [15:0] func_3l_67_in_a;
reg [15:0] func_3l_67_in_b;
wire [15:0] func_3l_67_out_a;
wire [15:0] func_3l_67_out_b;

// @func_3.l_67 = private unnamed_addr constant [9 x [8 x [2 x i16]]] [[8 x [2 x i16]] [[2 x i16] [i16 6307, i16 0], [2 x i16] [i16 20799, i16 1], [2 x i16] [i16 20799, i16 0], [2 x i16] [i16 6307, i16 6...
rom_dual_port func_3l_67 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_3l_67_address_a ),
	.address_b( func_3l_67_address_b ),
	.q_a( func_3l_67_out_a ),
	.q_b( func_3l_67_out_b)
);
defparam func_3l_67.width_a = 16;
defparam func_3l_67.width_b = 16;
defparam func_3l_67.widthad_a = 8;
defparam func_3l_67.widthad_b = 8;
defparam func_3l_67.numwords_a = 144;
defparam func_3l_67.numwords_b = 144;
defparam func_3l_67.latency = ram_latency;
defparam func_3l_67.init_file = "func_3l_67.mif";

reg [2:0] func_3l_10_address_a;
reg [2:0] func_3l_10_address_b;
reg func_3l_10_write_enable_a;
reg func_3l_10_write_enable_b;
reg [31:0] func_3l_10_in_a;
reg [31:0] func_3l_10_in_b;
wire [31:0] func_3l_10_out_a;
wire [31:0] func_3l_10_out_b;

// @func_3.l_10 = private unnamed_addr constant [7 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1], align 4
rom_dual_port func_3l_10 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_3l_10_address_a ),
	.address_b( func_3l_10_address_b ),
	.q_a( func_3l_10_out_a ),
	.q_b( func_3l_10_out_b)
);
defparam func_3l_10.width_a = 32;
defparam func_3l_10.width_b = 32;
defparam func_3l_10.widthad_a = 3;
defparam func_3l_10.widthad_b = 3;
defparam func_3l_10.numwords_a = 7;
defparam func_3l_10.numwords_b = 7;
defparam func_3l_10.latency = ram_latency;
defparam func_3l_10.init_file = "func_3l_10.mif";

reg [3:0] func_13l_52_address_a;
reg [3:0] func_13l_52_address_b;
reg func_13l_52_write_enable_a;
reg func_13l_52_write_enable_b;
reg [31:0] func_13l_52_in_a;
reg [31:0] func_13l_52_in_b;
wire [31:0] func_13l_52_out_a;
wire [31:0] func_13l_52_out_b;

// @func_13.l_52 = private unnamed_addr constant [1 x [1 x [9 x i32]]] [[1 x [9 x i32]] [[9 x i32] [i32 1100068960, i32 1100068960, i32 2, i32 1100068960, i32 1100068960, i32 2, i32 1100068960, i32 11000...
rom_dual_port func_13l_52 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_13l_52_address_a ),
	.address_b( func_13l_52_address_b ),
	.q_a( func_13l_52_out_a ),
	.q_b( func_13l_52_out_b)
);
defparam func_13l_52.width_a = 32;
defparam func_13l_52.width_b = 32;
defparam func_13l_52.widthad_a = 4;
defparam func_13l_52.widthad_b = 4;
defparam func_13l_52.numwords_a = 9;
defparam func_13l_52.numwords_b = 9;
defparam func_13l_52.latency = ram_latency;
defparam func_13l_52.init_file = "func_13l_52.mif";

reg [2:0] func_1_0_l_82_address_a;
reg [2:0] func_1_0_l_82_address_b;
reg func_1_0_l_82_write_enable_a;
reg func_1_0_l_82_write_enable_b;
reg [31:0] func_1_0_l_82_in_a;
reg [31:0] func_1_0_l_82_in_b;
wire [31:0] func_1_0_l_82_out_a;
wire [31:0] func_1_0_l_82_out_b;

//   %l_82 = alloca [5 x [1 x i32]], align 4
ram_dual_port func_1_0_l_82 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1_0_l_82_address_a ),
	.address_b( func_1_0_l_82_address_b ),
	.wren_a( func_1_0_l_82_write_enable_a ),
	.wren_b( func_1_0_l_82_write_enable_b ),
	.data_a( func_1_0_l_82_in_a ),
	.data_b( func_1_0_l_82_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_1_0_l_82_out_a ),
	.q_b( func_1_0_l_82_out_b)
);
defparam func_1_0_l_82.width_a = 32;
defparam func_1_0_l_82.width_b = 32;
defparam func_1_0_l_82.widthad_a = 3;
defparam func_1_0_l_82.widthad_b = 3;
defparam func_1_0_l_82.width_be_a = 1;
defparam func_1_0_l_82.width_be_b = 1;
defparam func_1_0_l_82.numwords_a = 5;
defparam func_1_0_l_82.numwords_b = 5;
defparam func_1_0_l_82.latency = ram_latency;

reg [2:0] func_3_0_l_41_address_a;
reg [2:0] func_3_0_l_41_address_b;
reg func_3_0_l_41_write_enable_a;
reg func_3_0_l_41_write_enable_b;
reg [7:0] func_3_0_l_41_in_a;
reg [7:0] func_3_0_l_41_in_b;
wire [7:0] func_3_0_l_41_out_a;
wire [7:0] func_3_0_l_41_out_b;

//   %l_41 = alloca [7 x i8], align 1
ram_dual_port func_3_0_l_41 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_3_0_l_41_address_a ),
	.address_b( func_3_0_l_41_address_b ),
	.wren_a( func_3_0_l_41_write_enable_a ),
	.wren_b( func_3_0_l_41_write_enable_b ),
	.data_a( func_3_0_l_41_in_a ),
	.data_b( func_3_0_l_41_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_3_0_l_41_out_a ),
	.q_b( func_3_0_l_41_out_b)
);
defparam func_3_0_l_41.width_a = 8;
defparam func_3_0_l_41.width_b = 8;
defparam func_3_0_l_41.widthad_a = 3;
defparam func_3_0_l_41.widthad_b = 3;
defparam func_3_0_l_41.width_be_a = 1;
defparam func_3_0_l_41.width_be_b = 1;
defparam func_3_0_l_41.numwords_a = 7;
defparam func_3_0_l_41.numwords_b = 7;
defparam func_3_0_l_41.latency = ram_latency;

reg [7:0] func_3_0_l_67_address_a;
reg [7:0] func_3_0_l_67_address_b;
reg func_3_0_l_67_write_enable_a;
reg func_3_0_l_67_write_enable_b;
reg [15:0] func_3_0_l_67_in_a;
reg [15:0] func_3_0_l_67_in_b;
wire [15:0] func_3_0_l_67_out_a;
wire [15:0] func_3_0_l_67_out_b;

//   %l_67 = alloca [9 x [8 x [2 x i16]]], align 2
ram_dual_port func_3_0_l_67 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_3_0_l_67_address_a ),
	.address_b( func_3_0_l_67_address_b ),
	.wren_a( func_3_0_l_67_write_enable_a ),
	.wren_b( func_3_0_l_67_write_enable_b ),
	.data_a( func_3_0_l_67_in_a ),
	.data_b( func_3_0_l_67_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_3_0_l_67_out_a ),
	.q_b( func_3_0_l_67_out_b)
);
defparam func_3_0_l_67.width_a = 16;
defparam func_3_0_l_67.width_b = 16;
defparam func_3_0_l_67.widthad_a = 8;
defparam func_3_0_l_67.widthad_b = 8;
defparam func_3_0_l_67.width_be_a = 1;
defparam func_3_0_l_67.width_be_b = 1;
defparam func_3_0_l_67.numwords_a = 144;
defparam func_3_0_l_67.numwords_b = 144;
defparam func_3_0_l_67.latency = ram_latency;

reg [2:0] func_3_0_l_10_address_a;
reg [2:0] func_3_0_l_10_address_b;
reg func_3_0_l_10_write_enable_a;
reg func_3_0_l_10_write_enable_b;
reg [31:0] func_3_0_l_10_in_a;
reg [31:0] func_3_0_l_10_in_b;
wire [31:0] func_3_0_l_10_out_a;
wire [31:0] func_3_0_l_10_out_b;

//   %l_10 = alloca [7 x i32], align 4
ram_dual_port func_3_0_l_10 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_3_0_l_10_address_a ),
	.address_b( func_3_0_l_10_address_b ),
	.wren_a( func_3_0_l_10_write_enable_a ),
	.wren_b( func_3_0_l_10_write_enable_b ),
	.data_a( func_3_0_l_10_in_a ),
	.data_b( func_3_0_l_10_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_3_0_l_10_out_a ),
	.q_b( func_3_0_l_10_out_b)
);
defparam func_3_0_l_10.width_a = 32;
defparam func_3_0_l_10.width_b = 32;
defparam func_3_0_l_10.widthad_a = 3;
defparam func_3_0_l_10.widthad_b = 3;
defparam func_3_0_l_10.width_be_a = 1;
defparam func_3_0_l_10.width_be_b = 1;
defparam func_3_0_l_10.numwords_a = 7;
defparam func_3_0_l_10.numwords_b = 7;
defparam func_3_0_l_10.latency = ram_latency;

reg [3:0] func_13_0_l_52_address_a;
reg [3:0] func_13_0_l_52_address_b;
reg func_13_0_l_52_write_enable_a;
reg func_13_0_l_52_write_enable_b;
reg [31:0] func_13_0_l_52_in_a;
reg [31:0] func_13_0_l_52_in_b;
wire [31:0] func_13_0_l_52_out_a;
wire [31:0] func_13_0_l_52_out_b;

//   %l_52 = alloca [1 x [1 x [9 x i32]]], align 4
ram_dual_port func_13_0_l_52 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_13_0_l_52_address_a ),
	.address_b( func_13_0_l_52_address_b ),
	.wren_a( func_13_0_l_52_write_enable_a ),
	.wren_b( func_13_0_l_52_write_enable_b ),
	.data_a( func_13_0_l_52_in_a ),
	.data_b( func_13_0_l_52_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_13_0_l_52_out_a ),
	.q_b( func_13_0_l_52_out_b)
);
defparam func_13_0_l_52.width_a = 32;
defparam func_13_0_l_52.width_b = 32;
defparam func_13_0_l_52.widthad_a = 4;
defparam func_13_0_l_52.widthad_b = 4;
defparam func_13_0_l_52.width_be_a = 1;
defparam func_13_0_l_52.width_be_b = 1;
defparam func_13_0_l_52.numwords_a = 9;
defparam func_13_0_l_52.numwords_b = 9;
defparam func_13_0_l_52.latency = ram_latency;

reg [0:0] legup_memcpy_1_0_1_address_a;
reg [0:0] legup_memcpy_1_0_1_address_b;
reg legup_memcpy_1_0_1_write_enable_a;
reg legup_memcpy_1_0_1_write_enable_b;
reg [31:0] legup_memcpy_1_0_1_in_a;
reg [31:0] legup_memcpy_1_0_1_in_b;
wire [31:0] legup_memcpy_1_0_1_out_a;
wire [31:0] legup_memcpy_1_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_1_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_1_0_1_address_a ),
	.address_b( legup_memcpy_1_0_1_address_b ),
	.wren_a( legup_memcpy_1_0_1_write_enable_a ),
	.wren_b( legup_memcpy_1_0_1_write_enable_b ),
	.data_a( legup_memcpy_1_0_1_in_a ),
	.data_b( legup_memcpy_1_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_1_0_1_out_a ),
	.q_b( legup_memcpy_1_0_1_out_b)
);
defparam legup_memcpy_1_0_1.width_a = 32;
defparam legup_memcpy_1_0_1.width_b = 32;
defparam legup_memcpy_1_0_1.widthad_a = 1;
defparam legup_memcpy_1_0_1.widthad_b = 1;
defparam legup_memcpy_1_0_1.width_be_a = 1;
defparam legup_memcpy_1_0_1.width_be_b = 1;
defparam legup_memcpy_1_0_1.numwords_a = 1;
defparam legup_memcpy_1_0_1.numwords_b = 1;
defparam legup_memcpy_1_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_1_0_dt_address_a;
reg [0:0] legup_memcpy_1_0_dt_address_b;
reg legup_memcpy_1_0_dt_write_enable_a;
reg legup_memcpy_1_0_dt_write_enable_b;
reg [31:0] legup_memcpy_1_0_dt_in_a;
reg [31:0] legup_memcpy_1_0_dt_in_b;
wire [31:0] legup_memcpy_1_0_dt_out_a;
wire [31:0] legup_memcpy_1_0_dt_out_b;

//   %dt = alloca i8*, align 4
ram_dual_port legup_memcpy_1_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_1_0_dt_address_a ),
	.address_b( legup_memcpy_1_0_dt_address_b ),
	.wren_a( legup_memcpy_1_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_1_0_dt_write_enable_b ),
	.data_a( legup_memcpy_1_0_dt_in_a ),
	.data_b( legup_memcpy_1_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_1_0_dt_out_a ),
	.q_b( legup_memcpy_1_0_dt_out_b)
);
defparam legup_memcpy_1_0_dt.width_a = 32;
defparam legup_memcpy_1_0_dt.width_b = 32;
defparam legup_memcpy_1_0_dt.widthad_a = 1;
defparam legup_memcpy_1_0_dt.widthad_b = 1;
defparam legup_memcpy_1_0_dt.width_be_a = 1;
defparam legup_memcpy_1_0_dt.width_be_b = 1;
defparam legup_memcpy_1_0_dt.numwords_a = 1;
defparam legup_memcpy_1_0_dt.numwords_b = 1;
defparam legup_memcpy_1_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_1_0_st_address_a;
reg [0:0] legup_memcpy_1_0_st_address_b;
reg legup_memcpy_1_0_st_write_enable_a;
reg legup_memcpy_1_0_st_write_enable_b;
reg [31:0] legup_memcpy_1_0_st_in_a;
reg [31:0] legup_memcpy_1_0_st_in_b;
wire [31:0] legup_memcpy_1_0_st_out_a;
wire [31:0] legup_memcpy_1_0_st_out_b;

//   %st = alloca i8*, align 4
ram_dual_port legup_memcpy_1_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_1_0_st_address_a ),
	.address_b( legup_memcpy_1_0_st_address_b ),
	.wren_a( legup_memcpy_1_0_st_write_enable_a ),
	.wren_b( legup_memcpy_1_0_st_write_enable_b ),
	.data_a( legup_memcpy_1_0_st_in_a ),
	.data_b( legup_memcpy_1_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_1_0_st_out_a ),
	.q_b( legup_memcpy_1_0_st_out_b)
);
defparam legup_memcpy_1_0_st.width_a = 32;
defparam legup_memcpy_1_0_st.width_b = 32;
defparam legup_memcpy_1_0_st.widthad_a = 1;
defparam legup_memcpy_1_0_st.widthad_b = 1;
defparam legup_memcpy_1_0_st.width_be_a = 1;
defparam legup_memcpy_1_0_st.width_be_b = 1;
defparam legup_memcpy_1_0_st.numwords_a = 1;
defparam legup_memcpy_1_0_st.numwords_b = 1;
defparam legup_memcpy_1_0_st.latency = ram_latency;

reg [0:0] legup_memcpy_2_0_1_address_a;
reg [0:0] legup_memcpy_2_0_1_address_b;
reg legup_memcpy_2_0_1_write_enable_a;
reg legup_memcpy_2_0_1_write_enable_b;
reg [31:0] legup_memcpy_2_0_1_in_a;
reg [31:0] legup_memcpy_2_0_1_in_b;
wire [31:0] legup_memcpy_2_0_1_out_a;
wire [31:0] legup_memcpy_2_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_2_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_2_0_1_address_a ),
	.address_b( legup_memcpy_2_0_1_address_b ),
	.wren_a( legup_memcpy_2_0_1_write_enable_a ),
	.wren_b( legup_memcpy_2_0_1_write_enable_b ),
	.data_a( legup_memcpy_2_0_1_in_a ),
	.data_b( legup_memcpy_2_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_2_0_1_out_a ),
	.q_b( legup_memcpy_2_0_1_out_b)
);
defparam legup_memcpy_2_0_1.width_a = 32;
defparam legup_memcpy_2_0_1.width_b = 32;
defparam legup_memcpy_2_0_1.widthad_a = 1;
defparam legup_memcpy_2_0_1.widthad_b = 1;
defparam legup_memcpy_2_0_1.width_be_a = 1;
defparam legup_memcpy_2_0_1.width_be_b = 1;
defparam legup_memcpy_2_0_1.numwords_a = 1;
defparam legup_memcpy_2_0_1.numwords_b = 1;
defparam legup_memcpy_2_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_2_0_dt_address_a;
reg [0:0] legup_memcpy_2_0_dt_address_b;
reg legup_memcpy_2_0_dt_write_enable_a;
reg legup_memcpy_2_0_dt_write_enable_b;
reg [31:0] legup_memcpy_2_0_dt_in_a;
reg [31:0] legup_memcpy_2_0_dt_in_b;
wire [31:0] legup_memcpy_2_0_dt_out_a;
wire [31:0] legup_memcpy_2_0_dt_out_b;

//   %dt = alloca i16*, align 4
ram_dual_port legup_memcpy_2_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_2_0_dt_address_a ),
	.address_b( legup_memcpy_2_0_dt_address_b ),
	.wren_a( legup_memcpy_2_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_2_0_dt_write_enable_b ),
	.data_a( legup_memcpy_2_0_dt_in_a ),
	.data_b( legup_memcpy_2_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_2_0_dt_out_a ),
	.q_b( legup_memcpy_2_0_dt_out_b)
);
defparam legup_memcpy_2_0_dt.width_a = 32;
defparam legup_memcpy_2_0_dt.width_b = 32;
defparam legup_memcpy_2_0_dt.widthad_a = 1;
defparam legup_memcpy_2_0_dt.widthad_b = 1;
defparam legup_memcpy_2_0_dt.width_be_a = 1;
defparam legup_memcpy_2_0_dt.width_be_b = 1;
defparam legup_memcpy_2_0_dt.numwords_a = 1;
defparam legup_memcpy_2_0_dt.numwords_b = 1;
defparam legup_memcpy_2_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_2_0_st_address_a;
reg [0:0] legup_memcpy_2_0_st_address_b;
reg legup_memcpy_2_0_st_write_enable_a;
reg legup_memcpy_2_0_st_write_enable_b;
reg [31:0] legup_memcpy_2_0_st_in_a;
reg [31:0] legup_memcpy_2_0_st_in_b;
wire [31:0] legup_memcpy_2_0_st_out_a;
wire [31:0] legup_memcpy_2_0_st_out_b;

//   %st = alloca i16*, align 4
ram_dual_port legup_memcpy_2_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_2_0_st_address_a ),
	.address_b( legup_memcpy_2_0_st_address_b ),
	.wren_a( legup_memcpy_2_0_st_write_enable_a ),
	.wren_b( legup_memcpy_2_0_st_write_enable_b ),
	.data_a( legup_memcpy_2_0_st_in_a ),
	.data_b( legup_memcpy_2_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_2_0_st_out_a ),
	.q_b( legup_memcpy_2_0_st_out_b)
);
defparam legup_memcpy_2_0_st.width_a = 32;
defparam legup_memcpy_2_0_st.width_b = 32;
defparam legup_memcpy_2_0_st.widthad_a = 1;
defparam legup_memcpy_2_0_st.widthad_b = 1;
defparam legup_memcpy_2_0_st.width_be_a = 1;
defparam legup_memcpy_2_0_st.width_be_b = 1;
defparam legup_memcpy_2_0_st.numwords_a = 1;
defparam legup_memcpy_2_0_st.numwords_b = 1;
defparam legup_memcpy_2_0_st.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_1_address_a;
reg [0:0] legup_memcpy_4_0_1_address_b;
reg legup_memcpy_4_0_1_write_enable_a;
reg legup_memcpy_4_0_1_write_enable_b;
reg [31:0] legup_memcpy_4_0_1_in_a;
reg [31:0] legup_memcpy_4_0_1_in_b;
wire [31:0] legup_memcpy_4_0_1_out_a;
wire [31:0] legup_memcpy_4_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_4_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_1_address_a ),
	.address_b( legup_memcpy_4_0_1_address_b ),
	.wren_a( legup_memcpy_4_0_1_write_enable_a ),
	.wren_b( legup_memcpy_4_0_1_write_enable_b ),
	.data_a( legup_memcpy_4_0_1_in_a ),
	.data_b( legup_memcpy_4_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_1_out_a ),
	.q_b( legup_memcpy_4_0_1_out_b)
);
defparam legup_memcpy_4_0_1.width_a = 32;
defparam legup_memcpy_4_0_1.width_b = 32;
defparam legup_memcpy_4_0_1.widthad_a = 1;
defparam legup_memcpy_4_0_1.widthad_b = 1;
defparam legup_memcpy_4_0_1.width_be_a = 1;
defparam legup_memcpy_4_0_1.width_be_b = 1;
defparam legup_memcpy_4_0_1.numwords_a = 1;
defparam legup_memcpy_4_0_1.numwords_b = 1;
defparam legup_memcpy_4_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_dt_address_a;
reg [0:0] legup_memcpy_4_0_dt_address_b;
reg legup_memcpy_4_0_dt_write_enable_a;
reg legup_memcpy_4_0_dt_write_enable_b;
reg [31:0] legup_memcpy_4_0_dt_in_a;
reg [31:0] legup_memcpy_4_0_dt_in_b;
wire [31:0] legup_memcpy_4_0_dt_out_a;
wire [31:0] legup_memcpy_4_0_dt_out_b;

//   %dt = alloca i32*, align 4
ram_dual_port legup_memcpy_4_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_dt_address_a ),
	.address_b( legup_memcpy_4_0_dt_address_b ),
	.wren_a( legup_memcpy_4_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_4_0_dt_write_enable_b ),
	.data_a( legup_memcpy_4_0_dt_in_a ),
	.data_b( legup_memcpy_4_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_dt_out_a ),
	.q_b( legup_memcpy_4_0_dt_out_b)
);
defparam legup_memcpy_4_0_dt.width_a = 32;
defparam legup_memcpy_4_0_dt.width_b = 32;
defparam legup_memcpy_4_0_dt.widthad_a = 1;
defparam legup_memcpy_4_0_dt.widthad_b = 1;
defparam legup_memcpy_4_0_dt.width_be_a = 1;
defparam legup_memcpy_4_0_dt.width_be_b = 1;
defparam legup_memcpy_4_0_dt.numwords_a = 1;
defparam legup_memcpy_4_0_dt.numwords_b = 1;
defparam legup_memcpy_4_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_st_address_a;
reg [0:0] legup_memcpy_4_0_st_address_b;
reg legup_memcpy_4_0_st_write_enable_a;
reg legup_memcpy_4_0_st_write_enable_b;
reg [31:0] legup_memcpy_4_0_st_in_a;
reg [31:0] legup_memcpy_4_0_st_in_b;
wire [31:0] legup_memcpy_4_0_st_out_a;
wire [31:0] legup_memcpy_4_0_st_out_b;

//   %st = alloca i32*, align 4
ram_dual_port legup_memcpy_4_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_st_address_a ),
	.address_b( legup_memcpy_4_0_st_address_b ),
	.wren_a( legup_memcpy_4_0_st_write_enable_a ),
	.wren_b( legup_memcpy_4_0_st_write_enable_b ),
	.data_a( legup_memcpy_4_0_st_in_a ),
	.data_b( legup_memcpy_4_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_st_out_a ),
	.q_b( legup_memcpy_4_0_st_out_b)
);
defparam legup_memcpy_4_0_st.width_a = 32;
defparam legup_memcpy_4_0_st.width_b = 32;
defparam legup_memcpy_4_0_st.widthad_a = 1;
defparam legup_memcpy_4_0_st.widthad_b = 1;
defparam legup_memcpy_4_0_st.width_be_a = 1;
defparam legup_memcpy_4_0_st.width_be_b = 1;
defparam legup_memcpy_4_0_st.numwords_a = 1;
defparam legup_memcpy_4_0_st.numwords_b = 1;
defparam legup_memcpy_4_0_st.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_g_2_a;
assign select_g_2_a = (tag_a == `TAG_g_g_2);
reg [ram_latency:0] select_g_2_reg_a;
wire [31:0] memory_controller_g_2_out_a;
assign memory_controller_g_2_out_a = {32{ select_g_2_reg_a[ram_latency]}} & g_2_out_a;

wire select_str_a;
assign select_str_a = (tag_a == `TAG_g_str);
reg [ram_latency:0] select_str_reg_a;
wire [7:0] memory_controller_str_out_a;
assign memory_controller_str_out_a = {8{ select_str_reg_a[ram_latency]}} & str_out_a;

wire select_g_6_a;
assign select_g_6_a = (tag_a == `TAG_g_g_6);
reg [ram_latency:0] select_g_6_reg_a;
wire [31:0] memory_controller_g_6_out_a;
assign memory_controller_g_6_out_a = {32{ select_g_6_reg_a[ram_latency]}} & g_6_out_a;

wire select_str1_a;
assign select_str1_a = (tag_a == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_a;
wire [7:0] memory_controller_str1_out_a;
assign memory_controller_str1_out_a = {8{ select_str1_reg_a[ram_latency]}} & str1_out_a;

wire select_g_7_a;
assign select_g_7_a = (tag_a == `TAG_g_g_7);
reg [ram_latency:0] select_g_7_reg_a;
wire [31:0] memory_controller_g_7_out_a;
assign memory_controller_g_7_out_a = {32{ select_g_7_reg_a[ram_latency]}} & g_7_out_a;

wire select_str2_a;
assign select_str2_a = (tag_a == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_a;
wire [7:0] memory_controller_str2_out_a;
assign memory_controller_str2_out_a = {8{ select_str2_reg_a[ram_latency]}} & str2_out_a;

wire select_g_8_a;
assign select_g_8_a = (tag_a == `TAG_g_g_8);
reg [ram_latency:0] select_g_8_reg_a;
wire [15:0] memory_controller_g_8_out_a;
assign memory_controller_g_8_out_a = {16{ select_g_8_reg_a[ram_latency]}} & g_8_out_a;

wire select_str4_a;
assign select_str4_a = (tag_a == `TAG_g_str4);
reg [ram_latency:0] select_str4_reg_a;
wire [7:0] memory_controller_str4_out_a;
assign memory_controller_str4_out_a = {8{ select_str4_reg_a[ram_latency]}} & str4_out_a;

wire select_g_40_a;
assign select_g_40_a = (tag_a == `TAG_g_g_40);
reg [ram_latency:0] select_g_40_reg_a;
wire [7:0] memory_controller_g_40_out_a;
assign memory_controller_g_40_out_a = {8{ select_g_40_reg_a[ram_latency]}} & g_40_out_a;

wire select_str5_a;
assign select_str5_a = (tag_a == `TAG_g_str5);
reg [ram_latency:0] select_str5_reg_a;
wire [7:0] memory_controller_str5_out_a;
assign memory_controller_str5_out_a = {8{ select_str5_reg_a[ram_latency]}} & str5_out_a;

wire select_g_49_a;
assign select_g_49_a = (tag_a == `TAG_g_g_49);
reg [ram_latency:0] select_g_49_reg_a;
wire [31:0] memory_controller_g_49_out_a;
assign memory_controller_g_49_out_a = {32{ select_g_49_reg_a[ram_latency]}} & g_49_out_a;

wire select_str6_a;
assign select_str6_a = (tag_a == `TAG_g_str6);
reg [ram_latency:0] select_str6_reg_a;
wire [7:0] memory_controller_str6_out_a;
assign memory_controller_str6_out_a = {8{ select_str6_reg_a[ram_latency]}} & str6_out_a;

wire select_g_55_a;
assign select_g_55_a = (tag_a == `TAG_g_g_55);
reg [ram_latency:0] select_g_55_reg_a;
wire [7:0] memory_controller_g_55_out_a;
assign memory_controller_g_55_out_a = {8{ select_g_55_reg_a[ram_latency]}} & g_55_out_a;

wire select_str8_a;
assign select_str8_a = (tag_a == `TAG_g_str8);
reg [ram_latency:0] select_str8_reg_a;
wire [7:0] memory_controller_str8_out_a;
assign memory_controller_str8_out_a = {8{ select_str8_reg_a[ram_latency]}} & str8_out_a;

wire select_g_64_a;
assign select_g_64_a = (tag_a == `TAG_g_g_64);
reg [ram_latency:0] select_g_64_reg_a;
wire [31:0] memory_controller_g_64_out_a;
assign memory_controller_g_64_out_a = {32{ select_g_64_reg_a[ram_latency]}} & g_64_out_a;

wire select_str9_a;
assign select_str9_a = (tag_a == `TAG_g_str9);
reg [ram_latency:0] select_str9_reg_a;
wire [7:0] memory_controller_str9_out_a;
assign memory_controller_str9_out_a = {8{ select_str9_reg_a[ram_latency]}} & str9_out_a;

wire select_g_78_a;
assign select_g_78_a = (tag_a == `TAG_g_g_78);
reg [ram_latency:0] select_g_78_reg_a;
wire [15:0] memory_controller_g_78_out_a;
assign memory_controller_g_78_out_a = {16{ select_g_78_reg_a[ram_latency]}} & g_78_out_a;

wire select_str10_a;
assign select_str10_a = (tag_a == `TAG_g_str10);
reg [ram_latency:0] select_str10_reg_a;
wire [7:0] memory_controller_str10_out_a;
assign memory_controller_str10_out_a = {8{ select_str10_reg_a[ram_latency]}} & str10_out_a;

wire select_crc32_context_a;
assign select_crc32_context_a = (tag_a == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_a;
wire [31:0] memory_controller_crc32_context_out_a;
assign memory_controller_crc32_context_out_a = {32{ select_crc32_context_reg_a[ram_latency]}} & crc32_context_out_a;

wire select_crc32_tab_a;
assign select_crc32_tab_a = (tag_a == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_a;
wire [31:0] memory_controller_crc32_tab_out_a;
assign memory_controller_crc32_tab_out_a = {32{ select_crc32_tab_reg_a[ram_latency]}} & crc32_tab_out_a;

wire select_func_1l_82_a;
assign select_func_1l_82_a = (tag_a == `TAG_g_func_1l_82);
reg [ram_latency:0] select_func_1l_82_reg_a;
wire [31:0] memory_controller_func_1l_82_out_a;
assign memory_controller_func_1l_82_out_a = {32{ select_func_1l_82_reg_a[ram_latency]}} & func_1l_82_out_a;

wire select_func_3l_41_a;
assign select_func_3l_41_a = (tag_a == `TAG_g_func_3l_41);
reg [ram_latency:0] select_func_3l_41_reg_a;
wire [7:0] memory_controller_func_3l_41_out_a;
assign memory_controller_func_3l_41_out_a = {8{ select_func_3l_41_reg_a[ram_latency]}} & func_3l_41_out_a;

wire select_func_3l_67_a;
assign select_func_3l_67_a = (tag_a == `TAG_g_func_3l_67);
reg [ram_latency:0] select_func_3l_67_reg_a;
wire [15:0] memory_controller_func_3l_67_out_a;
assign memory_controller_func_3l_67_out_a = {16{ select_func_3l_67_reg_a[ram_latency]}} & func_3l_67_out_a;

wire select_func_3l_10_a;
assign select_func_3l_10_a = (tag_a == `TAG_g_func_3l_10);
reg [ram_latency:0] select_func_3l_10_reg_a;
wire [31:0] memory_controller_func_3l_10_out_a;
assign memory_controller_func_3l_10_out_a = {32{ select_func_3l_10_reg_a[ram_latency]}} & func_3l_10_out_a;

wire select_func_13l_52_a;
assign select_func_13l_52_a = (tag_a == `TAG_g_func_13l_52);
reg [ram_latency:0] select_func_13l_52_reg_a;
wire [31:0] memory_controller_func_13l_52_out_a;
assign memory_controller_func_13l_52_out_a = {32{ select_func_13l_52_reg_a[ram_latency]}} & func_13l_52_out_a;

wire select_func_1_0_l_82_a;
assign select_func_1_0_l_82_a = (tag_a == `TAG_func_1_0_l_82);
reg [ram_latency:0] select_func_1_0_l_82_reg_a;
wire [31:0] memory_controller_func_1_0_l_82_out_a;
assign memory_controller_func_1_0_l_82_out_a = {32{ select_func_1_0_l_82_reg_a[ram_latency]}} & func_1_0_l_82_out_a;

wire select_func_3_0_l_41_a;
assign select_func_3_0_l_41_a = (tag_a == `TAG_func_3_0_l_41);
reg [ram_latency:0] select_func_3_0_l_41_reg_a;
wire [7:0] memory_controller_func_3_0_l_41_out_a;
assign memory_controller_func_3_0_l_41_out_a = {8{ select_func_3_0_l_41_reg_a[ram_latency]}} & func_3_0_l_41_out_a;

wire select_func_3_0_l_67_a;
assign select_func_3_0_l_67_a = (tag_a == `TAG_func_3_0_l_67);
reg [ram_latency:0] select_func_3_0_l_67_reg_a;
wire [15:0] memory_controller_func_3_0_l_67_out_a;
assign memory_controller_func_3_0_l_67_out_a = {16{ select_func_3_0_l_67_reg_a[ram_latency]}} & func_3_0_l_67_out_a;

wire select_func_3_0_l_10_a;
assign select_func_3_0_l_10_a = (tag_a == `TAG_func_3_0_l_10);
reg [ram_latency:0] select_func_3_0_l_10_reg_a;
wire [31:0] memory_controller_func_3_0_l_10_out_a;
assign memory_controller_func_3_0_l_10_out_a = {32{ select_func_3_0_l_10_reg_a[ram_latency]}} & func_3_0_l_10_out_a;

wire select_func_13_0_l_52_a;
assign select_func_13_0_l_52_a = (tag_a == `TAG_func_13_0_l_52);
reg [ram_latency:0] select_func_13_0_l_52_reg_a;
wire [31:0] memory_controller_func_13_0_l_52_out_a;
assign memory_controller_func_13_0_l_52_out_a = {32{ select_func_13_0_l_52_reg_a[ram_latency]}} & func_13_0_l_52_out_a;

wire select_legup_memcpy_1_0_1_a;
assign select_legup_memcpy_1_0_1_a = (tag_a == `TAG_legup_memcpy_1_0_1);
reg [ram_latency:0] select_legup_memcpy_1_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_1_0_1_out_a;
assign memory_controller_legup_memcpy_1_0_1_out_a = {32{ select_legup_memcpy_1_0_1_reg_a[ram_latency]}} & legup_memcpy_1_0_1_out_a;

wire select_legup_memcpy_1_0_dt_a;
assign select_legup_memcpy_1_0_dt_a = (tag_a == `TAG_legup_memcpy_1_0_dt);
reg [ram_latency:0] select_legup_memcpy_1_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_1_0_dt_out_a;
assign memory_controller_legup_memcpy_1_0_dt_out_a = {32{ select_legup_memcpy_1_0_dt_reg_a[ram_latency]}} & legup_memcpy_1_0_dt_out_a;

wire select_legup_memcpy_1_0_st_a;
assign select_legup_memcpy_1_0_st_a = (tag_a == `TAG_legup_memcpy_1_0_st);
reg [ram_latency:0] select_legup_memcpy_1_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_1_0_st_out_a;
assign memory_controller_legup_memcpy_1_0_st_out_a = {32{ select_legup_memcpy_1_0_st_reg_a[ram_latency]}} & legup_memcpy_1_0_st_out_a;

wire select_legup_memcpy_2_0_1_a;
assign select_legup_memcpy_2_0_1_a = (tag_a == `TAG_legup_memcpy_2_0_1);
reg [ram_latency:0] select_legup_memcpy_2_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_2_0_1_out_a;
assign memory_controller_legup_memcpy_2_0_1_out_a = {32{ select_legup_memcpy_2_0_1_reg_a[ram_latency]}} & legup_memcpy_2_0_1_out_a;

wire select_legup_memcpy_2_0_dt_a;
assign select_legup_memcpy_2_0_dt_a = (tag_a == `TAG_legup_memcpy_2_0_dt);
reg [ram_latency:0] select_legup_memcpy_2_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_2_0_dt_out_a;
assign memory_controller_legup_memcpy_2_0_dt_out_a = {32{ select_legup_memcpy_2_0_dt_reg_a[ram_latency]}} & legup_memcpy_2_0_dt_out_a;

wire select_legup_memcpy_2_0_st_a;
assign select_legup_memcpy_2_0_st_a = (tag_a == `TAG_legup_memcpy_2_0_st);
reg [ram_latency:0] select_legup_memcpy_2_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_2_0_st_out_a;
assign memory_controller_legup_memcpy_2_0_st_out_a = {32{ select_legup_memcpy_2_0_st_reg_a[ram_latency]}} & legup_memcpy_2_0_st_out_a;

wire select_legup_memcpy_4_0_1_a;
assign select_legup_memcpy_4_0_1_a = (tag_a == `TAG_legup_memcpy_4_0_1);
reg [ram_latency:0] select_legup_memcpy_4_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_1_out_a;
assign memory_controller_legup_memcpy_4_0_1_out_a = {32{ select_legup_memcpy_4_0_1_reg_a[ram_latency]}} & legup_memcpy_4_0_1_out_a;

wire select_legup_memcpy_4_0_dt_a;
assign select_legup_memcpy_4_0_dt_a = (tag_a == `TAG_legup_memcpy_4_0_dt);
reg [ram_latency:0] select_legup_memcpy_4_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_dt_out_a;
assign memory_controller_legup_memcpy_4_0_dt_out_a = {32{ select_legup_memcpy_4_0_dt_reg_a[ram_latency]}} & legup_memcpy_4_0_dt_out_a;

wire select_legup_memcpy_4_0_st_a;
assign select_legup_memcpy_4_0_st_a = (tag_a == `TAG_legup_memcpy_4_0_st);
reg [ram_latency:0] select_legup_memcpy_4_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_st_out_a;
assign memory_controller_legup_memcpy_4_0_st_out_a = {32{ select_legup_memcpy_4_0_st_reg_a[ram_latency]}} & legup_memcpy_4_0_st_out_a;

always @(*)
begin
	g_2_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_2_a}};
	g_2_write_enable_a = memory_controller_write_enable_a & select_g_2_a;
	g_2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str_address_a = memory_controller_address_a [2-1+0:0] & {2{select_str_a}};
	str_write_enable_a = memory_controller_write_enable_a & select_str_a;
	str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_6_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_6_a}};
	g_6_write_enable_a = memory_controller_write_enable_a & select_g_6_a;
	g_6_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str1_address_a = memory_controller_address_a [2-1+0:0] & {2{select_str1_a}};
	str1_write_enable_a = memory_controller_write_enable_a & select_str1_a;
	str1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_7_address_a = memory_controller_address_a [6-1+2:2] & {6{select_g_7_a}};
	g_7_write_enable_a = memory_controller_write_enable_a & select_g_7_a;
	g_7_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str2_address_a = memory_controller_address_a [4-1+0:0] & {4{select_str2_a}};
	str2_write_enable_a = memory_controller_write_enable_a & select_str2_a;
	str2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_8_address_a = memory_controller_address_a [1-1+1:1] & {1{select_g_8_a}};
	g_8_write_enable_a = memory_controller_write_enable_a & select_g_8_a;
	g_8_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	str4_address_a = memory_controller_address_a [2-1+0:0] & {2{select_str4_a}};
	str4_write_enable_a = memory_controller_write_enable_a & select_str4_a;
	str4_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_40_address_a = memory_controller_address_a [1-1+0:0] & {1{select_g_40_a}};
	g_40_write_enable_a = memory_controller_write_enable_a & select_g_40_a;
	g_40_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	str5_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str5_a}};
	str5_write_enable_a = memory_controller_write_enable_a & select_str5_a;
	str5_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_49_address_a = memory_controller_address_a [2-1+2:2] & {2{select_g_49_a}};
	g_49_write_enable_a = memory_controller_write_enable_a & select_g_49_a;
	g_49_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str6_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str6_a}};
	str6_write_enable_a = memory_controller_write_enable_a & select_str6_a;
	str6_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_55_address_a = memory_controller_address_a [1-1+0:0] & {1{select_g_55_a}};
	g_55_write_enable_a = memory_controller_write_enable_a & select_g_55_a;
	g_55_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	str8_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str8_a}};
	str8_write_enable_a = memory_controller_write_enable_a & select_str8_a;
	str8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_64_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_64_a}};
	g_64_write_enable_a = memory_controller_write_enable_a & select_g_64_a;
	g_64_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str9_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str9_a}};
	str9_write_enable_a = memory_controller_write_enable_a & select_str9_a;
	str9_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_78_address_a = memory_controller_address_a [1-1+1:1] & {1{select_g_78_a}};
	g_78_write_enable_a = memory_controller_write_enable_a & select_g_78_a;
	g_78_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	str10_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str10_a}};
	str10_write_enable_a = memory_controller_write_enable_a & select_str10_a;
	str10_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	crc32_context_address_a = memory_controller_address_a [1-1+2:2] & {1{select_crc32_context_a}};
	crc32_context_write_enable_a = memory_controller_write_enable_a & select_crc32_context_a;
	crc32_context_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	crc32_tab_address_a = memory_controller_address_a [8-1+2:2] & {8{select_crc32_tab_a}};
	crc32_tab_write_enable_a = memory_controller_write_enable_a & select_crc32_tab_a;
	crc32_tab_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1l_82_address_a = memory_controller_address_a [3-1+2:2] & {3{select_func_1l_82_a}};
	func_1l_82_write_enable_a = memory_controller_write_enable_a & select_func_1l_82_a;
	func_1l_82_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_3l_41_address_a = memory_controller_address_a [3-1+0:0] & {3{select_func_3l_41_a}};
	func_3l_41_write_enable_a = memory_controller_write_enable_a & select_func_3l_41_a;
	func_3l_41_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	func_3l_67_address_a = memory_controller_address_a [8-1+1:1] & {8{select_func_3l_67_a}};
	func_3l_67_write_enable_a = memory_controller_write_enable_a & select_func_3l_67_a;
	func_3l_67_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	func_3l_10_address_a = memory_controller_address_a [3-1+2:2] & {3{select_func_3l_10_a}};
	func_3l_10_write_enable_a = memory_controller_write_enable_a & select_func_3l_10_a;
	func_3l_10_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_13l_52_address_a = memory_controller_address_a [4-1+2:2] & {4{select_func_13l_52_a}};
	func_13l_52_write_enable_a = memory_controller_write_enable_a & select_func_13l_52_a;
	func_13l_52_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1_0_l_82_address_a = memory_controller_address_a [3-1+2:2] & {3{select_func_1_0_l_82_a}};
	func_1_0_l_82_write_enable_a = memory_controller_write_enable_a & select_func_1_0_l_82_a;
	func_1_0_l_82_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_3_0_l_41_address_a = memory_controller_address_a [3-1+0:0] & {3{select_func_3_0_l_41_a}};
	func_3_0_l_41_write_enable_a = memory_controller_write_enable_a & select_func_3_0_l_41_a;
	func_3_0_l_41_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	func_3_0_l_67_address_a = memory_controller_address_a [8-1+1:1] & {8{select_func_3_0_l_67_a}};
	func_3_0_l_67_write_enable_a = memory_controller_write_enable_a & select_func_3_0_l_67_a;
	func_3_0_l_67_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	func_3_0_l_10_address_a = memory_controller_address_a [3-1+2:2] & {3{select_func_3_0_l_10_a}};
	func_3_0_l_10_write_enable_a = memory_controller_write_enable_a & select_func_3_0_l_10_a;
	func_3_0_l_10_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_13_0_l_52_address_a = memory_controller_address_a [4-1+2:2] & {4{select_func_13_0_l_52_a}};
	func_13_0_l_52_write_enable_a = memory_controller_write_enable_a & select_func_13_0_l_52_a;
	func_13_0_l_52_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_1_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_1_0_1_a}};
	legup_memcpy_1_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_1_0_1_a;
	legup_memcpy_1_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_1_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_1_0_dt_a}};
	legup_memcpy_1_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_1_0_dt_a;
	legup_memcpy_1_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_1_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_1_0_st_a}};
	legup_memcpy_1_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_1_0_st_a;
	legup_memcpy_1_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_2_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_2_0_1_a}};
	legup_memcpy_2_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_2_0_1_a;
	legup_memcpy_2_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_2_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_2_0_dt_a}};
	legup_memcpy_2_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_2_0_dt_a;
	legup_memcpy_2_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_2_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_2_0_st_a}};
	legup_memcpy_2_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_2_0_st_a;
	legup_memcpy_2_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_1_a}};
	legup_memcpy_4_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_1_a;
	legup_memcpy_4_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_dt_a}};
	legup_memcpy_4_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_dt_a;
	legup_memcpy_4_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_st_a}};
	legup_memcpy_4_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_st_a;
	legup_memcpy_4_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_g_2_reg_a[ram_latency]}} | {2{select_g_6_reg_a[ram_latency]}} | {2{select_g_7_reg_a[ram_latency]}} | {1{select_g_8_reg_a[ram_latency]}} | {2{select_g_49_reg_a[ram_latency]}} | {2{select_g_64_reg_a[ram_latency]}} | {1{select_g_78_reg_a[ram_latency]}} | {2{select_crc32_context_reg_a[ram_latency]}} | {2{select_crc32_tab_reg_a[ram_latency]}} | {2{select_func_1l_82_reg_a[ram_latency]}} | {1{select_func_3l_67_reg_a[ram_latency]}} | {2{select_func_3l_10_reg_a[ram_latency]}} | {2{select_func_13l_52_reg_a[ram_latency]}} | {2{select_func_1_0_l_82_reg_a[ram_latency]}} | {1{select_func_3_0_l_67_reg_a[ram_latency]}} | {2{select_func_3_0_l_10_reg_a[ram_latency]}} | {2{select_func_13_0_l_52_reg_a[ram_latency]}} | {2{select_legup_memcpy_1_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_1_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_1_0_st_reg_a[ram_latency]}} | {2{select_legup_memcpy_2_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_2_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_2_0_st_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_st_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_g_2_out_a | memory_controller_str_out_a | memory_controller_g_6_out_a | memory_controller_str1_out_a | memory_controller_g_7_out_a | memory_controller_str2_out_a | memory_controller_g_8_out_a | memory_controller_str4_out_a | memory_controller_g_40_out_a | memory_controller_str5_out_a | memory_controller_g_49_out_a | memory_controller_str6_out_a | memory_controller_g_55_out_a | memory_controller_str8_out_a | memory_controller_g_64_out_a | memory_controller_str9_out_a | memory_controller_g_78_out_a | memory_controller_str10_out_a | memory_controller_crc32_context_out_a | memory_controller_crc32_tab_out_a | memory_controller_func_1l_82_out_a | memory_controller_func_3l_41_out_a | memory_controller_func_3l_67_out_a | memory_controller_func_3l_10_out_a | memory_controller_func_13l_52_out_a | memory_controller_func_1_0_l_82_out_a | memory_controller_func_3_0_l_41_out_a | memory_controller_func_3_0_l_67_out_a | memory_controller_func_3_0_l_10_out_a | memory_controller_func_13_0_l_52_out_a | memory_controller_legup_memcpy_1_0_1_out_a | memory_controller_legup_memcpy_1_0_dt_out_a | memory_controller_legup_memcpy_1_0_st_out_a | memory_controller_legup_memcpy_2_0_1_out_a | memory_controller_legup_memcpy_2_0_dt_out_a | memory_controller_legup_memcpy_2_0_st_out_a | memory_controller_legup_memcpy_4_0_1_out_a | memory_controller_legup_memcpy_4_0_dt_out_a | memory_controller_legup_memcpy_4_0_st_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_2_reg_a[j+1] <= select_g_2_reg_a[j];
select_str_reg_a[j+1] <= select_str_reg_a[j];
select_g_6_reg_a[j+1] <= select_g_6_reg_a[j];
select_str1_reg_a[j+1] <= select_str1_reg_a[j];
select_g_7_reg_a[j+1] <= select_g_7_reg_a[j];
select_str2_reg_a[j+1] <= select_str2_reg_a[j];
select_g_8_reg_a[j+1] <= select_g_8_reg_a[j];
select_str4_reg_a[j+1] <= select_str4_reg_a[j];
select_g_40_reg_a[j+1] <= select_g_40_reg_a[j];
select_str5_reg_a[j+1] <= select_str5_reg_a[j];
select_g_49_reg_a[j+1] <= select_g_49_reg_a[j];
select_str6_reg_a[j+1] <= select_str6_reg_a[j];
select_g_55_reg_a[j+1] <= select_g_55_reg_a[j];
select_str8_reg_a[j+1] <= select_str8_reg_a[j];
select_g_64_reg_a[j+1] <= select_g_64_reg_a[j];
select_str9_reg_a[j+1] <= select_str9_reg_a[j];
select_g_78_reg_a[j+1] <= select_g_78_reg_a[j];
select_str10_reg_a[j+1] <= select_str10_reg_a[j];
select_crc32_context_reg_a[j+1] <= select_crc32_context_reg_a[j];
select_crc32_tab_reg_a[j+1] <= select_crc32_tab_reg_a[j];
select_func_1l_82_reg_a[j+1] <= select_func_1l_82_reg_a[j];
select_func_3l_41_reg_a[j+1] <= select_func_3l_41_reg_a[j];
select_func_3l_67_reg_a[j+1] <= select_func_3l_67_reg_a[j];
select_func_3l_10_reg_a[j+1] <= select_func_3l_10_reg_a[j];
select_func_13l_52_reg_a[j+1] <= select_func_13l_52_reg_a[j];
select_func_1_0_l_82_reg_a[j+1] <= select_func_1_0_l_82_reg_a[j];
select_func_3_0_l_41_reg_a[j+1] <= select_func_3_0_l_41_reg_a[j];
select_func_3_0_l_67_reg_a[j+1] <= select_func_3_0_l_67_reg_a[j];
select_func_3_0_l_10_reg_a[j+1] <= select_func_3_0_l_10_reg_a[j];
select_func_13_0_l_52_reg_a[j+1] <= select_func_13_0_l_52_reg_a[j];
select_legup_memcpy_1_0_1_reg_a[j+1] <= select_legup_memcpy_1_0_1_reg_a[j];
select_legup_memcpy_1_0_dt_reg_a[j+1] <= select_legup_memcpy_1_0_dt_reg_a[j];
select_legup_memcpy_1_0_st_reg_a[j+1] <= select_legup_memcpy_1_0_st_reg_a[j];
select_legup_memcpy_2_0_1_reg_a[j+1] <= select_legup_memcpy_2_0_1_reg_a[j];
select_legup_memcpy_2_0_dt_reg_a[j+1] <= select_legup_memcpy_2_0_dt_reg_a[j];
select_legup_memcpy_2_0_st_reg_a[j+1] <= select_legup_memcpy_2_0_st_reg_a[j];
select_legup_memcpy_4_0_1_reg_a[j+1] <= select_legup_memcpy_4_0_1_reg_a[j];
select_legup_memcpy_4_0_dt_reg_a[j+1] <= select_legup_memcpy_4_0_dt_reg_a[j];
select_legup_memcpy_4_0_st_reg_a[j+1] <= select_legup_memcpy_4_0_st_reg_a[j];
end
always @(*)
begin
select_g_2_reg_a[0] <= select_g_2_a;
select_str_reg_a[0] <= select_str_a;
select_g_6_reg_a[0] <= select_g_6_a;
select_str1_reg_a[0] <= select_str1_a;
select_g_7_reg_a[0] <= select_g_7_a;
select_str2_reg_a[0] <= select_str2_a;
select_g_8_reg_a[0] <= select_g_8_a;
select_str4_reg_a[0] <= select_str4_a;
select_g_40_reg_a[0] <= select_g_40_a;
select_str5_reg_a[0] <= select_str5_a;
select_g_49_reg_a[0] <= select_g_49_a;
select_str6_reg_a[0] <= select_str6_a;
select_g_55_reg_a[0] <= select_g_55_a;
select_str8_reg_a[0] <= select_str8_a;
select_g_64_reg_a[0] <= select_g_64_a;
select_str9_reg_a[0] <= select_str9_a;
select_g_78_reg_a[0] <= select_g_78_a;
select_str10_reg_a[0] <= select_str10_a;
select_crc32_context_reg_a[0] <= select_crc32_context_a;
select_crc32_tab_reg_a[0] <= select_crc32_tab_a;
select_func_1l_82_reg_a[0] <= select_func_1l_82_a;
select_func_3l_41_reg_a[0] <= select_func_3l_41_a;
select_func_3l_67_reg_a[0] <= select_func_3l_67_a;
select_func_3l_10_reg_a[0] <= select_func_3l_10_a;
select_func_13l_52_reg_a[0] <= select_func_13l_52_a;
select_func_1_0_l_82_reg_a[0] <= select_func_1_0_l_82_a;
select_func_3_0_l_41_reg_a[0] <= select_func_3_0_l_41_a;
select_func_3_0_l_67_reg_a[0] <= select_func_3_0_l_67_a;
select_func_3_0_l_10_reg_a[0] <= select_func_3_0_l_10_a;
select_func_13_0_l_52_reg_a[0] <= select_func_13_0_l_52_a;
select_legup_memcpy_1_0_1_reg_a[0] <= select_legup_memcpy_1_0_1_a;
select_legup_memcpy_1_0_dt_reg_a[0] <= select_legup_memcpy_1_0_dt_a;
select_legup_memcpy_1_0_st_reg_a[0] <= select_legup_memcpy_1_0_st_a;
select_legup_memcpy_2_0_1_reg_a[0] <= select_legup_memcpy_2_0_1_a;
select_legup_memcpy_2_0_dt_reg_a[0] <= select_legup_memcpy_2_0_dt_a;
select_legup_memcpy_2_0_st_reg_a[0] <= select_legup_memcpy_2_0_st_a;
select_legup_memcpy_4_0_1_reg_a[0] <= select_legup_memcpy_4_0_1_a;
select_legup_memcpy_4_0_dt_reg_a[0] <= select_legup_memcpy_4_0_dt_a;
select_legup_memcpy_4_0_st_reg_a[0] <= select_legup_memcpy_4_0_st_a;
end

reg [2:0] select_not_struct_b;

wire select_g_2_b;
assign select_g_2_b = (tag_b == `TAG_g_g_2);
reg [ram_latency:0] select_g_2_reg_b;
wire [31:0] memory_controller_g_2_out_b;
assign memory_controller_g_2_out_b = {32{ select_g_2_reg_b[ram_latency]}} & g_2_out_b;

wire select_str_b;
assign select_str_b = (tag_b == `TAG_g_str);
reg [ram_latency:0] select_str_reg_b;
wire [7:0] memory_controller_str_out_b;
assign memory_controller_str_out_b = {8{ select_str_reg_b[ram_latency]}} & str_out_b;

wire select_g_6_b;
assign select_g_6_b = (tag_b == `TAG_g_g_6);
reg [ram_latency:0] select_g_6_reg_b;
wire [31:0] memory_controller_g_6_out_b;
assign memory_controller_g_6_out_b = {32{ select_g_6_reg_b[ram_latency]}} & g_6_out_b;

wire select_str1_b;
assign select_str1_b = (tag_b == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_b;
wire [7:0] memory_controller_str1_out_b;
assign memory_controller_str1_out_b = {8{ select_str1_reg_b[ram_latency]}} & str1_out_b;

wire select_g_7_b;
assign select_g_7_b = (tag_b == `TAG_g_g_7);
reg [ram_latency:0] select_g_7_reg_b;
wire [31:0] memory_controller_g_7_out_b;
assign memory_controller_g_7_out_b = {32{ select_g_7_reg_b[ram_latency]}} & g_7_out_b;

wire select_str2_b;
assign select_str2_b = (tag_b == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_b;
wire [7:0] memory_controller_str2_out_b;
assign memory_controller_str2_out_b = {8{ select_str2_reg_b[ram_latency]}} & str2_out_b;

wire select_g_8_b;
assign select_g_8_b = (tag_b == `TAG_g_g_8);
reg [ram_latency:0] select_g_8_reg_b;
wire [15:0] memory_controller_g_8_out_b;
assign memory_controller_g_8_out_b = {16{ select_g_8_reg_b[ram_latency]}} & g_8_out_b;

wire select_str4_b;
assign select_str4_b = (tag_b == `TAG_g_str4);
reg [ram_latency:0] select_str4_reg_b;
wire [7:0] memory_controller_str4_out_b;
assign memory_controller_str4_out_b = {8{ select_str4_reg_b[ram_latency]}} & str4_out_b;

wire select_g_40_b;
assign select_g_40_b = (tag_b == `TAG_g_g_40);
reg [ram_latency:0] select_g_40_reg_b;
wire [7:0] memory_controller_g_40_out_b;
assign memory_controller_g_40_out_b = {8{ select_g_40_reg_b[ram_latency]}} & g_40_out_b;

wire select_str5_b;
assign select_str5_b = (tag_b == `TAG_g_str5);
reg [ram_latency:0] select_str5_reg_b;
wire [7:0] memory_controller_str5_out_b;
assign memory_controller_str5_out_b = {8{ select_str5_reg_b[ram_latency]}} & str5_out_b;

wire select_g_49_b;
assign select_g_49_b = (tag_b == `TAG_g_g_49);
reg [ram_latency:0] select_g_49_reg_b;
wire [31:0] memory_controller_g_49_out_b;
assign memory_controller_g_49_out_b = {32{ select_g_49_reg_b[ram_latency]}} & g_49_out_b;

wire select_str6_b;
assign select_str6_b = (tag_b == `TAG_g_str6);
reg [ram_latency:0] select_str6_reg_b;
wire [7:0] memory_controller_str6_out_b;
assign memory_controller_str6_out_b = {8{ select_str6_reg_b[ram_latency]}} & str6_out_b;

wire select_g_55_b;
assign select_g_55_b = (tag_b == `TAG_g_g_55);
reg [ram_latency:0] select_g_55_reg_b;
wire [7:0] memory_controller_g_55_out_b;
assign memory_controller_g_55_out_b = {8{ select_g_55_reg_b[ram_latency]}} & g_55_out_b;

wire select_str8_b;
assign select_str8_b = (tag_b == `TAG_g_str8);
reg [ram_latency:0] select_str8_reg_b;
wire [7:0] memory_controller_str8_out_b;
assign memory_controller_str8_out_b = {8{ select_str8_reg_b[ram_latency]}} & str8_out_b;

wire select_g_64_b;
assign select_g_64_b = (tag_b == `TAG_g_g_64);
reg [ram_latency:0] select_g_64_reg_b;
wire [31:0] memory_controller_g_64_out_b;
assign memory_controller_g_64_out_b = {32{ select_g_64_reg_b[ram_latency]}} & g_64_out_b;

wire select_str9_b;
assign select_str9_b = (tag_b == `TAG_g_str9);
reg [ram_latency:0] select_str9_reg_b;
wire [7:0] memory_controller_str9_out_b;
assign memory_controller_str9_out_b = {8{ select_str9_reg_b[ram_latency]}} & str9_out_b;

wire select_g_78_b;
assign select_g_78_b = (tag_b == `TAG_g_g_78);
reg [ram_latency:0] select_g_78_reg_b;
wire [15:0] memory_controller_g_78_out_b;
assign memory_controller_g_78_out_b = {16{ select_g_78_reg_b[ram_latency]}} & g_78_out_b;

wire select_str10_b;
assign select_str10_b = (tag_b == `TAG_g_str10);
reg [ram_latency:0] select_str10_reg_b;
wire [7:0] memory_controller_str10_out_b;
assign memory_controller_str10_out_b = {8{ select_str10_reg_b[ram_latency]}} & str10_out_b;

wire select_crc32_context_b;
assign select_crc32_context_b = (tag_b == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_b;
wire [31:0] memory_controller_crc32_context_out_b;
assign memory_controller_crc32_context_out_b = {32{ select_crc32_context_reg_b[ram_latency]}} & crc32_context_out_b;

wire select_crc32_tab_b;
assign select_crc32_tab_b = (tag_b == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_b;
wire [31:0] memory_controller_crc32_tab_out_b;
assign memory_controller_crc32_tab_out_b = {32{ select_crc32_tab_reg_b[ram_latency]}} & crc32_tab_out_b;

wire select_func_1l_82_b;
assign select_func_1l_82_b = (tag_b == `TAG_g_func_1l_82);
reg [ram_latency:0] select_func_1l_82_reg_b;
wire [31:0] memory_controller_func_1l_82_out_b;
assign memory_controller_func_1l_82_out_b = {32{ select_func_1l_82_reg_b[ram_latency]}} & func_1l_82_out_b;

wire select_func_3l_41_b;
assign select_func_3l_41_b = (tag_b == `TAG_g_func_3l_41);
reg [ram_latency:0] select_func_3l_41_reg_b;
wire [7:0] memory_controller_func_3l_41_out_b;
assign memory_controller_func_3l_41_out_b = {8{ select_func_3l_41_reg_b[ram_latency]}} & func_3l_41_out_b;

wire select_func_3l_67_b;
assign select_func_3l_67_b = (tag_b == `TAG_g_func_3l_67);
reg [ram_latency:0] select_func_3l_67_reg_b;
wire [15:0] memory_controller_func_3l_67_out_b;
assign memory_controller_func_3l_67_out_b = {16{ select_func_3l_67_reg_b[ram_latency]}} & func_3l_67_out_b;

wire select_func_3l_10_b;
assign select_func_3l_10_b = (tag_b == `TAG_g_func_3l_10);
reg [ram_latency:0] select_func_3l_10_reg_b;
wire [31:0] memory_controller_func_3l_10_out_b;
assign memory_controller_func_3l_10_out_b = {32{ select_func_3l_10_reg_b[ram_latency]}} & func_3l_10_out_b;

wire select_func_13l_52_b;
assign select_func_13l_52_b = (tag_b == `TAG_g_func_13l_52);
reg [ram_latency:0] select_func_13l_52_reg_b;
wire [31:0] memory_controller_func_13l_52_out_b;
assign memory_controller_func_13l_52_out_b = {32{ select_func_13l_52_reg_b[ram_latency]}} & func_13l_52_out_b;

wire select_func_1_0_l_82_b;
assign select_func_1_0_l_82_b = (tag_b == `TAG_func_1_0_l_82);
reg [ram_latency:0] select_func_1_0_l_82_reg_b;
wire [31:0] memory_controller_func_1_0_l_82_out_b;
assign memory_controller_func_1_0_l_82_out_b = {32{ select_func_1_0_l_82_reg_b[ram_latency]}} & func_1_0_l_82_out_b;

wire select_func_3_0_l_41_b;
assign select_func_3_0_l_41_b = (tag_b == `TAG_func_3_0_l_41);
reg [ram_latency:0] select_func_3_0_l_41_reg_b;
wire [7:0] memory_controller_func_3_0_l_41_out_b;
assign memory_controller_func_3_0_l_41_out_b = {8{ select_func_3_0_l_41_reg_b[ram_latency]}} & func_3_0_l_41_out_b;

wire select_func_3_0_l_67_b;
assign select_func_3_0_l_67_b = (tag_b == `TAG_func_3_0_l_67);
reg [ram_latency:0] select_func_3_0_l_67_reg_b;
wire [15:0] memory_controller_func_3_0_l_67_out_b;
assign memory_controller_func_3_0_l_67_out_b = {16{ select_func_3_0_l_67_reg_b[ram_latency]}} & func_3_0_l_67_out_b;

wire select_func_3_0_l_10_b;
assign select_func_3_0_l_10_b = (tag_b == `TAG_func_3_0_l_10);
reg [ram_latency:0] select_func_3_0_l_10_reg_b;
wire [31:0] memory_controller_func_3_0_l_10_out_b;
assign memory_controller_func_3_0_l_10_out_b = {32{ select_func_3_0_l_10_reg_b[ram_latency]}} & func_3_0_l_10_out_b;

wire select_func_13_0_l_52_b;
assign select_func_13_0_l_52_b = (tag_b == `TAG_func_13_0_l_52);
reg [ram_latency:0] select_func_13_0_l_52_reg_b;
wire [31:0] memory_controller_func_13_0_l_52_out_b;
assign memory_controller_func_13_0_l_52_out_b = {32{ select_func_13_0_l_52_reg_b[ram_latency]}} & func_13_0_l_52_out_b;

wire select_legup_memcpy_1_0_1_b;
assign select_legup_memcpy_1_0_1_b = (tag_b == `TAG_legup_memcpy_1_0_1);
reg [ram_latency:0] select_legup_memcpy_1_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_1_0_1_out_b;
assign memory_controller_legup_memcpy_1_0_1_out_b = {32{ select_legup_memcpy_1_0_1_reg_b[ram_latency]}} & legup_memcpy_1_0_1_out_b;

wire select_legup_memcpy_1_0_dt_b;
assign select_legup_memcpy_1_0_dt_b = (tag_b == `TAG_legup_memcpy_1_0_dt);
reg [ram_latency:0] select_legup_memcpy_1_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_1_0_dt_out_b;
assign memory_controller_legup_memcpy_1_0_dt_out_b = {32{ select_legup_memcpy_1_0_dt_reg_b[ram_latency]}} & legup_memcpy_1_0_dt_out_b;

wire select_legup_memcpy_1_0_st_b;
assign select_legup_memcpy_1_0_st_b = (tag_b == `TAG_legup_memcpy_1_0_st);
reg [ram_latency:0] select_legup_memcpy_1_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_1_0_st_out_b;
assign memory_controller_legup_memcpy_1_0_st_out_b = {32{ select_legup_memcpy_1_0_st_reg_b[ram_latency]}} & legup_memcpy_1_0_st_out_b;

wire select_legup_memcpy_2_0_1_b;
assign select_legup_memcpy_2_0_1_b = (tag_b == `TAG_legup_memcpy_2_0_1);
reg [ram_latency:0] select_legup_memcpy_2_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_2_0_1_out_b;
assign memory_controller_legup_memcpy_2_0_1_out_b = {32{ select_legup_memcpy_2_0_1_reg_b[ram_latency]}} & legup_memcpy_2_0_1_out_b;

wire select_legup_memcpy_2_0_dt_b;
assign select_legup_memcpy_2_0_dt_b = (tag_b == `TAG_legup_memcpy_2_0_dt);
reg [ram_latency:0] select_legup_memcpy_2_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_2_0_dt_out_b;
assign memory_controller_legup_memcpy_2_0_dt_out_b = {32{ select_legup_memcpy_2_0_dt_reg_b[ram_latency]}} & legup_memcpy_2_0_dt_out_b;

wire select_legup_memcpy_2_0_st_b;
assign select_legup_memcpy_2_0_st_b = (tag_b == `TAG_legup_memcpy_2_0_st);
reg [ram_latency:0] select_legup_memcpy_2_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_2_0_st_out_b;
assign memory_controller_legup_memcpy_2_0_st_out_b = {32{ select_legup_memcpy_2_0_st_reg_b[ram_latency]}} & legup_memcpy_2_0_st_out_b;

wire select_legup_memcpy_4_0_1_b;
assign select_legup_memcpy_4_0_1_b = (tag_b == `TAG_legup_memcpy_4_0_1);
reg [ram_latency:0] select_legup_memcpy_4_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_1_out_b;
assign memory_controller_legup_memcpy_4_0_1_out_b = {32{ select_legup_memcpy_4_0_1_reg_b[ram_latency]}} & legup_memcpy_4_0_1_out_b;

wire select_legup_memcpy_4_0_dt_b;
assign select_legup_memcpy_4_0_dt_b = (tag_b == `TAG_legup_memcpy_4_0_dt);
reg [ram_latency:0] select_legup_memcpy_4_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_dt_out_b;
assign memory_controller_legup_memcpy_4_0_dt_out_b = {32{ select_legup_memcpy_4_0_dt_reg_b[ram_latency]}} & legup_memcpy_4_0_dt_out_b;

wire select_legup_memcpy_4_0_st_b;
assign select_legup_memcpy_4_0_st_b = (tag_b == `TAG_legup_memcpy_4_0_st);
reg [ram_latency:0] select_legup_memcpy_4_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_st_out_b;
assign memory_controller_legup_memcpy_4_0_st_out_b = {32{ select_legup_memcpy_4_0_st_reg_b[ram_latency]}} & legup_memcpy_4_0_st_out_b;

always @(*)
begin
	g_2_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_2_b}};
	g_2_write_enable_b = memory_controller_write_enable_b & select_g_2_b;
	g_2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str_address_b = memory_controller_address_b [2-1+0:0] & {2{select_str_b}};
	str_write_enable_b = memory_controller_write_enable_b & select_str_b;
	str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_6_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_6_b}};
	g_6_write_enable_b = memory_controller_write_enable_b & select_g_6_b;
	g_6_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str1_address_b = memory_controller_address_b [2-1+0:0] & {2{select_str1_b}};
	str1_write_enable_b = memory_controller_write_enable_b & select_str1_b;
	str1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_7_address_b = memory_controller_address_b [6-1+2:2] & {6{select_g_7_b}};
	g_7_write_enable_b = memory_controller_write_enable_b & select_g_7_b;
	g_7_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str2_address_b = memory_controller_address_b [4-1+0:0] & {4{select_str2_b}};
	str2_write_enable_b = memory_controller_write_enable_b & select_str2_b;
	str2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_8_address_b = memory_controller_address_b [1-1+1:1] & {1{select_g_8_b}};
	g_8_write_enable_b = memory_controller_write_enable_b & select_g_8_b;
	g_8_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	str4_address_b = memory_controller_address_b [2-1+0:0] & {2{select_str4_b}};
	str4_write_enable_b = memory_controller_write_enable_b & select_str4_b;
	str4_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_40_address_b = memory_controller_address_b [1-1+0:0] & {1{select_g_40_b}};
	g_40_write_enable_b = memory_controller_write_enable_b & select_g_40_b;
	g_40_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	str5_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str5_b}};
	str5_write_enable_b = memory_controller_write_enable_b & select_str5_b;
	str5_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_49_address_b = memory_controller_address_b [2-1+2:2] & {2{select_g_49_b}};
	g_49_write_enable_b = memory_controller_write_enable_b & select_g_49_b;
	g_49_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str6_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str6_b}};
	str6_write_enable_b = memory_controller_write_enable_b & select_str6_b;
	str6_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_55_address_b = memory_controller_address_b [1-1+0:0] & {1{select_g_55_b}};
	g_55_write_enable_b = memory_controller_write_enable_b & select_g_55_b;
	g_55_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	str8_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str8_b}};
	str8_write_enable_b = memory_controller_write_enable_b & select_str8_b;
	str8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_64_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_64_b}};
	g_64_write_enable_b = memory_controller_write_enable_b & select_g_64_b;
	g_64_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str9_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str9_b}};
	str9_write_enable_b = memory_controller_write_enable_b & select_str9_b;
	str9_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_78_address_b = memory_controller_address_b [1-1+1:1] & {1{select_g_78_b}};
	g_78_write_enable_b = memory_controller_write_enable_b & select_g_78_b;
	g_78_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	str10_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str10_b}};
	str10_write_enable_b = memory_controller_write_enable_b & select_str10_b;
	str10_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	crc32_context_address_b = memory_controller_address_b [1-1+2:2] & {1{select_crc32_context_b}};
	crc32_context_write_enable_b = memory_controller_write_enable_b & select_crc32_context_b;
	crc32_context_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	crc32_tab_address_b = memory_controller_address_b [8-1+2:2] & {8{select_crc32_tab_b}};
	crc32_tab_write_enable_b = memory_controller_write_enable_b & select_crc32_tab_b;
	crc32_tab_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1l_82_address_b = memory_controller_address_b [3-1+2:2] & {3{select_func_1l_82_b}};
	func_1l_82_write_enable_b = memory_controller_write_enable_b & select_func_1l_82_b;
	func_1l_82_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_3l_41_address_b = memory_controller_address_b [3-1+0:0] & {3{select_func_3l_41_b}};
	func_3l_41_write_enable_b = memory_controller_write_enable_b & select_func_3l_41_b;
	func_3l_41_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	func_3l_67_address_b = memory_controller_address_b [8-1+1:1] & {8{select_func_3l_67_b}};
	func_3l_67_write_enable_b = memory_controller_write_enable_b & select_func_3l_67_b;
	func_3l_67_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	func_3l_10_address_b = memory_controller_address_b [3-1+2:2] & {3{select_func_3l_10_b}};
	func_3l_10_write_enable_b = memory_controller_write_enable_b & select_func_3l_10_b;
	func_3l_10_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_13l_52_address_b = memory_controller_address_b [4-1+2:2] & {4{select_func_13l_52_b}};
	func_13l_52_write_enable_b = memory_controller_write_enable_b & select_func_13l_52_b;
	func_13l_52_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1_0_l_82_address_b = memory_controller_address_b [3-1+2:2] & {3{select_func_1_0_l_82_b}};
	func_1_0_l_82_write_enable_b = memory_controller_write_enable_b & select_func_1_0_l_82_b;
	func_1_0_l_82_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_3_0_l_41_address_b = memory_controller_address_b [3-1+0:0] & {3{select_func_3_0_l_41_b}};
	func_3_0_l_41_write_enable_b = memory_controller_write_enable_b & select_func_3_0_l_41_b;
	func_3_0_l_41_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	func_3_0_l_67_address_b = memory_controller_address_b [8-1+1:1] & {8{select_func_3_0_l_67_b}};
	func_3_0_l_67_write_enable_b = memory_controller_write_enable_b & select_func_3_0_l_67_b;
	func_3_0_l_67_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	func_3_0_l_10_address_b = memory_controller_address_b [3-1+2:2] & {3{select_func_3_0_l_10_b}};
	func_3_0_l_10_write_enable_b = memory_controller_write_enable_b & select_func_3_0_l_10_b;
	func_3_0_l_10_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_13_0_l_52_address_b = memory_controller_address_b [4-1+2:2] & {4{select_func_13_0_l_52_b}};
	func_13_0_l_52_write_enable_b = memory_controller_write_enable_b & select_func_13_0_l_52_b;
	func_13_0_l_52_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_1_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_1_0_1_b}};
	legup_memcpy_1_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_1_0_1_b;
	legup_memcpy_1_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_1_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_1_0_dt_b}};
	legup_memcpy_1_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_1_0_dt_b;
	legup_memcpy_1_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_1_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_1_0_st_b}};
	legup_memcpy_1_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_1_0_st_b;
	legup_memcpy_1_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_2_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_2_0_1_b}};
	legup_memcpy_2_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_2_0_1_b;
	legup_memcpy_2_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_2_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_2_0_dt_b}};
	legup_memcpy_2_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_2_0_dt_b;
	legup_memcpy_2_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_2_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_2_0_st_b}};
	legup_memcpy_2_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_2_0_st_b;
	legup_memcpy_2_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_1_b}};
	legup_memcpy_4_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_1_b;
	legup_memcpy_4_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_dt_b}};
	legup_memcpy_4_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_dt_b;
	legup_memcpy_4_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_st_b}};
	legup_memcpy_4_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_st_b;
	legup_memcpy_4_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_g_2_reg_b[ram_latency]}} | {2{select_g_6_reg_b[ram_latency]}} | {2{select_g_7_reg_b[ram_latency]}} | {1{select_g_8_reg_b[ram_latency]}} | {2{select_g_49_reg_b[ram_latency]}} | {2{select_g_64_reg_b[ram_latency]}} | {1{select_g_78_reg_b[ram_latency]}} | {2{select_crc32_context_reg_b[ram_latency]}} | {2{select_crc32_tab_reg_b[ram_latency]}} | {2{select_func_1l_82_reg_b[ram_latency]}} | {1{select_func_3l_67_reg_b[ram_latency]}} | {2{select_func_3l_10_reg_b[ram_latency]}} | {2{select_func_13l_52_reg_b[ram_latency]}} | {2{select_func_1_0_l_82_reg_b[ram_latency]}} | {1{select_func_3_0_l_67_reg_b[ram_latency]}} | {2{select_func_3_0_l_10_reg_b[ram_latency]}} | {2{select_func_13_0_l_52_reg_b[ram_latency]}} | {2{select_legup_memcpy_1_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_1_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_1_0_st_reg_b[ram_latency]}} | {2{select_legup_memcpy_2_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_2_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_2_0_st_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_st_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_g_2_out_b | memory_controller_str_out_b | memory_controller_g_6_out_b | memory_controller_str1_out_b | memory_controller_g_7_out_b | memory_controller_str2_out_b | memory_controller_g_8_out_b | memory_controller_str4_out_b | memory_controller_g_40_out_b | memory_controller_str5_out_b | memory_controller_g_49_out_b | memory_controller_str6_out_b | memory_controller_g_55_out_b | memory_controller_str8_out_b | memory_controller_g_64_out_b | memory_controller_str9_out_b | memory_controller_g_78_out_b | memory_controller_str10_out_b | memory_controller_crc32_context_out_b | memory_controller_crc32_tab_out_b | memory_controller_func_1l_82_out_b | memory_controller_func_3l_41_out_b | memory_controller_func_3l_67_out_b | memory_controller_func_3l_10_out_b | memory_controller_func_13l_52_out_b | memory_controller_func_1_0_l_82_out_b | memory_controller_func_3_0_l_41_out_b | memory_controller_func_3_0_l_67_out_b | memory_controller_func_3_0_l_10_out_b | memory_controller_func_13_0_l_52_out_b | memory_controller_legup_memcpy_1_0_1_out_b | memory_controller_legup_memcpy_1_0_dt_out_b | memory_controller_legup_memcpy_1_0_st_out_b | memory_controller_legup_memcpy_2_0_1_out_b | memory_controller_legup_memcpy_2_0_dt_out_b | memory_controller_legup_memcpy_2_0_st_out_b | memory_controller_legup_memcpy_4_0_1_out_b | memory_controller_legup_memcpy_4_0_dt_out_b | memory_controller_legup_memcpy_4_0_st_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_2_reg_b[j+1] <= select_g_2_reg_b[j];
select_str_reg_b[j+1] <= select_str_reg_b[j];
select_g_6_reg_b[j+1] <= select_g_6_reg_b[j];
select_str1_reg_b[j+1] <= select_str1_reg_b[j];
select_g_7_reg_b[j+1] <= select_g_7_reg_b[j];
select_str2_reg_b[j+1] <= select_str2_reg_b[j];
select_g_8_reg_b[j+1] <= select_g_8_reg_b[j];
select_str4_reg_b[j+1] <= select_str4_reg_b[j];
select_g_40_reg_b[j+1] <= select_g_40_reg_b[j];
select_str5_reg_b[j+1] <= select_str5_reg_b[j];
select_g_49_reg_b[j+1] <= select_g_49_reg_b[j];
select_str6_reg_b[j+1] <= select_str6_reg_b[j];
select_g_55_reg_b[j+1] <= select_g_55_reg_b[j];
select_str8_reg_b[j+1] <= select_str8_reg_b[j];
select_g_64_reg_b[j+1] <= select_g_64_reg_b[j];
select_str9_reg_b[j+1] <= select_str9_reg_b[j];
select_g_78_reg_b[j+1] <= select_g_78_reg_b[j];
select_str10_reg_b[j+1] <= select_str10_reg_b[j];
select_crc32_context_reg_b[j+1] <= select_crc32_context_reg_b[j];
select_crc32_tab_reg_b[j+1] <= select_crc32_tab_reg_b[j];
select_func_1l_82_reg_b[j+1] <= select_func_1l_82_reg_b[j];
select_func_3l_41_reg_b[j+1] <= select_func_3l_41_reg_b[j];
select_func_3l_67_reg_b[j+1] <= select_func_3l_67_reg_b[j];
select_func_3l_10_reg_b[j+1] <= select_func_3l_10_reg_b[j];
select_func_13l_52_reg_b[j+1] <= select_func_13l_52_reg_b[j];
select_func_1_0_l_82_reg_b[j+1] <= select_func_1_0_l_82_reg_b[j];
select_func_3_0_l_41_reg_b[j+1] <= select_func_3_0_l_41_reg_b[j];
select_func_3_0_l_67_reg_b[j+1] <= select_func_3_0_l_67_reg_b[j];
select_func_3_0_l_10_reg_b[j+1] <= select_func_3_0_l_10_reg_b[j];
select_func_13_0_l_52_reg_b[j+1] <= select_func_13_0_l_52_reg_b[j];
select_legup_memcpy_1_0_1_reg_b[j+1] <= select_legup_memcpy_1_0_1_reg_b[j];
select_legup_memcpy_1_0_dt_reg_b[j+1] <= select_legup_memcpy_1_0_dt_reg_b[j];
select_legup_memcpy_1_0_st_reg_b[j+1] <= select_legup_memcpy_1_0_st_reg_b[j];
select_legup_memcpy_2_0_1_reg_b[j+1] <= select_legup_memcpy_2_0_1_reg_b[j];
select_legup_memcpy_2_0_dt_reg_b[j+1] <= select_legup_memcpy_2_0_dt_reg_b[j];
select_legup_memcpy_2_0_st_reg_b[j+1] <= select_legup_memcpy_2_0_st_reg_b[j];
select_legup_memcpy_4_0_1_reg_b[j+1] <= select_legup_memcpy_4_0_1_reg_b[j];
select_legup_memcpy_4_0_dt_reg_b[j+1] <= select_legup_memcpy_4_0_dt_reg_b[j];
select_legup_memcpy_4_0_st_reg_b[j+1] <= select_legup_memcpy_4_0_st_reg_b[j];
end
always @(*)
begin
select_g_2_reg_b[0] <= select_g_2_b;
select_str_reg_b[0] <= select_str_b;
select_g_6_reg_b[0] <= select_g_6_b;
select_str1_reg_b[0] <= select_str1_b;
select_g_7_reg_b[0] <= select_g_7_b;
select_str2_reg_b[0] <= select_str2_b;
select_g_8_reg_b[0] <= select_g_8_b;
select_str4_reg_b[0] <= select_str4_b;
select_g_40_reg_b[0] <= select_g_40_b;
select_str5_reg_b[0] <= select_str5_b;
select_g_49_reg_b[0] <= select_g_49_b;
select_str6_reg_b[0] <= select_str6_b;
select_g_55_reg_b[0] <= select_g_55_b;
select_str8_reg_b[0] <= select_str8_b;
select_g_64_reg_b[0] <= select_g_64_b;
select_str9_reg_b[0] <= select_str9_b;
select_g_78_reg_b[0] <= select_g_78_b;
select_str10_reg_b[0] <= select_str10_b;
select_crc32_context_reg_b[0] <= select_crc32_context_b;
select_crc32_tab_reg_b[0] <= select_crc32_tab_b;
select_func_1l_82_reg_b[0] <= select_func_1l_82_b;
select_func_3l_41_reg_b[0] <= select_func_3l_41_b;
select_func_3l_67_reg_b[0] <= select_func_3l_67_b;
select_func_3l_10_reg_b[0] <= select_func_3l_10_b;
select_func_13l_52_reg_b[0] <= select_func_13l_52_b;
select_func_1_0_l_82_reg_b[0] <= select_func_1_0_l_82_b;
select_func_3_0_l_41_reg_b[0] <= select_func_3_0_l_41_b;
select_func_3_0_l_67_reg_b[0] <= select_func_3_0_l_67_b;
select_func_3_0_l_10_reg_b[0] <= select_func_3_0_l_10_b;
select_func_13_0_l_52_reg_b[0] <= select_func_13_0_l_52_b;
select_legup_memcpy_1_0_1_reg_b[0] <= select_legup_memcpy_1_0_1_b;
select_legup_memcpy_1_0_dt_reg_b[0] <= select_legup_memcpy_1_0_dt_b;
select_legup_memcpy_1_0_st_reg_b[0] <= select_legup_memcpy_1_0_st_b;
select_legup_memcpy_2_0_1_reg_b[0] <= select_legup_memcpy_2_0_1_b;
select_legup_memcpy_2_0_dt_reg_b[0] <= select_legup_memcpy_2_0_dt_b;
select_legup_memcpy_2_0_st_reg_b[0] <= select_legup_memcpy_2_0_st_b;
select_legup_memcpy_4_0_1_reg_b[0] <= select_legup_memcpy_4_0_1_b;
select_legup_memcpy_4_0_dt_reg_b[0] <= select_legup_memcpy_4_0_dt_b;
select_legup_memcpy_4_0_st_reg_b[0] <= select_legup_memcpy_4_0_st_b;
end

endmodule 

`timescale 1 ns / 1 ns
module platform_main_begin
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_begin_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_begin_BB__0_1;
LEGUP_F_platform_main_begin_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_begin: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_platform_main_begin_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_gentab
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_crc32_gentab_BB__1_1 = 4'd1;
parameter [3:0] LEGUP_F_crc32_gentab_BB__3_2 = 4'd2;
parameter [3:0] LEGUP_F_crc32_gentab_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_crc32_gentab_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_crc32_gentab_BB__8_5 = 4'd5;
parameter [3:0] LEGUP_F_crc32_gentab_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_crc32_gentab_BB__13_7 = 4'd7;
parameter [3:0] LEGUP_F_crc32_gentab_BB__14_8 = 4'd8;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_9 = 4'd9;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_10 = 4'd10;
parameter [3:0] LEGUP_F_crc32_gentab_BB__16_11 = 4'd11;
parameter [3:0] LEGUP_F_crc32_gentab_BB__18_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] crc32_gentab_1_2;
reg [31:0] crc32_gentab_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep_reg;
reg  crc32_gentab_1_exitcond1;
reg [31:0] crc32_gentab_4_indvar;
reg [31:0] crc32_gentab_4_indvar_reg;
reg [31:0] crc32_gentab_4_crc0;
reg [31:0] crc32_gentab_4_crc0_reg;
reg  crc32_gentab_4_exitcond;
reg [31:0] crc32_gentab_5_6;
reg  crc32_gentab_5_7;
reg [31:0] crc32_gentab_8_9;
reg [31:0] crc32_gentab_8_10;
reg [31:0] crc32_gentab_11_12;
reg [31:0] crc32_gentab_13_crc1;
reg [31:0] crc32_gentab_13_crc1_reg;
reg [31:0] crc32_gentab_14_indvarnext;
reg [31:0] crc32_gentab_16_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__11_6:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
LEGUP_F_crc32_gentab_BB__13_7:
		next_state = LEGUP_F_crc32_gentab_BB__14_8;
LEGUP_F_crc32_gentab_BB__14_8:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__15_10:
		next_state = LEGUP_F_crc32_gentab_BB__16_11;
LEGUP_F_crc32_gentab_BB__15_9:
		next_state = LEGUP_F_crc32_gentab_BB__15_10;
LEGUP_F_crc32_gentab_BB__16_11:
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__18_12:
		next_state = LEGUP_0;
LEGUP_F_crc32_gentab_BB__1_1:
	if ((crc32_gentab_1_exitcond1 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__18_12;
	else if ((crc32_gentab_1_exitcond1 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__3_2;
LEGUP_F_crc32_gentab_BB__3_2:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__4_3:
	if ((crc32_gentab_4_exitcond == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__15_9;
	else if ((crc32_gentab_4_exitcond == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__5_4;
LEGUP_F_crc32_gentab_BB__5_4:
	if ((crc32_gentab_5_7 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__11_6;
	else if ((crc32_gentab_5_7 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__8_5;
LEGUP_F_crc32_gentab_BB__8_5:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2 = 32'd0;
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_1_2 = crc32_gentab_16_17;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
		crc32_gentab_1_scevgep = (`TAG_g_crc32_tab_a + (4 * crc32_gentab_1_2_reg));
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__1_1)) begin
		crc32_gentab_1_scevgep_reg <= crc32_gentab_1_scevgep;
		if (start == 1'b0 && ^(crc32_gentab_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %exitcond1 = icmp eq i32 %2, 256*/
		crc32_gentab_1_exitcond1 = (crc32_gentab_1_2_reg == 32'd256);
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar = 32'd0;
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_indvar = crc32_gentab_14_indvarnext;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0 = crc32_gentab_1_2_reg;
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_crc0 = crc32_gentab_13_crc1_reg;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %exitcond = icmp eq i32 %indvar, 8*/
		crc32_gentab_4_exitcond = (crc32_gentab_4_indvar_reg == 32'd8);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %6 = and i32 %crc.0, 1*/
		crc32_gentab_5_6 = (crc32_gentab_4_crc0_reg & 32'd1);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %7 = icmp eq i32 %6, 0*/
		crc32_gentab_5_7 = (crc32_gentab_5_6 == 32'd0);
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %9 = lshr i32 %crc.0, 1*/
		crc32_gentab_8_9 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %10 = xor i32 %9, -306674912*/
		crc32_gentab_8_10 = (crc32_gentab_8_9 ^ -32'd306674912);
end
always @(*) begin
	/* crc32_gentab: %11*/
	/*   %12 = lshr i32 %crc.0, 1*/
		crc32_gentab_11_12 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1 = crc32_gentab_8_10;
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_13_crc1 = crc32_gentab_11_12;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %14*/
	/*   %indvar.next = add i32 %indvar, 1*/
		crc32_gentab_14_indvarnext = (crc32_gentab_4_indvar_reg + 32'd1);
end
always @(*) begin
	/* crc32_gentab: %16*/
	/*   %17 = add nsw i32 %2, 1*/
		crc32_gentab_16_17 = (crc32_gentab_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_gentab: %18*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__18_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_address_a = crc32_gentab_1_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_in_a = crc32_gentab_4_crc0_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module platform_main_end
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_crc,
	arg_flag
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_end_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_crc;
input [31:0] arg_flag;
reg  cur_state;
reg  next_state;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* platform_main_end: %0*/
	/*   %1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str11, i32 0, i32 0), i32 %crc) #3*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		$write("checksum = %d\n", arg_crc);
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_crc) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_end_BB__0_1;
LEGUP_F_platform_main_end_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		return_val <= arg_crc;
		if (start == 1'b0 && ^(arg_crc) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_byte
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_b
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_2 = 3'd2;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_4 = 3'd4;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_5 = 3'd5;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_6 = 3'd6;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [7:0] arg_b;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] crc32_byte_0_1;
reg [31:0] crc32_byte_0_2;
reg [31:0] crc32_byte_0_2_reg;
reg [31:0] crc32_byte_0_3;
reg [31:0] crc32_byte_0_3_reg;
reg [31:0] crc32_byte_0_masked;
reg [31:0] crc32_byte_0_4;
reg [31:0] crc32_byte_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_0_5;
reg [31:0] crc32_byte_0_6;
reg [31:0] crc32_byte_0_7;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_byte_BB__0_1;
LEGUP_F_crc32_byte_BB__0_1:
		next_state = LEGUP_F_crc32_byte_BB__0_2;
LEGUP_F_crc32_byte_BB__0_2:
		next_state = LEGUP_F_crc32_byte_BB__0_3;
LEGUP_F_crc32_byte_BB__0_3:
		next_state = LEGUP_F_crc32_byte_BB__0_4;
LEGUP_F_crc32_byte_BB__0_4:
		next_state = LEGUP_F_crc32_byte_BB__0_5;
LEGUP_F_crc32_byte_BB__0_5:
		next_state = LEGUP_F_crc32_byte_BB__0_6;
LEGUP_F_crc32_byte_BB__0_6:
		next_state = LEGUP_F_crc32_byte_BB__0_7;
LEGUP_F_crc32_byte_BB__0_7:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
		crc32_byte_0_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
		crc32_byte_0_2 = (crc32_byte_0_1 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_2_reg <= crc32_byte_0_2;
		if (start == 1'b0 && ^(crc32_byte_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
		crc32_byte_0_3 = arg_b;
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		crc32_byte_0_3_reg <= crc32_byte_0_3;
		if (start == 1'b0 && ^(crc32_byte_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %.masked = and i32 %1, 255*/
		crc32_byte_0_masked = (crc32_byte_0_1 & 32'd255);
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
		crc32_byte_0_4 = (crc32_byte_0_masked ^ crc32_byte_0_3_reg);
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_4_reg <= crc32_byte_0_4;
		if (start == 1'b0 && ^(crc32_byte_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %5 = getelementptr inbounds [256 x i32]* @crc32_tab, i32 0, i32 %4*/
		crc32_byte_0_5 = (`TAG_g_crc32_tab_a + (4 * crc32_byte_0_4_reg));
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
		crc32_byte_0_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %7 = xor i32 %2, %6*/
		crc32_byte_0_7 = (crc32_byte_0_2_reg ^ crc32_byte_0_6);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_byte: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_address_a = crc32_byte_0_5;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_in_a = crc32_byte_0_7;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [7:0] safe_mul_func_int8_t_s_s_0_1;
reg  lpm_mult_safe_mul_func_int8_t_s_s_0_1_en;
reg [7:0] safe_mul_func_int8_t_s_s_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2;
LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_int8_t_s_s_0_1 = safe_mul_func_int8_t_s_s_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_int8_t_s_s_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   %1 = mul i8 %si1, %si2*/
	if ((lpm_mult_safe_mul_func_int8_t_s_s_0_1_en == 1'd1)) begin
		safe_mul_func_int8_t_s_s_0_1_stage0_reg <= (arg_si1 * arg_si2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2)) begin
		return_val <= safe_mul_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_ui1;
input [15:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [15:0] safe_add_func_uint16_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_uint16_t_u_u: %0*/
	/*   %1 = add i16 %ui1, %ui2*/
		safe_add_func_uint16_t_u_u_0_1 = (arg_ui1 + arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1)) begin
		return_val <= safe_add_func_uint16_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_add_func_uint16_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__4_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__6_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_36 = 6'd36;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__8_37 = 6'd37;
parameter [5:0] LEGUP_F_safe_div_func_int16_t_s_s_BB__12_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_si1;
input [15:0] arg_si2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_div_func_int16_t_s_s_0_1;
reg  safe_div_func_int16_t_s_s_2_3;
reg  safe_div_func_int16_t_s_s_4_5;
reg [31:0] safe_div_func_int16_t_s_s_6_7;
reg [31:0] safe_div_func_int16_t_s_s_8_9;
reg [31:0] safe_div_func_int16_t_s_s_8_10;
reg [31:0] safe_div_func_int16_t_s_s_8_11;
reg [31:0] safe_div_func_int16_t_s_s_12_13;
reg [31:0] safe_div_func_int16_t_s_s_12_13_reg;
reg [15:0] safe_div_func_int16_t_s_s_12_14;
reg [31:0] safe_div_func_int16_t_s_s_signed_divide_32_0_op0;
reg [31:0] safe_div_func_int16_t_s_s_signed_divide_32_0_op1;
wire [31:0] lpm_divide_safe_div_func_int16_t_s_s_8_11_temp_out;
wire [31:0] safe_div_func_int16_t_s_s_8_11_unused;
reg  lpm_divide_safe_div_func_int16_t_s_s_8_11_en;
reg [31:0] lpm_divide_safe_div_func_int16_t_s_s_8_11_out;
reg [31:0] safe_div_func_int16_t_s_s_signed_divide_32_0;

/*   %11 = sdiv i32 %9, %10*/
lpm_divide lpm_divide_safe_div_func_int16_t_s_s_8_11 (
	.quotient (lpm_divide_safe_div_func_int16_t_s_s_8_11_temp_out),
	.remain (safe_div_func_int16_t_s_s_8_11_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_int16_t_s_s_8_11_en),
	.numer (safe_div_func_int16_t_s_s_signed_divide_32_0_op0),
	.denom (safe_div_func_int16_t_s_s_signed_divide_32_0_op1)
);

defparam
	lpm_divide_safe_div_func_int16_t_s_s_8_11.lpm_pipeline = 32,
	lpm_divide_safe_div_func_int16_t_s_s_8_11.lpm_widthn = 32,
	lpm_divide_safe_div_func_int16_t_s_s_8_11.lpm_widthd = 32,
	lpm_divide_safe_div_func_int16_t_s_s_8_11.lpm_drepresentation = "SIGNED",
	lpm_divide_safe_div_func_int16_t_s_s_8_11.lpm_nrepresentation = "SIGNED",
	lpm_divide_safe_div_func_int16_t_s_s_8_11.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_div_func_int16_t_s_s_BB__0_1:
	if ((safe_div_func_int16_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__6_4;
	else if ((safe_div_func_int16_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__2_2;
LEGUP_F_safe_div_func_int16_t_s_s_BB__12_38:
		next_state = LEGUP_0;
LEGUP_F_safe_div_func_int16_t_s_s_BB__2_2:
	if ((safe_div_func_int16_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__4_3;
	else if ((safe_div_func_int16_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_5;
LEGUP_F_safe_div_func_int16_t_s_s_BB__4_3:
	if ((safe_div_func_int16_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__6_4;
	else if ((safe_div_func_int16_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_5;
LEGUP_F_safe_div_func_int16_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__12_38;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_10:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_11;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_11:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_12;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_12:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_13;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_13:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_14;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_14:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_15;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_15:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_16;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_16:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_17;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_17:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_18;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_18:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_19;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_19:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_20;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_20:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_21;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_21:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_22;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_22:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_23;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_23:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_24;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_24:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_25;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_25:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_26;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_26:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_27;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_27:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_28;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_28:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_29;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_29:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_30;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_30:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_31;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_31:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_32;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_32:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_33;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_33:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_34;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_34:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_35;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_35:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_36;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_36:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_37;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_37:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__12_38;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_5:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_6;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_6:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_7;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_7:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_8;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_8:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_9;
LEGUP_F_safe_div_func_int16_t_s_s_BB__8_9:
		next_state = LEGUP_F_safe_div_func_int16_t_s_s_BB__8_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %0*/
	/*   %1 = icmp eq i16 %si2, 0*/
		safe_div_func_int16_t_s_s_0_1 = (arg_si2 == 16'd0);
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %2*/
	/*   %3 = icmp eq i16 %si1, -32768*/
		safe_div_func_int16_t_s_s_2_3 = (arg_si1 == -16'd32768);
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %4*/
	/*   %5 = icmp eq i16 %si2, -1*/
		safe_div_func_int16_t_s_s_4_5 = (arg_si2 == -16'd1);
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %6*/
	/*   %7 = sext i16 %si1 to i32*/
		safe_div_func_int16_t_s_s_6_7 = $signed(arg_si1);
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %8*/
	/*   %9 = sext i16 %si1 to i32*/
		safe_div_func_int16_t_s_s_8_9 = $signed(arg_si1);
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %8*/
	/*   %10 = sext i16 %si2 to i32*/
		safe_div_func_int16_t_s_s_8_10 = $signed(arg_si2);
end
always @(*) begin
	safe_div_func_int16_t_s_s_8_11 = safe_div_func_int16_t_s_s_signed_divide_32_0;
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int16_t_s_s_12_13 = safe_div_func_int16_t_s_s_6_7;
	end
	/* safe_div_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_int16_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_int16_t_s_s_12_13 = safe_div_func_int16_t_s_s_8_11;
	end
end
always @(posedge clk) begin
	/* safe_div_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int16_t_s_s_12_13_reg <= safe_div_func_int16_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_div_func_int16_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_12_13_reg"); $finish; end
	end
	/* safe_div_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int16_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int16_t_s_s_12_13_reg <= safe_div_func_int16_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_div_func_int16_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %12*/
	/*   %14 = trunc i32 %13 to i16*/
		safe_div_func_int16_t_s_s_12_14 = safe_div_func_int16_t_s_s_12_13_reg[15:0];
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %8*/
	/*   %11 = sdiv i32 %9, %10*/
		safe_div_func_int16_t_s_s_signed_divide_32_0_op0 = safe_div_func_int16_t_s_s_8_9;
end
always @(*) begin
	/* safe_div_func_int16_t_s_s: %8*/
	/*   %11 = sdiv i32 %9, %10*/
		safe_div_func_int16_t_s_s_signed_divide_32_0_op1 = safe_div_func_int16_t_s_s_8_10;
end
always @(*) begin
	lpm_divide_safe_div_func_int16_t_s_s_8_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_int16_t_s_s_8_11_out = lpm_divide_safe_div_func_int16_t_s_s_8_11_temp_out;
end
always @(*) begin
	safe_div_func_int16_t_s_s_signed_divide_32_0 = lpm_divide_safe_div_func_int16_t_s_s_8_11_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_int16_t_s_s: %12*/
	/*   ret i16 %14*/
	if ((cur_state == LEGUP_F_safe_div_func_int16_t_s_s_BB__12_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_int16_t_s_s: %12*/
	/*   ret i16 %14*/
	if ((cur_state == LEGUP_F_safe_div_func_int16_t_s_s_BB__12_38)) begin
		return_val <= safe_div_func_int16_t_s_s_12_14;
		if (start == 1'b0 && ^(safe_div_func_int16_t_s_s_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_sub_func_int8_t_s_s_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   %1 = sub i8 %si1, %si2*/
		safe_sub_func_int8_t_s_s_0_1 = (arg_si1 - arg_si2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1)) begin
		return_val <= safe_sub_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_3 = 4'd3;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_4 = 4'd4;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_5 = 4'd5;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_6 = 4'd6;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_7 = 4'd7;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_8 = 4'd8;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_9 = 4'd9;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_10 = 4'd10;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11 = 4'd11;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg [3:0] cur_state;
reg [3:0] next_state;
reg  safe_div_func_uint8_t_u_u_0_1;
reg [7:0] safe_div_func_uint8_t_u_u_3_div;
reg [7:0] safe_div_func_uint8_t_u_u_4_in;
reg [7:0] safe_div_func_uint8_t_u_u_4_in_reg;
reg [7:0] safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op0;
reg [7:0] safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op1;
wire [7:0] lpm_divide_safe_div_func_uint8_t_u_u_3_div_temp_out;
wire [7:0] safe_div_func_uint8_t_u_u_3_div_unused;
reg  lpm_divide_safe_div_func_uint8_t_u_u_3_div_en;
reg [7:0] lpm_divide_safe_div_func_uint8_t_u_u_3_div_out;
reg [7:0] safe_div_func_uint8_t_u_u_unsigned_divide_8_0;

/*   %div = udiv i8 %ui1, %ui2*/
lpm_divide lpm_divide_safe_div_func_uint8_t_u_u_3_div (
	.quotient (lpm_divide_safe_div_func_uint8_t_u_u_3_div_temp_out),
	.remain (safe_div_func_uint8_t_u_u_3_div_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_uint8_t_u_u_3_div_en),
	.numer (safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op0),
	.denom (safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op1)
);

defparam
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_pipeline = 8,
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_widthn = 8,
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_widthd = 8,
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_drepresentation = "UNSIGNED",
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__0_1:
	if ((safe_div_func_uint8_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2;
	else if ((safe_div_func_uint8_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_3;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_10:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_3:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_4;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_4:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_5;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_5:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_6;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_6:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_7;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_7:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_8;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_8:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_9;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_9:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_10;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %0*/
	/*   %1 = icmp eq i8 %ui2, 0*/
		safe_div_func_uint8_t_u_u_0_1 = (arg_ui2 == 8'd0);
end
always @(*) begin
	safe_div_func_uint8_t_u_u_3_div = safe_div_func_uint8_t_u_u_unsigned_divide_8_0;
end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint8_t_u_u_4_in = arg_ui1;
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_uint8_t_u_u_4_in = safe_div_func_uint8_t_u_u_3_div;
	end
end
always @(posedge clk) begin
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint8_t_u_u_4_in_reg <= safe_div_func_uint8_t_u_u_4_in;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_4_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_4_in_reg"); $finish; end
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint8_t_u_u_4_in_reg <= safe_div_func_uint8_t_u_u_4_in;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_4_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_4_in_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %3*/
	/*   %div = udiv i8 %ui1, %ui2*/
		safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op0 = arg_ui1;
end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %3*/
	/*   %div = udiv i8 %ui1, %ui2*/
		safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op1 = arg_ui2;
end
always @(*) begin
	lpm_divide_safe_div_func_uint8_t_u_u_3_div_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_uint8_t_u_u_3_div_out = lpm_divide_safe_div_func_uint8_t_u_u_3_div_temp_out;
end
always @(*) begin
	safe_div_func_uint8_t_u_u_unsigned_divide_8_0 = lpm_divide_safe_div_func_uint8_t_u_u_3_div_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   ret i8 %.in*/
	if ((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   ret i8 %.in*/
	if ((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12)) begin
		return_val <= safe_div_func_uint8_t_u_u_4_in_reg;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_4_in_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mod_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__4_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__6_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_36 = 6'd36;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_37 = 6'd37;
parameter [5:0] LEGUP_F_safe_mod_func_int16_t_s_s_BB__12_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_si1;
input [15:0] arg_si2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_mod_func_int16_t_s_s_0_1;
reg  safe_mod_func_int16_t_s_s_2_3;
reg  safe_mod_func_int16_t_s_s_4_5;
reg [31:0] safe_mod_func_int16_t_s_s_6_7;
reg [31:0] safe_mod_func_int16_t_s_s_8_9;
reg [31:0] safe_mod_func_int16_t_s_s_8_10;
reg [31:0] safe_mod_func_int16_t_s_s_8_11;
reg [31:0] safe_mod_func_int16_t_s_s_12_13;
reg [31:0] safe_mod_func_int16_t_s_s_12_13_reg;
reg [15:0] safe_mod_func_int16_t_s_s_12_14;
reg [31:0] safe_mod_func_int16_t_s_s_signed_modulus_32_0_op0;
reg [31:0] safe_mod_func_int16_t_s_s_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_safe_mod_func_int16_t_s_s_8_11_temp_out;
wire [31:0] safe_mod_func_int16_t_s_s_8_11_unused;
reg  lpm_divide_safe_mod_func_int16_t_s_s_8_11_en;
reg [31:0] lpm_divide_safe_mod_func_int16_t_s_s_8_11_out;
reg [31:0] safe_mod_func_int16_t_s_s_signed_modulus_32_0;

/*   %11 = srem i32 %9, %10*/
lpm_divide lpm_divide_safe_mod_func_int16_t_s_s_8_11 (
	.quotient (safe_mod_func_int16_t_s_s_8_11_unused),
	.remain (lpm_divide_safe_mod_func_int16_t_s_s_8_11_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_mod_func_int16_t_s_s_8_11_en),
	.numer (safe_mod_func_int16_t_s_s_signed_modulus_32_0_op0),
	.denom (safe_mod_func_int16_t_s_s_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_safe_mod_func_int16_t_s_s_8_11.lpm_pipeline = 32,
	lpm_divide_safe_mod_func_int16_t_s_s_8_11.lpm_widthn = 32,
	lpm_divide_safe_mod_func_int16_t_s_s_8_11.lpm_widthd = 32,
	lpm_divide_safe_mod_func_int16_t_s_s_8_11.lpm_drepresentation = "SIGNED",
	lpm_divide_safe_mod_func_int16_t_s_s_8_11.lpm_nrepresentation = "SIGNED",
	lpm_divide_safe_mod_func_int16_t_s_s_8_11.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__0_1:
	if ((safe_mod_func_int16_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__6_4;
	else if ((safe_mod_func_int16_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__2_2;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__12_38:
		next_state = LEGUP_0;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__2_2:
	if ((safe_mod_func_int16_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__4_3;
	else if ((safe_mod_func_int16_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_5;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__4_3:
	if ((safe_mod_func_int16_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__6_4;
	else if ((safe_mod_func_int16_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_5;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__12_38;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_10:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_11;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_11:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_12;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_12:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_13;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_13:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_14;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_14:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_15;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_15:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_16;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_16:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_17;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_17:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_18;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_18:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_19;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_19:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_20;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_20:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_21;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_21:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_22;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_22:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_23;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_23:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_24;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_24:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_25;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_25:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_26;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_26:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_27;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_27:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_28;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_28:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_29;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_29:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_30;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_30:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_31;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_31:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_32;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_32:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_33;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_33:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_34;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_34:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_35;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_35:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_36;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_36:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_37;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_37:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__12_38;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_5:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_6;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_6:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_7;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_7:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_8;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_8:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_9;
LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_9:
		next_state = LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %0*/
	/*   %1 = icmp eq i16 %si2, 0*/
		safe_mod_func_int16_t_s_s_0_1 = (arg_si2 == 16'd0);
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %2*/
	/*   %3 = icmp eq i16 %si1, -32768*/
		safe_mod_func_int16_t_s_s_2_3 = (arg_si1 == -16'd32768);
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %4*/
	/*   %5 = icmp eq i16 %si2, -1*/
		safe_mod_func_int16_t_s_s_4_5 = (arg_si2 == -16'd1);
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %6*/
	/*   %7 = sext i16 %si1 to i32*/
		safe_mod_func_int16_t_s_s_6_7 = $signed(arg_si1);
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %8*/
	/*   %9 = sext i16 %si1 to i32*/
		safe_mod_func_int16_t_s_s_8_9 = $signed(arg_si1);
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %8*/
	/*   %10 = sext i16 %si2 to i32*/
		safe_mod_func_int16_t_s_s_8_10 = $signed(arg_si2);
end
always @(*) begin
	safe_mod_func_int16_t_s_s_8_11 = safe_mod_func_int16_t_s_s_signed_modulus_32_0;
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_int16_t_s_s_12_13 = safe_mod_func_int16_t_s_s_6_7;
	end
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_mod_func_int16_t_s_s_12_13 = safe_mod_func_int16_t_s_s_8_11;
	end
end
always @(posedge clk) begin
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_int16_t_s_s_12_13_reg <= safe_mod_func_int16_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_mod_func_int16_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_12_13_reg"); $finish; end
	end
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_int16_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_int16_t_s_s_12_13_reg <= safe_mod_func_int16_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_mod_func_int16_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   %14 = trunc i32 %13 to i16*/
		safe_mod_func_int16_t_s_s_12_14 = safe_mod_func_int16_t_s_s_12_13_reg[15:0];
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %8*/
	/*   %11 = srem i32 %9, %10*/
		safe_mod_func_int16_t_s_s_signed_modulus_32_0_op0 = safe_mod_func_int16_t_s_s_8_9;
end
always @(*) begin
	/* safe_mod_func_int16_t_s_s: %8*/
	/*   %11 = srem i32 %9, %10*/
		safe_mod_func_int16_t_s_s_signed_modulus_32_0_op1 = safe_mod_func_int16_t_s_s_8_10;
end
always @(*) begin
	lpm_divide_safe_mod_func_int16_t_s_s_8_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_mod_func_int16_t_s_s_8_11_out = lpm_divide_safe_mod_func_int16_t_s_s_8_11_temp_out;
end
always @(*) begin
	safe_mod_func_int16_t_s_s_signed_modulus_32_0 = lpm_divide_safe_mod_func_int16_t_s_s_8_11_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   ret i16 %14*/
	if ((cur_state == LEGUP_F_safe_mod_func_int16_t_s_s_BB__12_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mod_func_int16_t_s_s: %12*/
	/*   ret i16 %14*/
	if ((cur_state == LEGUP_F_safe_mod_func_int16_t_s_s_BB__12_38)) begin
		return_val <= safe_mod_func_int16_t_s_s_12_14;
		if (start == 1'b0 && ^(safe_mod_func_int16_t_s_s_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4 = 3'd4;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint16_t_u_u_0_1;
reg [31:0] safe_rshift_func_uint16_t_u_u_2_3;
reg [31:0] safe_rshift_func_uint16_t_u_u_4_5;
reg [31:0] safe_rshift_func_uint16_t_u_u_4_6;
reg [31:0] safe_rshift_func_uint16_t_u_u_7_8;
reg [31:0] safe_rshift_func_uint16_t_u_u_7_8_reg;
reg [15:0] safe_rshift_func_uint16_t_u_u_7_9;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1:
	if ((safe_rshift_func_uint16_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2;
	else if ((safe_rshift_func_uint16_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_rshift_func_uint16_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %2*/
	/*   %3 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_u_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %4*/
	/*   %6 = lshr i32 %5, %right*/
		safe_rshift_func_uint16_t_u_u_4_6 = (safe_rshift_func_uint16_t_u_u_4_5 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8 = safe_rshift_func_uint16_t_u_u_2_3;
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint16_t_u_u_7_8 = safe_rshift_func_uint16_t_u_u_4_6;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8_reg <= safe_rshift_func_uint16_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_7_8_reg"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8_reg <= safe_rshift_func_uint16_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %9 = trunc i32 %8 to i16*/
		safe_rshift_func_uint16_t_u_u_7_9 = safe_rshift_func_uint16_t_u_u_7_8_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   ret i16 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   ret i16 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4)) begin
		return_val <= safe_rshift_func_uint16_t_u_u_7_9;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_uint32_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_div_func_uint32_t_u_u_BB__5_36 = 6'd36;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_ui1;
input [31:0] arg_ui2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_div_func_uint32_t_u_u_0_1;
reg [31:0] safe_div_func_uint32_t_u_u_3_4;
reg [31:0] safe_div_func_uint32_t_u_u_5_6;
reg [31:0] safe_div_func_uint32_t_u_u_5_6_reg;
reg [31:0] safe_div_func_uint32_t_u_u_unsigned_divide_32_0_op0;
reg [31:0] safe_div_func_uint32_t_u_u_unsigned_divide_32_0_op1;
wire [31:0] lpm_divide_safe_div_func_uint32_t_u_u_3_4_temp_out;
wire [31:0] safe_div_func_uint32_t_u_u_3_4_unused;
reg  lpm_divide_safe_div_func_uint32_t_u_u_3_4_en;
reg [31:0] lpm_divide_safe_div_func_uint32_t_u_u_3_4_out;
reg [31:0] safe_div_func_uint32_t_u_u_unsigned_divide_32_0;

/*   %4 = udiv i32 %ui1, %ui2*/
lpm_divide lpm_divide_safe_div_func_uint32_t_u_u_3_4 (
	.quotient (lpm_divide_safe_div_func_uint32_t_u_u_3_4_temp_out),
	.remain (safe_div_func_uint32_t_u_u_3_4_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_uint32_t_u_u_3_4_en),
	.numer (safe_div_func_uint32_t_u_u_unsigned_divide_32_0_op0),
	.denom (safe_div_func_uint32_t_u_u_unsigned_divide_32_0_op1)
);

defparam
	lpm_divide_safe_div_func_uint32_t_u_u_3_4.lpm_pipeline = 32,
	lpm_divide_safe_div_func_uint32_t_u_u_3_4.lpm_widthn = 32,
	lpm_divide_safe_div_func_uint32_t_u_u_3_4.lpm_widthd = 32,
	lpm_divide_safe_div_func_uint32_t_u_u_3_4.lpm_drepresentation = "UNSIGNED",
	lpm_divide_safe_div_func_uint32_t_u_u_3_4.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_safe_div_func_uint32_t_u_u_3_4.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__0_1;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__0_1:
	if ((safe_div_func_uint32_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__2_2;
	else if ((safe_div_func_uint32_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_3;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__5_36;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_10:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_11;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_11:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_12;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_12:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_13;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_13:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_14;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_14:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_15;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_15:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_16;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_16:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_17;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_17:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_18;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_18:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_19;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_19:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_20;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_20:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_21;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_21:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_22;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_22:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_23;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_23:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_24;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_24:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_25;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_25:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_26;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_26:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_27;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_27:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_28;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_28:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_29;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_29:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_30;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_3:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_4;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_30:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_31;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_31:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_32;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_32:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_33;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_33:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_34;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_34:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_35;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_35:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__5_36;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_4:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_5;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_5:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_6;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_6:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_7;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_7:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_8;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_8:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_9;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_9:
		next_state = LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_10;
LEGUP_F_safe_div_func_uint32_t_u_u_BB__5_36:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_uint32_t_u_u: %0*/
	/*   %1 = icmp eq i32 %ui2, 0*/
		safe_div_func_uint32_t_u_u_0_1 = (arg_ui2 == 32'd0);
end
always @(*) begin
	safe_div_func_uint32_t_u_u_3_4 = safe_div_func_uint32_t_u_u_unsigned_divide_32_0;
end
always @(*) begin
	/* safe_div_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint32_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint32_t_u_u_5_6 = arg_ui1;
	end
	/* safe_div_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_uint32_t_u_u_5_6 = safe_div_func_uint32_t_u_u_3_4;
	end
end
always @(posedge clk) begin
	/* safe_div_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint32_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint32_t_u_u_5_6_reg <= safe_div_func_uint32_t_u_u_5_6;
		if (start == 1'b0 && ^(safe_div_func_uint32_t_u_u_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_5_6_reg"); $finish; end
	end
	/* safe_div_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint32_t_u_u_BB__3_35) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint32_t_u_u_5_6_reg <= safe_div_func_uint32_t_u_u_5_6;
		if (start == 1'b0 && ^(safe_div_func_uint32_t_u_u_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_5_6_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_uint32_t_u_u: %3*/
	/*   %4 = udiv i32 %ui1, %ui2*/
		safe_div_func_uint32_t_u_u_unsigned_divide_32_0_op0 = arg_ui1;
end
always @(*) begin
	/* safe_div_func_uint32_t_u_u: %3*/
	/*   %4 = udiv i32 %ui1, %ui2*/
		safe_div_func_uint32_t_u_u_unsigned_divide_32_0_op1 = arg_ui2;
end
always @(*) begin
	lpm_divide_safe_div_func_uint32_t_u_u_3_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_uint32_t_u_u_3_4_out = lpm_divide_safe_div_func_uint32_t_u_u_3_4_temp_out;
end
always @(*) begin
	safe_div_func_uint32_t_u_u_unsigned_divide_32_0 = lpm_divide_safe_div_func_uint32_t_u_u_3_4_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_uint32_t_u_u: %5*/
	/*   ret i32 %6*/
	if ((cur_state == LEGUP_F_safe_div_func_uint32_t_u_u_BB__5_36)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_uint32_t_u_u: %5*/
	/*   ret i32 %6*/
	if ((cur_state == LEGUP_F_safe_div_func_uint32_t_u_u_BB__5_36)) begin
		return_val <= safe_div_func_uint32_t_u_u_5_6_reg;
		if (start == 1'b0 && ^(safe_div_func_uint32_t_u_u_5_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint16_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint16_t_u_s_0_1;
reg  safe_lshift_func_uint16_t_u_s_2_3;
reg [31:0] safe_lshift_func_uint16_t_u_s_4_5;
reg [31:0] safe_lshift_func_uint16_t_u_s_4_6;
reg  safe_lshift_func_uint16_t_u_s_4_7;
reg [31:0] safe_lshift_func_uint16_t_u_s_8_9;
reg [31:0] safe_lshift_func_uint16_t_u_s_10_11;
reg [31:0] safe_lshift_func_uint16_t_u_s_10_12;
reg [31:0] safe_lshift_func_uint16_t_u_s_13_14;
reg [31:0] safe_lshift_func_uint16_t_u_s_13_14_reg;
reg [15:0] safe_lshift_func_uint16_t_u_s_13_15;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__0_1;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__0_1:
	if ((safe_lshift_func_uint16_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint16_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__2_2;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__2_2:
	if ((safe_lshift_func_uint16_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint16_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__4_3;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__4_3:
	if ((safe_lshift_func_uint16_t_u_s_4_7 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint16_t_u_s_4_7 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_lshift_func_uint16_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_lshift_func_uint16_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %4*/
	/*   %6 = lshr i32 65535, %right*/
		safe_lshift_func_uint16_t_u_s_4_6 = (32'd65535 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %4*/
	/*   %7 = icmp sgt i32 %5, %6*/
		safe_lshift_func_uint16_t_u_s_4_7 = ($signed(safe_lshift_func_uint16_t_u_s_4_5) > $signed(safe_lshift_func_uint16_t_u_s_4_6));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %8*/
	/*   %9 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_s_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %10*/
	/*   %11 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_s_10_11 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %10*/
	/*   %12 = shl i32 %11, %right*/
		safe_lshift_func_uint16_t_u_s_10_12 = (safe_lshift_func_uint16_t_u_s_10_11 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_s_13_14 = safe_lshift_func_uint16_t_u_s_8_9;
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint16_t_u_s_13_14 = safe_lshift_func_uint16_t_u_s_10_12;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_s_13_14_reg <= safe_lshift_func_uint16_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_13_14_reg"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_s_13_14_reg <= safe_lshift_func_uint16_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %15 = trunc i32 %14 to i16*/
		safe_lshift_func_uint16_t_u_s_13_15 = safe_lshift_func_uint16_t_u_s_13_14_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   ret i16 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   ret i16 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6)) begin
		return_val <= safe_lshift_func_uint16_t_u_s_13_15;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_sub_func_uint8_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_uint8_t_u_u: %0*/
	/*   %1 = sub i8 %ui1, %ui2*/
		safe_sub_func_uint8_t_u_u_0_1 = (arg_ui1 - arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1)) begin
		return_val <= safe_sub_func_uint8_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_sub_func_uint8_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint16_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint16_t_u_s_0_1;
reg  safe_rshift_func_uint16_t_u_s_2_3;
reg [31:0] safe_rshift_func_uint16_t_u_s_4_5;
reg [31:0] safe_rshift_func_uint16_t_u_s_6_7;
reg [31:0] safe_rshift_func_uint16_t_u_s_6_8;
reg [31:0] safe_rshift_func_uint16_t_u_s_9_10;
reg [31:0] safe_rshift_func_uint16_t_u_s_9_10_reg;
reg [15:0] safe_rshift_func_uint16_t_u_s_9_11;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__0_1;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__0_1:
	if ((safe_rshift_func_uint16_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3;
	else if ((safe_rshift_func_uint16_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__2_2;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__2_2:
	if ((safe_rshift_func_uint16_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3;
	else if ((safe_rshift_func_uint16_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_rshift_func_uint16_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_rshift_func_uint16_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %6*/
	/*   %7 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_s_6_7 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %6*/
	/*   %8 = lshr i32 %7, %right*/
		safe_rshift_func_uint16_t_u_s_6_8 = (safe_rshift_func_uint16_t_u_s_6_7 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_s_9_10 = safe_rshift_func_uint16_t_u_s_4_5;
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint16_t_u_s_9_10 = safe_rshift_func_uint16_t_u_s_6_8;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_s_9_10_reg <= safe_rshift_func_uint16_t_u_s_9_10;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_9_10_reg"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_s_9_10_reg <= safe_rshift_func_uint16_t_u_s_9_10;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %11 = trunc i32 %10 to i16*/
		safe_rshift_func_uint16_t_u_s_9_11 = safe_rshift_func_uint16_t_u_s_9_10_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   ret i16 %11*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   ret i16 %11*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5)) begin
		return_val <= safe_rshift_func_uint16_t_u_s_9_11;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_add_func_uint8_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   %1 = add i8 %ui1, %ui2*/
		safe_add_func_uint8_t_u_u_0_1 = (arg_ui1 + arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1)) begin
		return_val <= safe_add_func_uint8_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_add_func_uint8_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_add_func_int8_t_s_s_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_int8_t_s_s: %0*/
	/*   %1 = add i8 %si1, %si2*/
		safe_add_func_int8_t_s_s_0_1 = (arg_si1 + arg_si2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1)) begin
		return_val <= safe_add_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_add_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mod_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_3 = 4'd3;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_4 = 4'd4;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_5 = 4'd5;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_6 = 4'd6;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_7 = 4'd7;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_8 = 4'd8;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_9 = 4'd9;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_10 = 4'd10;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_11 = 4'd11;
parameter [3:0] LEGUP_F_safe_mod_func_uint8_t_u_u_BB__5_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg [3:0] cur_state;
reg [3:0] next_state;
reg  safe_mod_func_uint8_t_u_u_0_1;
reg [7:0] safe_mod_func_uint8_t_u_u_3_4;
reg [7:0] safe_mod_func_uint8_t_u_u_5_in;
reg [7:0] safe_mod_func_uint8_t_u_u_5_in_reg;
reg [7:0] safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0_op0;
reg [7:0] safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0_op1;
wire [7:0] lpm_divide_safe_mod_func_uint8_t_u_u_3_4_temp_out;
wire [7:0] safe_mod_func_uint8_t_u_u_3_4_unused;
reg  lpm_divide_safe_mod_func_uint8_t_u_u_3_4_en;
reg [7:0] lpm_divide_safe_mod_func_uint8_t_u_u_3_4_out;
reg [7:0] safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0;

/*   %4 = urem i8 %ui1, %ui2*/
lpm_divide lpm_divide_safe_mod_func_uint8_t_u_u_3_4 (
	.quotient (safe_mod_func_uint8_t_u_u_3_4_unused),
	.remain (lpm_divide_safe_mod_func_uint8_t_u_u_3_4_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_mod_func_uint8_t_u_u_3_4_en),
	.numer (safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0_op0),
	.denom (safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0_op1)
);

defparam
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4.lpm_pipeline = 8,
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4.lpm_widthn = 8,
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4.lpm_widthd = 8,
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4.lpm_drepresentation = "UNSIGNED",
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__0_1:
	if ((safe_mod_func_uint8_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__2_2;
	else if ((safe_mod_func_uint8_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_3;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__5_12;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_10:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_11;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_11:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__5_12;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_3:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_4;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_4:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_5;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_5:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_6;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_6:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_7;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_7:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_8;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_8:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_9;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_9:
		next_state = LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_10;
LEGUP_F_safe_mod_func_uint8_t_u_u_BB__5_12:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_mod_func_uint8_t_u_u: %0*/
	/*   %1 = icmp eq i8 %ui2, 0*/
		safe_mod_func_uint8_t_u_u_0_1 = (arg_ui2 == 8'd0);
end
always @(*) begin
	safe_mod_func_uint8_t_u_u_3_4 = safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0;
end
always @(*) begin
	/* safe_mod_func_uint8_t_u_u: %5*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_uint8_t_u_u_5_in = arg_ui1;
	end
	/* safe_mod_func_uint8_t_u_u: %5*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %4, %3 ]*/
	else /* if (((cur_state == LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_mod_func_uint8_t_u_u_5_in = safe_mod_func_uint8_t_u_u_3_4;
	end
end
always @(posedge clk) begin
	/* safe_mod_func_uint8_t_u_u: %5*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_uint8_t_u_u_5_in_reg <= safe_mod_func_uint8_t_u_u_5_in;
		if (start == 1'b0 && ^(safe_mod_func_uint8_t_u_u_5_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_5_in_reg"); $finish; end
	end
	/* safe_mod_func_uint8_t_u_u: %5*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_uint8_t_u_u_BB__3_11) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_uint8_t_u_u_5_in_reg <= safe_mod_func_uint8_t_u_u_5_in;
		if (start == 1'b0 && ^(safe_mod_func_uint8_t_u_u_5_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_5_in_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_mod_func_uint8_t_u_u: %3*/
	/*   %4 = urem i8 %ui1, %ui2*/
		safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0_op0 = arg_ui1;
end
always @(*) begin
	/* safe_mod_func_uint8_t_u_u: %3*/
	/*   %4 = urem i8 %ui1, %ui2*/
		safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0_op1 = arg_ui2;
end
always @(*) begin
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_mod_func_uint8_t_u_u_3_4_out = lpm_divide_safe_mod_func_uint8_t_u_u_3_4_temp_out;
end
always @(*) begin
	safe_mod_func_uint8_t_u_u_unsigned_modulus_8_0 = lpm_divide_safe_mod_func_uint8_t_u_u_3_4_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mod_func_uint8_t_u_u: %5*/
	/*   ret i8 %.in*/
	if ((cur_state == LEGUP_F_safe_mod_func_uint8_t_u_u_BB__5_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mod_func_uint8_t_u_u: %5*/
	/*   ret i8 %.in*/
	if ((cur_state == LEGUP_F_safe_mod_func_uint8_t_u_u_BB__5_12)) begin
		return_val <= safe_mod_func_uint8_t_u_u_5_in_reg;
		if (start == 1'b0 && ^(safe_mod_func_uint8_t_u_u_5_in_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [7:0] safe_mul_func_uint8_t_u_u_0_1;
reg  lpm_mult_safe_mul_func_uint8_t_u_u_0_1_en;
reg [7:0] safe_mul_func_uint8_t_u_u_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_2;
LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_uint8_t_u_u_0_1 = safe_mul_func_uint8_t_u_u_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_uint8_t_u_u_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_uint8_t_u_u: %0*/
	/*   %1 = mul i8 %ui1, %ui2*/
	if ((lpm_mult_safe_mul_func_uint8_t_u_u_0_1_en == 1'd1)) begin
		safe_mul_func_uint8_t_u_u_0_1_stage0_reg <= (arg_ui1 * arg_ui2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_uint8_t_u_u_BB__0_2)) begin
		return_val <= safe_mul_func_uint8_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_mul_func_uint8_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint8_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint8_t_u_s_0_1;
reg  safe_lshift_func_uint8_t_u_s_2_3;
reg [31:0] safe_lshift_func_uint8_t_u_s_4_5;
reg [31:0] safe_lshift_func_uint8_t_u_s_4_6;
reg  safe_lshift_func_uint8_t_u_s_4_7;
reg [31:0] safe_lshift_func_uint8_t_u_s_8_9;
reg [31:0] safe_lshift_func_uint8_t_u_s_10_11;
reg [31:0] safe_lshift_func_uint8_t_u_s_10_12;
reg [31:0] safe_lshift_func_uint8_t_u_s_13_14;
reg [31:0] safe_lshift_func_uint8_t_u_s_13_14_reg;
reg [7:0] safe_lshift_func_uint8_t_u_s_13_15;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__0_1;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__0_1:
	if ((safe_lshift_func_uint8_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint8_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__2_2;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__2_2:
	if ((safe_lshift_func_uint8_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint8_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__4_3;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__4_3:
	if ((safe_lshift_func_uint8_t_u_s_4_7 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint8_t_u_s_4_7 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_lshift_func_uint8_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_lshift_func_uint8_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %4*/
	/*   %5 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %4*/
	/*   %6 = lshr i32 255, %right*/
		safe_lshift_func_uint8_t_u_s_4_6 = (32'd255 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %4*/
	/*   %7 = icmp sgt i32 %5, %6*/
		safe_lshift_func_uint8_t_u_s_4_7 = ($signed(safe_lshift_func_uint8_t_u_s_4_5) > $signed(safe_lshift_func_uint8_t_u_s_4_6));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %8*/
	/*   %9 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_s_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %10*/
	/*   %11 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_s_10_11 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %10*/
	/*   %12 = shl i32 %11, %right*/
		safe_lshift_func_uint8_t_u_s_10_12 = (safe_lshift_func_uint8_t_u_s_10_11 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_s_13_14 = safe_lshift_func_uint8_t_u_s_8_9;
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint8_t_u_s_13_14 = safe_lshift_func_uint8_t_u_s_10_12;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_s_13_14_reg <= safe_lshift_func_uint8_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_13_14_reg"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_s_13_14_reg <= safe_lshift_func_uint8_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %15 = trunc i32 %14 to i8*/
		safe_lshift_func_uint8_t_u_s_13_15 = safe_lshift_func_uint8_t_u_s_13_14_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6)) begin
		return_val <= safe_lshift_func_uint8_t_u_s_13_15;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4 = 4'd4;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5 = 4'd5;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7 = 4'd7;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8 = 4'd8;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9 = 4'd9;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [3:0] cur_state;
reg [3:0] next_state;
reg  safe_add_func_int32_t_s_s_0_1;
reg  safe_add_func_int32_t_s_s_2_3;
reg [31:0] safe_add_func_int32_t_s_s_4_5;
reg  safe_add_func_int32_t_s_s_4_6;
reg  safe_add_func_int32_t_s_s_7_8;
reg  safe_add_func_int32_t_s_s_9_10;
reg [31:0] safe_add_func_int32_t_s_s_11_12;
reg  safe_add_func_int32_t_s_s_11_13;
reg [31:0] safe_add_func_int32_t_s_s_15_16;
reg [31:0] safe_add_func_int32_t_s_s_17_18;
reg [31:0] safe_add_func_int32_t_s_s_17_18_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1:
	if ((safe_add_func_int32_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2;
	else if ((safe_add_func_int32_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6:
	if ((safe_add_func_int32_t_s_s_11_13 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7;
	else if ((safe_add_func_int32_t_s_s_11_13 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7:
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9;
LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8:
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9;
LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9:
		next_state = LEGUP_0;
LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2:
	if ((safe_add_func_int32_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3;
	else if ((safe_add_func_int32_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3:
	if ((safe_add_func_int32_t_s_s_4_6 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7;
	else if ((safe_add_func_int32_t_s_s_4_6 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4:
	if ((safe_add_func_int32_t_s_s_7_8 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5;
	else if ((safe_add_func_int32_t_s_s_7_8 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5:
	if ((safe_add_func_int32_t_s_s_9_10 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6;
	else if ((safe_add_func_int32_t_s_s_9_10 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %0*/
	/*   %1 = icmp sgt i32 %si1, 0*/
		safe_add_func_int32_t_s_s_0_1 = ($signed(arg_si1) > $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %2*/
	/*   %3 = icmp sgt i32 %si2, 0*/
		safe_add_func_int32_t_s_s_2_3 = ($signed(arg_si2) > $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %4*/
	/*   %5 = sub nsw i32 2147483647, %si2*/
		safe_add_func_int32_t_s_s_4_5 = (32'd2147483647 - arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %4*/
	/*   %6 = icmp slt i32 %5, %si1*/
		safe_add_func_int32_t_s_s_4_6 = ($signed(safe_add_func_int32_t_s_s_4_5) < $signed(arg_si1));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %7*/
	/*   %8 = icmp slt i32 %si1, 0*/
		safe_add_func_int32_t_s_s_7_8 = ($signed(arg_si1) < $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %9*/
	/*   %10 = icmp slt i32 %si2, 0*/
		safe_add_func_int32_t_s_s_9_10 = ($signed(arg_si2) < $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %11*/
	/*   %12 = sub nsw i32 -2147483648, %si2*/
		safe_add_func_int32_t_s_s_11_12 = (-32'd2147483648 - arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %11*/
	/*   %13 = icmp sgt i32 %12, %si1*/
		safe_add_func_int32_t_s_s_11_13 = ($signed(safe_add_func_int32_t_s_s_11_12) > $signed(arg_si1));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %15*/
	/*   %16 = add nsw i32 %si1, %si2*/
		safe_add_func_int32_t_s_s_15_16 = (arg_si1 + arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18 = arg_si1;
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	else /* if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_add_func_int32_t_s_s_17_18 = safe_add_func_int32_t_s_s_15_16;
	end
end
always @(posedge clk) begin
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18_reg <= safe_add_func_int32_t_s_s_17_18;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_17_18_reg"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18_reg <= safe_add_func_int32_t_s_s_17_18;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_17_18_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9)) begin
		return_val <= safe_add_func_int32_t_s_s_17_18_reg;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__2_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__6_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_1_BB__12_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] legup_memcpy_1_2_3;
reg [31:0] legup_memcpy_1_2_4;
reg  legup_memcpy_1_2_5;
reg  legup_memcpy_1_2_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_8;
reg [7:0] legup_memcpy_1_6_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_6_11_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_1_BB__0_1;
LEGUP_F_legup_memcpy_1_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_1_BB__0_2;
LEGUP_F_legup_memcpy_1_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_1_BB__0_3;
LEGUP_F_legup_memcpy_1_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_4;
LEGUP_F_legup_memcpy_1_BB__12_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_1_BB__2_4:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_5;
LEGUP_F_legup_memcpy_1_BB__2_5:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_6;
LEGUP_F_legup_memcpy_1_BB__2_6:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_7;
LEGUP_F_legup_memcpy_1_BB__2_7:
	if ((legup_memcpy_1_2_5_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_1_BB__12_14;
	else if ((legup_memcpy_1_2_5_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_1_BB__6_8;
LEGUP_F_legup_memcpy_1_BB__6_10:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_11;
LEGUP_F_legup_memcpy_1_BB__6_11:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_12;
LEGUP_F_legup_memcpy_1_BB__6_12:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_13;
LEGUP_F_legup_memcpy_1_BB__6_13:
		next_state = LEGUP_F_legup_memcpy_1_BB__2_4;
LEGUP_F_legup_memcpy_1_BB__6_8:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_9;
LEGUP_F_legup_memcpy_1_BB__6_9:
		next_state = LEGUP_F_legup_memcpy_1_BB__6_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
		legup_memcpy_1_2_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_1: %2*/
	/*   %4 = add i32 %3, -1*/
		legup_memcpy_1_2_4 = (legup_memcpy_1_2_3 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_1: %2*/
	/*   %5 = icmp eq i32 %3, 0*/
		legup_memcpy_1_2_5 = (legup_memcpy_1_2_3 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_1: %2*/
	/*   %5 = icmp eq i32 %3, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		legup_memcpy_1_2_5_reg <= legup_memcpy_1_2_5;
		if (start == 1'b0 && ^(legup_memcpy_1_2_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_2_5_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
		legup_memcpy_1_6_7 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %8 = getelementptr inbounds i8* %7, i32 1*/
		legup_memcpy_1_6_8 = (legup_memcpy_1_6_7 + (1 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
		legup_memcpy_1_6_9 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
		legup_memcpy_1_6_10 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		legup_memcpy_1_6_10_reg <= legup_memcpy_1_6_10;
		if (start == 1'b0 && ^(legup_memcpy_1_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_6_10_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_1: %6*/
	/*   %11 = getelementptr inbounds i8* %10, i32 1*/
		legup_memcpy_1_6_11 = (legup_memcpy_1_6_10 + (1 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_1: %6*/
	/*   %11 = getelementptr inbounds i8* %10, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		legup_memcpy_1_6_11_reg <= legup_memcpy_1_6_11;
		if (start == 1'b0 && ^(legup_memcpy_1_6_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_6_11_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_1: %12*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__12_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_1_a;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_st_a;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_1_a;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_1_a;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_st_a;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_1_0_st_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_in_a = arg_s;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_in_a = legup_memcpy_1_2_4;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_in_a = legup_memcpy_1_6_8;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %s, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %2*/
	/*   %3 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %2*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__2_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   %7 = load i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %8, i8** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_1_0_dt_a;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_1_0_dt_a;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_address_b = legup_memcpy_1_6_7;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_1_0_dt_a;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_address_b = legup_memcpy_1_6_10_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_in_b = arg_d;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_in_b = legup_memcpy_1_6_11_reg;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_in_b = legup_memcpy_1_6_9;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_1: %0*/
	/*   store i8* %d, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   %10 = load i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   %9 = load i8* %7, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_10)) begin
		memory_controller_size_b = 2'd0;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8* %11, i8** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_1: %6*/
	/*   store i8 %9, i8* %10, align 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_1_BB__6_12)) begin
		memory_controller_size_b = 2'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_2
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__15_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_0_3_reg;
reg [31:0] legup_memcpy_2_0_4;
reg [31:0] legup_memcpy_2_0_4_reg;
reg [31:0] legup_memcpy_2_5_6;
reg [31:0] legup_memcpy_2_5_7;
reg  legup_memcpy_2_5_8;
reg  legup_memcpy_2_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_11;
reg [15:0] legup_memcpy_2_9_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_14_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_2_BB__0_1;
LEGUP_F_legup_memcpy_2_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_2_BB__0_2;
LEGUP_F_legup_memcpy_2_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_2_BB__0_3;
LEGUP_F_legup_memcpy_2_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_4;
LEGUP_F_legup_memcpy_2_BB__15_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_2_BB__5_4:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_5;
LEGUP_F_legup_memcpy_2_BB__5_5:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_6;
LEGUP_F_legup_memcpy_2_BB__5_6:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_7;
LEGUP_F_legup_memcpy_2_BB__5_7:
	if ((legup_memcpy_2_5_8_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_2_BB__15_14;
	else if ((legup_memcpy_2_5_8_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_2_BB__9_8;
LEGUP_F_legup_memcpy_2_BB__9_10:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_11;
LEGUP_F_legup_memcpy_2_BB__9_11:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_12;
LEGUP_F_legup_memcpy_2_BB__9_12:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_13;
LEGUP_F_legup_memcpy_2_BB__9_13:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_4;
LEGUP_F_legup_memcpy_2_BB__9_8:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_9;
LEGUP_F_legup_memcpy_2_BB__9_9:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_2: %0*/
	/*   %2 = bitcast i8* %d to i16**/
		legup_memcpy_2_0_2 = arg_d;
end
always @(*) begin
	/* legup_memcpy_2: %0*/
	/*   %3 = bitcast i8* %s to i16**/
		legup_memcpy_2_0_3 = arg_s;
end
always @(posedge clk) begin
	/* legup_memcpy_2: %0*/
	/*   %3 = bitcast i8* %s to i16**/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		legup_memcpy_2_0_3_reg <= legup_memcpy_2_0_3;
		if (start == 1'b0 && ^(legup_memcpy_2_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %0*/
	/*   %4 = lshr i32 %n, 1*/
		legup_memcpy_2_0_4 = (arg_n >>> (32'd1 % 32));
end
always @(posedge clk) begin
	/* legup_memcpy_2: %0*/
	/*   %4 = lshr i32 %n, 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		legup_memcpy_2_0_4_reg <= legup_memcpy_2_0_4;
		if (start == 1'b0 && ^(legup_memcpy_2_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
		legup_memcpy_2_5_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_2: %5*/
	/*   %7 = add i32 %6, -1*/
		legup_memcpy_2_5_7 = (legup_memcpy_2_5_6 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_2: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
		legup_memcpy_2_5_8 = (legup_memcpy_2_5_6 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_2: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		legup_memcpy_2_5_8_reg <= legup_memcpy_2_5_8;
		if (start == 1'b0 && ^(legup_memcpy_2_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
		legup_memcpy_2_9_10 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %11 = getelementptr inbounds i16* %10, i32 1*/
		legup_memcpy_2_9_11 = (legup_memcpy_2_9_10 + (2 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
		legup_memcpy_2_9_12 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
		legup_memcpy_2_9_13 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		legup_memcpy_2_9_13_reg <= legup_memcpy_2_9_13;
		if (start == 1'b0 && ^(legup_memcpy_2_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %14 = getelementptr inbounds i16* %13, i32 1*/
		legup_memcpy_2_9_14 = (legup_memcpy_2_9_13 + (2 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_2: %9*/
	/*   %14 = getelementptr inbounds i16* %13, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		legup_memcpy_2_9_14_reg <= legup_memcpy_2_9_14;
		if (start == 1'b0 && ^(legup_memcpy_2_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_9_14_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_2: %15*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__15_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_st_a;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_st_a;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_address_a = legup_memcpy_2_9_13_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_in_a = legup_memcpy_2_0_4_reg;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_in_a = legup_memcpy_2_5_7;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_in_a = legup_memcpy_2_9_11;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_in_a = legup_memcpy_2_9_12;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_dt_a;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_st_a;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_dt_a;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_address_b = legup_memcpy_2_9_10;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_dt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_in_b = legup_memcpy_2_0_2;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_in_b = legup_memcpy_2_0_3_reg;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_in_b = legup_memcpy_2_9_14_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_size_b = 2'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__15_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_3_reg;
reg [31:0] legup_memcpy_4_0_4;
reg [31:0] legup_memcpy_4_0_4_reg;
reg [31:0] legup_memcpy_4_5_6;
reg [31:0] legup_memcpy_4_5_7;
reg  legup_memcpy_4_5_8;
reg  legup_memcpy_4_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_11;
reg [31:0] legup_memcpy_4_9_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_14_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_4_BB__0_1;
LEGUP_F_legup_memcpy_4_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_4_BB__0_2;
LEGUP_F_legup_memcpy_4_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_4_BB__0_3;
LEGUP_F_legup_memcpy_4_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_4;
LEGUP_F_legup_memcpy_4_BB__15_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_4_BB__5_4:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_5;
LEGUP_F_legup_memcpy_4_BB__5_5:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_6;
LEGUP_F_legup_memcpy_4_BB__5_6:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_7;
LEGUP_F_legup_memcpy_4_BB__5_7:
	if ((legup_memcpy_4_5_8_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_4_BB__15_14;
	else if ((legup_memcpy_4_5_8_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_4_BB__9_8;
LEGUP_F_legup_memcpy_4_BB__9_10:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_11;
LEGUP_F_legup_memcpy_4_BB__9_11:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_12;
LEGUP_F_legup_memcpy_4_BB__9_12:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_13;
LEGUP_F_legup_memcpy_4_BB__9_13:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_4;
LEGUP_F_legup_memcpy_4_BB__9_8:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_9;
LEGUP_F_legup_memcpy_4_BB__9_9:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %2 = bitcast i8* %d to i32**/
		legup_memcpy_4_0_2 = arg_d;
end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %3 = bitcast i8* %s to i32**/
		legup_memcpy_4_0_3 = arg_s;
end
always @(posedge clk) begin
	/* legup_memcpy_4: %0*/
	/*   %3 = bitcast i8* %s to i32**/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		legup_memcpy_4_0_3_reg <= legup_memcpy_4_0_3;
		if (start == 1'b0 && ^(legup_memcpy_4_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %4 = lshr i32 %n, 2*/
		legup_memcpy_4_0_4 = (arg_n >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* legup_memcpy_4: %0*/
	/*   %4 = lshr i32 %n, 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		legup_memcpy_4_0_4_reg <= legup_memcpy_4_0_4;
		if (start == 1'b0 && ^(legup_memcpy_4_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
		legup_memcpy_4_5_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %7 = add i32 %6, -1*/
		legup_memcpy_4_5_7 = (legup_memcpy_4_5_6 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
		legup_memcpy_4_5_8 = (legup_memcpy_4_5_6 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_4: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		legup_memcpy_4_5_8_reg <= legup_memcpy_4_5_8;
		if (start == 1'b0 && ^(legup_memcpy_4_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
		legup_memcpy_4_9_10 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %11 = getelementptr inbounds i32* %10, i32 1*/
		legup_memcpy_4_9_11 = (legup_memcpy_4_9_10 + (4 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
		legup_memcpy_4_9_12 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
		legup_memcpy_4_9_13 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		legup_memcpy_4_9_13_reg <= legup_memcpy_4_9_13;
		if (start == 1'b0 && ^(legup_memcpy_4_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %14 = getelementptr inbounds i32* %13, i32 1*/
		legup_memcpy_4_9_14 = (legup_memcpy_4_9_13 + (4 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_4: %9*/
	/*   %14 = getelementptr inbounds i32* %13, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		legup_memcpy_4_9_14_reg <= legup_memcpy_4_9_14;
		if (start == 1'b0 && ^(legup_memcpy_4_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_9_14_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_4: %15*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__15_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_address_a = legup_memcpy_4_9_13_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_in_a = legup_memcpy_4_0_4_reg;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_in_a = legup_memcpy_4_5_7;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_in_a = legup_memcpy_4_9_11;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_in_a = legup_memcpy_4_9_12;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_address_b = legup_memcpy_4_9_10;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_in_b = legup_memcpy_4_0_2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_in_b = legup_memcpy_4_0_3_reg;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_in_b = legup_memcpy_4_9_14_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_8bytes
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_13 = 5'd13;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_15 = 5'd15;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_17 = 5'd17;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_2 = 5'd2;
parameter [4:0] LEGUP_function_call_4 = 5'd4;
parameter [4:0] LEGUP_function_call_6 = 5'd6;
parameter [4:0] LEGUP_function_call_8 = 5'd8;
parameter [4:0] LEGUP_function_call_10 = 5'd10;
parameter [4:0] LEGUP_function_call_12 = 5'd12;
parameter [4:0] LEGUP_function_call_14 = 5'd14;
parameter [4:0] LEGUP_function_call_16 = 5'd16;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [7:0] crc32_8bytes_0_1;
reg [63:0] crc32_8bytes_0_2;
reg [7:0] crc32_8bytes_0_3;
reg [7:0] crc32_8bytes_0_3_reg;
reg [63:0] crc32_8bytes_0_4;
reg [7:0] crc32_8bytes_0_5;
reg [7:0] crc32_8bytes_0_5_reg;
reg [63:0] crc32_8bytes_0_6;
reg [7:0] crc32_8bytes_0_7;
reg [7:0] crc32_8bytes_0_7_reg;
reg [63:0] crc32_8bytes_0_8;
reg [7:0] crc32_8bytes_0_9;
reg [7:0] crc32_8bytes_0_9_reg;
reg [63:0] crc32_8bytes_0_10;
reg [7:0] crc32_8bytes_0_11;
reg [7:0] crc32_8bytes_0_11_reg;
reg [63:0] crc32_8bytes_0_12;
reg [7:0] crc32_8bytes_0_13;
reg [7:0] crc32_8bytes_0_13_reg;
reg [63:0] crc32_8bytes_0_14;
reg [7:0] crc32_8bytes_0_15;
reg [7:0] crc32_8bytes_0_15_reg;
reg  crc32_byte_start;
reg [7:0] crc32_byte_arg_b;
wire  crc32_byte_memory_controller_enable_a;
wire  crc32_byte_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_a;
wire [1:0] crc32_byte_memory_controller_size_a;
wire  crc32_byte_memory_controller_enable_b;
wire  crc32_byte_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_b;
wire [1:0] crc32_byte_memory_controller_size_b;
reg  crc32_byte_finish_final;
reg  crc32_byte_finish_reg;
wire  crc32_byte_finish;


crc32_byte crc32_byte (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_byte_memory_controller_enable_a),
	.memory_controller_address_a (crc32_byte_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_byte_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_byte_memory_controller_in_a),
	.memory_controller_size_a (crc32_byte_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_byte_memory_controller_enable_b),
	.memory_controller_address_b (crc32_byte_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_byte_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_byte_memory_controller_in_b),
	.memory_controller_size_b (crc32_byte_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_byte_start),
	.finish (crc32_byte_finish),
	.arg_b (crc32_byte_arg_b)
);

defparam
	crc32_byte.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_1;
LEGUP_F_crc32_8bytes_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_crc32_8bytes_BB__0_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_crc32_8bytes_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_crc32_8bytes_BB__0_15:
		next_state = LEGUP_function_call_16;
LEGUP_F_crc32_8bytes_BB__0_17:
		next_state = LEGUP_0;
LEGUP_F_crc32_8bytes_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_crc32_8bytes_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_crc32_8bytes_BB__0_7:
		next_state = LEGUP_function_call_8;
LEGUP_F_crc32_8bytes_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_function_call_10:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_11;
LEGUP_function_call_12:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_13;
LEGUP_function_call_14:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_15;
LEGUP_function_call_16:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_17;
LEGUP_function_call_2:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_3;
LEGUP_function_call_4:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_5;
LEGUP_function_call_6:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_7;
LEGUP_function_call_8:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %1 = trunc i64 %val to i8*/
		crc32_8bytes_0_1 = arg_val[7:0];
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %2 = lshr i64 %val, 8*/
		crc32_8bytes_0_2 = (arg_val >>> (64'd8 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
		crc32_8bytes_0_3 = crc32_8bytes_0_2[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_3_reg <= crc32_8bytes_0_3;
		if (start == 1'b0 && ^(crc32_8bytes_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %4 = lshr i64 %val, 16*/
		crc32_8bytes_0_4 = (arg_val >>> (64'd16 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
		crc32_8bytes_0_5 = crc32_8bytes_0_4[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_5_reg <= crc32_8bytes_0_5;
		if (start == 1'b0 && ^(crc32_8bytes_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %6 = lshr i64 %val, 24*/
		crc32_8bytes_0_6 = (arg_val >>> (64'd24 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
		crc32_8bytes_0_7 = crc32_8bytes_0_6[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_7_reg <= crc32_8bytes_0_7;
		if (start == 1'b0 && ^(crc32_8bytes_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %8 = lshr i64 %val, 32*/
		crc32_8bytes_0_8 = (arg_val >>> (64'd32 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
		crc32_8bytes_0_9 = crc32_8bytes_0_8[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_9_reg <= crc32_8bytes_0_9;
		if (start == 1'b0 && ^(crc32_8bytes_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %10 = lshr i64 %val, 40*/
		crc32_8bytes_0_10 = (arg_val >>> (64'd40 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
		crc32_8bytes_0_11 = crc32_8bytes_0_10[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_11_reg <= crc32_8bytes_0_11;
		if (start == 1'b0 && ^(crc32_8bytes_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %12 = lshr i64 %val, 48*/
		crc32_8bytes_0_12 = (arg_val >>> (64'd48 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
		crc32_8bytes_0_13 = crc32_8bytes_0_12[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_13_reg <= crc32_8bytes_0_13;
		if (start == 1'b0 && ^(crc32_8bytes_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %14 = lshr i64 %val, 56*/
		crc32_8bytes_0_14 = (arg_val >>> (64'd56 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
		crc32_8bytes_0_15 = crc32_8bytes_0_14[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_15_reg <= crc32_8bytes_0_15;
		if (start == 1'b0 && ^(crc32_8bytes_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_15_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_1;
		if (start == 1'b0 && ^(crc32_8bytes_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_3_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_5_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_7_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_9_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_11_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_13_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_15_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
end
always @(*) begin
	crc32_byte_finish_final = crc32_byte_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_1))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_3))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_5))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_7))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_9))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_11))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_13))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_15))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_17)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_13
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_14
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_func_13_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_func_13_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_func_13_BB__0_4 = 3'd4;
parameter [2:0] LEGUP_F_func_13_BB__0_5 = 3'd5;
parameter [2:0] LEGUP_F_func_13_BB__0_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_2 = 3'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [7:0] arg_p_14;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_0_2_reg;
reg [31:0] func_13_0_3;
reg [31:0] func_13_0_4;
reg [15:0] func_13_0_5;
reg [15:0] func_13_0_5_reg;
reg  legup_memcpy_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_s;
reg [31:0] legup_memcpy_4_arg_n;
wire  legup_memcpy_4_memory_controller_enable_a;
wire  legup_memcpy_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_a;
wire [1:0] legup_memcpy_4_memory_controller_size_a;
wire  legup_memcpy_4_memory_controller_enable_b;
wire  legup_memcpy_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_b;
wire [1:0] legup_memcpy_4_memory_controller_size_b;
reg  legup_memcpy_4_finish_final;
reg  legup_memcpy_4_finish_reg;
wire  legup_memcpy_4_finish;


legup_memcpy_4 legup_memcpy_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_4_start),
	.finish (legup_memcpy_4_finish),
	.arg_d (legup_memcpy_4_arg_d),
	.arg_s (legup_memcpy_4_arg_s),
	.arg_n (legup_memcpy_4_arg_n)
);

defparam
	legup_memcpy_4.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_13_BB__0_1;
LEGUP_F_func_13_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_func_13_BB__0_3:
		next_state = LEGUP_F_func_13_BB__0_4;
LEGUP_F_func_13_BB__0_4:
		next_state = LEGUP_F_func_13_BB__0_5;
LEGUP_F_func_13_BB__0_5:
		next_state = LEGUP_F_func_13_BB__0_6;
LEGUP_F_func_13_BB__0_6:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((legup_memcpy_4_finish_final == 1'd1))
		next_state = LEGUP_F_func_13_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_13: %0*/
	/*   %1 = bitcast [1 x [1 x [9 x i32]]]* %l_52 to i8**/
if (reset) begin func_13_0_1 = 0; end
		func_13_0_1 = `TAG_func_13_0_l_52_a;
end
always @(*) begin
	/* func_13: %0*/
	/*   %2 = getelementptr inbounds [1 x [1 x [9 x i32]]]* %l_52, i32 0, i32 0, i32 0, i32 8*/
if (reset) begin func_13_0_2 = 0; end
		func_13_0_2 = (`TAG_func_13_0_l_52_a + (4 * 32'd8));
end
always @(posedge clk) begin
	/* func_13: %0*/
	/*   %2 = getelementptr inbounds [1 x [1 x [9 x i32]]]* %l_52, i32 0, i32 0, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		func_13_0_2_reg <= func_13_0_2;
		if (start == 1'b0 && ^(func_13_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_13: %0*/
	/*   %3 = load i32* %2, align 4*/
		func_13_0_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_13: %0*/
	/*   %4 = add i32 %3, -1*/
		func_13_0_4 = (func_13_0_3 + -32'd1);
end
always @(*) begin
	/* func_13: %0*/
	/*   %5 = trunc i32 %4 to i16*/
		func_13_0_5 = func_13_0_4[15:0];
end
always @(posedge clk) begin
	/* func_13: %0*/
	/*   %5 = trunc i32 %4 to i16*/
	if ((cur_state == LEGUP_F_func_13_BB__0_5)) begin
		func_13_0_5_reg <= func_13_0_5;
		if (start == 1'b0 && ^(func_13_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_0_5_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		legup_memcpy_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memcpy_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		legup_memcpy_4_arg_d <= func_13_0_1;
		if (start == 1'b0 && ^(func_13_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		legup_memcpy_4_arg_s <= `TAG_g_func_13l_52_a;
		if (start == 1'b0 && ^(`TAG_g_func_13l_52_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		legup_memcpy_4_arg_n <= 32'd36;
		if (start == 1'b0 && ^(32'd36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_4_finish_final = legup_memcpy_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_13_BB__0_1))) begin
		legup_memcpy_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
	if (legup_memcpy_4_finish) begin
		legup_memcpy_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_13: %0*/
	/*   ret i16 %5*/
	if ((cur_state == LEGUP_F_func_13_BB__0_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_13: %0*/
	/*   %3 = load i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_13: %0*/
	/*   store i32 %4, i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_13: %0*/
	/*   %3 = load i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_3)) begin
		memory_controller_address_a = func_13_0_2_reg;
	end
	/* func_13: %0*/
	/*   store i32 %4, i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_5)) begin
		memory_controller_address_a = func_13_0_2_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_13: %0*/
	/*   %3 = load i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_13: %0*/
	/*   store i32 %4, i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_13: %0*/
	/*   store i32 %4, i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_5)) begin
		memory_controller_in_a = func_13_0_4;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_13: %0*/
	/*   %3 = load i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_13: %0*/
	/*   store i32 %4, i32* %2, align 4*/
	if ((cur_state == LEGUP_F_func_13_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	/* func_13: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([1 x [1 x [9 x i32]]]* @func_13.l_52 to i8*), i32 36)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_13: %0*/
	/*   ret i16 %5*/
	if ((cur_state == LEGUP_F_func_13_BB__0_6)) begin
		return_val <= func_13_0_5_reg;
		if (start == 1'b0 && ^(func_13_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_15
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_16,
	arg_p_17,
	arg_p_18,
	arg_p_19
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_func_15_BB__1_1 = 5'd1;
parameter [4:0] LEGUP_F_func_15_BB__1_2 = 5'd2;
parameter [4:0] LEGUP_F_func_15_BB__3_3 = 5'd3;
parameter [4:0] LEGUP_F_func_15_BB__4_4 = 5'd4;
parameter [4:0] LEGUP_F_func_15_BB__4_5 = 5'd5;
parameter [4:0] LEGUP_F_func_15_BB__4_6 = 5'd6;
parameter [4:0] LEGUP_F_func_15_BB__4_8 = 5'd8;
parameter [4:0] LEGUP_F_func_15_BB__9_9 = 5'd9;
parameter [4:0] LEGUP_F_func_15_BB__9_10 = 5'd10;
parameter [4:0] LEGUP_F_func_15_BB__9_11 = 5'd11;
parameter [4:0] LEGUP_F_func_15_BB__9_12 = 5'd12;
parameter [4:0] LEGUP_F_func_15_BB__12_13 = 5'd13;
parameter [4:0] LEGUP_F_func_15_BB__14_14 = 5'd14;
parameter [4:0] LEGUP_F_func_15_BB__15_15 = 5'd15;
parameter [4:0] LEGUP_F_func_15_BB__16_16 = 5'd16;
parameter [4:0] LEGUP_F_func_15_BB__16_17 = 5'd17;
parameter [4:0] LEGUP_F_func_15_BB__17_18 = 5'd18;
parameter [4:0] LEGUP_F_func_15_BB__19_19 = 5'd19;
parameter [4:0] LEGUP_F_func_15_BB__20_20 = 5'd20;
parameter [4:0] LEGUP_F_func_15_BB__22_21 = 5'd21;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_7 = 5'd7;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [15:0] arg_p_16;
input [7:0] arg_p_17;
input [15:0] arg_p_18;
input [7:0] arg_p_19;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [15:0] func_15_1_storemerge;
reg [15:0] func_15_1_storemerge_reg;
reg  func_15_1_2;
reg  func_15_1_2_reg;
reg [15:0] func_15_4_5;
reg [31:0] func_15_4_6;
reg [31:0] func_15_4_7;
reg [31:0] func_15_4_7_reg;
reg [15:0] func_15_4_8;
reg [31:0] func_15_9_10;
reg [31:0] func_15_9_11;
reg [31:0] func_15_12_13;
reg [31:0] func_15_12_13_reg;
reg  func_15_12_exitcond1;
reg [31:0] func_15_15_indvar;
reg [31:0] func_15_15_indvar_reg;
reg [31:0] func_15_15_0;
reg [31:0] func_15_15_0_reg;
reg  func_15_15_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_15_16_scevgep2;
reg [31:0] func_15_17_18;
reg [31:0] func_15_17_sext;
reg [31:0] func_15_17_phitmp;
reg [31:0] func_15_17_indvarnext;
reg [31:0] func_15_20_21;
reg [31:0] func_15_22_23;
reg  safe_add_func_int32_t_s_s_start;
reg [31:0] safe_add_func_int32_t_s_s_arg_si1;
reg [31:0] safe_add_func_int32_t_s_s_arg_si2;
wire  safe_add_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_add_func_int32_t_s_s_memory_controller_size_a;
wire  safe_add_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_add_func_int32_t_s_s_memory_controller_size_b;
reg  safe_add_func_int32_t_s_s_finish_final;
reg  safe_add_func_int32_t_s_s_finish_reg;
wire  safe_add_func_int32_t_s_s_finish;
wire [31:0] safe_add_func_int32_t_s_s_return_val;
reg [31:0] safe_add_func_int32_t_s_s_return_val_reg;


safe_add_func_int32_t_s_s safe_add_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_int32_t_s_s_start),
	.finish (safe_add_func_int32_t_s_s_finish),
	.return_val (safe_add_func_int32_t_s_s_return_val),
	.arg_si1 (safe_add_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_add_func_int32_t_s_s_arg_si2)
);

defparam
	safe_add_func_int32_t_s_s.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_15_BB__1_1;
LEGUP_F_func_15_BB__12_13:
	if ((func_15_12_exitcond1 == 1'd1))
		next_state = LEGUP_F_func_15_BB__22_21;
	else if ((func_15_12_exitcond1 == 1'd0))
		next_state = LEGUP_F_func_15_BB__14_14;
LEGUP_F_func_15_BB__14_14:
		next_state = LEGUP_F_func_15_BB__15_15;
LEGUP_F_func_15_BB__15_15:
	if ((func_15_15_exitcond == 1'd1))
		next_state = LEGUP_F_func_15_BB__19_19;
	else if ((func_15_15_exitcond == 1'd0))
		next_state = LEGUP_F_func_15_BB__16_16;
LEGUP_F_func_15_BB__16_16:
		next_state = LEGUP_F_func_15_BB__16_17;
LEGUP_F_func_15_BB__16_17:
		next_state = LEGUP_F_func_15_BB__17_18;
LEGUP_F_func_15_BB__17_18:
		next_state = LEGUP_F_func_15_BB__15_15;
LEGUP_F_func_15_BB__19_19:
		next_state = LEGUP_F_func_15_BB__20_20;
LEGUP_F_func_15_BB__1_1:
		next_state = LEGUP_F_func_15_BB__1_2;
LEGUP_F_func_15_BB__1_2:
	if ((func_15_1_2_reg == 1'd1))
		next_state = LEGUP_F_func_15_BB__3_3;
	else if ((func_15_1_2_reg == 1'd0))
		next_state = LEGUP_F_func_15_BB__9_9;
LEGUP_F_func_15_BB__20_20:
		next_state = LEGUP_F_func_15_BB__12_13;
LEGUP_F_func_15_BB__22_21:
		next_state = LEGUP_0;
LEGUP_F_func_15_BB__3_3:
		next_state = LEGUP_F_func_15_BB__4_4;
LEGUP_F_func_15_BB__4_4:
		next_state = LEGUP_F_func_15_BB__4_5;
LEGUP_F_func_15_BB__4_5:
		next_state = LEGUP_F_func_15_BB__4_6;
LEGUP_F_func_15_BB__4_6:
		next_state = LEGUP_function_call_7;
LEGUP_F_func_15_BB__4_8:
		next_state = LEGUP_F_func_15_BB__1_1;
LEGUP_F_func_15_BB__9_10:
		next_state = LEGUP_F_func_15_BB__9_11;
LEGUP_F_func_15_BB__9_11:
		next_state = LEGUP_F_func_15_BB__9_12;
LEGUP_F_func_15_BB__9_12:
		next_state = LEGUP_F_func_15_BB__12_13;
LEGUP_F_func_15_BB__9_9:
		next_state = LEGUP_F_func_15_BB__9_10;
LEGUP_function_call_7:
	if ((safe_add_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_15_BB__4_8;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_15: %1*/
	/*   %storemerge = phi i16 [ -1, %0 ], [ %8, %4 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		func_15_1_storemerge = -16'd1;
	end
	/* func_15: %1*/
	/*   %storemerge = phi i16 [ -1, %0 ], [ %8, %4 ]*/
	else /* if (((cur_state == LEGUP_F_func_15_BB__4_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_15_1_storemerge = func_15_4_8;
	end
end
always @(posedge clk) begin
	/* func_15: %1*/
	/*   %storemerge = phi i16 [ -1, %0 ], [ %8, %4 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		func_15_1_storemerge_reg <= func_15_1_storemerge;
		if (start == 1'b0 && ^(func_15_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_1_storemerge_reg"); $finish; end
	end
	/* func_15: %1*/
	/*   %storemerge = phi i16 [ -1, %0 ], [ %8, %4 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__4_8) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_1_storemerge_reg <= func_15_1_storemerge;
		if (start == 1'b0 && ^(func_15_1_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_1_storemerge_reg"); $finish; end
	end
end
always @(*) begin
	/* func_15: %1*/
	/*   %2 = icmp ugt i16 %storemerge, 23*/
		func_15_1_2 = (func_15_1_storemerge_reg > 16'd23);
end
always @(posedge clk) begin
	/* func_15: %1*/
	/*   %2 = icmp ugt i16 %storemerge, 23*/
	if ((cur_state == LEGUP_F_func_15_BB__1_1)) begin
		func_15_1_2_reg <= func_15_1_2;
		if (start == 1'b0 && ^(func_15_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_15: %4*/
	/*   %5 = load i16* @g_8, align 2*/
		func_15_4_5 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_15: %4*/
	/*   %6 = zext i16 %5 to i32*/
		func_15_4_6 = func_15_4_5;
end
always @(*) begin
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
		func_15_4_7 = safe_add_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		func_15_4_7_reg <= func_15_4_7;
		if (start == 1'b0 && ^(func_15_4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_4_7_reg"); $finish; end
	end
end
always @(*) begin
	/* func_15: %4*/
	/*   %8 = trunc i32 %7 to i16*/
		func_15_4_8 = func_15_4_7_reg[15:0];
end
always @(*) begin
	/* func_15: %9*/
	/*   %10 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
		func_15_9_10 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_15: %9*/
	/*   %11 = add i32 %10, 1*/
		func_15_9_11 = (func_15_9_10 + 32'd1);
end
always @(*) begin
	/* func_15: %12*/
	/*   %13 = phi i32 [ 0, %9 ], [ %21, %20 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__9_12) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_12_13 = 32'd0;
	end
	/* func_15: %12*/
	/*   %13 = phi i32 [ 0, %9 ], [ %21, %20 ]*/
	else /* if (((cur_state == LEGUP_F_func_15_BB__20_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_15_12_13 = func_15_20_21;
	end
end
always @(posedge clk) begin
	/* func_15: %12*/
	/*   %13 = phi i32 [ 0, %9 ], [ %21, %20 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__9_12) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_12_13_reg <= func_15_12_13;
		if (start == 1'b0 && ^(func_15_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_12_13_reg"); $finish; end
	end
	/* func_15: %12*/
	/*   %13 = phi i32 [ 0, %9 ], [ %21, %20 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__20_20) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_12_13_reg <= func_15_12_13;
		if (start == 1'b0 && ^(func_15_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* func_15: %12*/
	/*   %exitcond1 = icmp eq i32 %13, 5*/
		func_15_12_exitcond1 = (func_15_12_13_reg == 32'd5);
end
always @(*) begin
	/* func_15: %15*/
	/*   %indvar = phi i32 [ %indvar.next, %17 ], [ 0, %14 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__14_14) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_15_indvar = 32'd0;
	end
	/* func_15: %15*/
	/*   %indvar = phi i32 [ %indvar.next, %17 ], [ 0, %14 ]*/
	else /* if (((cur_state == LEGUP_F_func_15_BB__17_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_15_15_indvar = func_15_17_indvarnext;
	end
end
always @(posedge clk) begin
	/* func_15: %15*/
	/*   %indvar = phi i32 [ %indvar.next, %17 ], [ 0, %14 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__14_14) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_15_indvar_reg <= func_15_15_indvar;
		if (start == 1'b0 && ^(func_15_15_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_15_indvar_reg"); $finish; end
	end
	/* func_15: %15*/
	/*   %indvar = phi i32 [ %indvar.next, %17 ], [ 0, %14 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__17_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_15_indvar_reg <= func_15_15_indvar;
		if (start == 1'b0 && ^(func_15_15_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_15_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* func_15: %15*/
	/*   %.0 = phi i32 [ %phitmp, %17 ], [ 0, %14 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__14_14) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_15_0 = 32'd0;
	end
	/* func_15: %15*/
	/*   %.0 = phi i32 [ %phitmp, %17 ], [ 0, %14 ]*/
	else /* if (((cur_state == LEGUP_F_func_15_BB__17_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_15_15_0 = func_15_17_phitmp;
	end
end
always @(posedge clk) begin
	/* func_15: %15*/
	/*   %.0 = phi i32 [ %phitmp, %17 ], [ 0, %14 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__14_14) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_15_0_reg <= func_15_15_0;
		if (start == 1'b0 && ^(func_15_15_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_15_0_reg"); $finish; end
	end
	/* func_15: %15*/
	/*   %.0 = phi i32 [ %phitmp, %17 ], [ 0, %14 ]*/
	if (((cur_state == LEGUP_F_func_15_BB__17_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_15_15_0_reg <= func_15_15_0;
		if (start == 1'b0 && ^(func_15_15_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_15_0_reg"); $finish; end
	end
end
always @(*) begin
	/* func_15: %15*/
	/*   %exitcond = icmp eq i32 %indvar, 10*/
		func_15_15_exitcond = (func_15_15_indvar_reg == 32'd10);
end
always @(*) begin
	/* func_15: %16*/
	/*   %scevgep2 = getelementptr [5 x [10 x i32]]* @g_7, i32 0, i32 %13, i32 %.0*/
		func_15_16_scevgep2 = (`TAG_g_g_7_a + ((40 * func_15_12_13_reg) + (4 * func_15_15_0_reg)));
end
always @(*) begin
	/* func_15: %17*/
	/*   %18 = shl nsw i32 %.0, 16*/
		func_15_17_18 = (func_15_15_0_reg <<< (32'd16 % 32));
end
always @(*) begin
	/* func_15: %17*/
	/*   %sext = add i32 %18, 65536*/
		func_15_17_sext = (func_15_17_18 + 32'd65536);
end
always @(*) begin
	/* func_15: %17*/
	/*   %phitmp = ashr exact i32 %sext, 16*/
		func_15_17_phitmp = ($signed(func_15_17_sext) >>> 32'd16);
end
always @(*) begin
	/* func_15: %17*/
	/*   %indvar.next = add i32 %indvar, 1*/
		func_15_17_indvarnext = (func_15_15_indvar_reg + 32'd1);
end
always @(*) begin
	/* func_15: %20*/
	/*   %21 = add i32 %13, 1*/
		func_15_20_21 = (func_15_12_13_reg + 32'd1);
end
always @(*) begin
	/* func_15: %22*/
	/*   %23 = sext i16 %p_16 to i32*/
		func_15_22_23 = $signed(arg_p_16);
end
always @(posedge clk) begin
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_F_func_15_BB__4_6)) begin
		safe_add_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_7)) begin
		safe_add_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_F_func_15_BB__4_6)) begin
		safe_add_func_int32_t_s_s_arg_si1 <= func_15_4_6;
		if (start == 1'b0 && ^(func_15_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_F_func_15_BB__4_6)) begin
		safe_add_func_int32_t_s_s_arg_si2 <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_int32_t_s_s_finish_final = safe_add_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_15_BB__4_6))) begin
		safe_add_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_add_func_int32_t_s_s_finish) begin
		safe_add_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_15_BB__4_6))) begin
		safe_add_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_add_func_int32_t_s_s_finish) begin
		safe_add_func_int32_t_s_s_return_val_reg <= safe_add_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_15: %22*/
	/*   ret i32 %23*/
	if ((cur_state == LEGUP_F_func_15_BB__22_21)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_enable_a = safe_add_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_enable_a = safe_add_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_15: %1*/
	/*   store i16 %storemerge, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__1_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_15: %4*/
	/*   %5 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__4_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_15: %9*/
	/*   %10 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_15: %9*/
	/*   store volatile i32 %11, i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_15: %16*/
	/*   store i32 543781278, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__16_16)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_15: %1*/
	/*   store i16 %storemerge, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__1_1)) begin
		memory_controller_address_a = `TAG_g_g_8_a;
	end
	/* func_15: %4*/
	/*   %5 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__4_4)) begin
		memory_controller_address_a = `TAG_g_g_8_a;
	end
	/* func_15: %9*/
	/*   %10 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_9)) begin
		memory_controller_address_a = (`TAG_g_g_49_a + (4 * 32'd3));
	end
	/* func_15: %9*/
	/*   store volatile i32 %11, i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_11)) begin
		memory_controller_address_a = (`TAG_g_g_49_a + (4 * 32'd3));
	end
	/* func_15: %16*/
	/*   store i32 543781278, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__16_16)) begin
		memory_controller_address_a = func_15_16_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_write_enable_a = safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_write_enable_a = safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_15: %1*/
	/*   store i16 %storemerge, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__1_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_15: %4*/
	/*   %5 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__4_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_15: %9*/
	/*   %10 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_15: %9*/
	/*   store volatile i32 %11, i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_15: %16*/
	/*   store i32 543781278, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__16_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_15: %1*/
	/*   store i16 %storemerge, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__1_1)) begin
		memory_controller_in_a = func_15_1_storemerge_reg;
	end
	/* func_15: %9*/
	/*   store volatile i32 %11, i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_11)) begin
		memory_controller_in_a = func_15_9_11;
	end
	/* func_15: %16*/
	/*   store i32 543781278, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__16_16)) begin
		memory_controller_in_a = 32'd543781278;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_size_a[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_size_a[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_15: %1*/
	/*   store i16 %storemerge, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__1_1)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_15: %4*/
	/*   %5 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_15_BB__4_4)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_15: %9*/
	/*   %10 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_15: %9*/
	/*   store volatile i32 %11, i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__9_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_15: %16*/
	/*   store i32 543781278, i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_func_15_BB__16_16)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_enable_b = safe_add_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_enable_b = safe_add_func_int32_t_s_s_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_write_enable_b = safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_write_enable_b = safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_size_b[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_15: %4*/
	/*   %7 = call i32 @safe_add_func_int32_t_s_s(i32 %6, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_7)) begin
		memory_controller_size_b[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_15: %22*/
	/*   ret i32 %23*/
	if ((cur_state == LEGUP_F_func_15_BB__22_21)) begin
		return_val <= func_15_22_23;
		if (start == 1'b0 && ^(func_15_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module transparent_crc
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val,
	arg_vname,
	arg_flag
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_4 = 3'd4;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_5 = 3'd5;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_6 = 3'd6;
parameter [2:0] LEGUP_F_transparent_crc_BB__6_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_2 = 3'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_vname;
input [31:0] arg_flag;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  transparent_crc_0_1;
reg  transparent_crc_0_1_reg;
reg [31:0] transparent_crc_2_3;
reg [31:0] transparent_crc_2_4;
reg  crc32_8bytes_start;
reg [63:0] crc32_8bytes_arg_val;
wire  crc32_8bytes_memory_controller_enable_a;
wire  crc32_8bytes_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_a;
wire [1:0] crc32_8bytes_memory_controller_size_a;
wire  crc32_8bytes_memory_controller_enable_b;
wire  crc32_8bytes_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_b;
wire [1:0] crc32_8bytes_memory_controller_size_b;
reg  crc32_8bytes_finish_final;
reg  crc32_8bytes_finish_reg;
wire  crc32_8bytes_finish;


crc32_8bytes crc32_8bytes (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_8bytes_memory_controller_enable_a),
	.memory_controller_address_a (crc32_8bytes_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_8bytes_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_8bytes_memory_controller_in_a),
	.memory_controller_size_a (crc32_8bytes_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_8bytes_memory_controller_enable_b),
	.memory_controller_address_b (crc32_8bytes_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_8bytes_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_8bytes_memory_controller_in_b),
	.memory_controller_size_b (crc32_8bytes_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_8bytes_start),
	.finish (crc32_8bytes_finish),
	.arg_val (crc32_8bytes_arg_val)
);

defparam
	crc32_8bytes.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* transparent_crc: %2*/
	/*   %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str12, i32 0, i32 0), i8* %vname, i32 %4) #4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_6)) begin
		$write("...checksum after hashing %s : %lX\n", $signed(arg_vname), $signed(transparent_crc_2_4));
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_vname) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(transparent_crc_2_4) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_1;
LEGUP_F_transparent_crc_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_transparent_crc_BB__0_3:
	if ((transparent_crc_0_1_reg == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__6_7;
	else if ((transparent_crc_0_1_reg == 1'd0))
		next_state = LEGUP_F_transparent_crc_BB__2_4;
LEGUP_F_transparent_crc_BB__2_4:
		next_state = LEGUP_F_transparent_crc_BB__2_5;
LEGUP_F_transparent_crc_BB__2_5:
		next_state = LEGUP_F_transparent_crc_BB__2_6;
LEGUP_F_transparent_crc_BB__2_6:
		next_state = LEGUP_F_transparent_crc_BB__6_7;
LEGUP_F_transparent_crc_BB__6_7:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((crc32_8bytes_finish_final == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
		transparent_crc_0_1 = (arg_flag == 32'd0);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		transparent_crc_0_1_reg <= transparent_crc_0_1;
		if (start == 1'b0 && ^(transparent_crc_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
		transparent_crc_2_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %4 = xor i32 %3, -1*/
		transparent_crc_2_4 = (transparent_crc_2_3 ^ -32'd1);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_8bytes_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_arg_val <= arg_val;
		if (start == 1'b0 && ^(arg_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_arg_val"); $finish; end
	end
end
always @(*) begin
	crc32_8bytes_finish_final = crc32_8bytes_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_transparent_crc_BB__0_1))) begin
		crc32_8bytes_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
	if (crc32_8bytes_finish) begin
		crc32_8bytes_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* transparent_crc: %6*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__6_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_3
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_4,
	arg_p_5
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_func_3_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_func_3_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_func_3_BB__0_5 = 7'd5;
parameter [6:0] LEGUP_F_func_3_BB__3_6 = 7'd6;
parameter [6:0] LEGUP_F_func_3_BB__5_7 = 7'd7;
parameter [6:0] LEGUP_F_func_3_BB__5_9 = 7'd9;
parameter [6:0] LEGUP_F_func_3_BB__5_10 = 7'd10;
parameter [6:0] LEGUP_F_func_3_BB__8_11 = 7'd11;
parameter [6:0] LEGUP_F_func_3_BB__8_12 = 7'd12;
parameter [6:0] LEGUP_F_func_3_BB__10_13 = 7'd13;
parameter [6:0] LEGUP_F_func_3_BB__11_14 = 7'd14;
parameter [6:0] LEGUP_F_func_3_BB__11_15 = 7'd15;
parameter [6:0] LEGUP_F_func_3_BB__11_16 = 7'd16;
parameter [6:0] LEGUP_F_func_3_BB__11_18 = 7'd18;
parameter [6:0] LEGUP_F_func_3_BB__11_19 = 7'd19;
parameter [6:0] LEGUP_F_func_3_BB__11_20 = 7'd20;
parameter [6:0] LEGUP_F_func_3_BB__11_21 = 7'd21;
parameter [6:0] LEGUP_F_func_3_BB__11_23 = 7'd23;
parameter [6:0] LEGUP_F_func_3_BB__11_24 = 7'd24;
parameter [6:0] LEGUP_F_func_3_BB__11_25 = 7'd25;
parameter [6:0] LEGUP_F_func_3_BB__11_27 = 7'd27;
parameter [6:0] LEGUP_F_func_3_BB__28_28 = 7'd28;
parameter [6:0] LEGUP_F_func_3_BB__28_29 = 7'd29;
parameter [6:0] LEGUP_F_func_3_BB__28_30 = 7'd30;
parameter [6:0] LEGUP_F_func_3_BB__32_31 = 7'd31;
parameter [6:0] LEGUP_F_func_3_BB__32_33 = 7'd33;
parameter [6:0] LEGUP_F_func_3_BB__32_35 = 7'd35;
parameter [6:0] LEGUP_F_func_3_BB__32_36 = 7'd36;
parameter [6:0] LEGUP_F_func_3_BB__32_37 = 7'd37;
parameter [6:0] LEGUP_F_func_3_BB__32_38 = 7'd38;
parameter [6:0] LEGUP_F_func_3_BB__32_40 = 7'd40;
parameter [6:0] LEGUP_F_func_3_BB__32_41 = 7'd41;
parameter [6:0] LEGUP_F_func_3_BB__32_42 = 7'd42;
parameter [6:0] LEGUP_F_func_3_BB__32_44 = 7'd44;
parameter [6:0] LEGUP_F_func_3_BB__32_46 = 7'd46;
parameter [6:0] LEGUP_F_func_3_BB__32_48 = 7'd48;
parameter [6:0] LEGUP_F_func_3_BB__32_50 = 7'd50;
parameter [6:0] LEGUP_F_func_3_BB__32_51 = 7'd51;
parameter [6:0] LEGUP_F_func_3_BB__32_52 = 7'd52;
parameter [6:0] LEGUP_F_func_3_BB__32_54 = 7'd54;
parameter [6:0] LEGUP_F_func_3_BB__62_55 = 7'd55;
parameter [6:0] LEGUP_F_func_3_BB__62_56 = 7'd56;
parameter [6:0] LEGUP_F_func_3_BB__62_57 = 7'd57;
parameter [6:0] LEGUP_F_func_3_BB__62_59 = 7'd59;
parameter [6:0] LEGUP_F_func_3_BB__62_61 = 7'd61;
parameter [6:0] LEGUP_F_func_3_BB__62_62 = 7'd62;
parameter [6:0] LEGUP_F_func_3_BB__62_63 = 7'd63;
parameter [6:0] LEGUP_F_func_3_BB__62_64 = 7'd64;
parameter [6:0] LEGUP_F_func_3_BB__69_65 = 7'd65;
parameter [6:0] LEGUP_F_func_3_BB__69_66 = 7'd66;
parameter [6:0] LEGUP_F_func_3_BB__69_67 = 7'd67;
parameter [6:0] LEGUP_F_func_3_BB__72_68 = 7'd68;
parameter [6:0] LEGUP_F_func_3_BB__73_69 = 7'd69;
parameter [6:0] LEGUP_F_func_3_BB__74_70 = 7'd70;
parameter [6:0] LEGUP_F_func_3_BB__74_71 = 7'd71;
parameter [6:0] LEGUP_F_func_3_BB__74_72 = 7'd72;
parameter [6:0] LEGUP_F_func_3_BB__79_73 = 7'd73;
parameter [6:0] LEGUP_F_func_3_BB__79_74 = 7'd74;
parameter [6:0] LEGUP_F_func_3_BB__79_75 = 7'd75;
parameter [6:0] LEGUP_F_func_3_BB__82_76 = 7'd76;
parameter [6:0] LEGUP_F_func_3_BB__82_77 = 7'd77;
parameter [6:0] LEGUP_F_func_3_BB__82_78 = 7'd78;
parameter [6:0] LEGUP_F_func_3_BB__85_79 = 7'd79;
parameter [6:0] LEGUP_F_func_3_BB__88_80 = 7'd80;
parameter [6:0] LEGUP_F_func_3_BB__89_81 = 7'd81;
parameter [6:0] LEGUP_F_func_3_BB__89_82 = 7'd82;
parameter [6:0] LEGUP_F_func_3_BB__89_84 = 7'd84;
parameter [6:0] LEGUP_F_func_3_BB__89_85 = 7'd85;
parameter [6:0] LEGUP_F_func_3_BB__89_86 = 7'd86;
parameter [6:0] LEGUP_F_func_3_BB__97_87 = 7'd87;
parameter [6:0] LEGUP_F_func_3_BB__98_88 = 7'd88;
parameter [6:0] LEGUP_F_func_3_BB__98_90 = 7'd90;
parameter [6:0] LEGUP_F_func_3_BB__98_92 = 7'd92;
parameter [6:0] LEGUP_F_func_3_BB__98_93 = 7'd93;
parameter [6:0] LEGUP_F_func_3_BB__98_94 = 7'd94;
parameter [6:0] LEGUP_F_func_3_BB__98_96 = 7'd96;
parameter [6:0] LEGUP_F_func_3_BB__108_97 = 7'd97;
parameter [6:0] LEGUP_F_func_3_BB__108_98 = 7'd98;
parameter [6:0] LEGUP_F_func_3_BB__108_99 = 7'd99;
parameter [6:0] LEGUP_F_func_3_BB__115_100 = 7'd100;
parameter [6:0] LEGUP_F_func_3_BB__116_101 = 7'd101;
parameter [6:0] LEGUP_F_func_3_BB__117_102 = 7'd102;
parameter [6:0] LEGUP_F_func_3_BB__117_103 = 7'd103;
parameter [6:0] LEGUP_F_func_3_BB__117_104 = 7'd104;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_2 = 7'd2;
parameter [6:0] LEGUP_function_call_4 = 7'd4;
parameter [6:0] LEGUP_function_call_8 = 7'd8;
parameter [6:0] LEGUP_function_call_17 = 7'd17;
parameter [6:0] LEGUP_function_call_22 = 7'd22;
parameter [6:0] LEGUP_function_call_26 = 7'd26;
parameter [6:0] LEGUP_function_call_32 = 7'd32;
parameter [6:0] LEGUP_function_call_34 = 7'd34;
parameter [6:0] LEGUP_function_call_39 = 7'd39;
parameter [6:0] LEGUP_function_call_43 = 7'd43;
parameter [6:0] LEGUP_function_call_45 = 7'd45;
parameter [6:0] LEGUP_function_call_47 = 7'd47;
parameter [6:0] LEGUP_function_call_49 = 7'd49;
parameter [6:0] LEGUP_function_call_53 = 7'd53;
parameter [6:0] LEGUP_function_call_58 = 7'd58;
parameter [6:0] LEGUP_function_call_60 = 7'd60;
parameter [6:0] LEGUP_function_call_83 = 7'd83;
parameter [6:0] LEGUP_function_call_89 = 7'd89;
parameter [6:0] LEGUP_function_call_91 = 7'd91;
parameter [6:0] LEGUP_function_call_95 = 7'd95;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [31:0] arg_p_4;
input [7:0] arg_p_5;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_0_2_reg;
reg [31:0] func_3_3_indvar1;
reg [31:0] func_3_3_indvar1_reg;
reg [31:0] func_3_3_l_420;
reg [31:0] func_3_3_l_420_reg;
reg [7:0] func_3_3_01;
reg [7:0] func_3_3_01_reg;
reg [31:0] func_3_3_0;
reg [31:0] func_3_3_0_reg;
reg [15:0] func_3_3_4;
reg [15:0] func_3_3_4_reg;
reg  func_3_3_exitcond3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_5_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_5_7_reg;
reg [31:0] func_3_8_storemerge;
reg [31:0] func_3_8_storemerge_reg;
reg  func_3_8_9;
reg  func_3_8_9_reg;
reg [15:0] func_3_11_12;
reg [15:0] func_3_11_12_reg;
reg [31:0] func_3_11_13;
reg [7:0] func_3_11_14;
reg [7:0] func_3_11_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_11_15;
reg [31:0] func_3_11_16;
reg [15:0] func_3_11_17;
reg [15:0] func_3_11_18;
reg [15:0] func_3_11_18_reg;
reg [7:0] func_3_11_19;
reg [7:0] func_3_11_20;
reg [7:0] func_3_11_21;
reg [7:0] func_3_11_21_reg;
reg [7:0] func_3_11_22;
reg [7:0] func_3_11_22_reg;
reg [7:0] func_3_11_23;
reg [7:0] func_3_11_23_reg;
reg [31:0] func_3_11_24;
reg [7:0] func_3_11_25;
reg [7:0] func_3_11_26;
reg [7:0] func_3_11_26_reg;
reg  func_3_11_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_28_29;
reg [31:0] func_3_28_30;
reg  func_3_28_31;
reg  func_3_32_33;
reg  func_3_32_33_reg;
reg [7:0] func_3_32_34;
reg [15:0] func_3_32_36;
reg [15:0] func_3_32_36_reg;
reg [15:0] func_3_32_37;
reg  func_3_32_38;
reg [31:0] func_3_32_39;
reg [31:0] func_3_32_40;
reg [31:0] func_3_32_40_reg;
reg  func_3_32_41;
reg [7:0] func_3_32_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_32_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_32_43_reg;
reg [7:0] func_3_32_44;
reg [7:0] func_3_32_45;
reg [7:0] func_3_32_46;
reg [7:0] func_3_32_47;
reg [7:0] func_3_32_47_reg;
reg [7:0] func_3_32_48;
reg [7:0] func_3_32_48_reg;
reg [15:0] func_3_32_49;
reg [15:0] func_3_32_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_32_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_32_50_reg;
reg [31:0] func_3_32_51;
reg [15:0] func_3_32_52;
reg [15:0] func_3_32_52_reg;
reg [31:0] func_3_32_53;
reg [15:0] func_3_32_54;
reg [15:0] func_3_32_54_reg;
reg [31:0] func_3_32_55;
reg [31:0] func_3_32_56;
reg [31:0] func_3_32_56_reg;
reg [15:0] func_3_32_57;
reg [15:0] func_3_32_58;
reg [15:0] func_3_32_58_reg;
reg [31:0] func_3_32_59;
reg [7:0] func_3_32_60;
reg [7:0] func_3_62_63;
reg [15:0] func_3_62_64;
reg [15:0] func_3_62_64_reg;
reg [15:0] func_3_62_65;
reg [15:0] func_3_62_65_reg;
reg [7:0] func_3_62_66;
reg [7:0] func_3_62_66_reg;
reg [7:0] func_3_62_67;
reg [7:0] func_3_62_68;
reg [31:0] func_3_69_70;
reg [31:0] func_3_69_71;
reg [31:0] func_3_73_indvar;
reg [31:0] func_3_73_indvar_reg;
reg [31:0] func_3_73_l_421;
reg [31:0] func_3_73_l_421_reg;
reg  func_3_73_exitcond;
reg [31:0] func_3_74_75;
reg [15:0] func_3_74_76;
reg [15:0] func_3_74_76_reg;
reg [31:0] func_3_74_77;
reg  func_3_74_78;
reg  func_3_74_78_reg;
reg [7:0] func_3_79_80;
reg  func_3_79_81;
reg [31:0] func_3_82_83;
reg  func_3_82_84;
reg  func_3_85_86;
reg  func_3_85_86_reg;
reg  func_3_85_87;
reg  func_3_89_90;
reg [31:0] func_3_89_91;
reg  func_3_89_92;
reg  func_3_89_92_reg;
reg  func_3_89_93;
reg [15:0] func_3_89_94;
reg [31:0] func_3_98_99;
reg [31:0] func_3_98_99_reg;
reg [7:0] func_3_98_100;
reg [7:0] func_3_98_101;
reg [7:0] func_3_98_101_reg;
reg [31:0] func_3_98_102;
reg [31:0] func_3_98_103;
reg [7:0] func_3_98_104;
reg [7:0] func_3_98_104_reg;
reg [15:0] func_3_98_105;
reg [7:0] func_3_98_106;
reg [7:0] func_3_98_107;
reg [7:0] func_3_98_107_reg;
reg [31:0] func_3_108_109;
reg [31:0] func_3_108_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_108_110;
reg [7:0] func_3_108_111;
reg [31:0] func_3_108_112;
reg [31:0] func_3_108_113;
reg [31:0] func_3_108_114;
reg [31:0] func_3_108_indvarnext;
reg [31:0] func_3_108_indvarnext_reg;
reg [31:0] func_3_116_indvarnext2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_117_118;
reg [15:0] func_3_117_119;
reg  legup_memcpy_1_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_arg_s;
reg [31:0] legup_memcpy_1_arg_n;
wire  legup_memcpy_1_memory_controller_enable_a;
wire  legup_memcpy_1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_1_memory_controller_in_a;
wire [1:0] legup_memcpy_1_memory_controller_size_a;
wire  legup_memcpy_1_memory_controller_enable_b;
wire  legup_memcpy_1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_1_memory_controller_in_b;
wire [1:0] legup_memcpy_1_memory_controller_size_b;
reg  legup_memcpy_1_finish_final;
reg  legup_memcpy_1_finish_reg;
wire  legup_memcpy_1_finish;
reg  legup_memcpy_2_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_arg_s;
reg [31:0] legup_memcpy_2_arg_n;
wire  legup_memcpy_2_memory_controller_enable_a;
wire  legup_memcpy_2_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_2_memory_controller_in_a;
wire [1:0] legup_memcpy_2_memory_controller_size_a;
wire  legup_memcpy_2_memory_controller_enable_b;
wire  legup_memcpy_2_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_2_memory_controller_in_b;
wire [1:0] legup_memcpy_2_memory_controller_size_b;
reg  legup_memcpy_2_finish_final;
reg  legup_memcpy_2_finish_reg;
wire  legup_memcpy_2_finish;
reg  legup_memcpy_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_s;
reg [31:0] legup_memcpy_4_arg_n;
wire  legup_memcpy_4_memory_controller_enable_a;
wire  legup_memcpy_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_a;
wire [1:0] legup_memcpy_4_memory_controller_size_a;
wire  legup_memcpy_4_memory_controller_enable_b;
wire  legup_memcpy_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_b;
wire [1:0] legup_memcpy_4_memory_controller_size_b;
reg  legup_memcpy_4_finish_final;
reg  legup_memcpy_4_finish_reg;
wire  legup_memcpy_4_finish;
reg  safe_div_func_int16_t_s_s_start;
reg [15:0] safe_div_func_int16_t_s_s_arg_si1;
reg [15:0] safe_div_func_int16_t_s_s_arg_si2;
wire  safe_div_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_div_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_div_func_int16_t_s_s_memory_controller_size_a;
wire  safe_div_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_div_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_div_func_int16_t_s_s_memory_controller_size_b;
reg  safe_div_func_int16_t_s_s_finish_final;
reg  safe_div_func_int16_t_s_s_finish_reg;
wire  safe_div_func_int16_t_s_s_finish;
wire [15:0] safe_div_func_int16_t_s_s_return_val;
reg [15:0] safe_div_func_int16_t_s_s_return_val_reg;
reg  safe_mod_func_uint8_t_u_u_start;
reg [7:0] safe_mod_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_mod_func_uint8_t_u_u_arg_ui2;
wire  safe_mod_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_mod_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_mod_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_mod_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_mod_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_mod_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_mod_func_uint8_t_u_u_finish_final;
reg  safe_mod_func_uint8_t_u_u_finish_reg;
wire  safe_mod_func_uint8_t_u_u_finish;
wire [7:0] safe_mod_func_uint8_t_u_u_return_val;
reg [7:0] safe_mod_func_uint8_t_u_u_return_val_reg;
reg  safe_add_func_int8_t_s_s_start;
reg [7:0] safe_add_func_int8_t_s_s_arg_si1;
reg [7:0] safe_add_func_int8_t_s_s_arg_si2;
wire  safe_add_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_add_func_int8_t_s_s_memory_controller_size_a;
wire  safe_add_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_add_func_int8_t_s_s_memory_controller_size_b;
reg  safe_add_func_int8_t_s_s_finish_final;
reg  safe_add_func_int8_t_s_s_finish_reg;
wire  safe_add_func_int8_t_s_s_finish;
wire [7:0] safe_add_func_int8_t_s_s_return_val;
reg [7:0] safe_add_func_int8_t_s_s_return_val_reg;
reg  safe_add_func_uint8_t_u_u_start;
reg [7:0] safe_add_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_add_func_uint8_t_u_u_arg_ui2;
wire  safe_add_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_add_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_add_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_add_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_add_func_uint8_t_u_u_finish_final;
reg  safe_add_func_uint8_t_u_u_finish_reg;
wire  safe_add_func_uint8_t_u_u_finish;
wire [7:0] safe_add_func_uint8_t_u_u_return_val;
reg  safe_rshift_func_uint16_t_u_s_start;
reg [15:0] safe_rshift_func_uint16_t_u_s_arg_left;
reg [31:0] safe_rshift_func_uint16_t_u_s_arg_right;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
reg  safe_rshift_func_uint16_t_u_s_finish_final;
reg  safe_rshift_func_uint16_t_u_s_finish_reg;
wire  safe_rshift_func_uint16_t_u_s_finish;
wire [15:0] safe_rshift_func_uint16_t_u_s_return_val;
reg [15:0] safe_rshift_func_uint16_t_u_s_return_val_reg;
reg  safe_sub_func_uint8_t_u_u_start;
reg [7:0] safe_sub_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_sub_func_uint8_t_u_u_arg_ui2;
wire  safe_sub_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_sub_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_sub_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_sub_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_sub_func_uint8_t_u_u_finish_final;
reg  safe_sub_func_uint8_t_u_u_finish_reg;
wire  safe_sub_func_uint8_t_u_u_finish;
wire [7:0] safe_sub_func_uint8_t_u_u_return_val;
reg [7:0] safe_sub_func_uint8_t_u_u_return_val_reg;
reg  safe_rshift_func_uint16_t_u_u_start;
reg [15:0] safe_rshift_func_uint16_t_u_u_arg_left;
reg [31:0] safe_rshift_func_uint16_t_u_u_arg_right;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_rshift_func_uint16_t_u_u_finish_final;
reg  safe_rshift_func_uint16_t_u_u_finish_reg;
wire  safe_rshift_func_uint16_t_u_u_finish;
wire [15:0] safe_rshift_func_uint16_t_u_u_return_val;
reg [15:0] safe_rshift_func_uint16_t_u_u_return_val_reg;
reg  safe_lshift_func_uint16_t_u_s_start;
reg [15:0] safe_lshift_func_uint16_t_u_s_arg_left;
reg [31:0] safe_lshift_func_uint16_t_u_s_arg_right;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
reg  safe_lshift_func_uint16_t_u_s_finish_final;
reg  safe_lshift_func_uint16_t_u_s_finish_reg;
wire  safe_lshift_func_uint16_t_u_s_finish;
wire [15:0] safe_lshift_func_uint16_t_u_s_return_val;
reg [15:0] safe_lshift_func_uint16_t_u_s_return_val_reg;
reg  safe_div_func_uint32_t_u_u_start;
reg [31:0] safe_div_func_uint32_t_u_u_arg_ui1;
reg [31:0] safe_div_func_uint32_t_u_u_arg_ui2;
wire  safe_div_func_uint32_t_u_u_memory_controller_enable_a;
wire  safe_div_func_uint32_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_uint32_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_uint32_t_u_u_memory_controller_in_a;
wire [1:0] safe_div_func_uint32_t_u_u_memory_controller_size_a;
wire  safe_div_func_uint32_t_u_u_memory_controller_enable_b;
wire  safe_div_func_uint32_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_uint32_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_uint32_t_u_u_memory_controller_in_b;
wire [1:0] safe_div_func_uint32_t_u_u_memory_controller_size_b;
reg  safe_div_func_uint32_t_u_u_finish_final;
reg  safe_div_func_uint32_t_u_u_finish_reg;
wire  safe_div_func_uint32_t_u_u_finish;
wire [31:0] safe_div_func_uint32_t_u_u_return_val;
reg [31:0] safe_div_func_uint32_t_u_u_return_val_reg;
reg  func_15_start;
reg [15:0] func_15_arg_p_16;
reg [7:0] func_15_arg_p_17;
reg [15:0] func_15_arg_p_18;
reg [7:0] func_15_arg_p_19;
wire  func_15_memory_controller_enable_a;
wire  func_15_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_15_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_15_memory_controller_in_a;
wire [1:0] func_15_memory_controller_size_a;
wire  func_15_memory_controller_enable_b;
wire  func_15_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_15_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_15_memory_controller_in_b;
wire [1:0] func_15_memory_controller_size_b;
reg  func_15_finish_final;
reg  func_15_finish_reg;
wire  func_15_finish;
wire [31:0] func_15_return_val;
reg  func_13_start;
reg [7:0] func_13_arg_p_14;
wire  func_13_memory_controller_enable_a;
wire  func_13_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_13_memory_controller_in_a;
wire [1:0] func_13_memory_controller_size_a;
wire  func_13_memory_controller_enable_b;
wire  func_13_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_13_memory_controller_in_b;
wire [1:0] func_13_memory_controller_size_b;
reg  func_13_finish_final;
reg  func_13_finish_reg;
wire  func_13_finish;
wire [15:0] func_13_return_val;
reg [15:0] func_13_return_val_reg;
reg  safe_mod_func_int16_t_s_s_start;
reg [15:0] safe_mod_func_int16_t_s_s_arg_si1;
reg [15:0] safe_mod_func_int16_t_s_s_arg_si2;
wire  safe_mod_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_mod_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_mod_func_int16_t_s_s_memory_controller_size_a;
wire  safe_mod_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_mod_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_mod_func_int16_t_s_s_memory_controller_size_b;
reg  safe_mod_func_int16_t_s_s_finish_final;
reg  safe_mod_func_int16_t_s_s_finish_reg;
wire  safe_mod_func_int16_t_s_s_finish;
wire [15:0] safe_mod_func_int16_t_s_s_return_val;
reg [15:0] safe_mod_func_int16_t_s_s_return_val_reg;
reg  safe_lshift_func_uint8_t_u_s_start;
reg [7:0] safe_lshift_func_uint8_t_u_s_arg_left;
reg [31:0] safe_lshift_func_uint8_t_u_s_arg_right;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_enable_a;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint8_t_u_s_memory_controller_size_a;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_enable_b;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint8_t_u_s_memory_controller_size_b;
reg  safe_lshift_func_uint8_t_u_s_finish_final;
reg  safe_lshift_func_uint8_t_u_s_finish_reg;
wire  safe_lshift_func_uint8_t_u_s_finish;
wire [7:0] safe_lshift_func_uint8_t_u_s_return_val;
reg [7:0] safe_lshift_func_uint8_t_u_s_return_val_reg;
reg  safe_mul_func_uint8_t_u_u_start;
reg [7:0] safe_mul_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_mul_func_uint8_t_u_u_arg_ui2;
wire  safe_mul_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_mul_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_mul_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_mul_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_mul_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_mul_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_mul_func_uint8_t_u_u_finish_final;
reg  safe_mul_func_uint8_t_u_u_finish_reg;
wire  safe_mul_func_uint8_t_u_u_finish;
wire [7:0] safe_mul_func_uint8_t_u_u_return_val;
reg [7:0] safe_mul_func_uint8_t_u_u_return_val_reg;


legup_memcpy_1 legup_memcpy_1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_1_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_1_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_1_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_1_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_1_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_1_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_1_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_1_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_1_start),
	.finish (legup_memcpy_1_finish),
	.arg_d (legup_memcpy_1_arg_d),
	.arg_s (legup_memcpy_1_arg_s),
	.arg_n (legup_memcpy_1_arg_n)
);

defparam
	legup_memcpy_1.tag_offset = tag_offset;


legup_memcpy_2 legup_memcpy_2 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_2_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_2_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_2_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_2_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_2_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_2_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_2_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_2_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_2_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_2_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_2_start),
	.finish (legup_memcpy_2_finish),
	.arg_d (legup_memcpy_2_arg_d),
	.arg_s (legup_memcpy_2_arg_s),
	.arg_n (legup_memcpy_2_arg_n)
);

defparam
	legup_memcpy_2.tag_offset = tag_offset;


legup_memcpy_4 legup_memcpy_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_4_start),
	.finish (legup_memcpy_4_finish),
	.arg_d (legup_memcpy_4_arg_d),
	.arg_s (legup_memcpy_4_arg_s),
	.arg_n (legup_memcpy_4_arg_n)
);

defparam
	legup_memcpy_4.tag_offset = tag_offset;


safe_div_func_int16_t_s_s safe_div_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_int16_t_s_s_start),
	.finish (safe_div_func_int16_t_s_s_finish),
	.return_val (safe_div_func_int16_t_s_s_return_val),
	.arg_si1 (safe_div_func_int16_t_s_s_arg_si1),
	.arg_si2 (safe_div_func_int16_t_s_s_arg_si2)
);

defparam
	safe_div_func_int16_t_s_s.tag_offset = tag_offset;


safe_mod_func_uint8_t_u_u safe_mod_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mod_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_mod_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mod_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mod_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_mod_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mod_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_mod_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mod_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mod_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_mod_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mod_func_uint8_t_u_u_start),
	.finish (safe_mod_func_uint8_t_u_u_finish),
	.return_val (safe_mod_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_mod_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_mod_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_mod_func_uint8_t_u_u.tag_offset = tag_offset;


safe_add_func_int8_t_s_s safe_add_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_int8_t_s_s_start),
	.finish (safe_add_func_int8_t_s_s_finish),
	.return_val (safe_add_func_int8_t_s_s_return_val),
	.arg_si1 (safe_add_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_add_func_int8_t_s_s_arg_si2)
);

defparam
	safe_add_func_int8_t_s_s.tag_offset = tag_offset;


safe_add_func_uint8_t_u_u safe_add_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_uint8_t_u_u_start),
	.finish (safe_add_func_uint8_t_u_u_finish),
	.return_val (safe_add_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_add_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_add_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_add_func_uint8_t_u_u.tag_offset = tag_offset;


safe_rshift_func_uint16_t_u_s safe_rshift_func_uint16_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint16_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint16_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint16_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint16_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint16_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint16_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint16_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint16_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint16_t_u_s_start),
	.finish (safe_rshift_func_uint16_t_u_s_finish),
	.return_val (safe_rshift_func_uint16_t_u_s_return_val),
	.arg_left (safe_rshift_func_uint16_t_u_s_arg_left),
	.arg_right (safe_rshift_func_uint16_t_u_s_arg_right)
);

defparam
	safe_rshift_func_uint16_t_u_s.tag_offset = tag_offset;


safe_sub_func_uint8_t_u_u safe_sub_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_uint8_t_u_u_start),
	.finish (safe_sub_func_uint8_t_u_u_finish),
	.return_val (safe_sub_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_sub_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_sub_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_sub_func_uint8_t_u_u.tag_offset = tag_offset;


safe_rshift_func_uint16_t_u_u safe_rshift_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint16_t_u_u_start),
	.finish (safe_rshift_func_uint16_t_u_u_finish),
	.return_val (safe_rshift_func_uint16_t_u_u_return_val),
	.arg_left (safe_rshift_func_uint16_t_u_u_arg_left),
	.arg_right (safe_rshift_func_uint16_t_u_u_arg_right)
);

defparam
	safe_rshift_func_uint16_t_u_u.tag_offset = tag_offset;


safe_lshift_func_uint16_t_u_s safe_lshift_func_uint16_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint16_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint16_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint16_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint16_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint16_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint16_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint16_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint16_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint16_t_u_s_start),
	.finish (safe_lshift_func_uint16_t_u_s_finish),
	.return_val (safe_lshift_func_uint16_t_u_s_return_val),
	.arg_left (safe_lshift_func_uint16_t_u_s_arg_left),
	.arg_right (safe_lshift_func_uint16_t_u_s_arg_right)
);

defparam
	safe_lshift_func_uint16_t_u_s.tag_offset = tag_offset;


safe_div_func_uint32_t_u_u safe_div_func_uint32_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_uint32_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_uint32_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_uint32_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_uint32_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_uint32_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_uint32_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_uint32_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_uint32_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_uint32_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_uint32_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_uint32_t_u_u_start),
	.finish (safe_div_func_uint32_t_u_u_finish),
	.return_val (safe_div_func_uint32_t_u_u_return_val),
	.arg_ui1 (safe_div_func_uint32_t_u_u_arg_ui1),
	.arg_ui2 (safe_div_func_uint32_t_u_u_arg_ui2)
);

defparam
	safe_div_func_uint32_t_u_u.tag_offset = tag_offset;


func_15 func_15 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_15_memory_controller_enable_a),
	.memory_controller_address_a (func_15_memory_controller_address_a),
	.memory_controller_write_enable_a (func_15_memory_controller_write_enable_a),
	.memory_controller_in_a (func_15_memory_controller_in_a),
	.memory_controller_size_a (func_15_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_15_memory_controller_enable_b),
	.memory_controller_address_b (func_15_memory_controller_address_b),
	.memory_controller_write_enable_b (func_15_memory_controller_write_enable_b),
	.memory_controller_in_b (func_15_memory_controller_in_b),
	.memory_controller_size_b (func_15_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_15_start),
	.finish (func_15_finish),
	.return_val (func_15_return_val),
	.arg_p_16 (func_15_arg_p_16),
	.arg_p_17 (func_15_arg_p_17),
	.arg_p_18 (func_15_arg_p_18),
	.arg_p_19 (func_15_arg_p_19)
);

defparam
	func_15.tag_offset = tag_offset;


func_13 func_13 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_13_memory_controller_enable_a),
	.memory_controller_address_a (func_13_memory_controller_address_a),
	.memory_controller_write_enable_a (func_13_memory_controller_write_enable_a),
	.memory_controller_in_a (func_13_memory_controller_in_a),
	.memory_controller_size_a (func_13_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_13_memory_controller_enable_b),
	.memory_controller_address_b (func_13_memory_controller_address_b),
	.memory_controller_write_enable_b (func_13_memory_controller_write_enable_b),
	.memory_controller_in_b (func_13_memory_controller_in_b),
	.memory_controller_size_b (func_13_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_13_start),
	.finish (func_13_finish),
	.return_val (func_13_return_val),
	.arg_p_14 (func_13_arg_p_14)
);

defparam
	func_13.tag_offset = tag_offset;


safe_mod_func_int16_t_s_s safe_mod_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mod_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mod_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mod_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mod_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mod_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mod_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mod_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mod_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mod_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mod_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mod_func_int16_t_s_s_start),
	.finish (safe_mod_func_int16_t_s_s_finish),
	.return_val (safe_mod_func_int16_t_s_s_return_val),
	.arg_si1 (safe_mod_func_int16_t_s_s_arg_si1),
	.arg_si2 (safe_mod_func_int16_t_s_s_arg_si2)
);

defparam
	safe_mod_func_int16_t_s_s.tag_offset = tag_offset;


safe_lshift_func_uint8_t_u_s safe_lshift_func_uint8_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint8_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint8_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint8_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint8_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint8_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint8_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint8_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint8_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint8_t_u_s_start),
	.finish (safe_lshift_func_uint8_t_u_s_finish),
	.return_val (safe_lshift_func_uint8_t_u_s_return_val),
	.arg_left (safe_lshift_func_uint8_t_u_s_arg_left),
	.arg_right (safe_lshift_func_uint8_t_u_s_arg_right)
);

defparam
	safe_lshift_func_uint8_t_u_s.tag_offset = tag_offset;


safe_mul_func_uint8_t_u_u safe_mul_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_uint8_t_u_u_start),
	.finish (safe_mul_func_uint8_t_u_u_finish),
	.return_val (safe_mul_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_mul_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_mul_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_mul_func_uint8_t_u_u.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_3_BB__0_1;
LEGUP_F_func_3_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_func_3_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_func_3_BB__0_5:
		next_state = LEGUP_F_func_3_BB__3_6;
LEGUP_F_func_3_BB__108_97:
		next_state = LEGUP_F_func_3_BB__108_98;
LEGUP_F_func_3_BB__108_98:
		next_state = LEGUP_F_func_3_BB__108_99;
LEGUP_F_func_3_BB__108_99:
		next_state = LEGUP_F_func_3_BB__73_69;
LEGUP_F_func_3_BB__10_13:
	if ((1'd1 == 1'd1))
		next_state = LEGUP_F_func_3_BB__11_14;
	else if ((1'd1 == 1'd0))
		next_state = LEGUP_F_func_3_BB__62_55;
LEGUP_F_func_3_BB__115_100:
		next_state = LEGUP_F_func_3_BB__116_101;
LEGUP_F_func_3_BB__116_101:
		next_state = LEGUP_F_func_3_BB__3_6;
LEGUP_F_func_3_BB__117_102:
		next_state = LEGUP_F_func_3_BB__117_103;
LEGUP_F_func_3_BB__117_103:
		next_state = LEGUP_F_func_3_BB__117_104;
LEGUP_F_func_3_BB__117_104:
		next_state = LEGUP_0;
LEGUP_F_func_3_BB__11_14:
		next_state = LEGUP_F_func_3_BB__11_15;
LEGUP_F_func_3_BB__11_15:
		next_state = LEGUP_F_func_3_BB__11_16;
LEGUP_F_func_3_BB__11_16:
		next_state = LEGUP_function_call_17;
LEGUP_F_func_3_BB__11_18:
		next_state = LEGUP_F_func_3_BB__11_19;
LEGUP_F_func_3_BB__11_19:
		next_state = LEGUP_F_func_3_BB__11_20;
LEGUP_F_func_3_BB__11_20:
		next_state = LEGUP_F_func_3_BB__11_21;
LEGUP_F_func_3_BB__11_21:
		next_state = LEGUP_function_call_22;
LEGUP_F_func_3_BB__11_23:
		next_state = LEGUP_F_func_3_BB__11_24;
LEGUP_F_func_3_BB__11_24:
		next_state = LEGUP_F_func_3_BB__11_25;
LEGUP_F_func_3_BB__11_25:
		next_state = LEGUP_function_call_26;
LEGUP_F_func_3_BB__11_27:
	if ((func_3_11_27 == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_31;
	else if ((func_3_11_27 == 1'd0))
		next_state = LEGUP_F_func_3_BB__28_28;
LEGUP_F_func_3_BB__28_28:
		next_state = LEGUP_F_func_3_BB__28_29;
LEGUP_F_func_3_BB__28_29:
		next_state = LEGUP_F_func_3_BB__28_30;
LEGUP_F_func_3_BB__28_30:
		next_state = LEGUP_F_func_3_BB__32_31;
LEGUP_F_func_3_BB__32_31:
		next_state = LEGUP_function_call_32;
LEGUP_F_func_3_BB__32_33:
		next_state = LEGUP_function_call_34;
LEGUP_F_func_3_BB__32_35:
		next_state = LEGUP_F_func_3_BB__32_36;
LEGUP_F_func_3_BB__32_36:
		next_state = LEGUP_F_func_3_BB__32_37;
LEGUP_F_func_3_BB__32_37:
		next_state = LEGUP_F_func_3_BB__32_38;
LEGUP_F_func_3_BB__32_38:
		next_state = LEGUP_function_call_39;
LEGUP_F_func_3_BB__32_40:
		next_state = LEGUP_F_func_3_BB__32_41;
LEGUP_F_func_3_BB__32_41:
		next_state = LEGUP_F_func_3_BB__32_42;
LEGUP_F_func_3_BB__32_42:
		next_state = LEGUP_function_call_43;
LEGUP_F_func_3_BB__32_44:
		next_state = LEGUP_function_call_45;
LEGUP_F_func_3_BB__32_46:
		next_state = LEGUP_function_call_47;
LEGUP_F_func_3_BB__32_48:
		next_state = LEGUP_function_call_49;
LEGUP_F_func_3_BB__32_50:
		next_state = LEGUP_F_func_3_BB__32_51;
LEGUP_F_func_3_BB__32_51:
		next_state = LEGUP_F_func_3_BB__32_52;
LEGUP_F_func_3_BB__32_52:
		next_state = LEGUP_function_call_53;
LEGUP_F_func_3_BB__32_54:
		next_state = LEGUP_F_func_3_BB__62_55;
LEGUP_F_func_3_BB__3_6:
	if ((func_3_3_exitcond3 == 1'd1))
		next_state = LEGUP_F_func_3_BB__117_102;
	else if ((func_3_3_exitcond3 == 1'd0))
		next_state = LEGUP_F_func_3_BB__5_7;
LEGUP_F_func_3_BB__5_10:
		next_state = LEGUP_F_func_3_BB__8_11;
LEGUP_F_func_3_BB__5_7:
		next_state = LEGUP_function_call_8;
LEGUP_F_func_3_BB__5_9:
		next_state = LEGUP_F_func_3_BB__5_10;
LEGUP_F_func_3_BB__62_55:
		next_state = LEGUP_F_func_3_BB__62_56;
LEGUP_F_func_3_BB__62_56:
		next_state = LEGUP_F_func_3_BB__62_57;
LEGUP_F_func_3_BB__62_57:
		next_state = LEGUP_function_call_58;
LEGUP_F_func_3_BB__62_59:
		next_state = LEGUP_function_call_60;
LEGUP_F_func_3_BB__62_61:
		next_state = LEGUP_F_func_3_BB__62_62;
LEGUP_F_func_3_BB__62_62:
		next_state = LEGUP_F_func_3_BB__62_63;
LEGUP_F_func_3_BB__62_63:
		next_state = LEGUP_F_func_3_BB__62_64;
LEGUP_F_func_3_BB__62_64:
		next_state = LEGUP_F_func_3_BB__69_65;
LEGUP_F_func_3_BB__69_65:
		next_state = LEGUP_F_func_3_BB__69_66;
LEGUP_F_func_3_BB__69_66:
		next_state = LEGUP_F_func_3_BB__69_67;
LEGUP_F_func_3_BB__69_67:
		next_state = LEGUP_F_func_3_BB__8_11;
LEGUP_F_func_3_BB__72_68:
		next_state = LEGUP_F_func_3_BB__73_69;
LEGUP_F_func_3_BB__73_69:
	if ((func_3_73_exitcond == 1'd1))
		next_state = LEGUP_F_func_3_BB__115_100;
	else if ((func_3_73_exitcond == 1'd0))
		next_state = LEGUP_F_func_3_BB__74_70;
LEGUP_F_func_3_BB__74_70:
		next_state = LEGUP_F_func_3_BB__74_71;
LEGUP_F_func_3_BB__74_71:
		next_state = LEGUP_F_func_3_BB__74_72;
LEGUP_F_func_3_BB__74_72:
	if ((func_3_74_78_reg == 1'd1))
		next_state = LEGUP_F_func_3_BB__82_76;
	else if ((func_3_74_78_reg == 1'd0))
		next_state = LEGUP_F_func_3_BB__79_73;
LEGUP_F_func_3_BB__79_73:
		next_state = LEGUP_F_func_3_BB__79_74;
LEGUP_F_func_3_BB__79_74:
		next_state = LEGUP_F_func_3_BB__79_75;
LEGUP_F_func_3_BB__79_75:
	if ((func_3_79_81 == 1'd1))
		next_state = LEGUP_F_func_3_BB__82_76;
	else if ((func_3_79_81 == 1'd0))
		next_state = LEGUP_F_func_3_BB__85_79;
LEGUP_F_func_3_BB__82_76:
		next_state = LEGUP_F_func_3_BB__82_77;
LEGUP_F_func_3_BB__82_77:
		next_state = LEGUP_F_func_3_BB__82_78;
LEGUP_F_func_3_BB__82_78:
		next_state = LEGUP_F_func_3_BB__85_79;
LEGUP_F_func_3_BB__85_79:
	if ((func_3_85_87 == 1'd1))
		next_state = LEGUP_F_func_3_BB__88_80;
	else if ((func_3_85_87 == 1'd0))
		next_state = LEGUP_F_func_3_BB__89_81;
LEGUP_F_func_3_BB__88_80:
		next_state = LEGUP_F_func_3_BB__89_81;
LEGUP_F_func_3_BB__89_81:
		next_state = LEGUP_F_func_3_BB__89_82;
LEGUP_F_func_3_BB__89_82:
		next_state = LEGUP_function_call_83;
LEGUP_F_func_3_BB__89_84:
		next_state = LEGUP_F_func_3_BB__89_85;
LEGUP_F_func_3_BB__89_85:
		next_state = LEGUP_F_func_3_BB__89_86;
LEGUP_F_func_3_BB__89_86:
	if ((1'd1 == 1'd1))
		next_state = LEGUP_F_func_3_BB__98_88;
	else if ((1'd1 == 1'd0))
		next_state = LEGUP_F_func_3_BB__97_87;
LEGUP_F_func_3_BB__8_11:
		next_state = LEGUP_F_func_3_BB__8_12;
LEGUP_F_func_3_BB__8_12:
	if ((func_3_8_9_reg == 1'd1))
		next_state = LEGUP_F_func_3_BB__10_13;
	else if ((func_3_8_9_reg == 1'd0))
		next_state = LEGUP_F_func_3_BB__72_68;
LEGUP_F_func_3_BB__97_87:
		next_state = LEGUP_F_func_3_BB__98_88;
LEGUP_F_func_3_BB__98_88:
		next_state = LEGUP_function_call_89;
LEGUP_F_func_3_BB__98_90:
		next_state = LEGUP_function_call_91;
LEGUP_F_func_3_BB__98_92:
		next_state = LEGUP_F_func_3_BB__98_93;
LEGUP_F_func_3_BB__98_93:
		next_state = LEGUP_F_func_3_BB__98_94;
LEGUP_F_func_3_BB__98_94:
		next_state = LEGUP_function_call_95;
LEGUP_F_func_3_BB__98_96:
		next_state = LEGUP_F_func_3_BB__108_97;
LEGUP_function_call_17:
	if ((safe_div_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__11_18;
LEGUP_function_call_2:
	if ((legup_memcpy_1_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__0_3;
LEGUP_function_call_22:
	if ((safe_mod_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__11_23;
LEGUP_function_call_26:
	if ((safe_add_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__11_27;
LEGUP_function_call_32:
	if ((safe_add_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_33;
LEGUP_function_call_34:
	if ((safe_rshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_35;
LEGUP_function_call_39:
	if ((safe_sub_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_40;
LEGUP_function_call_4:
	if ((legup_memcpy_2_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__0_5;
LEGUP_function_call_43:
	if ((safe_rshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_44;
LEGUP_function_call_45:
	if ((safe_lshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_46;
LEGUP_function_call_47:
	if ((safe_div_func_uint32_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_48;
LEGUP_function_call_49:
	if ((safe_rshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_50;
LEGUP_function_call_53:
	if ((func_15_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__32_54;
LEGUP_function_call_58:
	if ((func_13_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__62_59;
LEGUP_function_call_60:
	if ((safe_mod_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__62_61;
LEGUP_function_call_8:
	if ((legup_memcpy_4_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__5_9;
LEGUP_function_call_83:
	if ((safe_mod_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__89_84;
LEGUP_function_call_89:
	if ((safe_div_func_uint32_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__98_90;
LEGUP_function_call_91:
	if ((safe_lshift_func_uint8_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__98_92;
LEGUP_function_call_95:
	if ((safe_mul_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_3_BB__98_96;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_3: %0*/
	/*   %1 = getelementptr inbounds [7 x i8]* %l_41, i32 0, i32 0*/
if (reset) begin func_3_0_1 = 0; end
		func_3_0_1 = `TAG_func_3_0_l_41_a;
end
always @(*) begin
	/* func_3: %0*/
	/*   %2 = bitcast [9 x [8 x [2 x i16]]]* %l_67 to i8**/
if (reset) begin func_3_0_2 = 0; end
		func_3_0_2 = `TAG_func_3_0_l_67_a;
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   %2 = bitcast [9 x [8 x [2 x i16]]]* %l_67 to i8**/
	if ((cur_state == LEGUP_F_func_3_BB__0_1)) begin
		func_3_0_2_reg <= func_3_0_2;
		if (start == 1'b0 && ^(func_3_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %3*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %116 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_indvar1 = 32'd0;
	end
	/* func_3: %3*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %116 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__116_101) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_3_indvar1 = func_3_116_indvarnext2;
	end
end
always @(posedge clk) begin
	/* func_3: %3*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %116 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_indvar1_reg <= func_3_3_indvar1;
		if (start == 1'b0 && ^(func_3_3_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_indvar1_reg"); $finish; end
	end
	/* func_3: %3*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %116 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__116_101) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_indvar1_reg <= func_3_3_indvar1;
		if (start == 1'b0 && ^(func_3_3_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %3*/
	/*   %l_42.0 = phi i32 [ %l_42.1, %116 ], [ -9, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_l_420 = -32'd9;
	end
	/* func_3: %3*/
	/*   %l_42.0 = phi i32 [ %l_42.1, %116 ], [ -9, %0 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__116_101) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_3_l_420 = func_3_73_l_421_reg;
	end
end
always @(posedge clk) begin
	/* func_3: %3*/
	/*   %l_42.0 = phi i32 [ %l_42.1, %116 ], [ -9, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_l_420_reg <= func_3_3_l_420;
		if (start == 1'b0 && ^(func_3_3_l_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_l_420_reg"); $finish; end
	end
	/* func_3: %3*/
	/*   %l_42.0 = phi i32 [ %l_42.1, %116 ], [ -9, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__116_101) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_l_420_reg <= func_3_3_l_420;
		if (start == 1'b0 && ^(func_3_3_l_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_l_420_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %3*/
	/*   %.01 = phi i8 [ 5, %116 ], [ %p_5, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_01 = arg_p_5;
	end
	/* func_3: %3*/
	/*   %.01 = phi i8 [ 5, %116 ], [ %p_5, %0 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__116_101) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_3_01 = 8'd5;
	end
end
always @(posedge clk) begin
	/* func_3: %3*/
	/*   %.01 = phi i8 [ 5, %116 ], [ %p_5, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__0_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_01_reg <= func_3_3_01;
		if (start == 1'b0 && ^(func_3_3_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_01_reg"); $finish; end
	end
	/* func_3: %3*/
	/*   %.01 = phi i8 [ 5, %116 ], [ %p_5, %0 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__116_101) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_3_01_reg <= func_3_3_01;
		if (start == 1'b0 && ^(func_3_3_01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_01_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %3*/
	/*   %.0 = sub i32 4, %indvar1*/
		func_3_3_0 = (32'd4 - func_3_3_indvar1_reg);
end
always @(posedge clk) begin
	/* func_3: %3*/
	/*   %.0 = sub i32 4, %indvar1*/
	if ((cur_state == LEGUP_F_func_3_BB__3_6)) begin
		func_3_3_0_reg <= func_3_3_0;
		if (start == 1'b0 && ^(func_3_3_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_0_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %3*/
	/*   %4 = trunc i32 %.0 to i16*/
		func_3_3_4 = func_3_3_0[15:0];
end
always @(posedge clk) begin
	/* func_3: %3*/
	/*   %4 = trunc i32 %.0 to i16*/
	if ((cur_state == LEGUP_F_func_3_BB__3_6)) begin
		func_3_3_4_reg <= func_3_3_4;
		if (start == 1'b0 && ^(func_3_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %3*/
	/*   %exitcond3 = icmp eq i32 %indvar1, 5*/
		func_3_3_exitcond3 = (func_3_3_indvar1_reg == 32'd5);
end
always @(*) begin
	/* func_3: %5*/
	/*   %6 = bitcast [7 x i32]* %l_10 to i8**/
if (reset) begin func_3_5_6 = 0; end
		func_3_5_6 = `TAG_func_3_0_l_10_a;
end
always @(*) begin
	/* func_3: %5*/
	/*   %7 = getelementptr inbounds [7 x i32]* %l_10, i32 0, i32 5*/
if (reset) begin func_3_5_7 = 0; end
		func_3_5_7 = (`TAG_func_3_0_l_10_a + (4 * 32'd5));
end
always @(posedge clk) begin
	/* func_3: %5*/
	/*   %7 = getelementptr inbounds [7 x i32]* %l_10, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_func_3_BB__5_7)) begin
		func_3_5_7_reg <= func_3_5_7;
		if (start == 1'b0 && ^(func_3_5_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_5_7_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %8*/
	/*   %storemerge = phi i32 [ 0, %5 ], [ %71, %69 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__5_10) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_8_storemerge = 32'd0;
	end
	/* func_3: %8*/
	/*   %storemerge = phi i32 [ 0, %5 ], [ %71, %69 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__69_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_8_storemerge = func_3_69_71;
	end
end
always @(posedge clk) begin
	/* func_3: %8*/
	/*   %storemerge = phi i32 [ 0, %5 ], [ %71, %69 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__5_10) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_8_storemerge_reg <= func_3_8_storemerge;
		if (start == 1'b0 && ^(func_3_8_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_8_storemerge_reg"); $finish; end
	end
	/* func_3: %8*/
	/*   %storemerge = phi i32 [ 0, %5 ], [ %71, %69 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__69_67) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_8_storemerge_reg <= func_3_8_storemerge;
		if (start == 1'b0 && ^(func_3_8_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_8_storemerge_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %8*/
	/*   %9 = icmp ult i32 %storemerge, 5*/
		func_3_8_9 = (func_3_8_storemerge_reg < 32'd5);
end
always @(posedge clk) begin
	/* func_3: %8*/
	/*   %9 = icmp ult i32 %storemerge, 5*/
	if ((cur_state == LEGUP_F_func_3_BB__8_11)) begin
		func_3_8_9_reg <= func_3_8_9;
		if (start == 1'b0 && ^(func_3_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %12 = zext i8 %.01 to i16*/
		func_3_11_12 = func_3_3_01_reg;
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %12 = zext i8 %.01 to i16*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		func_3_11_12_reg <= func_3_11_12;
		if (start == 1'b0 && ^(func_3_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %13 = load volatile i32* @g_2, align 4*/
		func_3_11_13 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_3: %11*/
	/*   %14 = trunc i32 %13 to i8*/
		func_3_11_14 = func_3_11_13[7:0];
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %14 = trunc i32 %13 to i8*/
	if ((cur_state == LEGUP_F_func_3_BB__11_16)) begin
		func_3_11_14_reg <= func_3_11_14;
		if (start == 1'b0 && ^(func_3_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_14_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %15 = getelementptr inbounds [7 x i32]* %l_10, i32 0, i32 0*/
if (reset) begin func_3_11_15 = 0; end
		func_3_11_15 = `TAG_func_3_0_l_10_a;
end
always @(*) begin
	/* func_3: %11*/
	/*   %16 = load i32* %15, align 4*/
		func_3_11_16 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_3: %11*/
	/*   %17 = trunc i32 %16 to i16*/
		func_3_11_17 = func_3_11_16[15:0];
end
always @(*) begin
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
		func_3_11_18 = safe_div_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		func_3_11_18_reg <= func_3_11_18;
		if (start == 1'b0 && ^(func_3_11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_18_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %19 = load i8* @g_40, align 1*/
		func_3_11_19 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_3: %11*/
	/*   %20 = xor i8 %19, 35*/
		func_3_11_20 = (func_3_11_19 ^ 8'd35);
end
always @(*) begin
	/* func_3: %11*/
	/*   %21 = and i8 %20, 1*/
		func_3_11_21 = (func_3_11_20 & 8'd1);
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %21 = and i8 %20, 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_20)) begin
		func_3_11_21_reg <= func_3_11_21;
		if (start == 1'b0 && ^(func_3_11_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_21_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
		func_3_11_22 = safe_mod_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		func_3_11_22_reg <= func_3_11_22;
		if (start == 1'b0 && ^(func_3_11_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_22_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %23 = and i8 %22, 1*/
		func_3_11_23 = (func_3_11_22_reg & 8'd1);
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %23 = and i8 %22, 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_23)) begin
		func_3_11_23_reg <= func_3_11_23;
		if (start == 1'b0 && ^(func_3_11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_23_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %24 = load i32* @g_6, align 4*/
		func_3_11_24 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_3: %11*/
	/*   %25 = trunc i32 %24 to i8*/
		func_3_11_25 = func_3_11_24[7:0];
end
always @(*) begin
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
		func_3_11_26 = safe_add_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		func_3_11_26_reg <= func_3_11_26;
		if (start == 1'b0 && ^(func_3_11_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_11_26_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %11*/
	/*   %27 = icmp eq i8 %26, 0*/
		func_3_11_27 = (func_3_11_26_reg == 8'd0);
end
always @(*) begin
	/* func_3: %28*/
	/*   %29 = getelementptr inbounds [7 x i32]* %l_10, i32 0, i32 4*/
if (reset) begin func_3_28_29 = 0; end
		func_3_28_29 = (`TAG_func_3_0_l_10_a + (4 * 32'd4));
end
always @(*) begin
	/* func_3: %28*/
	/*   %30 = load i32* %29, align 4*/
		func_3_28_30 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_3: %28*/
	/*   %31 = icmp ne i32 %30, 0*/
		func_3_28_31 = (func_3_28_30 != 32'd0);
end
always @(*) begin
	/* func_3: %32*/
	/*   %33 = phi i1 [ false, %11 ], [ %31, %28 ]*/
	if ((((cur_state == LEGUP_F_func_3_BB__11_27) & (memory_controller_waitrequest == 1'd0)) & (func_3_11_27 == 1'd1))) begin
		func_3_32_33 = 1'd0;
	end
	/* func_3: %32*/
	/*   %33 = phi i1 [ false, %11 ], [ %31, %28 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__28_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_32_33 = func_3_28_31;
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %33 = phi i1 [ false, %11 ], [ %31, %28 ]*/
	if ((((cur_state == LEGUP_F_func_3_BB__11_27) & (memory_controller_waitrequest == 1'd0)) & (func_3_11_27 == 1'd1))) begin
		func_3_32_33_reg <= func_3_32_33;
		if (start == 1'b0 && ^(func_3_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_33_reg"); $finish; end
	end
	/* func_3: %32*/
	/*   %33 = phi i1 [ false, %11 ], [ %31, %28 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__28_30) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_32_33_reg <= func_3_32_33;
		if (start == 1'b0 && ^(func_3_32_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_33_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %34 = zext i1 %33 to i8*/
		func_3_32_34 = func_3_32_33_reg;
end
always @(*) begin
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
		func_3_32_36 = safe_rshift_func_uint16_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		func_3_32_36_reg <= func_3_32_36;
		if (start == 1'b0 && ^(func_3_32_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_36_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %37 = load i16* @g_8, align 2*/
		func_3_32_37 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_3: %32*/
	/*   %38 = icmp ugt i16 %36, %37*/
		func_3_32_38 = (func_3_32_36_reg > func_3_32_37);
end
always @(*) begin
	/* func_3: %32*/
	/*   %39 = zext i1 %38 to i32*/
		func_3_32_39 = func_3_32_38;
end
always @(*) begin
	/* func_3: %32*/
	/*   %40 = zext i8 %.01 to i32*/
		func_3_32_40 = func_3_3_01_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %40 = zext i8 %.01 to i32*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		func_3_32_40_reg <= func_3_32_40;
		if (start == 1'b0 && ^(func_3_32_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_40_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %41 = icmp ule i32 %39, %40*/
		func_3_32_41 = (func_3_32_39 <= func_3_32_40_reg);
end
always @(*) begin
	/* func_3: %32*/
	/*   %42 = zext i1 %41 to i8*/
		func_3_32_42 = func_3_32_41;
end
always @(*) begin
	/* func_3: %32*/
	/*   %43 = getelementptr inbounds [7 x i8]* %l_41, i32 0, i32 4*/
if (reset) begin func_3_32_43 = 0; end
		func_3_32_43 = (`TAG_func_3_0_l_41_a + (1 * 32'd4));
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %43 = getelementptr inbounds [7 x i8]* %l_41, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		func_3_32_43_reg <= func_3_32_43;
		if (start == 1'b0 && ^(func_3_32_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_43_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %44 = load i8* %43, align 1*/
		func_3_32_44 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* func_3: %32*/
	/*   %45 = or i8 %44, %42*/
		func_3_32_45 = (func_3_32_44 | func_3_32_42);
end
always @(*) begin
	/* func_3: %32*/
	/*   %46 = load i8* @g_40, align 1*/
		func_3_32_46 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_3: %32*/
	/*   %47 = trunc i32 %l_42.0 to i8*/
		func_3_32_47 = func_3_3_l_420_reg[7:0];
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %47 = trunc i32 %l_42.0 to i8*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		func_3_32_47_reg <= func_3_32_47;
		if (start == 1'b0 && ^(func_3_32_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_47_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
		func_3_32_48 = safe_sub_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		func_3_32_48_reg <= func_3_32_48;
		if (start == 1'b0 && ^(func_3_32_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_48_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %49 = zext i8 %48 to i16*/
		func_3_32_49 = func_3_32_48_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %49 = zext i8 %48 to i16*/
	if ((cur_state == LEGUP_F_func_3_BB__32_40)) begin
		func_3_32_49_reg <= func_3_32_49;
		if (start == 1'b0 && ^(func_3_32_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_49_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %50 = getelementptr inbounds [7 x i32]* %l_10, i32 0, i32 5*/
if (reset) begin func_3_32_50 = 0; end
		func_3_32_50 = (`TAG_func_3_0_l_10_a + (4 * 32'd5));
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %50 = getelementptr inbounds [7 x i32]* %l_10, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		func_3_32_50_reg <= func_3_32_50;
		if (start == 1'b0 && ^(func_3_32_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_50_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %51 = load i32* %50, align 4*/
		func_3_32_51 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
		func_3_32_52 = safe_rshift_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		func_3_32_52_reg <= func_3_32_52;
		if (start == 1'b0 && ^(func_3_32_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_52_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %53 = zext i16 %52 to i32*/
		func_3_32_53 = func_3_32_52_reg;
end
always @(*) begin
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
		func_3_32_54 = safe_lshift_func_uint16_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		func_3_32_54_reg <= func_3_32_54;
		if (start == 1'b0 && ^(func_3_32_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_54_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %55 = zext i16 %54 to i32*/
		func_3_32_55 = func_3_32_54_reg;
end
always @(*) begin
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
		func_3_32_56 = safe_div_func_uint32_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		func_3_32_56_reg <= func_3_32_56;
		if (start == 1'b0 && ^(func_3_32_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_56_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %57 = trunc i32 %56 to i16*/
		func_3_32_57 = func_3_32_56_reg[15:0];
end
always @(*) begin
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
		func_3_32_58 = safe_rshift_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		func_3_32_58_reg <= func_3_32_58;
		if (start == 1'b0 && ^(func_3_32_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_32_58_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %32*/
	/*   %59 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 0, i32 6), align 4*/
		func_3_32_59 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_3: %32*/
	/*   %60 = trunc i32 %59 to i8*/
		func_3_32_60 = func_3_32_59[7:0];
end
always @(*) begin
	/* func_3: %62*/
	/*   %63 = load i8* @g_40, align 1*/
		func_3_62_63 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
		func_3_62_64 = func_13_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		func_3_62_64_reg <= func_3_62_64;
		if (start == 1'b0 && ^(func_3_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_62_64_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
		func_3_62_65 = safe_mod_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		func_3_62_65_reg <= func_3_62_65;
		if (start == 1'b0 && ^(func_3_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_62_65_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %62*/
	/*   %66 = trunc i16 %65 to i8*/
		func_3_62_66 = func_3_62_65_reg[7:0];
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %66 = trunc i16 %65 to i8*/
	if ((cur_state == LEGUP_F_func_3_BB__62_61)) begin
		func_3_62_66_reg <= func_3_62_66;
		if (start == 1'b0 && ^(func_3_62_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_62_66_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %62*/
	/*   %67 = load i8* @g_55, align 1*/
		func_3_62_67 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_3: %62*/
	/*   %68 = xor i8 %67, %66*/
		func_3_62_68 = (func_3_62_67 ^ func_3_62_66_reg);
end
always @(*) begin
	/* func_3: %69*/
	/*   %70 = load i32* @g_6, align 4*/
		func_3_69_70 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_3: %69*/
	/*   %71 = add i32 %70, 1*/
		func_3_69_71 = (func_3_69_70 + 32'd1);
end
always @(*) begin
	/* func_3: %73*/
	/*   %indvar = phi i32 [ %indvar.next, %108 ], [ 0, %72 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__72_68) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_73_indvar = 32'd0;
	end
	/* func_3: %73*/
	/*   %indvar = phi i32 [ %indvar.next, %108 ], [ 0, %72 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__108_99) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_73_indvar = func_3_108_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* func_3: %73*/
	/*   %indvar = phi i32 [ %indvar.next, %108 ], [ 0, %72 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__72_68) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_73_indvar_reg <= func_3_73_indvar;
		if (start == 1'b0 && ^(func_3_73_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_73_indvar_reg"); $finish; end
	end
	/* func_3: %73*/
	/*   %indvar = phi i32 [ %indvar.next, %108 ], [ 0, %72 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__108_99) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_73_indvar_reg <= func_3_73_indvar;
		if (start == 1'b0 && ^(func_3_73_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_73_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %73*/
	/*   %l_42.1 = phi i32 [ %114, %108 ], [ %l_42.0, %72 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__72_68) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_73_l_421 = func_3_3_l_420_reg;
	end
	/* func_3: %73*/
	/*   %l_42.1 = phi i32 [ %114, %108 ], [ %l_42.0, %72 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__108_99) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_73_l_421 = func_3_108_114;
	end
end
always @(posedge clk) begin
	/* func_3: %73*/
	/*   %l_42.1 = phi i32 [ %114, %108 ], [ %l_42.0, %72 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__72_68) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_73_l_421_reg <= func_3_73_l_421;
		if (start == 1'b0 && ^(func_3_73_l_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_73_l_421_reg"); $finish; end
	end
	/* func_3: %73*/
	/*   %l_42.1 = phi i32 [ %114, %108 ], [ %l_42.0, %72 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__108_99) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_73_l_421_reg <= func_3_73_l_421;
		if (start == 1'b0 && ^(func_3_73_l_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_73_l_421_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %73*/
	/*   %exitcond = icmp eq i32 %indvar, 5*/
		func_3_73_exitcond = (func_3_73_indvar_reg == 32'd5);
end
always @(*) begin
	/* func_3: %74*/
	/*   %75 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
		func_3_74_75 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_3: %74*/
	/*   %76 = trunc i32 %75 to i16*/
		func_3_74_76 = func_3_74_75[15:0];
end
always @(posedge clk) begin
	/* func_3: %74*/
	/*   %76 = trunc i32 %75 to i16*/
	if ((cur_state == LEGUP_F_func_3_BB__74_72)) begin
		func_3_74_76_reg <= func_3_74_76;
		if (start == 1'b0 && ^(func_3_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_74_76_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %74*/
	/*   %77 = and i32 %indvar, 20*/
		func_3_74_77 = (func_3_73_indvar_reg & 32'd20);
end
always @(*) begin
	/* func_3: %74*/
	/*   %78 = icmp eq i32 %77, 0*/
		func_3_74_78 = (func_3_74_77 == 32'd0);
end
always @(posedge clk) begin
	/* func_3: %74*/
	/*   %78 = icmp eq i32 %77, 0*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		func_3_74_78_reg <= func_3_74_78;
		if (start == 1'b0 && ^(func_3_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_74_78_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %79*/
	/*   %80 = load i8* @g_55, align 1*/
		func_3_79_80 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_3: %79*/
	/*   %81 = icmp eq i8 %80, 0*/
		func_3_79_81 = (func_3_79_80 == 8'd0);
end
always @(*) begin
	/* func_3: %82*/
	/*   %83 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 2, i32 5), align 4*/
		func_3_82_83 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_3: %82*/
	/*   %84 = icmp ne i32 %83, 0*/
		func_3_82_84 = (func_3_82_83 != 32'd0);
end
always @(*) begin
	/* func_3: %85*/
	/*   %86 = phi i1 [ true, %79 ], [ %84, %82 ]*/
	if ((((cur_state == LEGUP_F_func_3_BB__79_75) & (memory_controller_waitrequest == 1'd0)) & (func_3_79_81 == 1'd0))) begin
		func_3_85_86 = 1'd1;
	end
	/* func_3: %85*/
	/*   %86 = phi i1 [ true, %79 ], [ %84, %82 ]*/
	else /* if (((cur_state == LEGUP_F_func_3_BB__82_78) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_3_85_86 = func_3_82_84;
	end
end
always @(posedge clk) begin
	/* func_3: %85*/
	/*   %86 = phi i1 [ true, %79 ], [ %84, %82 ]*/
	if ((((cur_state == LEGUP_F_func_3_BB__79_75) & (memory_controller_waitrequest == 1'd0)) & (func_3_79_81 == 1'd0))) begin
		func_3_85_86_reg <= func_3_85_86;
		if (start == 1'b0 && ^(func_3_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_85_86_reg"); $finish; end
	end
	/* func_3: %85*/
	/*   %86 = phi i1 [ true, %79 ], [ %84, %82 ]*/
	if (((cur_state == LEGUP_F_func_3_BB__82_78) & (memory_controller_waitrequest == 1'd0))) begin
		func_3_85_86_reg <= func_3_85_86;
		if (start == 1'b0 && ^(func_3_85_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_85_86_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %85*/
	/*   %87 = icmp eq i32 %indvar1, 4*/
		func_3_85_87 = (func_3_3_indvar1_reg == 32'd4);
end
always @(*) begin
	/* func_3: %89*/
	/*   %90 = icmp sgt i32 %.0, 0*/
		func_3_89_90 = ($signed(func_3_3_0_reg) > $signed(32'd0));
end
always @(*) begin
	/* func_3: %89*/
	/*   %91 = zext i1 %90 to i32*/
		func_3_89_91 = func_3_89_90;
end
always @(*) begin
	/* func_3: %89*/
	/*   %92 = icmp ult i32 %91, %indvar*/
		func_3_89_92 = (func_3_89_91 < func_3_73_indvar_reg);
end
always @(posedge clk) begin
	/* func_3: %89*/
	/*   %92 = icmp ult i32 %91, %indvar*/
	if ((cur_state == LEGUP_F_func_3_BB__89_81)) begin
		func_3_89_92_reg <= func_3_89_92;
		if (start == 1'b0 && ^(func_3_89_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_89_92_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %89*/
	/*   %93 = xor i1 %86, %92*/
		func_3_89_93 = (func_3_85_86_reg ^ func_3_89_92_reg);
end
always @(*) begin
	/* func_3: %89*/
	/*   %94 = zext i1 %93 to i16*/
		func_3_89_94 = func_3_89_93;
end
always @(*) begin
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
		func_3_98_99 = safe_div_func_uint32_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		func_3_98_99_reg <= func_3_98_99;
		if (start == 1'b0 && ^(func_3_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_98_99_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %98*/
	/*   %100 = trunc i32 %99 to i8*/
		func_3_98_100 = func_3_98_99_reg[7:0];
end
always @(*) begin
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
		func_3_98_101 = safe_lshift_func_uint8_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		func_3_98_101_reg <= func_3_98_101;
		if (start == 1'b0 && ^(func_3_98_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_98_101_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %98*/
	/*   %102 = zext i8 %101 to i32*/
		func_3_98_102 = func_3_98_101_reg;
end
always @(*) begin
	/* func_3: %98*/
	/*   %103 = and i32 %.0, %102*/
		func_3_98_103 = (func_3_3_0_reg & func_3_98_102);
end
always @(*) begin
	/* func_3: %98*/
	/*   %104 = trunc i32 %103 to i8*/
		func_3_98_104 = func_3_98_103[7:0];
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %104 = trunc i32 %103 to i8*/
	if ((cur_state == LEGUP_F_func_3_BB__98_92)) begin
		func_3_98_104_reg <= func_3_98_104;
		if (start == 1'b0 && ^(func_3_98_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_98_104_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %98*/
	/*   %105 = load i16* @g_8, align 2*/
		func_3_98_105 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_3: %98*/
	/*   %106 = trunc i16 %105 to i8*/
		func_3_98_106 = func_3_98_105[7:0];
end
always @(*) begin
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
		func_3_98_107 = safe_mul_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		func_3_98_107_reg <= func_3_98_107;
		if (start == 1'b0 && ^(func_3_98_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_98_107_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %108*/
	/*   %109 = zext i8 %107 to i32*/
		func_3_108_109 = func_3_98_107_reg;
end
always @(posedge clk) begin
	/* func_3: %108*/
	/*   %109 = zext i8 %107 to i32*/
	if ((cur_state == LEGUP_F_func_3_BB__108_97)) begin
		func_3_108_109_reg <= func_3_108_109;
		if (start == 1'b0 && ^(func_3_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_108_109_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %108*/
	/*   %110 = getelementptr inbounds [7 x i8]* %l_41, i32 0, i32 4*/
if (reset) begin func_3_108_110 = 0; end
		func_3_108_110 = (`TAG_func_3_0_l_41_a + (1 * 32'd4));
end
always @(*) begin
	/* func_3: %108*/
	/*   %111 = load i8* %110, align 1*/
		func_3_108_111 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_3: %108*/
	/*   %112 = sext i8 %111 to i32*/
		func_3_108_112 = $signed(func_3_108_111);
end
always @(*) begin
	/* func_3: %108*/
	/*   %113 = and i32 %109, %112*/
		func_3_108_113 = (func_3_108_109_reg & func_3_108_112);
end
always @(*) begin
	/* func_3: %108*/
	/*   %114 = and i32 %l_42.1, %113*/
		func_3_108_114 = (func_3_73_l_421_reg & func_3_108_113);
end
always @(*) begin
	/* func_3: %108*/
	/*   %indvar.next = add i32 %indvar, 1*/
		func_3_108_indvarnext = (func_3_73_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* func_3: %108*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_func_3_BB__108_97)) begin
		func_3_108_indvarnext_reg <= func_3_108_indvarnext;
		if (start == 1'b0 && ^(func_3_108_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_108_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* func_3: %116*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
		func_3_116_indvarnext2 = (func_3_3_indvar1_reg + 32'd1);
end
always @(*) begin
	/* func_3: %117*/
	/*   %118 = getelementptr inbounds [9 x [8 x [2 x i16]]]* %l_67, i32 0, i32 5, i32 6, i32 0*/
if (reset) begin func_3_117_118 = 0; end
		func_3_117_118 = (`TAG_func_3_0_l_67_a + ((32 * 32'd5) + (4 * 32'd6)));
end
always @(*) begin
	/* func_3: %117*/
	/*   %119 = load i16* %118, align 2*/
		func_3_117_119 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_1)) begin
		legup_memcpy_1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memcpy_1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_1)) begin
		legup_memcpy_1_arg_d <= func_3_0_1;
		if (start == 1'b0 && ^(func_3_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_1)) begin
		legup_memcpy_1_arg_s <= `TAG_g_func_3l_41_a;
		if (start == 1'b0 && ^(`TAG_g_func_3l_41_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_1)) begin
		legup_memcpy_1_arg_n <= 32'd7;
		if (start == 1'b0 && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_1_finish_final = legup_memcpy_1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__0_1))) begin
		legup_memcpy_1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_finish_reg"); $finish; end
	end
	if (legup_memcpy_1_finish) begin
		legup_memcpy_1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_3)) begin
		legup_memcpy_2_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		legup_memcpy_2_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_3)) begin
		legup_memcpy_2_arg_d <= func_3_0_2_reg;
		if (start == 1'b0 && ^(func_3_0_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_3)) begin
		legup_memcpy_2_arg_s <= `TAG_g_func_3l_67_a;
		if (start == 1'b0 && ^(`TAG_g_func_3l_67_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_F_func_3_BB__0_3)) begin
		legup_memcpy_2_arg_n <= 32'd288;
		if (start == 1'b0 && ^(32'd288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_2_finish_final = legup_memcpy_2_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__0_3))) begin
		legup_memcpy_2_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_finish_reg"); $finish; end
	end
	if (legup_memcpy_2_finish) begin
		legup_memcpy_2_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_F_func_3_BB__5_7)) begin
		legup_memcpy_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		legup_memcpy_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_F_func_3_BB__5_7)) begin
		legup_memcpy_4_arg_d <= func_3_5_6;
		if (start == 1'b0 && ^(func_3_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_F_func_3_BB__5_7)) begin
		legup_memcpy_4_arg_s <= `TAG_g_func_3l_10_a;
		if (start == 1'b0 && ^(`TAG_g_func_3l_10_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_F_func_3_BB__5_7)) begin
		legup_memcpy_4_arg_n <= 32'd28;
		if (start == 1'b0 && ^(32'd28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_4_finish_final = legup_memcpy_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__5_7))) begin
		legup_memcpy_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
	if (legup_memcpy_4_finish) begin
		legup_memcpy_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_16)) begin
		safe_div_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		safe_div_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_16)) begin
		safe_div_func_int16_t_s_s_arg_si1 <= func_3_11_17;
		if (start == 1'b0 && ^(func_3_11_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_16)) begin
		safe_div_func_int16_t_s_s_arg_si2 <= -16'd1;
		if (start == 1'b0 && ^(-16'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_int16_t_s_s_finish_final = safe_div_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__11_16))) begin
		safe_div_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_div_func_int16_t_s_s_finish) begin
		safe_div_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__11_16))) begin
		safe_div_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_div_func_int16_t_s_s_finish) begin
		safe_div_func_int16_t_s_s_return_val_reg <= safe_div_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_div_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_21)) begin
		safe_mod_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		safe_mod_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_21)) begin
		safe_mod_func_uint8_t_u_u_arg_ui1 <= func_3_11_21_reg;
		if (start == 1'b0 && ^(func_3_11_21_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_21)) begin
		safe_mod_func_uint8_t_u_u_arg_ui2 <= 8'd64;
		if (start == 1'b0 && ^(8'd64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_mod_func_uint8_t_u_u_finish_final = safe_mod_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__11_21))) begin
		safe_mod_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_mod_func_uint8_t_u_u_finish) begin
		safe_mod_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__11_21))) begin
		safe_mod_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_mod_func_uint8_t_u_u_finish) begin
		safe_mod_func_uint8_t_u_u_return_val_reg <= safe_mod_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_mod_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_25)) begin
		safe_add_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		safe_add_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_25)) begin
		safe_add_func_int8_t_s_s_arg_si1 <= func_3_11_23_reg;
		if (start == 1'b0 && ^(func_3_11_23_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__11_25)) begin
		safe_add_func_int8_t_s_s_arg_si2 <= func_3_11_25;
		if (start == 1'b0 && ^(func_3_11_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_int8_t_s_s_finish_final = safe_add_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__11_25))) begin
		safe_add_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_add_func_int8_t_s_s_finish) begin
		safe_add_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__11_25))) begin
		safe_add_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_add_func_int8_t_s_s_finish) begin
		safe_add_func_int8_t_s_s_return_val_reg <= safe_add_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_add_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		safe_add_func_uint8_t_u_u_arg_ui1 <= func_3_32_34;
		if (start == 1'b0 && ^(func_3_32_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_31)) begin
		safe_add_func_uint8_t_u_u_arg_ui2 <= -8'd100;
		if (start == 1'b0 && ^(-8'd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_uint8_t_u_u_finish_final = safe_add_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_31))) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_33)) begin
		safe_rshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		safe_rshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_33)) begin
		safe_rshift_func_uint16_t_u_s_arg_left <= -16'd7;
		if (start == 1'b0 && ^(-16'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_33)) begin
		safe_rshift_func_uint16_t_u_s_arg_right <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint16_t_u_s_finish_final = safe_rshift_func_uint16_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_33))) begin
		safe_rshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_s_finish) begin
		safe_rshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_33))) begin
		safe_rshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_s_finish) begin
		safe_rshift_func_uint16_t_u_s_return_val_reg <= safe_rshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_38)) begin
		safe_sub_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_39)) begin
		safe_sub_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_38)) begin
		safe_sub_func_uint8_t_u_u_arg_ui1 <= func_3_32_46;
		if (start == 1'b0 && ^(func_3_32_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_38)) begin
		safe_sub_func_uint8_t_u_u_arg_ui2 <= func_3_32_47_reg;
		if (start == 1'b0 && ^(func_3_32_47_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_uint8_t_u_u_finish_final = safe_sub_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_38))) begin
		safe_sub_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_sub_func_uint8_t_u_u_finish) begin
		safe_sub_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_38))) begin
		safe_sub_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_sub_func_uint8_t_u_u_finish) begin
		safe_sub_func_uint8_t_u_u_return_val_reg <= safe_sub_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_sub_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_42)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_43)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_48)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_42)) begin
		safe_rshift_func_uint16_t_u_u_arg_left <= func_3_32_49_reg;
		if (start == 1'b0 && ^(func_3_32_49_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_48)) begin
		safe_rshift_func_uint16_t_u_u_arg_left <= func_3_32_57;
		if (start == 1'b0 && ^(func_3_32_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_42)) begin
		safe_rshift_func_uint16_t_u_u_arg_right <= func_3_32_51;
		if (start == 1'b0 && ^(func_3_32_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_48)) begin
		safe_rshift_func_uint16_t_u_u_arg_right <= 32'd15;
		if (start == 1'b0 && ^(32'd15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint16_t_u_u_finish_final = safe_rshift_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_42))) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_48))) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_42))) begin
		safe_rshift_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_return_val_reg <= safe_rshift_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_48))) begin
		safe_rshift_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_return_val_reg <= safe_rshift_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_44)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_44)) begin
		safe_lshift_func_uint16_t_u_s_arg_left <= func_3_11_18_reg;
		if (start == 1'b0 && ^(func_3_11_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_44)) begin
		safe_lshift_func_uint16_t_u_s_arg_right <= func_3_32_53;
		if (start == 1'b0 && ^(func_3_32_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint16_t_u_s_finish_final = safe_lshift_func_uint16_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_44))) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_44))) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= safe_lshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_46)) begin
		safe_div_func_uint32_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_47)) begin
		safe_div_func_uint32_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_start"); $finish; end
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_88)) begin
		safe_div_func_uint32_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		safe_div_func_uint32_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_46)) begin
		safe_div_func_uint32_t_u_u_arg_ui1 <= func_3_32_55;
		if (start == 1'b0 && ^(func_3_32_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_arg_ui1"); $finish; end
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_88)) begin
		safe_div_func_uint32_t_u_u_arg_ui1 <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_46)) begin
		safe_div_func_uint32_t_u_u_arg_ui2 <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_arg_ui2"); $finish; end
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_88)) begin
		safe_div_func_uint32_t_u_u_arg_ui2 <= -32'd3;
		if (start == 1'b0 && ^(-32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_uint32_t_u_u_finish_final = safe_div_func_uint32_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_46))) begin
		safe_div_func_uint32_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_finish_reg"); $finish; end
	end
	if (safe_div_func_uint32_t_u_u_finish) begin
		safe_div_func_uint32_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_3_BB__98_88))) begin
		safe_div_func_uint32_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_finish_reg"); $finish; end
	end
	if (safe_div_func_uint32_t_u_u_finish) begin
		safe_div_func_uint32_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_46))) begin
		safe_div_func_uint32_t_u_u_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_div_func_uint32_t_u_u_finish) begin
		safe_div_func_uint32_t_u_u_return_val_reg <= safe_div_func_uint32_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_div_func_uint32_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_3_BB__98_88))) begin
		safe_div_func_uint32_t_u_u_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_div_func_uint32_t_u_u_finish) begin
		safe_div_func_uint32_t_u_u_return_val_reg <= safe_div_func_uint32_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_div_func_uint32_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint32_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_52)) begin
		func_15_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_53)) begin
		func_15_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_52)) begin
		func_15_arg_p_16 <= func_3_11_12_reg;
		if (start == 1'b0 && ^(func_3_11_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_arg_p_16"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_52)) begin
		func_15_arg_p_17 <= func_3_11_14_reg;
		if (start == 1'b0 && ^(func_3_11_14_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_arg_p_17"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_52)) begin
		func_15_arg_p_18 <= func_3_32_58_reg;
		if (start == 1'b0 && ^(func_3_32_58_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_arg_p_18"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__32_52)) begin
		func_15_arg_p_19 <= func_3_32_60;
		if (start == 1'b0 && ^(func_3_32_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_arg_p_19"); $finish; end
	end
end
always @(*) begin
	func_15_finish_final = func_15_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__32_52))) begin
		func_15_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_finish_reg"); $finish; end
	end
	if (func_15_finish) begin
		func_15_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_15_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__62_57)) begin
		func_13_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		func_13_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__62_57)) begin
		func_13_arg_p_14 <= func_3_62_63;
		if (start == 1'b0 && ^(func_3_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_arg_p_14"); $finish; end
	end
end
always @(*) begin
	func_13_finish_final = func_13_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__62_57))) begin
		func_13_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_finish_reg"); $finish; end
	end
	if (func_13_finish) begin
		func_13_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__62_57))) begin
		func_13_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_return_val_reg"); $finish; end
	end
	if (func_13_finish) begin
		func_13_return_val_reg <= func_13_return_val;
		if (start == 1'b0 && ^(func_13_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__62_59)) begin
		safe_mod_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		safe_mod_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_start"); $finish; end
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__89_82)) begin
		safe_mod_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_83)) begin
		safe_mod_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__62_59)) begin
		safe_mod_func_int16_t_s_s_arg_si1 <= func_3_62_64_reg;
		if (start == 1'b0 && ^(func_3_62_64_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_arg_si1"); $finish; end
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__89_82)) begin
		safe_mod_func_int16_t_s_s_arg_si1 <= func_3_74_76_reg;
		if (start == 1'b0 && ^(func_3_74_76_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__62_59)) begin
		safe_mod_func_int16_t_s_s_arg_si2 <= func_3_3_4_reg;
		if (start == 1'b0 && ^(func_3_3_4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_arg_si2"); $finish; end
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__89_82)) begin
		safe_mod_func_int16_t_s_s_arg_si2 <= func_3_89_94;
		if (start == 1'b0 && ^(func_3_89_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mod_func_int16_t_s_s_finish_final = safe_mod_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__62_59))) begin
		safe_mod_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mod_func_int16_t_s_s_finish) begin
		safe_mod_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_3_BB__89_82))) begin
		safe_mod_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mod_func_int16_t_s_s_finish) begin
		safe_mod_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__62_59))) begin
		safe_mod_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mod_func_int16_t_s_s_finish) begin
		safe_mod_func_int16_t_s_s_return_val_reg <= safe_mod_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mod_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_3_BB__89_82))) begin
		safe_mod_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mod_func_int16_t_s_s_finish) begin
		safe_mod_func_int16_t_s_s_return_val_reg <= safe_mod_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mod_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_90)) begin
		safe_lshift_func_uint8_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_91)) begin
		safe_lshift_func_uint8_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_90)) begin
		safe_lshift_func_uint8_t_u_s_arg_left <= func_3_98_100;
		if (start == 1'b0 && ^(func_3_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_90)) begin
		safe_lshift_func_uint8_t_u_s_arg_right <= 32'd7;
		if (start == 1'b0 && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint8_t_u_s_finish_final = safe_lshift_func_uint8_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__98_90))) begin
		safe_lshift_func_uint8_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint8_t_u_s_finish) begin
		safe_lshift_func_uint8_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__98_90))) begin
		safe_lshift_func_uint8_t_u_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint8_t_u_s_finish) begin
		safe_lshift_func_uint8_t_u_s_return_val_reg <= safe_lshift_func_uint8_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_94)) begin
		safe_mul_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_95)) begin
		safe_mul_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_94)) begin
		safe_mul_func_uint8_t_u_u_arg_ui1 <= func_3_98_104_reg;
		if (start == 1'b0 && ^(func_3_98_104_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_F_func_3_BB__98_94)) begin
		safe_mul_func_uint8_t_u_u_arg_ui2 <= func_3_98_106;
		if (start == 1'b0 && ^(func_3_98_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_uint8_t_u_u_finish_final = safe_mul_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__98_94))) begin
		safe_mul_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_mul_func_uint8_t_u_u_finish) begin
		safe_mul_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_3_BB__98_94))) begin
		safe_mul_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_mul_func_uint8_t_u_u_finish) begin
		safe_mul_func_uint8_t_u_u_return_val_reg <= safe_mul_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_mul_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_3: %117*/
	/*   ret i16 %119*/
	if ((cur_state == LEGUP_F_func_3_BB__117_104)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_1_memory_controller_enable_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_1_memory_controller_enable_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = legup_memcpy_2_memory_controller_enable_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = legup_memcpy_2_memory_controller_enable_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_a = safe_div_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_a = safe_div_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = safe_mod_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = safe_mod_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_a = safe_add_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_a = safe_add_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_a = safe_div_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_a = safe_div_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_a = func_15_memory_controller_enable_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_a = func_15_memory_controller_enable_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = func_13_memory_controller_enable_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = func_13_memory_controller_enable_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_a = safe_mod_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_a = safe_mod_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_a = safe_mod_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_a = safe_mod_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_a = safe_div_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_a = safe_div_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_enable_a = safe_mul_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_enable_a = safe_mul_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_3: %5*/
	/*   store i16 %4, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %8*/
	/*   store i32 %storemerge, i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__8_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %11*/
	/*   %13 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %11*/
	/*   %19 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %11*/
	/*   store i8 %20, i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %32*/
	/*   %37 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %32*/
	/*   %46 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %32*/
	/*   %51 = load i32* %50, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %32*/
	/*   %59 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 0, i32 6), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %62*/
	/*   %63 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %62*/
	/*   %67 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %62*/
	/*   store i8 %68, i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %69*/
	/*   %70 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__69_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %74*/
	/*   %75 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %79*/
	/*   %80 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__79_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %82*/
	/*   %83 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__82_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %89*/
	/*   %96 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__89_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %98*/
	/*   %105 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__98_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %108*/
	/*   %111 = load i8* %110, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__108_97)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_3: %117*/
	/*   %119 = load i16* %118, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__117_102)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_15_memory_controller_address_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_15_memory_controller_address_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_3: %5*/
	/*   store i16 %4, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_address_a = `TAG_g_g_8_a;
	end
	/* func_3: %8*/
	/*   store i32 %storemerge, i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__8_11)) begin
		memory_controller_address_a = `TAG_g_g_6_a;
	end
	/* func_3: %11*/
	/*   %13 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_3: %11*/
	/*   %19 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_18)) begin
		memory_controller_address_a = `TAG_g_g_40_a;
	end
	/* func_3: %11*/
	/*   store i8 %20, i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_20)) begin
		memory_controller_address_a = `TAG_g_g_40_a;
	end
	/* func_3: %32*/
	/*   %37 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_address_a = `TAG_g_g_8_a;
	end
	/* func_3: %32*/
	/*   %46 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_36)) begin
		memory_controller_address_a = `TAG_g_g_40_a;
	end
	/* func_3: %32*/
	/*   %51 = load i32* %50, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_40)) begin
		memory_controller_address_a = func_3_32_50_reg;
	end
	/* func_3: %32*/
	/*   %59 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 0, i32 6), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_50)) begin
		memory_controller_address_a = (`TAG_g_g_7_a + (4 * 32'd6));
	end
	/* func_3: %62*/
	/*   %63 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_55)) begin
		memory_controller_address_a = `TAG_g_g_40_a;
	end
	/* func_3: %62*/
	/*   %67 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_61)) begin
		memory_controller_address_a = `TAG_g_g_55_a;
	end
	/* func_3: %62*/
	/*   store i8 %68, i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_63)) begin
		memory_controller_address_a = `TAG_g_g_55_a;
	end
	/* func_3: %69*/
	/*   %70 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__69_65)) begin
		memory_controller_address_a = `TAG_g_g_6_a;
	end
	/* func_3: %74*/
	/*   %75 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_address_a = (`TAG_g_g_49_a + (4 * 32'd3));
	end
	/* func_3: %79*/
	/*   %80 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__79_73)) begin
		memory_controller_address_a = `TAG_g_g_55_a;
	end
	/* func_3: %82*/
	/*   %83 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__82_76)) begin
		memory_controller_address_a = (`TAG_g_g_7_a + ((40 * 32'd2) + (4 * 32'd5)));
	end
	/* func_3: %89*/
	/*   %96 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__89_84)) begin
		memory_controller_address_a = (`TAG_g_g_49_a + (4 * 32'd3));
	end
	/* func_3: %98*/
	/*   %105 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__98_92)) begin
		memory_controller_address_a = `TAG_g_g_8_a;
	end
	/* func_3: %108*/
	/*   %111 = load i8* %110, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__108_97)) begin
		memory_controller_address_a = func_3_108_110;
	end
	/* func_3: %117*/
	/*   %119 = load i16* %118, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__117_102)) begin
		memory_controller_address_a = func_3_117_118;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_1_memory_controller_write_enable_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_1_memory_controller_write_enable_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = legup_memcpy_2_memory_controller_write_enable_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = legup_memcpy_2_memory_controller_write_enable_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_a = safe_div_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_a = safe_div_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = safe_mod_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = safe_mod_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_a = safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_a = safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_a = safe_div_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_a = safe_div_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_a = func_15_memory_controller_write_enable_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_a = func_15_memory_controller_write_enable_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = func_13_memory_controller_write_enable_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = func_13_memory_controller_write_enable_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_a = safe_mod_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_a = safe_mod_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_a = safe_mod_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_a = safe_mod_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_a = safe_div_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_a = safe_div_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_write_enable_a = safe_mul_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_write_enable_a = safe_mul_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_3: %5*/
	/*   store i16 %4, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_3: %8*/
	/*   store i32 %storemerge, i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__8_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_3: %11*/
	/*   %13 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %11*/
	/*   %19 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %11*/
	/*   store i8 %20, i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_3: %32*/
	/*   %37 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %32*/
	/*   %46 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %32*/
	/*   %51 = load i32* %50, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %32*/
	/*   %59 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 0, i32 6), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %62*/
	/*   %63 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %62*/
	/*   %67 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %62*/
	/*   store i8 %68, i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_63)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_3: %69*/
	/*   %70 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__69_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %74*/
	/*   %75 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %79*/
	/*   %80 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__79_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %82*/
	/*   %83 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__82_76)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %89*/
	/*   %96 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__89_84)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %98*/
	/*   %105 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__98_92)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %108*/
	/*   %111 = load i8* %110, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__108_97)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_3: %117*/
	/*   %119 = load i16* %118, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__117_102)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_15_memory_controller_in_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_15_memory_controller_in_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_3: %5*/
	/*   store i16 %4, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_in_a = func_3_3_4_reg;
	end
	/* func_3: %8*/
	/*   store i32 %storemerge, i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__8_11)) begin
		memory_controller_in_a = func_3_8_storemerge_reg;
	end
	/* func_3: %11*/
	/*   store i8 %20, i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_20)) begin
		memory_controller_in_a = func_3_11_20;
	end
	/* func_3: %62*/
	/*   store i8 %68, i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_63)) begin
		memory_controller_in_a = func_3_62_68;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_1_memory_controller_size_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = legup_memcpy_2_memory_controller_size_a;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = legup_memcpy_2_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_a[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_a[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = safe_mod_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = safe_mod_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_a[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_a[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_a[1:0] = func_15_memory_controller_size_a;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_a[1:0] = func_15_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = func_13_memory_controller_size_a;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = func_13_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_a[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_a[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_a[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_a[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_a;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_size_a[1:0] = safe_mul_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_size_a[1:0] = safe_mul_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_3: %5*/
	/*   store i16 %4, i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_3: %8*/
	/*   store i32 %storemerge, i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__8_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %11*/
	/*   %13 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %11*/
	/*   %19 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_18)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %11*/
	/*   store i8 %20, i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__11_20)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %32*/
	/*   %37 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_3: %32*/
	/*   %46 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_36)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %32*/
	/*   %51 = load i32* %50, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %32*/
	/*   %59 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 0, i32 6), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__32_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %62*/
	/*   %63 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_55)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %62*/
	/*   %67 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_61)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %62*/
	/*   store i8 %68, i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__62_63)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %69*/
	/*   %70 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__69_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %74*/
	/*   %75 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %79*/
	/*   %80 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__79_73)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %82*/
	/*   %83 = load i32* getelementptr inbounds ([5 x [10 x i32]]* @g_7, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__82_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %89*/
	/*   %96 = load volatile i32* getelementptr inbounds ([4 x i32]* @g_49, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__89_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_3: %98*/
	/*   %105 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__98_92)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_3: %108*/
	/*   %111 = load i8* %110, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__108_97)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_3: %117*/
	/*   %119 = load i16* %118, align 2*/
	if ((cur_state == LEGUP_F_func_3_BB__117_102)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_1_memory_controller_enable_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_1_memory_controller_enable_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = legup_memcpy_2_memory_controller_enable_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = legup_memcpy_2_memory_controller_enable_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_b = safe_div_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_b = safe_div_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = safe_mod_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = safe_mod_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_b = safe_add_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_b = safe_add_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_b = safe_div_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_b = safe_div_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_b = func_15_memory_controller_enable_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_enable_b = func_15_memory_controller_enable_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = func_13_memory_controller_enable_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = func_13_memory_controller_enable_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_b = safe_mod_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_b = safe_mod_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_b = safe_mod_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_enable_b = safe_mod_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_b = safe_div_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_b = safe_div_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_enable_b = safe_mul_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_enable_b = safe_mul_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_3: %5*/
	/*   store i32 -1769391627, i32* %7, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_3: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_3: %11*/
	/*   %24 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_3: %28*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__28_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_3: %32*/
	/*   %44 = load i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_3: %32*/
	/*   store i8 %45, i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_3: %74*/
	/*   store i32 %77, i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_1_memory_controller_address_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_15_memory_controller_address_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_15_memory_controller_address_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_3: %5*/
	/*   store i32 -1769391627, i32* %7, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_address_b = func_3_5_7_reg;
	end
	/* func_3: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_address_b = func_3_11_15;
	end
	/* func_3: %11*/
	/*   %24 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_23)) begin
		memory_controller_address_b = `TAG_g_g_6_a;
	end
	/* func_3: %28*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__28_28)) begin
		memory_controller_address_b = func_3_28_29;
	end
	/* func_3: %32*/
	/*   %44 = load i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_address_b = func_3_32_43_reg;
	end
	/* func_3: %32*/
	/*   store i8 %45, i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_37)) begin
		memory_controller_address_b = func_3_32_43_reg;
	end
	/* func_3: %74*/
	/*   store i32 %77, i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_address_b = `TAG_g_g_64_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_1_memory_controller_write_enable_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_1_memory_controller_write_enable_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = legup_memcpy_2_memory_controller_write_enable_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = legup_memcpy_2_memory_controller_write_enable_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_b = safe_div_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_b = safe_div_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = safe_mod_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = safe_mod_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_b = safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_b = safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_write_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_b = safe_div_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_b = safe_div_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_b = func_15_memory_controller_write_enable_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_write_enable_b = func_15_memory_controller_write_enable_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = func_13_memory_controller_write_enable_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = func_13_memory_controller_write_enable_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_b = safe_mod_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_b = safe_mod_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_b = safe_mod_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_write_enable_b = safe_mod_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_b = safe_div_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_b = safe_div_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_write_enable_b = safe_mul_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_write_enable_b = safe_mul_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_3: %5*/
	/*   store i32 -1769391627, i32* %7, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_3: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_3: %11*/
	/*   %24 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_3: %28*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__28_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_3: %32*/
	/*   %44 = load i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_3: %32*/
	/*   store i8 %45, i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_3: %74*/
	/*   store i32 %77, i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_1_memory_controller_in_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_15_memory_controller_in_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_15_memory_controller_in_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_3: %5*/
	/*   store i32 -1769391627, i32* %7, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_in_b = -32'd1769391627;
	end
	/* func_3: %32*/
	/*   store i8 %45, i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_37)) begin
		memory_controller_in_b = func_3_32_45;
	end
	/* func_3: %74*/
	/*   store i32 %77, i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_in_b = func_3_74_77;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_1_memory_controller_size_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_1(i8* %1, i8* getelementptr inbounds ([7 x i8]* @func_3.l_41, i32 0, i32 0), i32 7)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = legup_memcpy_2_memory_controller_size_b;
	end
	/* func_3: %0*/
	/*   call void @legup_memcpy_2(i8* %2, i8* bitcast ([9 x [8 x [2 x i16]]]* @func_3.l_67 to i8*), i32 288)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = legup_memcpy_2_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	/* func_3: %5*/
	/*   call void @legup_memcpy_4(i8* %6, i8* bitcast ([7 x i32]* @func_3.l_10 to i8*), i32 28)*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_b[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_3: %11*/
	/*   %18 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext %17, i16 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_b[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = safe_mod_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_3: %11*/
	/*   %22 = call zeroext i8 @safe_mod_func_uint8_t_u_u(i8 zeroext %21, i8 zeroext 64) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = safe_mod_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_b[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_3: %11*/
	/*   %26 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %23, i8 signext %25) #3*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_b[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %35 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %34, i8 zeroext -100) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext -7, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %48 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %46, i8 zeroext %47) #3*/
	if ((cur_state == LEGUP_function_call_39)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %52 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %49, i32 %51) #3*/
	if ((cur_state == LEGUP_function_call_43)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %54 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %18, i32 %53) #3*/
	if ((cur_state == LEGUP_function_call_45)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %56 = call i32 @safe_div_func_uint32_t_u_u(i32 %55, i32 1) #3*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %58 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %57, i32 15) #3*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_b[1:0] = func_15_memory_controller_size_b;
	end
	/* func_3: %32*/
	/*   %61 = call i32 @func_15(i16 signext %12, i8 signext %14, i16 signext %58, i8 zeroext %60) #3*/
	if ((cur_state == LEGUP_function_call_53)) begin
		memory_controller_size_b[1:0] = func_15_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = func_13_memory_controller_size_b;
	end
	/* func_3: %62*/
	/*   %64 = call signext i16 @func_13(i8 zeroext %63) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = func_13_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_b[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_3: %62*/
	/*   %65 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %64, i16 signext %4) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_b[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_b[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_3: %89*/
	/*   %95 = call signext i16 @safe_mod_func_int16_t_s_s(i16 signext %76, i16 signext %94) #3*/
	if ((cur_state == LEGUP_function_call_83)) begin
		memory_controller_size_b[1:0] = safe_mod_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_b;
	end
	/* func_3: %98*/
	/*   %99 = call i32 @safe_div_func_uint32_t_u_u(i32 1, i32 -3) #3*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint32_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	/* func_3: %98*/
	/*   %101 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %100, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_91)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_size_b[1:0] = safe_mul_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_3: %98*/
	/*   %107 = call zeroext i8 @safe_mul_func_uint8_t_u_u(i8 zeroext %104, i8 zeroext %106) #3*/
	if ((cur_state == LEGUP_function_call_95)) begin
		memory_controller_size_b[1:0] = safe_mul_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_3: %5*/
	/*   store i32 -1769391627, i32* %7, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__5_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_3: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_3: %11*/
	/*   %24 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__11_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_3: %28*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__28_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_3: %32*/
	/*   %44 = load i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_35)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_3: %32*/
	/*   store i8 %45, i8* %43, align 1*/
	if ((cur_state == LEGUP_F_func_3_BB__32_37)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_3: %74*/
	/*   store i32 %77, i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_func_3_BB__74_70)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_3: %117*/
	/*   ret i16 %119*/
	if ((cur_state == LEGUP_F_func_3_BB__117_104)) begin
		return_val <= func_3_117_119;
		if (start == 1'b0 && ^(func_3_117_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_func_1_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_func_1_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_func_1_BB__0_4 = 5'd4;
parameter [4:0] LEGUP_F_func_1_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_func_1_BB__0_6 = 5'd6;
parameter [4:0] LEGUP_F_func_1_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_func_1_BB__0_8 = 5'd8;
parameter [4:0] LEGUP_F_func_1_BB__0_10 = 5'd10;
parameter [4:0] LEGUP_F_func_1_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_func_1_BB__0_12 = 5'd12;
parameter [4:0] LEGUP_F_func_1_BB__10_13 = 5'd13;
parameter [4:0] LEGUP_F_func_1_BB__11_14 = 5'd14;
parameter [4:0] LEGUP_F_func_1_BB__11_16 = 5'd16;
parameter [4:0] LEGUP_F_func_1_BB__11_18 = 5'd18;
parameter [4:0] LEGUP_F_func_1_BB__11_19 = 5'd19;
parameter [4:0] LEGUP_F_func_1_BB__11_20 = 5'd20;
parameter [4:0] LEGUP_F_func_1_BB__11_21 = 5'd21;
parameter [4:0] LEGUP_F_func_1_BB__11_23 = 5'd23;
parameter [4:0] LEGUP_F_func_1_BB__11_25 = 5'd25;
parameter [4:0] LEGUP_F_func_1_BB__11_26 = 5'd26;
parameter [4:0] LEGUP_F_func_1_BB__11_27 = 5'd27;
parameter [4:0] LEGUP_F_func_1_BB__11_29 = 5'd29;
parameter [4:0] LEGUP_F_func_1_BB__11_30 = 5'd30;
parameter [4:0] LEGUP_F_func_1_BB__11_31 = 5'd31;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_2 = 5'd2;
parameter [4:0] LEGUP_function_call_9 = 5'd9;
parameter [4:0] LEGUP_function_call_15 = 5'd15;
parameter [4:0] LEGUP_function_call_17 = 5'd17;
parameter [4:0] LEGUP_function_call_22 = 5'd22;
parameter [4:0] LEGUP_function_call_24 = 5'd24;
parameter [4:0] LEGUP_function_call_28 = 5'd28;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_0_1;
reg [31:0] func_1_0_2;
reg [31:0] func_1_0_3;
reg [31:0] func_1_0_4;
reg [31:0] func_1_0_5;
reg [7:0] func_1_0_6;
reg [15:0] func_1_0_8;
reg  func_1_0_9;
reg [7:0] func_1_11_13;
reg [7:0] func_1_11_13_reg;
reg [31:0] func_1_11_14;
reg [31:0] func_1_11_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_11_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_11_15_reg;
reg [31:0] func_1_11_16;
reg [31:0] func_1_11_17;
reg [15:0] func_1_11_18;
reg [15:0] func_1_11_18_reg;
reg [15:0] func_1_11_19;
reg [15:0] func_1_11_19_reg;
reg [15:0] func_1_11_20;
reg [15:0] func_1_11_20_reg;
reg [15:0] func_1_11_21;
reg [15:0] func_1_11_22;
reg [7:0] func_1_11_23;
reg [7:0] func_1_11_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_11_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_11_26_reg;
reg [31:0] func_1_11_27;
reg  legup_memcpy_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_s;
reg [31:0] legup_memcpy_4_arg_n;
wire  legup_memcpy_4_memory_controller_enable_a;
wire  legup_memcpy_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_a;
wire [1:0] legup_memcpy_4_memory_controller_size_a;
wire  legup_memcpy_4_memory_controller_enable_b;
wire  legup_memcpy_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_b;
wire [1:0] legup_memcpy_4_memory_controller_size_b;
reg  legup_memcpy_4_finish_final;
reg  legup_memcpy_4_finish_reg;
wire  legup_memcpy_4_finish;
reg  func_3_start;
reg [31:0] func_3_arg_p_4;
reg [7:0] func_3_arg_p_5;
wire  func_3_memory_controller_enable_a;
wire  func_3_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_3_memory_controller_in_a;
wire [1:0] func_3_memory_controller_size_a;
wire  func_3_memory_controller_enable_b;
wire  func_3_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_3_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_3_memory_controller_in_b;
wire [1:0] func_3_memory_controller_size_b;
reg  func_3_finish_final;
reg  func_3_finish_reg;
wire  func_3_finish;
wire [15:0] func_3_return_val;
reg  safe_div_func_uint8_t_u_u_start;
reg [7:0] safe_div_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_div_func_uint8_t_u_u_arg_ui2;
wire  safe_div_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_div_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_div_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_div_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_div_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_div_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_div_func_uint8_t_u_u_finish_final;
reg  safe_div_func_uint8_t_u_u_finish_reg;
wire  safe_div_func_uint8_t_u_u_finish;
wire [7:0] safe_div_func_uint8_t_u_u_return_val;
reg  safe_sub_func_int8_t_s_s_start;
reg [7:0] safe_sub_func_int8_t_s_s_arg_si1;
reg [7:0] safe_sub_func_int8_t_s_s_arg_si2;
wire  safe_sub_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_sub_func_int8_t_s_s_memory_controller_size_a;
wire  safe_sub_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_sub_func_int8_t_s_s_memory_controller_size_b;
reg  safe_sub_func_int8_t_s_s_finish_final;
reg  safe_sub_func_int8_t_s_s_finish_reg;
wire  safe_sub_func_int8_t_s_s_finish;
wire [7:0] safe_sub_func_int8_t_s_s_return_val;
reg [7:0] safe_sub_func_int8_t_s_s_return_val_reg;
reg  safe_div_func_int16_t_s_s_start;
reg [15:0] safe_div_func_int16_t_s_s_arg_si1;
reg [15:0] safe_div_func_int16_t_s_s_arg_si2;
wire  safe_div_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_div_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_div_func_int16_t_s_s_memory_controller_size_a;
wire  safe_div_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_div_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_div_func_int16_t_s_s_memory_controller_size_b;
reg  safe_div_func_int16_t_s_s_finish_final;
reg  safe_div_func_int16_t_s_s_finish_reg;
wire  safe_div_func_int16_t_s_s_finish;
wire [15:0] safe_div_func_int16_t_s_s_return_val;
reg [15:0] safe_div_func_int16_t_s_s_return_val_reg;
reg  safe_add_func_uint16_t_u_u_start;
reg [15:0] safe_add_func_uint16_t_u_u_arg_ui1;
reg [15:0] safe_add_func_uint16_t_u_u_arg_ui2;
wire  safe_add_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_add_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_add_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_add_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_add_func_uint16_t_u_u_finish_final;
reg  safe_add_func_uint16_t_u_u_finish_reg;
wire  safe_add_func_uint16_t_u_u_finish;
wire [15:0] safe_add_func_uint16_t_u_u_return_val;
reg [15:0] safe_add_func_uint16_t_u_u_return_val_reg;
reg  safe_mul_func_int8_t_s_s_start;
reg [7:0] safe_mul_func_int8_t_s_s_arg_si1;
reg [7:0] safe_mul_func_int8_t_s_s_arg_si2;
wire  safe_mul_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_mul_func_int8_t_s_s_memory_controller_size_a;
wire  safe_mul_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_mul_func_int8_t_s_s_memory_controller_size_b;
reg  safe_mul_func_int8_t_s_s_finish_final;
reg  safe_mul_func_int8_t_s_s_finish_reg;
wire  safe_mul_func_int8_t_s_s_finish;
wire [7:0] safe_mul_func_int8_t_s_s_return_val;


legup_memcpy_4 legup_memcpy_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_4_start),
	.finish (legup_memcpy_4_finish),
	.arg_d (legup_memcpy_4_arg_d),
	.arg_s (legup_memcpy_4_arg_s),
	.arg_n (legup_memcpy_4_arg_n)
);

defparam
	legup_memcpy_4.tag_offset = tag_offset;


func_3 func_3 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_3_memory_controller_enable_a),
	.memory_controller_address_a (func_3_memory_controller_address_a),
	.memory_controller_write_enable_a (func_3_memory_controller_write_enable_a),
	.memory_controller_in_a (func_3_memory_controller_in_a),
	.memory_controller_size_a (func_3_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_3_memory_controller_enable_b),
	.memory_controller_address_b (func_3_memory_controller_address_b),
	.memory_controller_write_enable_b (func_3_memory_controller_write_enable_b),
	.memory_controller_in_b (func_3_memory_controller_in_b),
	.memory_controller_size_b (func_3_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_3_start),
	.finish (func_3_finish),
	.return_val (func_3_return_val),
	.arg_p_4 (func_3_arg_p_4),
	.arg_p_5 (func_3_arg_p_5)
);

defparam
	func_3.tag_offset = tag_offset;


safe_div_func_uint8_t_u_u safe_div_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_uint8_t_u_u_start),
	.finish (safe_div_func_uint8_t_u_u_finish),
	.return_val (safe_div_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_div_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_div_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_div_func_uint8_t_u_u.tag_offset = tag_offset;


safe_sub_func_int8_t_s_s safe_sub_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_int8_t_s_s_start),
	.finish (safe_sub_func_int8_t_s_s_finish),
	.return_val (safe_sub_func_int8_t_s_s_return_val),
	.arg_si1 (safe_sub_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_sub_func_int8_t_s_s_arg_si2)
);

defparam
	safe_sub_func_int8_t_s_s.tag_offset = tag_offset;


safe_div_func_int16_t_s_s safe_div_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_int16_t_s_s_start),
	.finish (safe_div_func_int16_t_s_s_finish),
	.return_val (safe_div_func_int16_t_s_s_return_val),
	.arg_si1 (safe_div_func_int16_t_s_s_arg_si1),
	.arg_si2 (safe_div_func_int16_t_s_s_arg_si2)
);

defparam
	safe_div_func_int16_t_s_s.tag_offset = tag_offset;


safe_add_func_uint16_t_u_u safe_add_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_uint16_t_u_u_start),
	.finish (safe_add_func_uint16_t_u_u_finish),
	.return_val (safe_add_func_uint16_t_u_u_return_val),
	.arg_ui1 (safe_add_func_uint16_t_u_u_arg_ui1),
	.arg_ui2 (safe_add_func_uint16_t_u_u_arg_ui2)
);

defparam
	safe_add_func_uint16_t_u_u.tag_offset = tag_offset;


safe_mul_func_int8_t_s_s safe_mul_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_int8_t_s_s_start),
	.finish (safe_mul_func_int8_t_s_s_finish),
	.return_val (safe_mul_func_int8_t_s_s_return_val),
	.arg_si1 (safe_mul_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_mul_func_int8_t_s_s_arg_si2)
);

defparam
	safe_mul_func_int8_t_s_s.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_1;
LEGUP_F_func_1_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_func_1_BB__0_10:
		next_state = LEGUP_F_func_1_BB__0_11;
LEGUP_F_func_1_BB__0_11:
		next_state = LEGUP_F_func_1_BB__0_12;
LEGUP_F_func_1_BB__0_12:
	if ((func_1_0_9 == 1'd1))
		next_state = LEGUP_F_func_1_BB__10_13;
	else if ((func_1_0_9 == 1'd0))
		next_state = LEGUP_F_func_1_BB__11_14;
LEGUP_F_func_1_BB__0_3:
		next_state = LEGUP_F_func_1_BB__0_4;
LEGUP_F_func_1_BB__0_4:
		next_state = LEGUP_F_func_1_BB__0_5;
LEGUP_F_func_1_BB__0_5:
		next_state = LEGUP_F_func_1_BB__0_6;
LEGUP_F_func_1_BB__0_6:
		next_state = LEGUP_F_func_1_BB__0_7;
LEGUP_F_func_1_BB__0_7:
		next_state = LEGUP_F_func_1_BB__0_8;
LEGUP_F_func_1_BB__0_8:
		next_state = LEGUP_function_call_9;
LEGUP_F_func_1_BB__10_13:
		next_state = LEGUP_F_func_1_BB__11_14;
LEGUP_F_func_1_BB__11_14:
		next_state = LEGUP_function_call_15;
LEGUP_F_func_1_BB__11_16:
		next_state = LEGUP_function_call_17;
LEGUP_F_func_1_BB__11_18:
		next_state = LEGUP_F_func_1_BB__11_19;
LEGUP_F_func_1_BB__11_19:
		next_state = LEGUP_F_func_1_BB__11_20;
LEGUP_F_func_1_BB__11_20:
		next_state = LEGUP_F_func_1_BB__11_21;
LEGUP_F_func_1_BB__11_21:
		next_state = LEGUP_function_call_22;
LEGUP_F_func_1_BB__11_23:
		next_state = LEGUP_function_call_24;
LEGUP_F_func_1_BB__11_25:
		next_state = LEGUP_F_func_1_BB__11_26;
LEGUP_F_func_1_BB__11_26:
		next_state = LEGUP_F_func_1_BB__11_27;
LEGUP_F_func_1_BB__11_27:
		next_state = LEGUP_function_call_28;
LEGUP_F_func_1_BB__11_29:
		next_state = LEGUP_F_func_1_BB__11_30;
LEGUP_F_func_1_BB__11_30:
		next_state = LEGUP_F_func_1_BB__11_31;
LEGUP_F_func_1_BB__11_31:
		next_state = LEGUP_0;
LEGUP_function_call_15:
	if ((safe_div_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__11_16;
LEGUP_function_call_17:
	if ((safe_sub_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__11_18;
LEGUP_function_call_2:
	if ((legup_memcpy_4_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_3;
LEGUP_function_call_22:
	if ((safe_div_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__11_23;
LEGUP_function_call_24:
	if ((safe_add_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__11_25;
LEGUP_function_call_28:
	if ((safe_mul_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__11_29;
LEGUP_function_call_9:
	if ((func_3_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_1: %0*/
	/*   %1 = bitcast [5 x [1 x i32]]* %l_82 to i8**/
if (reset) begin func_1_0_1 = 0; end
		func_1_0_1 = `TAG_func_1_0_l_82_a;
end
always @(*) begin
	/* func_1: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
		func_1_0_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %0*/
	/*   %3 = or i32 %2, 405055686*/
		func_1_0_3 = (func_1_0_2 | 32'd405055686);
end
always @(*) begin
	/* func_1: %0*/
	/*   %4 = load volatile i32* @g_2, align 4*/
		func_1_0_4 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %0*/
	/*   %5 = load i32* @g_6, align 4*/
		func_1_0_5 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %0*/
	/*   %6 = trunc i32 %5 to i8*/
		func_1_0_6 = func_1_0_5[7:0];
end
always @(*) begin
	/* func_1: %0*/
	/*   %8 = load i16* @g_78, align 2*/
		func_1_0_8 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* func_1: %0*/
	/*   %9 = icmp eq i16 %8, 0*/
		func_1_0_9 = (func_1_0_8 == 16'd0);
end
always @(*) begin
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
		func_1_11_13 = safe_sub_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		func_1_11_13_reg <= func_1_11_13;
		if (start == 1'b0 && ^(func_1_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_13_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %14 = sext i8 %13 to i32*/
		func_1_11_14 = $signed(func_1_11_13_reg);
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %14 = sext i8 %13 to i32*/
	if ((cur_state == LEGUP_F_func_1_BB__11_18)) begin
		func_1_11_14_reg <= func_1_11_14;
		if (start == 1'b0 && ^(func_1_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_14_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %15 = getelementptr inbounds [5 x [1 x i32]]* %l_82, i32 0, i32 1, i32 0*/
if (reset) begin func_1_11_15 = 0; end
		func_1_11_15 = (`TAG_func_1_0_l_82_a + (4 * 32'd1));
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %15 = getelementptr inbounds [5 x [1 x i32]]* %l_82, i32 0, i32 1, i32 0*/
	if ((cur_state == LEGUP_F_func_1_BB__11_14)) begin
		func_1_11_15_reg <= func_1_11_15;
		if (start == 1'b0 && ^(func_1_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_15_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %16 = load i32* %15, align 4*/
		func_1_11_16 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %11*/
	/*   %17 = xor i32 %16, %14*/
		func_1_11_17 = (func_1_11_16 ^ func_1_11_14_reg);
end
always @(*) begin
	/* func_1: %11*/
	/*   %18 = trunc i32 %17 to i16*/
		func_1_11_18 = func_1_11_17[15:0];
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %18 = trunc i32 %17 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__11_20)) begin
		func_1_11_18_reg <= func_1_11_18;
		if (start == 1'b0 && ^(func_1_11_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_18_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
		func_1_11_19 = safe_div_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		func_1_11_19_reg <= func_1_11_19;
		if (start == 1'b0 && ^(func_1_11_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_19_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
		func_1_11_20 = safe_add_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		func_1_11_20_reg <= func_1_11_20;
		if (start == 1'b0 && ^(func_1_11_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_20_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %21 = load i16* @g_78, align 2*/
		func_1_11_21 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_1: %11*/
	/*   %22 = or i16 %20, %21*/
		func_1_11_22 = (func_1_11_20_reg | func_1_11_21);
end
always @(*) begin
	/* func_1: %11*/
	/*   %23 = trunc i16 %22 to i8*/
		func_1_11_23 = func_1_11_22[7:0];
end
always @(*) begin
	/* func_1: %11*/
	/*   %24 = trunc i16 %21 to i8*/
		func_1_11_24 = func_1_11_21[7:0];
end
always @(*) begin
	/* func_1: %11*/
	/*   %26 = getelementptr inbounds [5 x [1 x i32]]* %l_82, i32 0, i32 2, i32 0*/
if (reset) begin func_1_11_26 = 0; end
		func_1_11_26 = (`TAG_func_1_0_l_82_a + (4 * 32'd2));
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %26 = getelementptr inbounds [5 x [1 x i32]]* %l_82, i32 0, i32 2, i32 0*/
	if ((cur_state == LEGUP_F_func_1_BB__11_14)) begin
		func_1_11_26_reg <= func_1_11_26;
		if (start == 1'b0 && ^(func_1_11_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_11_26_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %11*/
	/*   %27 = load i32* %26, align 4*/
		func_1_11_27 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memcpy_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_arg_d <= func_1_0_1;
		if (start == 1'b0 && ^(func_1_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_arg_s <= `TAG_g_func_1l_82_a;
		if (start == 1'b0 && ^(`TAG_g_func_1l_82_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_arg_n <= 32'd20;
		if (start == 1'b0 && ^(32'd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_4_finish_final = legup_memcpy_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__0_1))) begin
		legup_memcpy_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
	if (legup_memcpy_4_finish) begin
		legup_memcpy_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__0_8)) begin
		func_3_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_9)) begin
		func_3_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__0_8)) begin
		func_3_arg_p_4 <= func_1_0_4;
		if (start == 1'b0 && ^(func_1_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_arg_p_4"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__0_8)) begin
		func_3_arg_p_5 <= func_1_0_6;
		if (start == 1'b0 && ^(func_1_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_arg_p_5"); $finish; end
	end
end
always @(*) begin
	func_3_finish_final = func_3_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__0_8))) begin
		func_3_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_finish_reg"); $finish; end
	end
	if (func_3_finish) begin
		func_3_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_3_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_14)) begin
		safe_div_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_15)) begin
		safe_div_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_14)) begin
		safe_div_func_uint8_t_u_u_arg_ui1 <= 8'd1;
		if (start == 1'b0 && ^(8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_14)) begin
		safe_div_func_uint8_t_u_u_arg_ui2 <= 8'd1;
		if (start == 1'b0 && ^(8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_uint8_t_u_u_finish_final = safe_div_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_14))) begin
		safe_div_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_div_func_uint8_t_u_u_finish) begin
		safe_div_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_16)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_16)) begin
		safe_sub_func_int8_t_s_s_arg_si1 <= 8'd1;
		if (start == 1'b0 && ^(8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_16)) begin
		safe_sub_func_int8_t_s_s_arg_si2 <= 8'd6;
		if (start == 1'b0 && ^(8'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_int8_t_s_s_finish_final = safe_sub_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_16))) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_16))) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= safe_sub_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_21)) begin
		safe_div_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		safe_div_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_21)) begin
		safe_div_func_int16_t_s_s_arg_si1 <= -16'd490;
		if (start == 1'b0 && ^(-16'd490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_21)) begin
		safe_div_func_int16_t_s_s_arg_si2 <= func_1_11_18_reg;
		if (start == 1'b0 && ^(func_1_11_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_int16_t_s_s_finish_final = safe_div_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_21))) begin
		safe_div_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_div_func_int16_t_s_s_finish) begin
		safe_div_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_21))) begin
		safe_div_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_div_func_int16_t_s_s_finish) begin
		safe_div_func_int16_t_s_s_return_val_reg <= safe_div_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_div_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_23)) begin
		safe_add_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		safe_add_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_23)) begin
		safe_add_func_uint16_t_u_u_arg_ui1 <= func_1_11_19_reg;
		if (start == 1'b0 && ^(func_1_11_19_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_23)) begin
		safe_add_func_uint16_t_u_u_arg_ui2 <= 16'd4;
		if (start == 1'b0 && ^(16'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_uint16_t_u_u_finish_final = safe_add_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_23))) begin
		safe_add_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint16_t_u_u_finish) begin
		safe_add_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_23))) begin
		safe_add_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_add_func_uint16_t_u_u_finish) begin
		safe_add_func_uint16_t_u_u_return_val_reg <= safe_add_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_add_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_27)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_27)) begin
		safe_mul_func_int8_t_s_s_arg_si1 <= func_1_11_23;
		if (start == 1'b0 && ^(func_1_11_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__11_27)) begin
		safe_mul_func_int8_t_s_s_arg_si2 <= func_1_11_24;
		if (start == 1'b0 && ^(func_1_11_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_int8_t_s_s_finish_final = safe_mul_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__11_27))) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_1: %11*/
	/*   ret i32 %27*/
	if ((cur_state == LEGUP_F_func_1_BB__11_31)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_a = func_3_memory_controller_enable_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_a = func_3_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_a = safe_div_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_a = safe_div_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = safe_div_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = safe_div_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = safe_add_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = safe_add_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %0*/
	/*   store volatile i32 %3, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %0*/
	/*   %4 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %11*/
	/*   %21 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__11_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %11*/
	/*   %27 = load i32* %26, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_29)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_3_memory_controller_address_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_3_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_1: %0*/
	/*   store volatile i32 %3, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_5)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_1: %0*/
	/*   %4 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_1: %11*/
	/*   %21 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__11_25)) begin
		memory_controller_address_a = `TAG_g_g_78_a;
	end
	/* func_1: %11*/
	/*   %27 = load i32* %26, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_29)) begin
		memory_controller_address_a = func_1_11_26_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_a = func_3_memory_controller_write_enable_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_a = func_3_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_a = safe_div_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_a = safe_div_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = safe_div_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = safe_div_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %0*/
	/*   store volatile i32 %3, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %0*/
	/*   %4 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %11*/
	/*   %21 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__11_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %11*/
	/*   %27 = load i32* %26, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_3_memory_controller_in_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_3_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %0*/
	/*   store volatile i32 %3, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_5)) begin
		memory_controller_in_a = func_1_0_3;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_a[1:0] = func_3_memory_controller_size_a;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_a[1:0] = func_3_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %0*/
	/*   store volatile i32 %3, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %0*/
	/*   %4 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %11*/
	/*   %21 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__11_25)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %11*/
	/*   %27 = load i32* %26, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_29)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_b = func_3_memory_controller_enable_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_b = func_3_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_b = safe_div_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_enable_b = safe_div_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = safe_div_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = safe_div_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = safe_add_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = safe_add_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %0*/
	/*   %5 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %0*/
	/*   %8 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %11*/
	/*   store i32 %17, i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_20)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_3_memory_controller_address_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_3_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %0*/
	/*   %5 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_address_b = `TAG_g_g_6_a;
	end
	/* func_1: %0*/
	/*   %8 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__0_10)) begin
		memory_controller_address_b = `TAG_g_g_78_a;
	end
	/* func_1: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_18)) begin
		memory_controller_address_b = func_1_11_15_reg;
	end
	/* func_1: %11*/
	/*   store i32 %17, i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_20)) begin
		memory_controller_address_b = func_1_11_15_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_b = func_3_memory_controller_write_enable_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_b = func_3_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_b = safe_div_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_write_enable_b = safe_div_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = safe_div_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = safe_div_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %0*/
	/*   %5 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %0*/
	/*   %8 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %11*/
	/*   store i32 %17, i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_3_memory_controller_in_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_3_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %11*/
	/*   store i32 %17, i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_20)) begin
		memory_controller_in_b = func_1_11_17;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([5 x [1 x i32]]* @func_1.l_82 to i8*), i32 20)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_b[1:0] = func_3_memory_controller_size_b;
	end
	/* func_1: %0*/
	/*   %7 = call signext i16 @func_3(i32 %4, i8 zeroext %6) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_b[1:0] = func_3_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_1: %11*/
	/*   %12 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext 1, i8 zeroext 1) #3*/
	if ((cur_state == LEGUP_function_call_15)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %11*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext 1, i8 signext 6) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_1: %11*/
	/*   %19 = call signext i16 @safe_div_func_int16_t_s_s(i16 signext -490, i16 signext %18) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = safe_div_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %11*/
	/*   %20 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %19, i16 zeroext 4) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %11*/
	/*   %25 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %23, i8 signext %24) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %0*/
	/*   %5 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %0*/
	/*   %8 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__0_10)) begin
		memory_controller_size_b = 2'd1;
	end
	/* func_1: %11*/
	/*   %16 = load i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %11*/
	/*   store i32 %17, i32* %15, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__11_20)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_1: %11*/
	/*   ret i32 %27*/
	if ((cur_state == LEGUP_F_func_1_BB__11_31)) begin
		return_val <= func_1_11_27;
		if (start == 1'b0 && ^(func_1_11_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_argc,
	arg_argv
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__0_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__0_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__0_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__0_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__0_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__0_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__0_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__0_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__6_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__9_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__11_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__11_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB__11_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__11_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__14_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__15_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__16_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__18_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__19_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__21_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__21_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__21_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__21_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__21_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__21_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__21_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB__26_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB__28_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB__28_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB__28_41 = 6'd41;
parameter [5:0] LEGUP_F_main_BB__28_43 = 6'd43;
parameter [5:0] LEGUP_F_main_BB__31_44 = 6'd44;
parameter [5:0] LEGUP_F_main_BB__32_45 = 6'd45;
parameter [5:0] LEGUP_F_main_BB__33_46 = 6'd46;
parameter [5:0] LEGUP_F_main_BB__35_47 = 6'd47;
parameter [5:0] LEGUP_F_main_BB__35_48 = 6'd48;
parameter [5:0] LEGUP_F_main_BB__35_49 = 6'd49;
parameter [5:0] LEGUP_F_main_BB__35_51 = 6'd51;
parameter [5:0] LEGUP_F_main_BB__35_52 = 6'd52;
parameter [5:0] LEGUP_F_main_BB__35_53 = 6'd53;
parameter [5:0] LEGUP_F_main_BB__35_55 = 6'd55;
parameter [5:0] LEGUP_F_main_BB__35_56 = 6'd56;
parameter [5:0] LEGUP_F_main_BB__35_57 = 6'd57;
parameter [5:0] LEGUP_F_main_BB__35_59 = 6'd59;
parameter [5:0] LEGUP_F_main_BB__35_60 = 6'd60;
parameter [5:0] LEGUP_F_main_BB__35_61 = 6'd61;
parameter [5:0] LEGUP_F_main_BB__35_63 = 6'd63;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_2 = 6'd2;
parameter [5:0] LEGUP_function_call_4 = 6'd4;
parameter [5:0] LEGUP_function_call_6 = 6'd6;
parameter [5:0] LEGUP_function_call_10 = 6'd10;
parameter [5:0] LEGUP_function_call_14 = 6'd14;
parameter [5:0] LEGUP_function_call_22 = 6'd22;
parameter [5:0] LEGUP_function_call_32 = 6'd32;
parameter [5:0] LEGUP_function_call_36 = 6'd36;
parameter [5:0] LEGUP_function_call_42 = 6'd42;
parameter [5:0] LEGUP_function_call_50 = 6'd50;
parameter [5:0] LEGUP_function_call_54 = 6'd54;
parameter [5:0] LEGUP_function_call_58 = 6'd58;
parameter [5:0] LEGUP_function_call_62 = 6'd62;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_argc;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_argv;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_0_2;
reg [63:0] main_0_3;
reg [31:0] main_0_4;
reg [63:0] main_0_5;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg  main_6_exitcond3;
reg [31:0] main_9_10;
reg [31:0] main_9_10_reg;
reg  main_9_exitcond1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_scevgep2;
reg [31:0] main_11_12;
reg [63:0] main_11_13;
reg [31:0] main_16_17;
reg [31:0] main_19_20;
reg [15:0] main_21_22;
reg [63:0] main_21_23;
reg [7:0] main_21_24;
reg [63:0] main_21_25;
reg [31:0] main_26_27;
reg [31:0] main_26_27_reg;
reg  main_26_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep;
reg [31:0] main_28_29;
reg [63:0] main_28_30;
reg [31:0] main_33_34;
reg [7:0] main_35_36;
reg [63:0] main_35_37;
reg [31:0] main_35_38;
reg [63:0] main_35_39;
reg [15:0] main_35_40;
reg [63:0] main_35_41;
reg [31:0] main_35_42;
reg [31:0] main_35_43;
reg [31:0] main_35_44;
reg [31:0] main_35_44_reg;
reg  platform_main_begin_start;
wire  platform_main_begin_memory_controller_enable_a;
wire  platform_main_begin_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_a;
wire [1:0] platform_main_begin_memory_controller_size_a;
wire  platform_main_begin_memory_controller_enable_b;
wire  platform_main_begin_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_b;
wire [1:0] platform_main_begin_memory_controller_size_b;
reg  platform_main_begin_finish_final;
reg  platform_main_begin_finish_reg;
wire  platform_main_begin_finish;
reg  crc32_gentab_start;
wire  crc32_gentab_memory_controller_enable_a;
wire  crc32_gentab_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_a;
wire [1:0] crc32_gentab_memory_controller_size_a;
wire  crc32_gentab_memory_controller_enable_b;
wire  crc32_gentab_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_b;
wire [1:0] crc32_gentab_memory_controller_size_b;
reg  crc32_gentab_finish_final;
reg  crc32_gentab_finish_reg;
wire  crc32_gentab_finish;
reg  func_1_start;
wire  func_1_memory_controller_enable_a;
wire  func_1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_a;
wire [1:0] func_1_memory_controller_size_a;
wire  func_1_memory_controller_enable_b;
wire  func_1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_b;
wire [1:0] func_1_memory_controller_size_b;
reg  func_1_finish_final;
reg  func_1_finish_reg;
wire  func_1_finish;
wire [31:0] func_1_return_val;
reg  transparent_crc_start;
reg [63:0] transparent_crc_arg_val;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_arg_vname;
reg [31:0] transparent_crc_arg_flag;
wire  transparent_crc_memory_controller_enable_a;
wire  transparent_crc_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_a;
wire [1:0] transparent_crc_memory_controller_size_a;
wire  transparent_crc_memory_controller_enable_b;
wire  transparent_crc_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_b;
wire [1:0] transparent_crc_memory_controller_size_b;
reg  transparent_crc_finish_final;
reg  transparent_crc_finish_reg;
wire  transparent_crc_finish;
reg  platform_main_end_start;
reg [31:0] platform_main_end_arg_crc;
reg [31:0] platform_main_end_arg_flag;
wire  platform_main_end_memory_controller_enable_a;
wire  platform_main_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_a;
wire [1:0] platform_main_end_memory_controller_size_a;
wire  platform_main_end_memory_controller_enable_b;
wire  platform_main_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_b;
wire [1:0] platform_main_end_memory_controller_size_b;
reg  platform_main_end_finish_final;
reg  platform_main_end_finish_reg;
wire  platform_main_end_finish;
wire [31:0] platform_main_end_return_val;
reg [31:0] platform_main_end_return_val_reg;


platform_main_begin platform_main_begin (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_begin_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_begin_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_begin_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_begin_memory_controller_in_a),
	.memory_controller_size_a (platform_main_begin_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_begin_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_begin_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_begin_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_begin_memory_controller_in_b),
	.memory_controller_size_b (platform_main_begin_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_begin_start),
	.finish (platform_main_begin_finish)
);

defparam
	platform_main_begin.tag_offset = tag_offset;


crc32_gentab crc32_gentab (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_gentab_memory_controller_enable_a),
	.memory_controller_address_a (crc32_gentab_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_gentab_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_gentab_memory_controller_in_a),
	.memory_controller_size_a (crc32_gentab_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_gentab_memory_controller_enable_b),
	.memory_controller_address_b (crc32_gentab_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_gentab_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_gentab_memory_controller_in_b),
	.memory_controller_size_b (crc32_gentab_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_gentab_start),
	.finish (crc32_gentab_finish)
);

defparam
	crc32_gentab.tag_offset = tag_offset;


func_1 func_1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_1_memory_controller_enable_a),
	.memory_controller_address_a (func_1_memory_controller_address_a),
	.memory_controller_write_enable_a (func_1_memory_controller_write_enable_a),
	.memory_controller_in_a (func_1_memory_controller_in_a),
	.memory_controller_size_a (func_1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_1_memory_controller_enable_b),
	.memory_controller_address_b (func_1_memory_controller_address_b),
	.memory_controller_write_enable_b (func_1_memory_controller_write_enable_b),
	.memory_controller_in_b (func_1_memory_controller_in_b),
	.memory_controller_size_b (func_1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_1_start),
	.finish (func_1_finish),
	.return_val (func_1_return_val)
);

defparam
	func_1.tag_offset = tag_offset;


transparent_crc transparent_crc (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (transparent_crc_memory_controller_enable_a),
	.memory_controller_address_a (transparent_crc_memory_controller_address_a),
	.memory_controller_write_enable_a (transparent_crc_memory_controller_write_enable_a),
	.memory_controller_in_a (transparent_crc_memory_controller_in_a),
	.memory_controller_size_a (transparent_crc_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (transparent_crc_memory_controller_enable_b),
	.memory_controller_address_b (transparent_crc_memory_controller_address_b),
	.memory_controller_write_enable_b (transparent_crc_memory_controller_write_enable_b),
	.memory_controller_in_b (transparent_crc_memory_controller_in_b),
	.memory_controller_size_b (transparent_crc_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (transparent_crc_start),
	.finish (transparent_crc_finish),
	.arg_val (transparent_crc_arg_val),
	.arg_vname (transparent_crc_arg_vname),
	.arg_flag (transparent_crc_arg_flag)
);

defparam
	transparent_crc.tag_offset = tag_offset;


platform_main_end platform_main_end (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_end_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_end_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_end_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_end_memory_controller_in_a),
	.memory_controller_size_a (platform_main_end_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_end_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_end_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_end_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_end_memory_controller_in_b),
	.memory_controller_size_b (platform_main_end_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_end_start),
	.finish (platform_main_end_finish),
	.return_val (platform_main_end_return_val),
	.arg_crc (platform_main_end_arg_crc),
	.arg_flag (platform_main_end_arg_flag)
);

defparam
	platform_main_end.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_F_main_BB__11_19:
		next_state = LEGUP_F_main_BB__11_20;
LEGUP_F_main_BB__11_20:
		next_state = LEGUP_F_main_BB__11_21;
LEGUP_F_main_BB__11_21:
		next_state = LEGUP_function_call_22;
LEGUP_F_main_BB__11_23:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__14_24;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__15_25;
LEGUP_F_main_BB__14_24:
		next_state = LEGUP_F_main_BB__15_25;
LEGUP_F_main_BB__15_25:
		next_state = LEGUP_F_main_BB__16_26;
LEGUP_F_main_BB__16_26:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__18_27:
		next_state = LEGUP_F_main_BB__19_28;
LEGUP_F_main_BB__19_28:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__21_29:
		next_state = LEGUP_F_main_BB__21_30;
LEGUP_F_main_BB__21_30:
		next_state = LEGUP_F_main_BB__21_31;
LEGUP_F_main_BB__21_31:
		next_state = LEGUP_function_call_32;
LEGUP_F_main_BB__21_33:
		next_state = LEGUP_F_main_BB__21_34;
LEGUP_F_main_BB__21_34:
		next_state = LEGUP_F_main_BB__21_35;
LEGUP_F_main_BB__21_35:
		next_state = LEGUP_function_call_36;
LEGUP_F_main_BB__21_37:
		next_state = LEGUP_F_main_BB__26_38;
LEGUP_F_main_BB__26_38:
	if ((main_26_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__35_47;
	else if ((main_26_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__28_39;
LEGUP_F_main_BB__28_39:
		next_state = LEGUP_F_main_BB__28_40;
LEGUP_F_main_BB__28_40:
		next_state = LEGUP_F_main_BB__28_41;
LEGUP_F_main_BB__28_41:
		next_state = LEGUP_function_call_42;
LEGUP_F_main_BB__28_43:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__31_44;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__32_45;
LEGUP_F_main_BB__31_44:
		next_state = LEGUP_F_main_BB__32_45;
LEGUP_F_main_BB__32_45:
		next_state = LEGUP_F_main_BB__33_46;
LEGUP_F_main_BB__33_46:
		next_state = LEGUP_F_main_BB__26_38;
LEGUP_F_main_BB__35_47:
		next_state = LEGUP_F_main_BB__35_48;
LEGUP_F_main_BB__35_48:
		next_state = LEGUP_F_main_BB__35_49;
LEGUP_F_main_BB__35_49:
		next_state = LEGUP_function_call_50;
LEGUP_F_main_BB__35_51:
		next_state = LEGUP_F_main_BB__35_52;
LEGUP_F_main_BB__35_52:
		next_state = LEGUP_F_main_BB__35_53;
LEGUP_F_main_BB__35_53:
		next_state = LEGUP_function_call_54;
LEGUP_F_main_BB__35_55:
		next_state = LEGUP_F_main_BB__35_56;
LEGUP_F_main_BB__35_56:
		next_state = LEGUP_F_main_BB__35_57;
LEGUP_F_main_BB__35_57:
		next_state = LEGUP_function_call_58;
LEGUP_F_main_BB__35_59:
		next_state = LEGUP_F_main_BB__35_60;
LEGUP_F_main_BB__35_60:
		next_state = LEGUP_F_main_BB__35_61;
LEGUP_F_main_BB__35_61:
		next_state = LEGUP_function_call_62;
LEGUP_F_main_BB__35_63:
		next_state = LEGUP_0;
LEGUP_F_main_BB__6_16:
	if ((main_6_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB__21_29;
	else if ((main_6_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB__8_17;
LEGUP_F_main_BB__8_17:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__9_18:
	if ((main_9_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__18_27;
	else if ((main_9_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__11_19;
LEGUP_function_call_10:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_function_call_14:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_function_call_2:
	if ((platform_main_begin_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_function_call_22:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__11_23;
LEGUP_function_call_32:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__21_33;
LEGUP_function_call_36:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__21_37;
LEGUP_function_call_4:
	if ((crc32_gentab_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_function_call_42:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__28_43;
LEGUP_function_call_50:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__35_51;
LEGUP_function_call_54:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__35_55;
LEGUP_function_call_58:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__35_59;
LEGUP_function_call_6:
	if ((func_1_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_function_call_62:
	if ((platform_main_end_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__35_63;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
		main_0_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %3 = zext i32 %2 to i64*/
		main_0_3 = main_0_2;
end
always @(*) begin
	/* main: %0*/
	/*   %4 = load i32* @g_6, align 4*/
		main_0_4 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %5 = zext i32 %4 to i64*/
		main_0_5 = main_0_4;
end
always @(*) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7 = 32'd0;
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_6_7 = main_19_20;
	end
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %exitcond3 = icmp eq i32 %7, 5*/
		main_6_exitcond3 = (main_6_7_reg == 32'd5);
end
always @(*) begin
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10 = 32'd0;
	end
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__16_26) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_9_10 = main_16_17;
	end
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB__16_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %exitcond1 = icmp eq i32 %10, 10*/
		main_9_exitcond1 = (main_9_10_reg == 32'd10);
end
always @(*) begin
	/* main: %11*/
	/*   %scevgep2 = getelementptr [5 x [10 x i32]]* @g_7, i32 0, i32 %7, i32 %10*/
		main_11_scevgep2 = (`TAG_g_g_7_a + ((40 * main_6_7_reg) + (4 * main_9_10_reg)));
end
always @(*) begin
	/* main: %11*/
	/*   %12 = load i32* %scevgep2, align 4*/
		main_11_12 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %11*/
	/*   %13 = sext i32 %12 to i64*/
		main_11_13 = $signed(main_11_12);
end
always @(*) begin
	/* main: %16*/
	/*   %17 = add nsw i32 %10, 1*/
		main_16_17 = (main_9_10_reg + 32'd1);
end
always @(*) begin
	/* main: %19*/
	/*   %20 = add nsw i32 %7, 1*/
		main_19_20 = (main_6_7_reg + 32'd1);
end
always @(*) begin
	/* main: %21*/
	/*   %22 = load i16* @g_8, align 2*/
		main_21_22 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %21*/
	/*   %23 = zext i16 %22 to i64*/
		main_21_23 = main_21_22;
end
always @(*) begin
	/* main: %21*/
	/*   %24 = load i8* @g_40, align 1*/
		main_21_24 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %21*/
	/*   %25 = sext i8 %24 to i64*/
		main_21_25 = $signed(main_21_24);
end
always @(*) begin
	/* main: %26*/
	/*   %27 = phi i32 [ 0, %21 ], [ %34, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__21_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_26_27 = 32'd0;
	end
	/* main: %26*/
	/*   %27 = phi i32 [ 0, %21 ], [ %34, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__33_46) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_26_27 = main_33_34;
	end
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %27 = phi i32 [ 0, %21 ], [ %34, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__21_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_26_27_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_27_reg"); $finish; end
	end
	/* main: %26*/
	/*   %27 = phi i32 [ 0, %21 ], [ %34, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_26_27_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %exitcond = icmp eq i32 %27, 4*/
		main_26_exitcond = (main_26_27_reg == 32'd4);
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep = getelementptr [4 x i32]* @g_49, i32 0, i32 %27*/
		main_28_scevgep = (`TAG_g_g_49_a + (4 * main_26_27_reg));
end
always @(*) begin
	/* main: %28*/
	/*   %29 = load volatile i32* %scevgep, align 4*/
		main_28_29 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %28*/
	/*   %30 = zext i32 %29 to i64*/
		main_28_30 = main_28_29;
end
always @(*) begin
	/* main: %33*/
	/*   %34 = add nsw i32 %27, 1*/
		main_33_34 = (main_26_27_reg + 32'd1);
end
always @(*) begin
	/* main: %35*/
	/*   %36 = load i8* @g_55, align 1*/
		main_35_36 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %35*/
	/*   %37 = zext i8 %36 to i64*/
		main_35_37 = main_35_36;
end
always @(*) begin
	/* main: %35*/
	/*   %38 = load i32* @g_64, align 4*/
		main_35_38 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %35*/
	/*   %39 = sext i32 %38 to i64*/
		main_35_39 = $signed(main_35_38);
end
always @(*) begin
	/* main: %35*/
	/*   %40 = load i16* @g_78, align 2*/
		main_35_40 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %35*/
	/*   %41 = zext i16 %40 to i64*/
		main_35_41 = main_35_40;
end
always @(*) begin
	/* main: %35*/
	/*   %42 = load i32* @crc32_context, align 4*/
		main_35_42 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %35*/
	/*   %43 = xor i32 %42, -1*/
		main_35_43 = (main_35_42 ^ -32'd1);
end
always @(*) begin
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
		main_35_44 = platform_main_end_return_val_reg;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		main_35_44_reg <= main_35_44;
		if (start == 1'b0 && ^(main_35_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_44_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		platform_main_begin_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		platform_main_begin_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
end
always @(*) begin
	platform_main_begin_finish_final = platform_main_begin_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		platform_main_begin_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
	if (platform_main_begin_finish) begin
		platform_main_begin_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		crc32_gentab_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_gentab_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
end
always @(*) begin
	crc32_gentab_finish_final = crc32_gentab_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_3))) begin
		crc32_gentab_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
	if (crc32_gentab_finish) begin
		crc32_gentab_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		func_1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		func_1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
end
always @(*) begin
	func_1_finish_final = func_1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_5))) begin
		func_1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
	if (func_1_finish) begin
		func_1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_49)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_53)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_57)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_val <= main_0_3;
		if (start == 1'b0 && ^(main_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_val <= main_0_5;
		if (start == 1'b0 && ^(main_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_arg_val <= main_11_13;
		if (start == 1'b0 && ^(main_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_arg_val <= main_21_23;
		if (start == 1'b0 && ^(main_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		transparent_crc_arg_val <= main_21_25;
		if (start == 1'b0 && ^(main_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		transparent_crc_arg_val <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_49)) begin
		transparent_crc_arg_val <= main_35_37;
		if (start == 1'b0 && ^(main_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_53)) begin
		transparent_crc_arg_val <= main_35_39;
		if (start == 1'b0 && ^(main_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_57)) begin
		transparent_crc_arg_val <= main_35_41;
		if (start == 1'b0 && ^(main_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_vname <= `TAG_g_str_a;
		if (start == 1'b0 && ^(`TAG_g_str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_vname <= `TAG_g_str1_a;
		if (start == 1'b0 && ^(`TAG_g_str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_arg_vname <= `TAG_g_str2_a;
		if (start == 1'b0 && ^(`TAG_g_str2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_arg_vname <= `TAG_g_str4_a;
		if (start == 1'b0 && ^(`TAG_g_str4_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		transparent_crc_arg_vname <= `TAG_g_str5_a;
		if (start == 1'b0 && ^(`TAG_g_str5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		transparent_crc_arg_vname <= `TAG_g_str6_a;
		if (start == 1'b0 && ^(`TAG_g_str6_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_49)) begin
		transparent_crc_arg_vname <= `TAG_g_str8_a;
		if (start == 1'b0 && ^(`TAG_g_str8_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_53)) begin
		transparent_crc_arg_vname <= `TAG_g_str9_a;
		if (start == 1'b0 && ^(`TAG_g_str9_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_57)) begin
		transparent_crc_arg_vname <= `TAG_g_str10_a;
		if (start == 1'b0 && ^(`TAG_g_str10_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_49)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_53)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_57)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
end
always @(*) begin
	transparent_crc_finish_final = transparent_crc_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_9))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__0_13))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__11_21))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__21_31))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__21_35))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__28_41))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__35_49))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__35_53))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__35_57))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_61)) begin
		platform_main_end_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_62)) begin
		platform_main_end_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_61)) begin
		platform_main_end_arg_crc <= main_35_43;
		if (start == 1'b0 && ^(main_35_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_crc"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__35_61)) begin
		platform_main_end_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_flag"); $finish; end
	end
end
always @(*) begin
	platform_main_end_finish_final = platform_main_end_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__35_61))) begin
		platform_main_end_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__35_61))) begin
		platform_main_end_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_return_val_reg <= platform_main_end_return_val;
		if (start == 1'b0 && ^(platform_main_end_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %35*/
	/*   ret i32 %44*/
	if ((cur_state == LEGUP_F_main_BB__35_63)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %22 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %24 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %28*/
	/*   %29 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %35*/
	/*   %36 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %35*/
	/*   %38 = load i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %35*/
	/*   %40 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_main_BB__35_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %35*/
	/*   %42 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_59)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = `TAG_g_g_6_a;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_address_a = main_11_scevgep2;
	end
	/* main: %21*/
	/*   %22 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_address_a = `TAG_g_g_8_a;
	end
	/* main: %21*/
	/*   %24 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_address_a = `TAG_g_g_40_a;
	end
	/* main: %28*/
	/*   %29 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_39)) begin
		memory_controller_address_a = main_28_scevgep;
	end
	/* main: %35*/
	/*   %36 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_address_a = `TAG_g_g_55_a;
	end
	/* main: %35*/
	/*   %38 = load i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_51)) begin
		memory_controller_address_a = `TAG_g_g_64_a;
	end
	/* main: %35*/
	/*   %40 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_main_BB__35_55)) begin
		memory_controller_address_a = `TAG_g_g_78_a;
	end
	/* main: %35*/
	/*   %42 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_59)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %22 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %24 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   %29 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %35*/
	/*   %36 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %35*/
	/*   %38 = load i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %35*/
	/*   %40 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_main_BB__35_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %35*/
	/*   %42 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %22 = load i16* @g_8, align 2*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %21*/
	/*   %24 = load i8* @g_40, align 1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %28*/
	/*   %29 = load volatile i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %35*/
	/*   %36 = load i8* @g_55, align 1*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %35*/
	/*   %38 = load i32* @g_64, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %35*/
	/*   %40 = load i16* @g_78, align 2*/
	if ((cur_state == LEGUP_F_main_BB__35_55)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %35*/
	/*   %42 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_59)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %25, i8* getelementptr inbounds ([5 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %28*/
	/*   call void @transparent_crc(i64 %30, i8* getelementptr inbounds ([8 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([5 x i8]* @.str8, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([5 x i8]* @.str9, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %35*/
	/*   call void @transparent_crc(i64 %41, i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_58)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
	/* main: %35*/
	/*   %44 = call i32 @platform_main_end(i32 %43, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_62)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %35*/
	/*   ret i32 %44*/
	if ((cur_state == LEGUP_F_main_BB__35_63)) begin
		return_val <= main_35_44_reg;
		if (start == 1'b0 && ^(main_35_44_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
