//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Jun 13 15:04:25 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 22
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %l_46 = alloca [4 x i32], align 4
`define TAG_func_1_0_l_46 `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_func_1_0_l_46_a {`TAG_func_1_0_l_46, 23'd0}
//   %l_9 = alloca [2 x i32], align 4
`define TAG_func_1_0_l_9 `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_func_1_0_l_9_a {`TAG_func_1_0_l_9, 23'd0}
// @crc32_context = internal global i32 -1, align 4
`define TAG_g_crc32_context `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g_crc32_context_a {`TAG_g_crc32_context, 23'd0}
// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
`define TAG_g_crc32_tab `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g_crc32_tab_a {`TAG_g_crc32_tab, 23'd0}
// @g_113 = internal global i16 0, align 2
`define TAG_g_g_113 `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_g_113_a {`TAG_g_g_113, 23'd0}
// @g_114 = internal global i32 -621025515, align 4
`define TAG_g_g_114 `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_g_114_a {`TAG_g_g_114, 23'd0}
// @g_116 = internal global [9 x [1 x i16]] [[1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16...
`define TAG_g_g_116 `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g_g_116_a {`TAG_g_g_116, 23'd0}
// @g_12 = internal global i8 -9, align 1
`define TAG_g_g_12 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_g_12_a {`TAG_g_g_12, 23'd0}
// @g_2 = internal global i32 5, align 4
`define TAG_g_g_2 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_g_2_a {`TAG_g_g_2, 23'd0}
// @g_34 = internal global [7 x [6 x i32]] [[6 x i32] [i32 -1493613348, i32 8, i32 -1493613348, i32 -1493613348, i32 8, i32 -1493613348], [6 x i32] [i32 -1493613348, i32 8, i32 -1493613348, i32 -14936133...
`define TAG_g_g_34 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_g_34_a {`TAG_g_g_34, 23'd0}
// @g_44 = internal global i32 -7, align 4
`define TAG_g_g_44 `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_g_44_a {`TAG_g_g_44, 23'd0}
// @g_61 = internal global [3 x i32] [i32 -605769139, i32 -605769139, i32 -605769139], align 4
`define TAG_g_g_61 `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_g_61_a {`TAG_g_g_61, 23'd0}
// @g_77 = internal global i32 2, align 4
`define TAG_g_g_77 `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_g_77_a {`TAG_g_g_77, 23'd0}
// @.str = private unnamed_addr constant [4 x i8] c"g_2\00", align 1
`define TAG_g_str `MEMORY_CONTROLLER_TAG_SIZE'd3
// @.str1 = private unnamed_addr constant [5 x i8] c"g_12\00", align 1
`define TAG_g_str1 `MEMORY_CONTROLLER_TAG_SIZE'd5
// @.str10 = private unnamed_addr constant [12 x i8] c"g_116[i][j]\00", align 1
`define TAG_g_str10 `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g_str10_a {`TAG_g_str10, 23'd0}
`define TAG_g_str1_a {`TAG_g_str1, 23'd0}
// @.str2 = private unnamed_addr constant [11 x i8] c"g_34[i][j]\00", align 1
`define TAG_g_str2 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_str2_a {`TAG_g_str2, 23'd0}
// @.str4 = private unnamed_addr constant [5 x i8] c"g_44\00", align 1
`define TAG_g_str4 `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_str4_a {`TAG_g_str4, 23'd0}
// @.str5 = private unnamed_addr constant [8 x i8] c"g_61[i]\00", align 1
`define TAG_g_str5 `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_str5_a {`TAG_g_str5, 23'd0}
// @.str7 = private unnamed_addr constant [5 x i8] c"g_77\00", align 1
`define TAG_g_str7 `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_str7_a {`TAG_g_str7, 23'd0}
// @.str8 = private unnamed_addr constant [6 x i8] c"g_113\00", align 1
`define TAG_g_str8 `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_str8_a {`TAG_g_str8, 23'd0}
// @.str9 = private unnamed_addr constant [6 x i8] c"g_114\00", align 1
`define TAG_g_str9 `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_str9_a {`TAG_g_str9, 23'd0}
`define TAG_g_str_a {`TAG_g_str, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] g_2_address_a;
reg [0:0] g_2_address_b;
reg g_2_write_enable_a;
reg g_2_write_enable_b;
reg [31:0] g_2_in_a;
reg [31:0] g_2_in_b;
wire [31:0] g_2_out_a;
wire [31:0] g_2_out_b;

// @g_2 = internal global i32 5, align 4
ram_dual_port g_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_2_address_a ),
	.address_b( g_2_address_b ),
	.wren_a( g_2_write_enable_a ),
	.wren_b( g_2_write_enable_b ),
	.data_a( g_2_in_a ),
	.data_b( g_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_2_out_a ),
	.q_b( g_2_out_b)
);
defparam g_2.width_a = 32;
defparam g_2.width_b = 32;
defparam g_2.widthad_a = 1;
defparam g_2.widthad_b = 1;
defparam g_2.width_be_a = 1;
defparam g_2.width_be_b = 1;
defparam g_2.numwords_a = 1;
defparam g_2.numwords_b = 1;
defparam g_2.latency = ram_latency;
defparam g_2.init_file = "g_2.mif";

reg [1:0] str_address_a;
reg [1:0] str_address_b;
reg str_write_enable_a;
reg str_write_enable_b;
reg [7:0] str_in_a;
reg [7:0] str_in_b;
wire [7:0] str_out_a;
wire [7:0] str_out_b;

// @.str = private unnamed_addr constant [4 x i8] c"g_2\00", align 1
rom_dual_port str (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str_address_a ),
	.address_b( str_address_b ),
	.q_a( str_out_a ),
	.q_b( str_out_b)
);
defparam str.width_a = 8;
defparam str.width_b = 8;
defparam str.widthad_a = 2;
defparam str.widthad_b = 2;
defparam str.numwords_a = 4;
defparam str.numwords_b = 4;
defparam str.latency = ram_latency;
defparam str.init_file = "str.mif";

reg [0:0] g_12_address_a;
reg [0:0] g_12_address_b;
reg g_12_write_enable_a;
reg g_12_write_enable_b;
reg [7:0] g_12_in_a;
reg [7:0] g_12_in_b;
wire [7:0] g_12_out_a;
wire [7:0] g_12_out_b;

// @g_12 = internal global i8 -9, align 1
ram_dual_port g_12 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_12_address_a ),
	.address_b( g_12_address_b ),
	.wren_a( g_12_write_enable_a ),
	.wren_b( g_12_write_enable_b ),
	.data_a( g_12_in_a ),
	.data_b( g_12_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_12_out_a ),
	.q_b( g_12_out_b)
);
defparam g_12.width_a = 8;
defparam g_12.width_b = 8;
defparam g_12.widthad_a = 1;
defparam g_12.widthad_b = 1;
defparam g_12.width_be_a = 1;
defparam g_12.width_be_b = 1;
defparam g_12.numwords_a = 1;
defparam g_12.numwords_b = 1;
defparam g_12.latency = ram_latency;
defparam g_12.init_file = "g_12.mif";

reg [2:0] str1_address_a;
reg [2:0] str1_address_b;
reg str1_write_enable_a;
reg str1_write_enable_b;
reg [7:0] str1_in_a;
reg [7:0] str1_in_b;
wire [7:0] str1_out_a;
wire [7:0] str1_out_b;

// @.str1 = private unnamed_addr constant [5 x i8] c"g_12\00", align 1
rom_dual_port str1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str1_address_a ),
	.address_b( str1_address_b ),
	.q_a( str1_out_a ),
	.q_b( str1_out_b)
);
defparam str1.width_a = 8;
defparam str1.width_b = 8;
defparam str1.widthad_a = 3;
defparam str1.widthad_b = 3;
defparam str1.numwords_a = 5;
defparam str1.numwords_b = 5;
defparam str1.latency = ram_latency;
defparam str1.init_file = "str1.mif";

reg [5:0] g_34_address_a;
reg [5:0] g_34_address_b;
reg g_34_write_enable_a;
reg g_34_write_enable_b;
reg [31:0] g_34_in_a;
reg [31:0] g_34_in_b;
wire [31:0] g_34_out_a;
wire [31:0] g_34_out_b;

// @g_34 = internal global [7 x [6 x i32]] [[6 x i32] [i32 -1493613348, i32 8, i32 -1493613348, i32 -1493613348, i32 8, i32 -1493613348], [6 x i32] [i32 -1493613348, i32 8, i32 -1493613348, i32 -14936133...
ram_dual_port g_34 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_34_address_a ),
	.address_b( g_34_address_b ),
	.wren_a( g_34_write_enable_a ),
	.wren_b( g_34_write_enable_b ),
	.data_a( g_34_in_a ),
	.data_b( g_34_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_34_out_a ),
	.q_b( g_34_out_b)
);
defparam g_34.width_a = 32;
defparam g_34.width_b = 32;
defparam g_34.widthad_a = 6;
defparam g_34.widthad_b = 6;
defparam g_34.width_be_a = 1;
defparam g_34.width_be_b = 1;
defparam g_34.numwords_a = 42;
defparam g_34.numwords_b = 42;
defparam g_34.latency = ram_latency;
defparam g_34.init_file = "g_34.mif";

reg [3:0] str2_address_a;
reg [3:0] str2_address_b;
reg str2_write_enable_a;
reg str2_write_enable_b;
reg [7:0] str2_in_a;
reg [7:0] str2_in_b;
wire [7:0] str2_out_a;
wire [7:0] str2_out_b;

// @.str2 = private unnamed_addr constant [11 x i8] c"g_34[i][j]\00", align 1
rom_dual_port str2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str2_address_a ),
	.address_b( str2_address_b ),
	.q_a( str2_out_a ),
	.q_b( str2_out_b)
);
defparam str2.width_a = 8;
defparam str2.width_b = 8;
defparam str2.widthad_a = 4;
defparam str2.widthad_b = 4;
defparam str2.numwords_a = 11;
defparam str2.numwords_b = 11;
defparam str2.latency = ram_latency;
defparam str2.init_file = "str2.mif";

reg [0:0] g_44_address_a;
reg [0:0] g_44_address_b;
reg g_44_write_enable_a;
reg g_44_write_enable_b;
reg [31:0] g_44_in_a;
reg [31:0] g_44_in_b;
wire [31:0] g_44_out_a;
wire [31:0] g_44_out_b;

// @g_44 = internal global i32 -7, align 4
ram_dual_port g_44 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_44_address_a ),
	.address_b( g_44_address_b ),
	.wren_a( g_44_write_enable_a ),
	.wren_b( g_44_write_enable_b ),
	.data_a( g_44_in_a ),
	.data_b( g_44_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_44_out_a ),
	.q_b( g_44_out_b)
);
defparam g_44.width_a = 32;
defparam g_44.width_b = 32;
defparam g_44.widthad_a = 1;
defparam g_44.widthad_b = 1;
defparam g_44.width_be_a = 1;
defparam g_44.width_be_b = 1;
defparam g_44.numwords_a = 1;
defparam g_44.numwords_b = 1;
defparam g_44.latency = ram_latency;
defparam g_44.init_file = "g_44.mif";

reg [2:0] str4_address_a;
reg [2:0] str4_address_b;
reg str4_write_enable_a;
reg str4_write_enable_b;
reg [7:0] str4_in_a;
reg [7:0] str4_in_b;
wire [7:0] str4_out_a;
wire [7:0] str4_out_b;

// @.str4 = private unnamed_addr constant [5 x i8] c"g_44\00", align 1
rom_dual_port str4 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str4_address_a ),
	.address_b( str4_address_b ),
	.q_a( str4_out_a ),
	.q_b( str4_out_b)
);
defparam str4.width_a = 8;
defparam str4.width_b = 8;
defparam str4.widthad_a = 3;
defparam str4.widthad_b = 3;
defparam str4.numwords_a = 5;
defparam str4.numwords_b = 5;
defparam str4.latency = ram_latency;
defparam str4.init_file = "str4.mif";

reg [1:0] g_61_address_a;
reg [1:0] g_61_address_b;
reg g_61_write_enable_a;
reg g_61_write_enable_b;
reg [31:0] g_61_in_a;
reg [31:0] g_61_in_b;
wire [31:0] g_61_out_a;
wire [31:0] g_61_out_b;

// @g_61 = internal global [3 x i32] [i32 -605769139, i32 -605769139, i32 -605769139], align 4
ram_dual_port g_61 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_61_address_a ),
	.address_b( g_61_address_b ),
	.wren_a( g_61_write_enable_a ),
	.wren_b( g_61_write_enable_b ),
	.data_a( g_61_in_a ),
	.data_b( g_61_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_61_out_a ),
	.q_b( g_61_out_b)
);
defparam g_61.width_a = 32;
defparam g_61.width_b = 32;
defparam g_61.widthad_a = 2;
defparam g_61.widthad_b = 2;
defparam g_61.width_be_a = 1;
defparam g_61.width_be_b = 1;
defparam g_61.numwords_a = 3;
defparam g_61.numwords_b = 3;
defparam g_61.latency = ram_latency;
defparam g_61.init_file = "g_61.mif";

reg [2:0] str5_address_a;
reg [2:0] str5_address_b;
reg str5_write_enable_a;
reg str5_write_enable_b;
reg [7:0] str5_in_a;
reg [7:0] str5_in_b;
wire [7:0] str5_out_a;
wire [7:0] str5_out_b;

// @.str5 = private unnamed_addr constant [8 x i8] c"g_61[i]\00", align 1
rom_dual_port str5 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str5_address_a ),
	.address_b( str5_address_b ),
	.q_a( str5_out_a ),
	.q_b( str5_out_b)
);
defparam str5.width_a = 8;
defparam str5.width_b = 8;
defparam str5.widthad_a = 3;
defparam str5.widthad_b = 3;
defparam str5.numwords_a = 8;
defparam str5.numwords_b = 8;
defparam str5.latency = ram_latency;
defparam str5.init_file = "str5.mif";

reg [0:0] g_77_address_a;
reg [0:0] g_77_address_b;
reg g_77_write_enable_a;
reg g_77_write_enable_b;
reg [31:0] g_77_in_a;
reg [31:0] g_77_in_b;
wire [31:0] g_77_out_a;
wire [31:0] g_77_out_b;

// @g_77 = internal global i32 2, align 4
ram_dual_port g_77 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_77_address_a ),
	.address_b( g_77_address_b ),
	.wren_a( g_77_write_enable_a ),
	.wren_b( g_77_write_enable_b ),
	.data_a( g_77_in_a ),
	.data_b( g_77_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_77_out_a ),
	.q_b( g_77_out_b)
);
defparam g_77.width_a = 32;
defparam g_77.width_b = 32;
defparam g_77.widthad_a = 1;
defparam g_77.widthad_b = 1;
defparam g_77.width_be_a = 1;
defparam g_77.width_be_b = 1;
defparam g_77.numwords_a = 1;
defparam g_77.numwords_b = 1;
defparam g_77.latency = ram_latency;
defparam g_77.init_file = "g_77.mif";

reg [2:0] str7_address_a;
reg [2:0] str7_address_b;
reg str7_write_enable_a;
reg str7_write_enable_b;
reg [7:0] str7_in_a;
reg [7:0] str7_in_b;
wire [7:0] str7_out_a;
wire [7:0] str7_out_b;

// @.str7 = private unnamed_addr constant [5 x i8] c"g_77\00", align 1
rom_dual_port str7 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str7_address_a ),
	.address_b( str7_address_b ),
	.q_a( str7_out_a ),
	.q_b( str7_out_b)
);
defparam str7.width_a = 8;
defparam str7.width_b = 8;
defparam str7.widthad_a = 3;
defparam str7.widthad_b = 3;
defparam str7.numwords_a = 5;
defparam str7.numwords_b = 5;
defparam str7.latency = ram_latency;
defparam str7.init_file = "str7.mif";

reg [0:0] g_113_address_a;
reg [0:0] g_113_address_b;
reg g_113_write_enable_a;
reg g_113_write_enable_b;
reg [15:0] g_113_in_a;
reg [15:0] g_113_in_b;
wire [15:0] g_113_out_a;
wire [15:0] g_113_out_b;

// @g_113 = internal global i16 0, align 2
ram_dual_port g_113 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_113_address_a ),
	.address_b( g_113_address_b ),
	.wren_a( g_113_write_enable_a ),
	.wren_b( g_113_write_enable_b ),
	.data_a( g_113_in_a ),
	.data_b( g_113_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_113_out_a ),
	.q_b( g_113_out_b)
);
defparam g_113.width_a = 16;
defparam g_113.width_b = 16;
defparam g_113.widthad_a = 1;
defparam g_113.widthad_b = 1;
defparam g_113.width_be_a = 1;
defparam g_113.width_be_b = 1;
defparam g_113.numwords_a = 1;
defparam g_113.numwords_b = 1;
defparam g_113.latency = ram_latency;
defparam g_113.init_file = "g_113.mif";

reg [2:0] str8_address_a;
reg [2:0] str8_address_b;
reg str8_write_enable_a;
reg str8_write_enable_b;
reg [7:0] str8_in_a;
reg [7:0] str8_in_b;
wire [7:0] str8_out_a;
wire [7:0] str8_out_b;

// @.str8 = private unnamed_addr constant [6 x i8] c"g_113\00", align 1
rom_dual_port str8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str8_address_a ),
	.address_b( str8_address_b ),
	.q_a( str8_out_a ),
	.q_b( str8_out_b)
);
defparam str8.width_a = 8;
defparam str8.width_b = 8;
defparam str8.widthad_a = 3;
defparam str8.widthad_b = 3;
defparam str8.numwords_a = 6;
defparam str8.numwords_b = 6;
defparam str8.latency = ram_latency;
defparam str8.init_file = "str8.mif";

reg [0:0] g_114_address_a;
reg [0:0] g_114_address_b;
reg g_114_write_enable_a;
reg g_114_write_enable_b;
reg [31:0] g_114_in_a;
reg [31:0] g_114_in_b;
wire [31:0] g_114_out_a;
wire [31:0] g_114_out_b;

// @g_114 = internal global i32 -621025515, align 4
ram_dual_port g_114 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_114_address_a ),
	.address_b( g_114_address_b ),
	.wren_a( g_114_write_enable_a ),
	.wren_b( g_114_write_enable_b ),
	.data_a( g_114_in_a ),
	.data_b( g_114_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_114_out_a ),
	.q_b( g_114_out_b)
);
defparam g_114.width_a = 32;
defparam g_114.width_b = 32;
defparam g_114.widthad_a = 1;
defparam g_114.widthad_b = 1;
defparam g_114.width_be_a = 1;
defparam g_114.width_be_b = 1;
defparam g_114.numwords_a = 1;
defparam g_114.numwords_b = 1;
defparam g_114.latency = ram_latency;
defparam g_114.init_file = "g_114.mif";

reg [2:0] str9_address_a;
reg [2:0] str9_address_b;
reg str9_write_enable_a;
reg str9_write_enable_b;
reg [7:0] str9_in_a;
reg [7:0] str9_in_b;
wire [7:0] str9_out_a;
wire [7:0] str9_out_b;

// @.str9 = private unnamed_addr constant [6 x i8] c"g_114\00", align 1
rom_dual_port str9 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str9_address_a ),
	.address_b( str9_address_b ),
	.q_a( str9_out_a ),
	.q_b( str9_out_b)
);
defparam str9.width_a = 8;
defparam str9.width_b = 8;
defparam str9.widthad_a = 3;
defparam str9.widthad_b = 3;
defparam str9.numwords_a = 6;
defparam str9.numwords_b = 6;
defparam str9.latency = ram_latency;
defparam str9.init_file = "str9.mif";

reg [3:0] g_116_address_a;
reg [3:0] g_116_address_b;
reg g_116_write_enable_a;
reg g_116_write_enable_b;
reg [15:0] g_116_in_a;
reg [15:0] g_116_in_b;
wire [15:0] g_116_out_a;
wire [15:0] g_116_out_b;

// @g_116 = internal global [9 x [1 x i16]] [[1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16 -19454], [1 x i16] [i16...
ram_dual_port g_116 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_116_address_a ),
	.address_b( g_116_address_b ),
	.wren_a( g_116_write_enable_a ),
	.wren_b( g_116_write_enable_b ),
	.data_a( g_116_in_a ),
	.data_b( g_116_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_116_out_a ),
	.q_b( g_116_out_b)
);
defparam g_116.width_a = 16;
defparam g_116.width_b = 16;
defparam g_116.widthad_a = 4;
defparam g_116.widthad_b = 4;
defparam g_116.width_be_a = 1;
defparam g_116.width_be_b = 1;
defparam g_116.numwords_a = 9;
defparam g_116.numwords_b = 9;
defparam g_116.latency = ram_latency;
defparam g_116.init_file = "g_116.mif";

reg [3:0] str10_address_a;
reg [3:0] str10_address_b;
reg str10_write_enable_a;
reg str10_write_enable_b;
reg [7:0] str10_in_a;
reg [7:0] str10_in_b;
wire [7:0] str10_out_a;
wire [7:0] str10_out_b;

// @.str10 = private unnamed_addr constant [12 x i8] c"g_116[i][j]\00", align 1
rom_dual_port str10 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str10_address_a ),
	.address_b( str10_address_b ),
	.q_a( str10_out_a ),
	.q_b( str10_out_b)
);
defparam str10.width_a = 8;
defparam str10.width_b = 8;
defparam str10.widthad_a = 4;
defparam str10.widthad_b = 4;
defparam str10.numwords_a = 12;
defparam str10.numwords_b = 12;
defparam str10.latency = ram_latency;
defparam str10.init_file = "str10.mif";

reg [0:0] crc32_context_address_a;
reg [0:0] crc32_context_address_b;
reg crc32_context_write_enable_a;
reg crc32_context_write_enable_b;
reg [31:0] crc32_context_in_a;
reg [31:0] crc32_context_in_b;
wire [31:0] crc32_context_out_a;
wire [31:0] crc32_context_out_b;

// @crc32_context = internal global i32 -1, align 4
ram_dual_port crc32_context (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_context_address_a ),
	.address_b( crc32_context_address_b ),
	.wren_a( crc32_context_write_enable_a ),
	.wren_b( crc32_context_write_enable_b ),
	.data_a( crc32_context_in_a ),
	.data_b( crc32_context_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_context_out_a ),
	.q_b( crc32_context_out_b)
);
defparam crc32_context.width_a = 32;
defparam crc32_context.width_b = 32;
defparam crc32_context.widthad_a = 1;
defparam crc32_context.widthad_b = 1;
defparam crc32_context.width_be_a = 1;
defparam crc32_context.width_be_b = 1;
defparam crc32_context.numwords_a = 1;
defparam crc32_context.numwords_b = 1;
defparam crc32_context.latency = ram_latency;
defparam crc32_context.init_file = "crc32_context.mif";

reg [7:0] crc32_tab_address_a;
reg [7:0] crc32_tab_address_b;
reg crc32_tab_write_enable_a;
reg crc32_tab_write_enable_b;
reg [31:0] crc32_tab_in_a;
reg [31:0] crc32_tab_in_b;
wire [31:0] crc32_tab_out_a;
wire [31:0] crc32_tab_out_b;

// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
ram_dual_port crc32_tab (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_tab_address_a ),
	.address_b( crc32_tab_address_b ),
	.wren_a( crc32_tab_write_enable_a ),
	.wren_b( crc32_tab_write_enable_b ),
	.data_a( crc32_tab_in_a ),
	.data_b( crc32_tab_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_tab_out_a ),
	.q_b( crc32_tab_out_b)
);
defparam crc32_tab.width_a = 32;
defparam crc32_tab.width_b = 32;
defparam crc32_tab.widthad_a = 8;
defparam crc32_tab.widthad_b = 8;
defparam crc32_tab.width_be_a = 1;
defparam crc32_tab.width_be_b = 1;
defparam crc32_tab.numwords_a = 256;
defparam crc32_tab.numwords_b = 256;
defparam crc32_tab.latency = ram_latency;
defparam crc32_tab.init_file = "crc32_tab.mif";

reg [1:0] func_1_0_l_46_address_a;
reg [1:0] func_1_0_l_46_address_b;
reg func_1_0_l_46_write_enable_a;
reg func_1_0_l_46_write_enable_b;
reg [31:0] func_1_0_l_46_in_a;
reg [31:0] func_1_0_l_46_in_b;
wire [31:0] func_1_0_l_46_out_a;
wire [31:0] func_1_0_l_46_out_b;

//   %l_46 = alloca [4 x i32], align 4
ram_dual_port func_1_0_l_46 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1_0_l_46_address_a ),
	.address_b( func_1_0_l_46_address_b ),
	.wren_a( func_1_0_l_46_write_enable_a ),
	.wren_b( func_1_0_l_46_write_enable_b ),
	.data_a( func_1_0_l_46_in_a ),
	.data_b( func_1_0_l_46_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_1_0_l_46_out_a ),
	.q_b( func_1_0_l_46_out_b)
);
defparam func_1_0_l_46.width_a = 32;
defparam func_1_0_l_46.width_b = 32;
defparam func_1_0_l_46.widthad_a = 2;
defparam func_1_0_l_46.widthad_b = 2;
defparam func_1_0_l_46.width_be_a = 1;
defparam func_1_0_l_46.width_be_b = 1;
defparam func_1_0_l_46.numwords_a = 4;
defparam func_1_0_l_46.numwords_b = 4;
defparam func_1_0_l_46.latency = ram_latency;

reg [0:0] func_1_0_l_9_address_a;
reg [0:0] func_1_0_l_9_address_b;
reg func_1_0_l_9_write_enable_a;
reg func_1_0_l_9_write_enable_b;
reg [31:0] func_1_0_l_9_in_a;
reg [31:0] func_1_0_l_9_in_b;
wire [31:0] func_1_0_l_9_out_a;
wire [31:0] func_1_0_l_9_out_b;

//   %l_9 = alloca [2 x i32], align 4
ram_dual_port func_1_0_l_9 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1_0_l_9_address_a ),
	.address_b( func_1_0_l_9_address_b ),
	.wren_a( func_1_0_l_9_write_enable_a ),
	.wren_b( func_1_0_l_9_write_enable_b ),
	.data_a( func_1_0_l_9_in_a ),
	.data_b( func_1_0_l_9_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_1_0_l_9_out_a ),
	.q_b( func_1_0_l_9_out_b)
);
defparam func_1_0_l_9.width_a = 32;
defparam func_1_0_l_9.width_b = 32;
defparam func_1_0_l_9.widthad_a = 1;
defparam func_1_0_l_9.widthad_b = 1;
defparam func_1_0_l_9.width_be_a = 1;
defparam func_1_0_l_9.width_be_b = 1;
defparam func_1_0_l_9.numwords_a = 2;
defparam func_1_0_l_9.numwords_b = 2;
defparam func_1_0_l_9.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_g_2_a;
assign select_g_2_a = (tag_a == `TAG_g_g_2);
reg [ram_latency:0] select_g_2_reg_a;
wire [31:0] memory_controller_g_2_out_a;
assign memory_controller_g_2_out_a = {32{ select_g_2_reg_a[ram_latency]}} & g_2_out_a;

wire select_str_a;
assign select_str_a = (tag_a == `TAG_g_str);
reg [ram_latency:0] select_str_reg_a;
wire [7:0] memory_controller_str_out_a;
assign memory_controller_str_out_a = {8{ select_str_reg_a[ram_latency]}} & str_out_a;

wire select_g_12_a;
assign select_g_12_a = (tag_a == `TAG_g_g_12);
reg [ram_latency:0] select_g_12_reg_a;
wire [7:0] memory_controller_g_12_out_a;
assign memory_controller_g_12_out_a = {8{ select_g_12_reg_a[ram_latency]}} & g_12_out_a;

wire select_str1_a;
assign select_str1_a = (tag_a == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_a;
wire [7:0] memory_controller_str1_out_a;
assign memory_controller_str1_out_a = {8{ select_str1_reg_a[ram_latency]}} & str1_out_a;

wire select_g_34_a;
assign select_g_34_a = (tag_a == `TAG_g_g_34);
reg [ram_latency:0] select_g_34_reg_a;
wire [31:0] memory_controller_g_34_out_a;
assign memory_controller_g_34_out_a = {32{ select_g_34_reg_a[ram_latency]}} & g_34_out_a;

wire select_str2_a;
assign select_str2_a = (tag_a == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_a;
wire [7:0] memory_controller_str2_out_a;
assign memory_controller_str2_out_a = {8{ select_str2_reg_a[ram_latency]}} & str2_out_a;

wire select_g_44_a;
assign select_g_44_a = (tag_a == `TAG_g_g_44);
reg [ram_latency:0] select_g_44_reg_a;
wire [31:0] memory_controller_g_44_out_a;
assign memory_controller_g_44_out_a = {32{ select_g_44_reg_a[ram_latency]}} & g_44_out_a;

wire select_str4_a;
assign select_str4_a = (tag_a == `TAG_g_str4);
reg [ram_latency:0] select_str4_reg_a;
wire [7:0] memory_controller_str4_out_a;
assign memory_controller_str4_out_a = {8{ select_str4_reg_a[ram_latency]}} & str4_out_a;

wire select_g_61_a;
assign select_g_61_a = (tag_a == `TAG_g_g_61);
reg [ram_latency:0] select_g_61_reg_a;
wire [31:0] memory_controller_g_61_out_a;
assign memory_controller_g_61_out_a = {32{ select_g_61_reg_a[ram_latency]}} & g_61_out_a;

wire select_str5_a;
assign select_str5_a = (tag_a == `TAG_g_str5);
reg [ram_latency:0] select_str5_reg_a;
wire [7:0] memory_controller_str5_out_a;
assign memory_controller_str5_out_a = {8{ select_str5_reg_a[ram_latency]}} & str5_out_a;

wire select_g_77_a;
assign select_g_77_a = (tag_a == `TAG_g_g_77);
reg [ram_latency:0] select_g_77_reg_a;
wire [31:0] memory_controller_g_77_out_a;
assign memory_controller_g_77_out_a = {32{ select_g_77_reg_a[ram_latency]}} & g_77_out_a;

wire select_str7_a;
assign select_str7_a = (tag_a == `TAG_g_str7);
reg [ram_latency:0] select_str7_reg_a;
wire [7:0] memory_controller_str7_out_a;
assign memory_controller_str7_out_a = {8{ select_str7_reg_a[ram_latency]}} & str7_out_a;

wire select_g_113_a;
assign select_g_113_a = (tag_a == `TAG_g_g_113);
reg [ram_latency:0] select_g_113_reg_a;
wire [15:0] memory_controller_g_113_out_a;
assign memory_controller_g_113_out_a = {16{ select_g_113_reg_a[ram_latency]}} & g_113_out_a;

wire select_str8_a;
assign select_str8_a = (tag_a == `TAG_g_str8);
reg [ram_latency:0] select_str8_reg_a;
wire [7:0] memory_controller_str8_out_a;
assign memory_controller_str8_out_a = {8{ select_str8_reg_a[ram_latency]}} & str8_out_a;

wire select_g_114_a;
assign select_g_114_a = (tag_a == `TAG_g_g_114);
reg [ram_latency:0] select_g_114_reg_a;
wire [31:0] memory_controller_g_114_out_a;
assign memory_controller_g_114_out_a = {32{ select_g_114_reg_a[ram_latency]}} & g_114_out_a;

wire select_str9_a;
assign select_str9_a = (tag_a == `TAG_g_str9);
reg [ram_latency:0] select_str9_reg_a;
wire [7:0] memory_controller_str9_out_a;
assign memory_controller_str9_out_a = {8{ select_str9_reg_a[ram_latency]}} & str9_out_a;

wire select_g_116_a;
assign select_g_116_a = (tag_a == `TAG_g_g_116);
reg [ram_latency:0] select_g_116_reg_a;
wire [15:0] memory_controller_g_116_out_a;
assign memory_controller_g_116_out_a = {16{ select_g_116_reg_a[ram_latency]}} & g_116_out_a;

wire select_str10_a;
assign select_str10_a = (tag_a == `TAG_g_str10);
reg [ram_latency:0] select_str10_reg_a;
wire [7:0] memory_controller_str10_out_a;
assign memory_controller_str10_out_a = {8{ select_str10_reg_a[ram_latency]}} & str10_out_a;

wire select_crc32_context_a;
assign select_crc32_context_a = (tag_a == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_a;
wire [31:0] memory_controller_crc32_context_out_a;
assign memory_controller_crc32_context_out_a = {32{ select_crc32_context_reg_a[ram_latency]}} & crc32_context_out_a;

wire select_crc32_tab_a;
assign select_crc32_tab_a = (tag_a == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_a;
wire [31:0] memory_controller_crc32_tab_out_a;
assign memory_controller_crc32_tab_out_a = {32{ select_crc32_tab_reg_a[ram_latency]}} & crc32_tab_out_a;

wire select_func_1_0_l_46_a;
assign select_func_1_0_l_46_a = (tag_a == `TAG_func_1_0_l_46);
reg [ram_latency:0] select_func_1_0_l_46_reg_a;
wire [31:0] memory_controller_func_1_0_l_46_out_a;
assign memory_controller_func_1_0_l_46_out_a = {32{ select_func_1_0_l_46_reg_a[ram_latency]}} & func_1_0_l_46_out_a;

wire select_func_1_0_l_9_a;
assign select_func_1_0_l_9_a = (tag_a == `TAG_func_1_0_l_9);
reg [ram_latency:0] select_func_1_0_l_9_reg_a;
wire [31:0] memory_controller_func_1_0_l_9_out_a;
assign memory_controller_func_1_0_l_9_out_a = {32{ select_func_1_0_l_9_reg_a[ram_latency]}} & func_1_0_l_9_out_a;

always @(*)
begin
	g_2_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_2_a}};
	g_2_write_enable_a = memory_controller_write_enable_a & select_g_2_a;
	g_2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str_address_a = memory_controller_address_a [2-1+0:0] & {2{select_str_a}};
	str_write_enable_a = memory_controller_write_enable_a & select_str_a;
	str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_12_address_a = memory_controller_address_a [1-1+0:0] & {1{select_g_12_a}};
	g_12_write_enable_a = memory_controller_write_enable_a & select_g_12_a;
	g_12_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	str1_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str1_a}};
	str1_write_enable_a = memory_controller_write_enable_a & select_str1_a;
	str1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_34_address_a = memory_controller_address_a [6-1+2:2] & {6{select_g_34_a}};
	g_34_write_enable_a = memory_controller_write_enable_a & select_g_34_a;
	g_34_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str2_address_a = memory_controller_address_a [4-1+0:0] & {4{select_str2_a}};
	str2_write_enable_a = memory_controller_write_enable_a & select_str2_a;
	str2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_44_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_44_a}};
	g_44_write_enable_a = memory_controller_write_enable_a & select_g_44_a;
	g_44_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str4_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str4_a}};
	str4_write_enable_a = memory_controller_write_enable_a & select_str4_a;
	str4_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_61_address_a = memory_controller_address_a [2-1+2:2] & {2{select_g_61_a}};
	g_61_write_enable_a = memory_controller_write_enable_a & select_g_61_a;
	g_61_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str5_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str5_a}};
	str5_write_enable_a = memory_controller_write_enable_a & select_str5_a;
	str5_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_77_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_77_a}};
	g_77_write_enable_a = memory_controller_write_enable_a & select_g_77_a;
	g_77_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str7_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str7_a}};
	str7_write_enable_a = memory_controller_write_enable_a & select_str7_a;
	str7_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_113_address_a = memory_controller_address_a [1-1+1:1] & {1{select_g_113_a}};
	g_113_write_enable_a = memory_controller_write_enable_a & select_g_113_a;
	g_113_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	str8_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str8_a}};
	str8_write_enable_a = memory_controller_write_enable_a & select_str8_a;
	str8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_114_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_114_a}};
	g_114_write_enable_a = memory_controller_write_enable_a & select_g_114_a;
	g_114_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str9_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str9_a}};
	str9_write_enable_a = memory_controller_write_enable_a & select_str9_a;
	str9_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_116_address_a = memory_controller_address_a [4-1+1:1] & {4{select_g_116_a}};
	g_116_write_enable_a = memory_controller_write_enable_a & select_g_116_a;
	g_116_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	str10_address_a = memory_controller_address_a [4-1+0:0] & {4{select_str10_a}};
	str10_write_enable_a = memory_controller_write_enable_a & select_str10_a;
	str10_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	crc32_context_address_a = memory_controller_address_a [1-1+2:2] & {1{select_crc32_context_a}};
	crc32_context_write_enable_a = memory_controller_write_enable_a & select_crc32_context_a;
	crc32_context_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	crc32_tab_address_a = memory_controller_address_a [8-1+2:2] & {8{select_crc32_tab_a}};
	crc32_tab_write_enable_a = memory_controller_write_enable_a & select_crc32_tab_a;
	crc32_tab_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1_0_l_46_address_a = memory_controller_address_a [2-1+2:2] & {2{select_func_1_0_l_46_a}};
	func_1_0_l_46_write_enable_a = memory_controller_write_enable_a & select_func_1_0_l_46_a;
	func_1_0_l_46_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1_0_l_9_address_a = memory_controller_address_a [1-1+2:2] & {1{select_func_1_0_l_9_a}};
	func_1_0_l_9_write_enable_a = memory_controller_write_enable_a & select_func_1_0_l_9_a;
	func_1_0_l_9_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_g_2_reg_a[ram_latency]}} | {2{select_g_34_reg_a[ram_latency]}} | {2{select_g_44_reg_a[ram_latency]}} | {2{select_g_61_reg_a[ram_latency]}} | {2{select_g_77_reg_a[ram_latency]}} | {1{select_g_113_reg_a[ram_latency]}} | {2{select_g_114_reg_a[ram_latency]}} | {1{select_g_116_reg_a[ram_latency]}} | {2{select_crc32_context_reg_a[ram_latency]}} | {2{select_crc32_tab_reg_a[ram_latency]}} | {2{select_func_1_0_l_46_reg_a[ram_latency]}} | {2{select_func_1_0_l_9_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_g_2_out_a | memory_controller_str_out_a | memory_controller_g_12_out_a | memory_controller_str1_out_a | memory_controller_g_34_out_a | memory_controller_str2_out_a | memory_controller_g_44_out_a | memory_controller_str4_out_a | memory_controller_g_61_out_a | memory_controller_str5_out_a | memory_controller_g_77_out_a | memory_controller_str7_out_a | memory_controller_g_113_out_a | memory_controller_str8_out_a | memory_controller_g_114_out_a | memory_controller_str9_out_a | memory_controller_g_116_out_a | memory_controller_str10_out_a | memory_controller_crc32_context_out_a | memory_controller_crc32_tab_out_a | memory_controller_func_1_0_l_46_out_a | memory_controller_func_1_0_l_9_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_2_reg_a[j+1] <= select_g_2_reg_a[j];
select_str_reg_a[j+1] <= select_str_reg_a[j];
select_g_12_reg_a[j+1] <= select_g_12_reg_a[j];
select_str1_reg_a[j+1] <= select_str1_reg_a[j];
select_g_34_reg_a[j+1] <= select_g_34_reg_a[j];
select_str2_reg_a[j+1] <= select_str2_reg_a[j];
select_g_44_reg_a[j+1] <= select_g_44_reg_a[j];
select_str4_reg_a[j+1] <= select_str4_reg_a[j];
select_g_61_reg_a[j+1] <= select_g_61_reg_a[j];
select_str5_reg_a[j+1] <= select_str5_reg_a[j];
select_g_77_reg_a[j+1] <= select_g_77_reg_a[j];
select_str7_reg_a[j+1] <= select_str7_reg_a[j];
select_g_113_reg_a[j+1] <= select_g_113_reg_a[j];
select_str8_reg_a[j+1] <= select_str8_reg_a[j];
select_g_114_reg_a[j+1] <= select_g_114_reg_a[j];
select_str9_reg_a[j+1] <= select_str9_reg_a[j];
select_g_116_reg_a[j+1] <= select_g_116_reg_a[j];
select_str10_reg_a[j+1] <= select_str10_reg_a[j];
select_crc32_context_reg_a[j+1] <= select_crc32_context_reg_a[j];
select_crc32_tab_reg_a[j+1] <= select_crc32_tab_reg_a[j];
select_func_1_0_l_46_reg_a[j+1] <= select_func_1_0_l_46_reg_a[j];
select_func_1_0_l_9_reg_a[j+1] <= select_func_1_0_l_9_reg_a[j];
end
always @(*)
begin
select_g_2_reg_a[0] <= select_g_2_a;
select_str_reg_a[0] <= select_str_a;
select_g_12_reg_a[0] <= select_g_12_a;
select_str1_reg_a[0] <= select_str1_a;
select_g_34_reg_a[0] <= select_g_34_a;
select_str2_reg_a[0] <= select_str2_a;
select_g_44_reg_a[0] <= select_g_44_a;
select_str4_reg_a[0] <= select_str4_a;
select_g_61_reg_a[0] <= select_g_61_a;
select_str5_reg_a[0] <= select_str5_a;
select_g_77_reg_a[0] <= select_g_77_a;
select_str7_reg_a[0] <= select_str7_a;
select_g_113_reg_a[0] <= select_g_113_a;
select_str8_reg_a[0] <= select_str8_a;
select_g_114_reg_a[0] <= select_g_114_a;
select_str9_reg_a[0] <= select_str9_a;
select_g_116_reg_a[0] <= select_g_116_a;
select_str10_reg_a[0] <= select_str10_a;
select_crc32_context_reg_a[0] <= select_crc32_context_a;
select_crc32_tab_reg_a[0] <= select_crc32_tab_a;
select_func_1_0_l_46_reg_a[0] <= select_func_1_0_l_46_a;
select_func_1_0_l_9_reg_a[0] <= select_func_1_0_l_9_a;
end

reg [2:0] select_not_struct_b;

wire select_g_2_b;
assign select_g_2_b = (tag_b == `TAG_g_g_2);
reg [ram_latency:0] select_g_2_reg_b;
wire [31:0] memory_controller_g_2_out_b;
assign memory_controller_g_2_out_b = {32{ select_g_2_reg_b[ram_latency]}} & g_2_out_b;

wire select_str_b;
assign select_str_b = (tag_b == `TAG_g_str);
reg [ram_latency:0] select_str_reg_b;
wire [7:0] memory_controller_str_out_b;
assign memory_controller_str_out_b = {8{ select_str_reg_b[ram_latency]}} & str_out_b;

wire select_g_12_b;
assign select_g_12_b = (tag_b == `TAG_g_g_12);
reg [ram_latency:0] select_g_12_reg_b;
wire [7:0] memory_controller_g_12_out_b;
assign memory_controller_g_12_out_b = {8{ select_g_12_reg_b[ram_latency]}} & g_12_out_b;

wire select_str1_b;
assign select_str1_b = (tag_b == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_b;
wire [7:0] memory_controller_str1_out_b;
assign memory_controller_str1_out_b = {8{ select_str1_reg_b[ram_latency]}} & str1_out_b;

wire select_g_34_b;
assign select_g_34_b = (tag_b == `TAG_g_g_34);
reg [ram_latency:0] select_g_34_reg_b;
wire [31:0] memory_controller_g_34_out_b;
assign memory_controller_g_34_out_b = {32{ select_g_34_reg_b[ram_latency]}} & g_34_out_b;

wire select_str2_b;
assign select_str2_b = (tag_b == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_b;
wire [7:0] memory_controller_str2_out_b;
assign memory_controller_str2_out_b = {8{ select_str2_reg_b[ram_latency]}} & str2_out_b;

wire select_g_44_b;
assign select_g_44_b = (tag_b == `TAG_g_g_44);
reg [ram_latency:0] select_g_44_reg_b;
wire [31:0] memory_controller_g_44_out_b;
assign memory_controller_g_44_out_b = {32{ select_g_44_reg_b[ram_latency]}} & g_44_out_b;

wire select_str4_b;
assign select_str4_b = (tag_b == `TAG_g_str4);
reg [ram_latency:0] select_str4_reg_b;
wire [7:0] memory_controller_str4_out_b;
assign memory_controller_str4_out_b = {8{ select_str4_reg_b[ram_latency]}} & str4_out_b;

wire select_g_61_b;
assign select_g_61_b = (tag_b == `TAG_g_g_61);
reg [ram_latency:0] select_g_61_reg_b;
wire [31:0] memory_controller_g_61_out_b;
assign memory_controller_g_61_out_b = {32{ select_g_61_reg_b[ram_latency]}} & g_61_out_b;

wire select_str5_b;
assign select_str5_b = (tag_b == `TAG_g_str5);
reg [ram_latency:0] select_str5_reg_b;
wire [7:0] memory_controller_str5_out_b;
assign memory_controller_str5_out_b = {8{ select_str5_reg_b[ram_latency]}} & str5_out_b;

wire select_g_77_b;
assign select_g_77_b = (tag_b == `TAG_g_g_77);
reg [ram_latency:0] select_g_77_reg_b;
wire [31:0] memory_controller_g_77_out_b;
assign memory_controller_g_77_out_b = {32{ select_g_77_reg_b[ram_latency]}} & g_77_out_b;

wire select_str7_b;
assign select_str7_b = (tag_b == `TAG_g_str7);
reg [ram_latency:0] select_str7_reg_b;
wire [7:0] memory_controller_str7_out_b;
assign memory_controller_str7_out_b = {8{ select_str7_reg_b[ram_latency]}} & str7_out_b;

wire select_g_113_b;
assign select_g_113_b = (tag_b == `TAG_g_g_113);
reg [ram_latency:0] select_g_113_reg_b;
wire [15:0] memory_controller_g_113_out_b;
assign memory_controller_g_113_out_b = {16{ select_g_113_reg_b[ram_latency]}} & g_113_out_b;

wire select_str8_b;
assign select_str8_b = (tag_b == `TAG_g_str8);
reg [ram_latency:0] select_str8_reg_b;
wire [7:0] memory_controller_str8_out_b;
assign memory_controller_str8_out_b = {8{ select_str8_reg_b[ram_latency]}} & str8_out_b;

wire select_g_114_b;
assign select_g_114_b = (tag_b == `TAG_g_g_114);
reg [ram_latency:0] select_g_114_reg_b;
wire [31:0] memory_controller_g_114_out_b;
assign memory_controller_g_114_out_b = {32{ select_g_114_reg_b[ram_latency]}} & g_114_out_b;

wire select_str9_b;
assign select_str9_b = (tag_b == `TAG_g_str9);
reg [ram_latency:0] select_str9_reg_b;
wire [7:0] memory_controller_str9_out_b;
assign memory_controller_str9_out_b = {8{ select_str9_reg_b[ram_latency]}} & str9_out_b;

wire select_g_116_b;
assign select_g_116_b = (tag_b == `TAG_g_g_116);
reg [ram_latency:0] select_g_116_reg_b;
wire [15:0] memory_controller_g_116_out_b;
assign memory_controller_g_116_out_b = {16{ select_g_116_reg_b[ram_latency]}} & g_116_out_b;

wire select_str10_b;
assign select_str10_b = (tag_b == `TAG_g_str10);
reg [ram_latency:0] select_str10_reg_b;
wire [7:0] memory_controller_str10_out_b;
assign memory_controller_str10_out_b = {8{ select_str10_reg_b[ram_latency]}} & str10_out_b;

wire select_crc32_context_b;
assign select_crc32_context_b = (tag_b == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_b;
wire [31:0] memory_controller_crc32_context_out_b;
assign memory_controller_crc32_context_out_b = {32{ select_crc32_context_reg_b[ram_latency]}} & crc32_context_out_b;

wire select_crc32_tab_b;
assign select_crc32_tab_b = (tag_b == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_b;
wire [31:0] memory_controller_crc32_tab_out_b;
assign memory_controller_crc32_tab_out_b = {32{ select_crc32_tab_reg_b[ram_latency]}} & crc32_tab_out_b;

wire select_func_1_0_l_46_b;
assign select_func_1_0_l_46_b = (tag_b == `TAG_func_1_0_l_46);
reg [ram_latency:0] select_func_1_0_l_46_reg_b;
wire [31:0] memory_controller_func_1_0_l_46_out_b;
assign memory_controller_func_1_0_l_46_out_b = {32{ select_func_1_0_l_46_reg_b[ram_latency]}} & func_1_0_l_46_out_b;

wire select_func_1_0_l_9_b;
assign select_func_1_0_l_9_b = (tag_b == `TAG_func_1_0_l_9);
reg [ram_latency:0] select_func_1_0_l_9_reg_b;
wire [31:0] memory_controller_func_1_0_l_9_out_b;
assign memory_controller_func_1_0_l_9_out_b = {32{ select_func_1_0_l_9_reg_b[ram_latency]}} & func_1_0_l_9_out_b;

always @(*)
begin
	g_2_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_2_b}};
	g_2_write_enable_b = memory_controller_write_enable_b & select_g_2_b;
	g_2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str_address_b = memory_controller_address_b [2-1+0:0] & {2{select_str_b}};
	str_write_enable_b = memory_controller_write_enable_b & select_str_b;
	str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_12_address_b = memory_controller_address_b [1-1+0:0] & {1{select_g_12_b}};
	g_12_write_enable_b = memory_controller_write_enable_b & select_g_12_b;
	g_12_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	str1_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str1_b}};
	str1_write_enable_b = memory_controller_write_enable_b & select_str1_b;
	str1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_34_address_b = memory_controller_address_b [6-1+2:2] & {6{select_g_34_b}};
	g_34_write_enable_b = memory_controller_write_enable_b & select_g_34_b;
	g_34_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str2_address_b = memory_controller_address_b [4-1+0:0] & {4{select_str2_b}};
	str2_write_enable_b = memory_controller_write_enable_b & select_str2_b;
	str2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_44_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_44_b}};
	g_44_write_enable_b = memory_controller_write_enable_b & select_g_44_b;
	g_44_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str4_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str4_b}};
	str4_write_enable_b = memory_controller_write_enable_b & select_str4_b;
	str4_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_61_address_b = memory_controller_address_b [2-1+2:2] & {2{select_g_61_b}};
	g_61_write_enable_b = memory_controller_write_enable_b & select_g_61_b;
	g_61_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str5_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str5_b}};
	str5_write_enable_b = memory_controller_write_enable_b & select_str5_b;
	str5_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_77_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_77_b}};
	g_77_write_enable_b = memory_controller_write_enable_b & select_g_77_b;
	g_77_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str7_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str7_b}};
	str7_write_enable_b = memory_controller_write_enable_b & select_str7_b;
	str7_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_113_address_b = memory_controller_address_b [1-1+1:1] & {1{select_g_113_b}};
	g_113_write_enable_b = memory_controller_write_enable_b & select_g_113_b;
	g_113_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	str8_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str8_b}};
	str8_write_enable_b = memory_controller_write_enable_b & select_str8_b;
	str8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_114_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_114_b}};
	g_114_write_enable_b = memory_controller_write_enable_b & select_g_114_b;
	g_114_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str9_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str9_b}};
	str9_write_enable_b = memory_controller_write_enable_b & select_str9_b;
	str9_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_116_address_b = memory_controller_address_b [4-1+1:1] & {4{select_g_116_b}};
	g_116_write_enable_b = memory_controller_write_enable_b & select_g_116_b;
	g_116_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	str10_address_b = memory_controller_address_b [4-1+0:0] & {4{select_str10_b}};
	str10_write_enable_b = memory_controller_write_enable_b & select_str10_b;
	str10_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	crc32_context_address_b = memory_controller_address_b [1-1+2:2] & {1{select_crc32_context_b}};
	crc32_context_write_enable_b = memory_controller_write_enable_b & select_crc32_context_b;
	crc32_context_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	crc32_tab_address_b = memory_controller_address_b [8-1+2:2] & {8{select_crc32_tab_b}};
	crc32_tab_write_enable_b = memory_controller_write_enable_b & select_crc32_tab_b;
	crc32_tab_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1_0_l_46_address_b = memory_controller_address_b [2-1+2:2] & {2{select_func_1_0_l_46_b}};
	func_1_0_l_46_write_enable_b = memory_controller_write_enable_b & select_func_1_0_l_46_b;
	func_1_0_l_46_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1_0_l_9_address_b = memory_controller_address_b [1-1+2:2] & {1{select_func_1_0_l_9_b}};
	func_1_0_l_9_write_enable_b = memory_controller_write_enable_b & select_func_1_0_l_9_b;
	func_1_0_l_9_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_g_2_reg_b[ram_latency]}} | {2{select_g_34_reg_b[ram_latency]}} | {2{select_g_44_reg_b[ram_latency]}} | {2{select_g_61_reg_b[ram_latency]}} | {2{select_g_77_reg_b[ram_latency]}} | {1{select_g_113_reg_b[ram_latency]}} | {2{select_g_114_reg_b[ram_latency]}} | {1{select_g_116_reg_b[ram_latency]}} | {2{select_crc32_context_reg_b[ram_latency]}} | {2{select_crc32_tab_reg_b[ram_latency]}} | {2{select_func_1_0_l_46_reg_b[ram_latency]}} | {2{select_func_1_0_l_9_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_g_2_out_b | memory_controller_str_out_b | memory_controller_g_12_out_b | memory_controller_str1_out_b | memory_controller_g_34_out_b | memory_controller_str2_out_b | memory_controller_g_44_out_b | memory_controller_str4_out_b | memory_controller_g_61_out_b | memory_controller_str5_out_b | memory_controller_g_77_out_b | memory_controller_str7_out_b | memory_controller_g_113_out_b | memory_controller_str8_out_b | memory_controller_g_114_out_b | memory_controller_str9_out_b | memory_controller_g_116_out_b | memory_controller_str10_out_b | memory_controller_crc32_context_out_b | memory_controller_crc32_tab_out_b | memory_controller_func_1_0_l_46_out_b | memory_controller_func_1_0_l_9_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_2_reg_b[j+1] <= select_g_2_reg_b[j];
select_str_reg_b[j+1] <= select_str_reg_b[j];
select_g_12_reg_b[j+1] <= select_g_12_reg_b[j];
select_str1_reg_b[j+1] <= select_str1_reg_b[j];
select_g_34_reg_b[j+1] <= select_g_34_reg_b[j];
select_str2_reg_b[j+1] <= select_str2_reg_b[j];
select_g_44_reg_b[j+1] <= select_g_44_reg_b[j];
select_str4_reg_b[j+1] <= select_str4_reg_b[j];
select_g_61_reg_b[j+1] <= select_g_61_reg_b[j];
select_str5_reg_b[j+1] <= select_str5_reg_b[j];
select_g_77_reg_b[j+1] <= select_g_77_reg_b[j];
select_str7_reg_b[j+1] <= select_str7_reg_b[j];
select_g_113_reg_b[j+1] <= select_g_113_reg_b[j];
select_str8_reg_b[j+1] <= select_str8_reg_b[j];
select_g_114_reg_b[j+1] <= select_g_114_reg_b[j];
select_str9_reg_b[j+1] <= select_str9_reg_b[j];
select_g_116_reg_b[j+1] <= select_g_116_reg_b[j];
select_str10_reg_b[j+1] <= select_str10_reg_b[j];
select_crc32_context_reg_b[j+1] <= select_crc32_context_reg_b[j];
select_crc32_tab_reg_b[j+1] <= select_crc32_tab_reg_b[j];
select_func_1_0_l_46_reg_b[j+1] <= select_func_1_0_l_46_reg_b[j];
select_func_1_0_l_9_reg_b[j+1] <= select_func_1_0_l_9_reg_b[j];
end
always @(*)
begin
select_g_2_reg_b[0] <= select_g_2_b;
select_str_reg_b[0] <= select_str_b;
select_g_12_reg_b[0] <= select_g_12_b;
select_str1_reg_b[0] <= select_str1_b;
select_g_34_reg_b[0] <= select_g_34_b;
select_str2_reg_b[0] <= select_str2_b;
select_g_44_reg_b[0] <= select_g_44_b;
select_str4_reg_b[0] <= select_str4_b;
select_g_61_reg_b[0] <= select_g_61_b;
select_str5_reg_b[0] <= select_str5_b;
select_g_77_reg_b[0] <= select_g_77_b;
select_str7_reg_b[0] <= select_str7_b;
select_g_113_reg_b[0] <= select_g_113_b;
select_str8_reg_b[0] <= select_str8_b;
select_g_114_reg_b[0] <= select_g_114_b;
select_str9_reg_b[0] <= select_str9_b;
select_g_116_reg_b[0] <= select_g_116_b;
select_str10_reg_b[0] <= select_str10_b;
select_crc32_context_reg_b[0] <= select_crc32_context_b;
select_crc32_tab_reg_b[0] <= select_crc32_tab_b;
select_func_1_0_l_46_reg_b[0] <= select_func_1_0_l_46_b;
select_func_1_0_l_9_reg_b[0] <= select_func_1_0_l_9_b;
end

endmodule 

`timescale 1 ns / 1 ns
module platform_main_begin
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_begin_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_begin_BB__0_1;
LEGUP_F_platform_main_begin_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_begin: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_platform_main_begin_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_gentab
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_crc32_gentab_BB__1_1 = 4'd1;
parameter [3:0] LEGUP_F_crc32_gentab_BB__3_2 = 4'd2;
parameter [3:0] LEGUP_F_crc32_gentab_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_crc32_gentab_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_crc32_gentab_BB__8_5 = 4'd5;
parameter [3:0] LEGUP_F_crc32_gentab_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_crc32_gentab_BB__13_7 = 4'd7;
parameter [3:0] LEGUP_F_crc32_gentab_BB__14_8 = 4'd8;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_9 = 4'd9;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_10 = 4'd10;
parameter [3:0] LEGUP_F_crc32_gentab_BB__16_11 = 4'd11;
parameter [3:0] LEGUP_F_crc32_gentab_BB__18_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] crc32_gentab_1_2;
reg [31:0] crc32_gentab_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep_reg;
reg  crc32_gentab_1_exitcond1;
reg [31:0] crc32_gentab_4_indvar;
reg [31:0] crc32_gentab_4_indvar_reg;
reg [31:0] crc32_gentab_4_crc0;
reg [31:0] crc32_gentab_4_crc0_reg;
reg  crc32_gentab_4_exitcond;
reg [31:0] crc32_gentab_5_6;
reg  crc32_gentab_5_7;
reg [31:0] crc32_gentab_8_9;
reg [31:0] crc32_gentab_8_10;
reg [31:0] crc32_gentab_11_12;
reg [31:0] crc32_gentab_13_crc1;
reg [31:0] crc32_gentab_13_crc1_reg;
reg [31:0] crc32_gentab_14_indvarnext;
reg [31:0] crc32_gentab_16_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__11_6:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
LEGUP_F_crc32_gentab_BB__13_7:
		next_state = LEGUP_F_crc32_gentab_BB__14_8;
LEGUP_F_crc32_gentab_BB__14_8:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__15_10:
		next_state = LEGUP_F_crc32_gentab_BB__16_11;
LEGUP_F_crc32_gentab_BB__15_9:
		next_state = LEGUP_F_crc32_gentab_BB__15_10;
LEGUP_F_crc32_gentab_BB__16_11:
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__18_12:
		next_state = LEGUP_0;
LEGUP_F_crc32_gentab_BB__1_1:
	if ((crc32_gentab_1_exitcond1 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__18_12;
	else if ((crc32_gentab_1_exitcond1 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__3_2;
LEGUP_F_crc32_gentab_BB__3_2:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__4_3:
	if ((crc32_gentab_4_exitcond == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__15_9;
	else if ((crc32_gentab_4_exitcond == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__5_4;
LEGUP_F_crc32_gentab_BB__5_4:
	if ((crc32_gentab_5_7 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__11_6;
	else if ((crc32_gentab_5_7 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__8_5;
LEGUP_F_crc32_gentab_BB__8_5:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2 = 32'd0;
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_1_2 = crc32_gentab_16_17;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
		crc32_gentab_1_scevgep = (`TAG_g_crc32_tab_a + (4 * crc32_gentab_1_2_reg));
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__1_1)) begin
		crc32_gentab_1_scevgep_reg <= crc32_gentab_1_scevgep;
		if (start == 1'b0 && ^(crc32_gentab_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %exitcond1 = icmp eq i32 %2, 256*/
		crc32_gentab_1_exitcond1 = (crc32_gentab_1_2_reg == 32'd256);
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar = 32'd0;
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_indvar = crc32_gentab_14_indvarnext;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0 = crc32_gentab_1_2_reg;
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_crc0 = crc32_gentab_13_crc1_reg;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %exitcond = icmp eq i32 %indvar, 8*/
		crc32_gentab_4_exitcond = (crc32_gentab_4_indvar_reg == 32'd8);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %6 = and i32 %crc.0, 1*/
		crc32_gentab_5_6 = (crc32_gentab_4_crc0_reg & 32'd1);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %7 = icmp eq i32 %6, 0*/
		crc32_gentab_5_7 = (crc32_gentab_5_6 == 32'd0);
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %9 = lshr i32 %crc.0, 1*/
		crc32_gentab_8_9 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %10 = xor i32 %9, -306674912*/
		crc32_gentab_8_10 = (crc32_gentab_8_9 ^ -32'd306674912);
end
always @(*) begin
	/* crc32_gentab: %11*/
	/*   %12 = lshr i32 %crc.0, 1*/
		crc32_gentab_11_12 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1 = crc32_gentab_8_10;
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_13_crc1 = crc32_gentab_11_12;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %14*/
	/*   %indvar.next = add i32 %indvar, 1*/
		crc32_gentab_14_indvarnext = (crc32_gentab_4_indvar_reg + 32'd1);
end
always @(*) begin
	/* crc32_gentab: %16*/
	/*   %17 = add nsw i32 %2, 1*/
		crc32_gentab_16_17 = (crc32_gentab_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_gentab: %18*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__18_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_address_a = crc32_gentab_1_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_in_a = crc32_gentab_4_crc0_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module platform_main_end
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_crc,
	arg_flag
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_end_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_crc;
input [31:0] arg_flag;
reg  cur_state;
reg  next_state;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* platform_main_end: %0*/
	/*   %1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str11, i32 0, i32 0), i32 %crc) #2*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		$write("checksum = %d\n", arg_crc);
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_crc) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_end_BB__0_1;
LEGUP_F_platform_main_end_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		return_val <= arg_crc;
		if (start == 1'b0 && ^(arg_crc) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_byte
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_b
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_2 = 3'd2;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_4 = 3'd4;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_5 = 3'd5;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_6 = 3'd6;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [7:0] arg_b;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] crc32_byte_0_1;
reg [31:0] crc32_byte_0_2;
reg [31:0] crc32_byte_0_2_reg;
reg [31:0] crc32_byte_0_3;
reg [31:0] crc32_byte_0_3_reg;
reg [31:0] crc32_byte_0_masked;
reg [31:0] crc32_byte_0_4;
reg [31:0] crc32_byte_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_0_5;
reg [31:0] crc32_byte_0_6;
reg [31:0] crc32_byte_0_7;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_byte_BB__0_1;
LEGUP_F_crc32_byte_BB__0_1:
		next_state = LEGUP_F_crc32_byte_BB__0_2;
LEGUP_F_crc32_byte_BB__0_2:
		next_state = LEGUP_F_crc32_byte_BB__0_3;
LEGUP_F_crc32_byte_BB__0_3:
		next_state = LEGUP_F_crc32_byte_BB__0_4;
LEGUP_F_crc32_byte_BB__0_4:
		next_state = LEGUP_F_crc32_byte_BB__0_5;
LEGUP_F_crc32_byte_BB__0_5:
		next_state = LEGUP_F_crc32_byte_BB__0_6;
LEGUP_F_crc32_byte_BB__0_6:
		next_state = LEGUP_F_crc32_byte_BB__0_7;
LEGUP_F_crc32_byte_BB__0_7:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
		crc32_byte_0_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
		crc32_byte_0_2 = (crc32_byte_0_1 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_2_reg <= crc32_byte_0_2;
		if (start == 1'b0 && ^(crc32_byte_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
		crc32_byte_0_3 = arg_b;
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		crc32_byte_0_3_reg <= crc32_byte_0_3;
		if (start == 1'b0 && ^(crc32_byte_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %.masked = and i32 %1, 255*/
		crc32_byte_0_masked = (crc32_byte_0_1 & 32'd255);
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
		crc32_byte_0_4 = (crc32_byte_0_masked ^ crc32_byte_0_3_reg);
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_4_reg <= crc32_byte_0_4;
		if (start == 1'b0 && ^(crc32_byte_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %5 = getelementptr inbounds [256 x i32]* @crc32_tab, i32 0, i32 %4*/
		crc32_byte_0_5 = (`TAG_g_crc32_tab_a + (4 * crc32_byte_0_4_reg));
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
		crc32_byte_0_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %7 = xor i32 %2, %6*/
		crc32_byte_0_7 = (crc32_byte_0_2_reg ^ crc32_byte_0_6);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_byte: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_address_a = crc32_byte_0_5;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_in_a = crc32_byte_0_7;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint16_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint16_t_u_s_0_1;
reg  safe_rshift_func_uint16_t_u_s_2_3;
reg [31:0] safe_rshift_func_uint16_t_u_s_4_5;
reg [31:0] safe_rshift_func_uint16_t_u_s_6_7;
reg [31:0] safe_rshift_func_uint16_t_u_s_6_8;
reg [31:0] safe_rshift_func_uint16_t_u_s_9_10;
reg [31:0] safe_rshift_func_uint16_t_u_s_9_10_reg;
reg [15:0] safe_rshift_func_uint16_t_u_s_9_11;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__0_1;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__0_1:
	if ((safe_rshift_func_uint16_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3;
	else if ((safe_rshift_func_uint16_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__2_2;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__2_2:
	if ((safe_rshift_func_uint16_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3;
	else if ((safe_rshift_func_uint16_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5;
LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_rshift_func_uint16_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_rshift_func_uint16_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %6*/
	/*   %7 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_s_6_7 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %6*/
	/*   %8 = lshr i32 %7, %right*/
		safe_rshift_func_uint16_t_u_s_6_8 = (safe_rshift_func_uint16_t_u_s_6_7 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_s_9_10 = safe_rshift_func_uint16_t_u_s_4_5;
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint16_t_u_s_9_10 = safe_rshift_func_uint16_t_u_s_6_8;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_s_9_10_reg <= safe_rshift_func_uint16_t_u_s_9_10;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_9_10_reg"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_s_9_10_reg <= safe_rshift_func_uint16_t_u_s_9_10;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   %11 = trunc i32 %10 to i16*/
		safe_rshift_func_uint16_t_u_s_9_11 = safe_rshift_func_uint16_t_u_s_9_10_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   ret i16 %11*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_s: %9*/
	/*   ret i16 %11*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_s_BB__9_5)) begin
		return_val <= safe_rshift_func_uint16_t_u_s_9_11;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_ui1;
input [15:0] arg_ui2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [15:0] safe_mul_func_uint16_t_u_u_0_1;
reg  lpm_mult_safe_mul_func_uint16_t_u_u_0_1_en;
reg [15:0] safe_mul_func_uint16_t_u_u_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_2;
LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_uint16_t_u_u_0_1 = safe_mul_func_uint16_t_u_u_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_uint16_t_u_u_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_uint16_t_u_u: %0*/
	/*   %1 = mul i16 %ui1, %ui2*/
	if ((lpm_mult_safe_mul_func_uint16_t_u_u_0_1_en == 1'd1)) begin
		safe_mul_func_uint16_t_u_u_0_1_stage0_reg <= (arg_ui1 * arg_ui2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_uint16_t_u_u_BB__0_2)) begin
		return_val <= safe_mul_func_uint16_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_mul_func_uint16_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [7:0] safe_mul_func_int8_t_s_s_0_1;
reg  lpm_mult_safe_mul_func_int8_t_s_s_0_1_en;
reg [7:0] safe_mul_func_int8_t_s_s_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2;
LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_int8_t_s_s_0_1 = safe_mul_func_int8_t_s_s_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_int8_t_s_s_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   %1 = mul i8 %si1, %si2*/
	if ((lpm_mult_safe_mul_func_int8_t_s_s_0_1_en == 1'd1)) begin
		safe_mul_func_int8_t_s_s_0_1_stage0_reg <= (arg_si1 * arg_si2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2)) begin
		return_val <= safe_mul_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4 = 3'd4;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] safe_sub_func_int32_t_s_s_0_1;
reg [31:0] safe_sub_func_int32_t_s_s_0_2;
reg [31:0] safe_sub_func_int32_t_s_s_0_3;
reg [31:0] safe_sub_func_int32_t_s_s_0_4;
reg [31:0] safe_sub_func_int32_t_s_s_0_5;
reg [31:0] safe_sub_func_int32_t_s_s_0_6;
reg [31:0] safe_sub_func_int32_t_s_s_0_7;
reg  safe_sub_func_int32_t_s_s_0_8;
reg [31:0] safe_sub_func_int32_t_s_s_10_11;
reg [31:0] safe_sub_func_int32_t_s_s_12_13;
reg [31:0] safe_sub_func_int32_t_s_s_12_13_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__0_1:
	if ((safe_sub_func_int32_t_s_s_0_8 == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2;
	else if ((safe_sub_func_int32_t_s_s_0_8 == 1'd0))
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3:
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4:
		next_state = LEGUP_0;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2:
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %1 = xor i32 %si1, %si2*/
		safe_sub_func_int32_t_s_s_0_1 = (arg_si1 ^ arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %2 = xor i32 %si1, %si2*/
		safe_sub_func_int32_t_s_s_0_2 = (arg_si1 ^ arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %3 = and i32 %2, -2147483648*/
		safe_sub_func_int32_t_s_s_0_3 = (safe_sub_func_int32_t_s_s_0_2 & -32'd2147483648);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %4 = xor i32 %3, %si1*/
		safe_sub_func_int32_t_s_s_0_4 = (safe_sub_func_int32_t_s_s_0_3 ^ arg_si1);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %5 = sub nsw i32 %4, %si2*/
		safe_sub_func_int32_t_s_s_0_5 = (safe_sub_func_int32_t_s_s_0_4 - arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %6 = xor i32 %5, %si2*/
		safe_sub_func_int32_t_s_s_0_6 = (safe_sub_func_int32_t_s_s_0_5 ^ arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %7 = and i32 %1, %6*/
		safe_sub_func_int32_t_s_s_0_7 = (safe_sub_func_int32_t_s_s_0_1 & safe_sub_func_int32_t_s_s_0_6);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %8 = icmp slt i32 %7, 0*/
		safe_sub_func_int32_t_s_s_0_8 = ($signed(safe_sub_func_int32_t_s_s_0_7) < $signed(32'd0));
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %10*/
	/*   %11 = sub nsw i32 %si1, %si2*/
		safe_sub_func_int32_t_s_s_10_11 = (arg_si1 - arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_sub_func_int32_t_s_s_12_13 = arg_si1;
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_sub_func_int32_t_s_s_12_13 = safe_sub_func_int32_t_s_s_10_11;
	end
end
always @(posedge clk) begin
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_sub_func_int32_t_s_s_12_13_reg <= safe_sub_func_int32_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_12_13_reg"); $finish; end
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_sub_func_int32_t_s_s_12_13_reg <= safe_sub_func_int32_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_12_13_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   ret i32 %13*/
	if ((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   ret i32 %13*/
	if ((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4)) begin
		return_val <= safe_sub_func_int32_t_s_s_12_13_reg;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_12_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_24
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_25,
	arg_p_26,
	arg_p_27,
	arg_p_28
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_func_24_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_p_25;
input [31:0] arg_p_26;
input [15:0] arg_p_27;
input [7:0] arg_p_28;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_24_BB__0_1;
LEGUP_F_func_24_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_24: %0*/
	/*   ret i16 24226*/
	if ((cur_state == LEGUP_F_func_24_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_24: %0*/
	/*   ret i16 24226*/
	if ((cur_state == LEGUP_F_func_24_BB__0_1)) begin
		return_val <= 16'd24226;
		if (start == 1'b0 && ^(16'd24226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mod_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__4_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__6_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_36 = 6'd36;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_37 = 6'd37;
parameter [5:0] LEGUP_F_safe_mod_func_int8_t_s_s_BB__12_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_mod_func_int8_t_s_s_0_1;
reg  safe_mod_func_int8_t_s_s_2_3;
reg  safe_mod_func_int8_t_s_s_4_5;
reg [31:0] safe_mod_func_int8_t_s_s_6_7;
reg [31:0] safe_mod_func_int8_t_s_s_8_9;
reg [31:0] safe_mod_func_int8_t_s_s_8_10;
reg [31:0] safe_mod_func_int8_t_s_s_8_11;
reg [31:0] safe_mod_func_int8_t_s_s_12_13;
reg [31:0] safe_mod_func_int8_t_s_s_12_13_reg;
reg [7:0] safe_mod_func_int8_t_s_s_12_14;
reg [31:0] safe_mod_func_int8_t_s_s_signed_modulus_32_0_op0;
reg [31:0] safe_mod_func_int8_t_s_s_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_safe_mod_func_int8_t_s_s_8_11_temp_out;
wire [31:0] safe_mod_func_int8_t_s_s_8_11_unused;
reg  lpm_divide_safe_mod_func_int8_t_s_s_8_11_en;
reg [31:0] lpm_divide_safe_mod_func_int8_t_s_s_8_11_out;
reg [31:0] safe_mod_func_int8_t_s_s_signed_modulus_32_0;

/*   %11 = srem i32 %9, %10*/
lpm_divide lpm_divide_safe_mod_func_int8_t_s_s_8_11 (
	.quotient (safe_mod_func_int8_t_s_s_8_11_unused),
	.remain (lpm_divide_safe_mod_func_int8_t_s_s_8_11_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_mod_func_int8_t_s_s_8_11_en),
	.numer (safe_mod_func_int8_t_s_s_signed_modulus_32_0_op0),
	.denom (safe_mod_func_int8_t_s_s_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_safe_mod_func_int8_t_s_s_8_11.lpm_pipeline = 32,
	lpm_divide_safe_mod_func_int8_t_s_s_8_11.lpm_widthn = 32,
	lpm_divide_safe_mod_func_int8_t_s_s_8_11.lpm_widthd = 32,
	lpm_divide_safe_mod_func_int8_t_s_s_8_11.lpm_drepresentation = "SIGNED",
	lpm_divide_safe_mod_func_int8_t_s_s_8_11.lpm_nrepresentation = "SIGNED",
	lpm_divide_safe_mod_func_int8_t_s_s_8_11.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__0_1:
	if ((safe_mod_func_int8_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__6_4;
	else if ((safe_mod_func_int8_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__2_2;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__12_38:
		next_state = LEGUP_0;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__2_2:
	if ((safe_mod_func_int8_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__4_3;
	else if ((safe_mod_func_int8_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_5;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__4_3:
	if ((safe_mod_func_int8_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__6_4;
	else if ((safe_mod_func_int8_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_5;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__12_38;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_10:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_11;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_11:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_12;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_12:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_13;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_13:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_14;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_14:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_15;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_15:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_16;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_16:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_17;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_17:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_18;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_18:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_19;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_19:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_20;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_20:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_21;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_21:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_22;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_22:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_23;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_23:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_24;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_24:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_25;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_25:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_26;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_26:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_27;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_27:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_28;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_28:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_29;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_29:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_30;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_30:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_31;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_31:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_32;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_32:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_33;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_33:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_34;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_34:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_35;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_35:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_36;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_36:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_37;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_37:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__12_38;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_5:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_6;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_6:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_7;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_7:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_8;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_8:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_9;
LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_9:
		next_state = LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %0*/
	/*   %1 = icmp eq i8 %si2, 0*/
		safe_mod_func_int8_t_s_s_0_1 = (arg_si2 == 8'd0);
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %2*/
	/*   %3 = icmp eq i8 %si1, -128*/
		safe_mod_func_int8_t_s_s_2_3 = (arg_si1 == -8'd128);
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %4*/
	/*   %5 = icmp eq i8 %si2, -1*/
		safe_mod_func_int8_t_s_s_4_5 = (arg_si2 == -8'd1);
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %6*/
	/*   %7 = sext i8 %si1 to i32*/
		safe_mod_func_int8_t_s_s_6_7 = $signed(arg_si1);
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %8*/
	/*   %9 = sext i8 %si1 to i32*/
		safe_mod_func_int8_t_s_s_8_9 = $signed(arg_si1);
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %8*/
	/*   %10 = sext i8 %si2 to i32*/
		safe_mod_func_int8_t_s_s_8_10 = $signed(arg_si2);
end
always @(*) begin
	safe_mod_func_int8_t_s_s_8_11 = safe_mod_func_int8_t_s_s_signed_modulus_32_0;
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_int8_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_int8_t_s_s_12_13 = safe_mod_func_int8_t_s_s_6_7;
	end
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_mod_func_int8_t_s_s_12_13 = safe_mod_func_int8_t_s_s_8_11;
	end
end
always @(posedge clk) begin
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_int8_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_int8_t_s_s_12_13_reg <= safe_mod_func_int8_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_mod_func_int8_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_12_13_reg"); $finish; end
	end
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_int8_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_int8_t_s_s_12_13_reg <= safe_mod_func_int8_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_mod_func_int8_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   %14 = trunc i32 %13 to i8*/
		safe_mod_func_int8_t_s_s_12_14 = safe_mod_func_int8_t_s_s_12_13_reg[7:0];
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %8*/
	/*   %11 = srem i32 %9, %10*/
		safe_mod_func_int8_t_s_s_signed_modulus_32_0_op0 = safe_mod_func_int8_t_s_s_8_9;
end
always @(*) begin
	/* safe_mod_func_int8_t_s_s: %8*/
	/*   %11 = srem i32 %9, %10*/
		safe_mod_func_int8_t_s_s_signed_modulus_32_0_op1 = safe_mod_func_int8_t_s_s_8_10;
end
always @(*) begin
	lpm_divide_safe_mod_func_int8_t_s_s_8_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_mod_func_int8_t_s_s_8_11_out = lpm_divide_safe_mod_func_int8_t_s_s_8_11_temp_out;
end
always @(*) begin
	safe_mod_func_int8_t_s_s_signed_modulus_32_0 = lpm_divide_safe_mod_func_int8_t_s_s_8_11_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   ret i8 %14*/
	if ((cur_state == LEGUP_F_safe_mod_func_int8_t_s_s_BB__12_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mod_func_int8_t_s_s: %12*/
	/*   ret i8 %14*/
	if ((cur_state == LEGUP_F_safe_mod_func_int8_t_s_s_BB__12_38)) begin
		return_val <= safe_mod_func_int8_t_s_s_12_14;
		if (start == 1'b0 && ^(safe_mod_func_int8_t_s_s_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_int16_t_s_s_0_1;
reg  safe_rshift_func_int16_t_s_s_2_3;
reg  safe_rshift_func_int16_t_s_s_4_5;
reg [31:0] safe_rshift_func_int16_t_s_s_6_7;
reg [31:0] safe_rshift_func_int16_t_s_s_8_9;
reg [31:0] safe_rshift_func_int16_t_s_s_8_10;
reg [31:0] safe_rshift_func_int16_t_s_s_11_12;
reg [31:0] safe_rshift_func_int16_t_s_s_11_12_reg;
reg [15:0] safe_rshift_func_int16_t_s_s_11_13;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__0_1:
	if ((safe_rshift_func_int16_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4;
	else if ((safe_rshift_func_int16_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__2_2;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6:
		next_state = LEGUP_0;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__2_2:
	if ((safe_rshift_func_int16_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4;
	else if ((safe_rshift_func_int16_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__4_3;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__4_3:
	if ((safe_rshift_func_int16_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4;
	else if ((safe_rshift_func_int16_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5:
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %0*/
	/*   %1 = icmp slt i16 %left, 0*/
		safe_rshift_func_int16_t_s_s_0_1 = ($signed(arg_left) < $signed(16'd0));
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %2*/
	/*   %3 = icmp slt i32 %right, 0*/
		safe_rshift_func_int16_t_s_s_2_3 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %4*/
	/*   %5 = icmp sgt i32 %right, 31*/
		safe_rshift_func_int16_t_s_s_4_5 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %6*/
	/*   %7 = sext i16 %left to i32*/
		safe_rshift_func_int16_t_s_s_6_7 = $signed(arg_left);
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %8*/
	/*   %9 = sext i16 %left to i32*/
		safe_rshift_func_int16_t_s_s_8_9 = $signed(arg_left);
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %8*/
	/*   %10 = ashr i32 %9, %right*/
		safe_rshift_func_int16_t_s_s_8_10 = ($signed(safe_rshift_func_int16_t_s_s_8_9) >>> arg_right);
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_int16_t_s_s_11_12 = safe_rshift_func_int16_t_s_s_6_7;
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_int16_t_s_s_11_12 = safe_rshift_func_int16_t_s_s_8_10;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_int16_t_s_s_11_12_reg <= safe_rshift_func_int16_t_s_s_11_12;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_11_12_reg"); $finish; end
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_int16_t_s_s_11_12_reg <= safe_rshift_func_int16_t_s_s_11_12;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %13 = trunc i32 %12 to i16*/
		safe_rshift_func_int16_t_s_s_11_13 = safe_rshift_func_int16_t_s_s_11_12_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6)) begin
		return_val <= safe_rshift_func_int16_t_s_s_11_13;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4 = 3'd4;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint16_t_u_u_0_1;
reg [31:0] safe_rshift_func_uint16_t_u_u_2_3;
reg [31:0] safe_rshift_func_uint16_t_u_u_4_5;
reg [31:0] safe_rshift_func_uint16_t_u_u_4_6;
reg [31:0] safe_rshift_func_uint16_t_u_u_7_8;
reg [31:0] safe_rshift_func_uint16_t_u_u_7_8_reg;
reg [15:0] safe_rshift_func_uint16_t_u_u_7_9;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1:
	if ((safe_rshift_func_uint16_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2;
	else if ((safe_rshift_func_uint16_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_rshift_func_uint16_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %2*/
	/*   %3 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_u_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %4*/
	/*   %6 = lshr i32 %5, %right*/
		safe_rshift_func_uint16_t_u_u_4_6 = (safe_rshift_func_uint16_t_u_u_4_5 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8 = safe_rshift_func_uint16_t_u_u_2_3;
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint16_t_u_u_7_8 = safe_rshift_func_uint16_t_u_u_4_6;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8_reg <= safe_rshift_func_uint16_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_7_8_reg"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8_reg <= safe_rshift_func_uint16_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %9 = trunc i32 %8 to i16*/
		safe_rshift_func_uint16_t_u_u_7_9 = safe_rshift_func_uint16_t_u_u_7_8_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   ret i16 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   ret i16 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4)) begin
		return_val <= safe_rshift_func_uint16_t_u_u_7_9;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_ui1;
input [15:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [15:0] safe_add_func_uint16_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_uint16_t_u_u: %0*/
	/*   %1 = add i16 %ui1, %ui2*/
		safe_add_func_uint16_t_u_u_0_1 = (arg_ui1 + arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint16_t_u_u_BB__0_1)) begin
		return_val <= safe_add_func_uint16_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_add_func_uint16_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint16_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint16_t_u_s_0_1;
reg  safe_lshift_func_uint16_t_u_s_2_3;
reg [31:0] safe_lshift_func_uint16_t_u_s_4_5;
reg [31:0] safe_lshift_func_uint16_t_u_s_4_6;
reg  safe_lshift_func_uint16_t_u_s_4_7;
reg [31:0] safe_lshift_func_uint16_t_u_s_8_9;
reg [31:0] safe_lshift_func_uint16_t_u_s_10_11;
reg [31:0] safe_lshift_func_uint16_t_u_s_10_12;
reg [31:0] safe_lshift_func_uint16_t_u_s_13_14;
reg [31:0] safe_lshift_func_uint16_t_u_s_13_14_reg;
reg [15:0] safe_lshift_func_uint16_t_u_s_13_15;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__0_1;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__0_1:
	if ((safe_lshift_func_uint16_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint16_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__2_2;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__2_2:
	if ((safe_lshift_func_uint16_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint16_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__4_3;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__4_3:
	if ((safe_lshift_func_uint16_t_u_s_4_7 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint16_t_u_s_4_7 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5;
LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_lshift_func_uint16_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_lshift_func_uint16_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %4*/
	/*   %6 = lshr i32 65535, %right*/
		safe_lshift_func_uint16_t_u_s_4_6 = (32'd65535 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %4*/
	/*   %7 = icmp sgt i32 %5, %6*/
		safe_lshift_func_uint16_t_u_s_4_7 = ($signed(safe_lshift_func_uint16_t_u_s_4_5) > $signed(safe_lshift_func_uint16_t_u_s_4_6));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %8*/
	/*   %9 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_s_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %10*/
	/*   %11 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_s_10_11 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %10*/
	/*   %12 = shl i32 %11, %right*/
		safe_lshift_func_uint16_t_u_s_10_12 = (safe_lshift_func_uint16_t_u_s_10_11 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_s_13_14 = safe_lshift_func_uint16_t_u_s_8_9;
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint16_t_u_s_13_14 = safe_lshift_func_uint16_t_u_s_10_12;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_s_13_14_reg <= safe_lshift_func_uint16_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_13_14_reg"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_s_13_14_reg <= safe_lshift_func_uint16_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   %15 = trunc i32 %14 to i16*/
		safe_lshift_func_uint16_t_u_s_13_15 = safe_lshift_func_uint16_t_u_s_13_14_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   ret i16 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_s: %13*/
	/*   ret i16 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_s_BB__13_6)) begin
		return_val <= safe_lshift_func_uint16_t_u_s_13_15;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_si1;
input [15:0] arg_si2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [15:0] safe_mul_func_int16_t_s_s_0_1;
reg  lpm_mult_safe_mul_func_int16_t_s_s_0_1_en;
reg [15:0] safe_mul_func_int16_t_s_s_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2;
LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_int16_t_s_s_0_1 = safe_mul_func_int16_t_s_s_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_int16_t_s_s_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_int16_t_s_s: %0*/
	/*   %1 = mul i16 %si1, %si2*/
	if ((lpm_mult_safe_mul_func_int16_t_s_s_0_1_en == 1'd1)) begin
		safe_mul_func_int16_t_s_s_0_1_stage0_reg <= (arg_si1 * arg_si2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_int16_t_s_s: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_int16_t_s_s: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2)) begin
		return_val <= safe_mul_func_int16_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_mul_func_int16_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_ui1;
input [15:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [15:0] safe_sub_func_uint16_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_uint16_t_u_u: %0*/
	/*   %1 = sub i16 %ui1, %ui2*/
		safe_sub_func_uint16_t_u_u_0_1 = (arg_ui1 - arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1)) begin
		return_val <= safe_sub_func_uint16_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_sub_func_uint16_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6 = 3'd6;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_int8_t_s_s_0_1;
reg  safe_lshift_func_int8_t_s_s_2_3;
reg  safe_lshift_func_int8_t_s_s_4_5;
reg [31:0] safe_lshift_func_int8_t_s_s_6_7;
reg [31:0] safe_lshift_func_int8_t_s_s_6_8;
reg  safe_lshift_func_int8_t_s_s_6_9;
reg [31:0] safe_lshift_func_int8_t_s_s_10_11;
reg [31:0] safe_lshift_func_int8_t_s_s_12_13;
reg [31:0] safe_lshift_func_int8_t_s_s_12_14;
reg [31:0] safe_lshift_func_int8_t_s_s_15_16;
reg [31:0] safe_lshift_func_int8_t_s_s_15_16_reg;
reg [7:0] safe_lshift_func_int8_t_s_s_15_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__0_1:
	if ((safe_lshift_func_int8_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__2_2;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6:
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__2_2:
	if ((safe_lshift_func_int8_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__4_3;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__4_3:
	if ((safe_lshift_func_int8_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__6_4;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__6_4:
	if ((safe_lshift_func_int8_t_s_s_6_9 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_6_9 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %0*/
	/*   %1 = icmp slt i8 %left, 0*/
		safe_lshift_func_int8_t_s_s_0_1 = ($signed(arg_left) < $signed(8'd0));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %2*/
	/*   %3 = icmp slt i32 %right, 0*/
		safe_lshift_func_int8_t_s_s_2_3 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %4*/
	/*   %5 = icmp sgt i32 %right, 31*/
		safe_lshift_func_int8_t_s_s_4_5 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %6*/
	/*   %7 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_s_6_7 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %6*/
	/*   %8 = lshr i32 127, %right*/
		safe_lshift_func_int8_t_s_s_6_8 = (32'd127 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %6*/
	/*   %9 = icmp sgt i32 %7, %8*/
		safe_lshift_func_int8_t_s_s_6_9 = ($signed(safe_lshift_func_int8_t_s_s_6_7) > $signed(safe_lshift_func_int8_t_s_s_6_8));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %10*/
	/*   %11 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_s_10_11 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %12*/
	/*   %13 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_s_12_13 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %12*/
	/*   %14 = shl i32 %13, %right*/
		safe_lshift_func_int8_t_s_s_12_14 = (safe_lshift_func_int8_t_s_s_12_13 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_s_15_16 = safe_lshift_func_int8_t_s_s_10_11;
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_int8_t_s_s_15_16 = safe_lshift_func_int8_t_s_s_12_14;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_s_15_16_reg <= safe_lshift_func_int8_t_s_s_15_16;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_15_16_reg"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_s_15_16_reg <= safe_lshift_func_int8_t_s_s_15_16;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %17 = trunc i32 %16 to i8*/
		safe_lshift_func_int8_t_s_s_15_17 = safe_lshift_func_int8_t_s_s_15_16_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   ret i8 %17*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   ret i8 %17*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7)) begin
		return_val <= safe_lshift_func_int8_t_s_s_15_17;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint16_t_u_u_0_1;
reg [31:0] safe_lshift_func_uint16_t_u_u_2_3;
reg [31:0] safe_lshift_func_uint16_t_u_u_2_4;
reg  safe_lshift_func_uint16_t_u_u_2_5;
reg [31:0] safe_lshift_func_uint16_t_u_u_6_7;
reg [31:0] safe_lshift_func_uint16_t_u_u_8_9;
reg [31:0] safe_lshift_func_uint16_t_u_u_8_10;
reg [31:0] safe_lshift_func_uint16_t_u_u_11_12;
reg [31:0] safe_lshift_func_uint16_t_u_u_11_12_reg;
reg [15:0] safe_lshift_func_uint16_t_u_u_11_13;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__0_1:
	if ((safe_lshift_func_uint16_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3;
	else if ((safe_lshift_func_uint16_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__2_2;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__2_2:
	if ((safe_lshift_func_uint16_t_u_u_2_5 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3;
	else if ((safe_lshift_func_uint16_t_u_u_2_5 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_lshift_func_uint16_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %2*/
	/*   %3 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %2*/
	/*   %4 = lshr i32 65535, %right*/
		safe_lshift_func_uint16_t_u_u_2_4 = (32'd65535 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %2*/
	/*   %5 = icmp sgt i32 %3, %4*/
		safe_lshift_func_uint16_t_u_u_2_5 = ($signed(safe_lshift_func_uint16_t_u_u_2_3) > $signed(safe_lshift_func_uint16_t_u_u_2_4));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %6*/
	/*   %7 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_u_6_7 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %8*/
	/*   %9 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_u_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %8*/
	/*   %10 = shl i32 %9, %right*/
		safe_lshift_func_uint16_t_u_u_8_10 = (safe_lshift_func_uint16_t_u_u_8_9 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_u_11_12 = safe_lshift_func_uint16_t_u_u_6_7;
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint16_t_u_u_11_12 = safe_lshift_func_uint16_t_u_u_8_10;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_u_11_12_reg <= safe_lshift_func_uint16_t_u_u_11_12;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_11_12_reg"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_u_11_12_reg <= safe_lshift_func_uint16_t_u_u_11_12;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %13 = trunc i32 %12 to i16*/
		safe_lshift_func_uint16_t_u_u_11_13 = safe_lshift_func_uint16_t_u_u_11_12_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5)) begin
		return_val <= safe_lshift_func_uint16_t_u_u_11_13;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_sub_func_uint8_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_uint8_t_u_u: %0*/
	/*   %1 = sub i8 %ui1, %ui2*/
		safe_sub_func_uint8_t_u_u_0_1 = (arg_ui1 - arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint8_t_u_u_BB__0_1)) begin
		return_val <= safe_sub_func_uint8_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_sub_func_uint8_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_int16_t_s_s_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_si1;
input [15:0] arg_si2;
reg  cur_state;
reg  next_state;
reg [15:0] safe_sub_func_int16_t_s_s_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_sub_func_int16_t_s_s_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_int16_t_s_s: %0*/
	/*   %1 = sub i16 %si1, %si2*/
		safe_sub_func_int16_t_s_s_0_1 = (arg_si1 - arg_si2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_int16_t_s_s: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int16_t_s_s_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_int16_t_s_s: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int16_t_s_s_BB__0_1)) begin
		return_val <= safe_sub_func_int16_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_sub_func_int16_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_sub_func_int8_t_s_s_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   %1 = sub i8 %si1, %si2*/
		safe_sub_func_int8_t_s_s_0_1 = (arg_si1 - arg_si2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1)) begin
		return_val <= safe_sub_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_add_func_uint8_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   %1 = add i8 %ui1, %ui2*/
		safe_add_func_uint8_t_u_u_0_1 = (arg_ui1 + arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1)) begin
		return_val <= safe_add_func_uint8_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_add_func_uint8_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint8_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint8_t_u_s_0_1;
reg  safe_lshift_func_uint8_t_u_s_2_3;
reg [31:0] safe_lshift_func_uint8_t_u_s_4_5;
reg [31:0] safe_lshift_func_uint8_t_u_s_4_6;
reg  safe_lshift_func_uint8_t_u_s_4_7;
reg [31:0] safe_lshift_func_uint8_t_u_s_8_9;
reg [31:0] safe_lshift_func_uint8_t_u_s_10_11;
reg [31:0] safe_lshift_func_uint8_t_u_s_10_12;
reg [31:0] safe_lshift_func_uint8_t_u_s_13_14;
reg [31:0] safe_lshift_func_uint8_t_u_s_13_14_reg;
reg [7:0] safe_lshift_func_uint8_t_u_s_13_15;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__0_1;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__0_1:
	if ((safe_lshift_func_uint8_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint8_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__2_2;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__2_2:
	if ((safe_lshift_func_uint8_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint8_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__4_3;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__4_3:
	if ((safe_lshift_func_uint8_t_u_s_4_7 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4;
	else if ((safe_lshift_func_uint8_t_u_s_4_7 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5;
LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_lshift_func_uint8_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_lshift_func_uint8_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %4*/
	/*   %5 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %4*/
	/*   %6 = lshr i32 255, %right*/
		safe_lshift_func_uint8_t_u_s_4_6 = (32'd255 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %4*/
	/*   %7 = icmp sgt i32 %5, %6*/
		safe_lshift_func_uint8_t_u_s_4_7 = ($signed(safe_lshift_func_uint8_t_u_s_4_5) > $signed(safe_lshift_func_uint8_t_u_s_4_6));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %8*/
	/*   %9 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_s_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %10*/
	/*   %11 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_s_10_11 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %10*/
	/*   %12 = shl i32 %11, %right*/
		safe_lshift_func_uint8_t_u_s_10_12 = (safe_lshift_func_uint8_t_u_s_10_11 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_s_13_14 = safe_lshift_func_uint8_t_u_s_8_9;
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint8_t_u_s_13_14 = safe_lshift_func_uint8_t_u_s_10_12;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_s_13_14_reg <= safe_lshift_func_uint8_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_13_14_reg"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_s_13_14_reg <= safe_lshift_func_uint8_t_u_s_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   %15 = trunc i32 %14 to i8*/
		safe_lshift_func_uint8_t_u_s_13_15 = safe_lshift_func_uint8_t_u_s_13_14_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_s: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_s_BB__13_6)) begin
		return_val <= safe_lshift_func_uint8_t_u_s_13_15;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_uint32_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_uint32_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_ui1;
input [31:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [31:0] safe_add_func_uint32_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_uint32_t_u_u_BB__0_1;
LEGUP_F_safe_add_func_uint32_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_uint32_t_u_u: %0*/
	/*   %1 = add i32 %ui1, %ui2*/
		safe_add_func_uint32_t_u_u_0_1 = (arg_ui1 + arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_uint32_t_u_u: %0*/
	/*   ret i32 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint32_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_uint32_t_u_u: %0*/
	/*   ret i32 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint32_t_u_u_BB__0_1)) begin
		return_val <= safe_add_func_uint32_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_add_func_uint32_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint8_t_u_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__9_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint8_t_u_s_0_1;
reg  safe_rshift_func_uint8_t_u_s_2_3;
reg [31:0] safe_rshift_func_uint8_t_u_s_4_5;
reg [31:0] safe_rshift_func_uint8_t_u_s_6_7;
reg [31:0] safe_rshift_func_uint8_t_u_s_6_8;
reg [31:0] safe_rshift_func_uint8_t_u_s_9_10;
reg [31:0] safe_rshift_func_uint8_t_u_s_9_10_reg;
reg [7:0] safe_rshift_func_uint8_t_u_s_9_11;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__0_1;
LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__0_1:
	if ((safe_rshift_func_uint8_t_u_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__4_3;
	else if ((safe_rshift_func_uint8_t_u_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__2_2;
LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__2_2:
	if ((safe_rshift_func_uint8_t_u_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__4_3;
	else if ((safe_rshift_func_uint8_t_u_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__6_4;
LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__9_5;
LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__6_4:
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__9_5;
LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__9_5:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %0*/
	/*   %1 = icmp slt i32 %right, 0*/
		safe_rshift_func_uint8_t_u_s_0_1 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %2*/
	/*   %3 = icmp sgt i32 %right, 31*/
		safe_rshift_func_uint8_t_u_s_2_3 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %4*/
	/*   %5 = zext i8 %left to i32*/
		safe_rshift_func_uint8_t_u_s_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %6*/
	/*   %7 = zext i8 %left to i32*/
		safe_rshift_func_uint8_t_u_s_6_7 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %6*/
	/*   %8 = lshr i32 %7, %right*/
		safe_rshift_func_uint8_t_u_s_6_8 = (safe_rshift_func_uint8_t_u_s_6_7 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint8_t_u_s_9_10 = safe_rshift_func_uint8_t_u_s_4_5;
	end
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint8_t_u_s_9_10 = safe_rshift_func_uint8_t_u_s_6_8;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint8_t_u_s_9_10_reg <= safe_rshift_func_uint8_t_u_s_9_10;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_9_10_reg"); $finish; end
	end
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   %10 = phi i32 [ %5, %4 ], [ %8, %6 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint8_t_u_s_9_10_reg <= safe_rshift_func_uint8_t_u_s_9_10;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   %11 = trunc i32 %10 to i8*/
		safe_rshift_func_uint8_t_u_s_9_11 = safe_rshift_func_uint8_t_u_s_9_10_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   ret i8 %11*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__9_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint8_t_u_s: %9*/
	/*   ret i8 %11*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_s_BB__9_5)) begin
		return_val <= safe_rshift_func_uint8_t_u_s_9_11;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_s_9_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__4_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_36 = 6'd36;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37 = 6'd37;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_div_func_int32_t_s_s_0_1;
reg  safe_div_func_int32_t_s_s_2_3;
reg  safe_div_func_int32_t_s_s_4_5;
reg [31:0] safe_div_func_int32_t_s_s_7_8;
reg [31:0] safe_div_func_int32_t_s_s_9_10;
reg [31:0] safe_div_func_int32_t_s_s_9_10_reg;
reg [31:0] safe_div_func_int32_t_s_s_signed_divide_32_0_op0;
reg [31:0] safe_div_func_int32_t_s_s_signed_divide_32_0_op1;
wire [31:0] lpm_divide_safe_div_func_int32_t_s_s_7_8_temp_out;
wire [31:0] safe_div_func_int32_t_s_s_7_8_unused;
reg  lpm_divide_safe_div_func_int32_t_s_s_7_8_en;
reg [31:0] lpm_divide_safe_div_func_int32_t_s_s_7_8_out;
reg [31:0] safe_div_func_int32_t_s_s_signed_divide_32_0;

/*   %8 = sdiv i32 %si1, %si2*/
lpm_divide lpm_divide_safe_div_func_int32_t_s_s_7_8 (
	.quotient (lpm_divide_safe_div_func_int32_t_s_s_7_8_temp_out),
	.remain (safe_div_func_int32_t_s_s_7_8_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_int32_t_s_s_7_8_en),
	.numer (safe_div_func_int32_t_s_s_signed_divide_32_0_op0),
	.denom (safe_div_func_int32_t_s_s_signed_divide_32_0_op1)
);

defparam
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_pipeline = 32,
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_widthn = 32,
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_widthd = 32,
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_drepresentation = "SIGNED",
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_nrepresentation = "SIGNED",
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_div_func_int32_t_s_s_BB__0_1:
	if ((safe_div_func_int32_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4;
	else if ((safe_div_func_int32_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__2_2;
LEGUP_F_safe_div_func_int32_t_s_s_BB__2_2:
	if ((safe_div_func_int32_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__4_3;
	else if ((safe_div_func_int32_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5;
LEGUP_F_safe_div_func_int32_t_s_s_BB__4_3:
	if ((safe_div_func_int32_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4;
	else if ((safe_div_func_int32_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5;
LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_10:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_11;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_11:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_12;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_12:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_13;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_13:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_14;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_14:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_15;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_15:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_16;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_16:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_17;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_17:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_18;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_18:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_19;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_19:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_20;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_20:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_21;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_21:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_22;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_22:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_23;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_23:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_24;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_24:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_25;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_25:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_26;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_26:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_27;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_27:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_28;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_28:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_29;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_29:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_30;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_30:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_31;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_31:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_32;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_32:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_33;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_33:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_34;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_34:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_35;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_35:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_36;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_36:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_6;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_6:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_7;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_7:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_8;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_8:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_9;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_9:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_10;
LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %0*/
	/*   %1 = icmp eq i32 %si2, 0*/
		safe_div_func_int32_t_s_s_0_1 = (arg_si2 == 32'd0);
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %2*/
	/*   %3 = icmp eq i32 %si1, -2147483648*/
		safe_div_func_int32_t_s_s_2_3 = (arg_si1 == -32'd2147483648);
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %4*/
	/*   %5 = icmp eq i32 %si2, -1*/
		safe_div_func_int32_t_s_s_4_5 = (arg_si2 == -32'd1);
end
always @(*) begin
	safe_div_func_int32_t_s_s_7_8 = safe_div_func_int32_t_s_s_signed_divide_32_0;
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int32_t_s_s_9_10 = arg_si1;
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_int32_t_s_s_9_10 = safe_div_func_int32_t_s_s_7_8;
	end
end
always @(posedge clk) begin
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int32_t_s_s_9_10_reg <= safe_div_func_int32_t_s_s_9_10;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_9_10_reg"); $finish; end
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int32_t_s_s_9_10_reg <= safe_div_func_int32_t_s_s_9_10;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %7*/
	/*   %8 = sdiv i32 %si1, %si2*/
		safe_div_func_int32_t_s_s_signed_divide_32_0_op0 = arg_si1;
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %7*/
	/*   %8 = sdiv i32 %si1, %si2*/
		safe_div_func_int32_t_s_s_signed_divide_32_0_op1 = arg_si2;
end
always @(*) begin
	lpm_divide_safe_div_func_int32_t_s_s_7_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_int32_t_s_s_7_8_out = lpm_divide_safe_div_func_int32_t_s_s_7_8_temp_out;
end
always @(*) begin
	safe_div_func_int32_t_s_s_signed_divide_32_0 = lpm_divide_safe_div_func_int32_t_s_s_7_8_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   ret i32 %10*/
	if ((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   ret i32 %10*/
	if ((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38)) begin
		return_val <= safe_div_func_int32_t_s_s_9_10_reg;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_9_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4 = 4'd4;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5 = 4'd5;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7 = 4'd7;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8 = 4'd8;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9 = 4'd9;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [3:0] cur_state;
reg [3:0] next_state;
reg  safe_add_func_int32_t_s_s_0_1;
reg  safe_add_func_int32_t_s_s_2_3;
reg [31:0] safe_add_func_int32_t_s_s_4_5;
reg  safe_add_func_int32_t_s_s_4_6;
reg  safe_add_func_int32_t_s_s_7_8;
reg  safe_add_func_int32_t_s_s_9_10;
reg [31:0] safe_add_func_int32_t_s_s_11_12;
reg  safe_add_func_int32_t_s_s_11_13;
reg [31:0] safe_add_func_int32_t_s_s_15_16;
reg [31:0] safe_add_func_int32_t_s_s_17_18;
reg [31:0] safe_add_func_int32_t_s_s_17_18_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1:
	if ((safe_add_func_int32_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2;
	else if ((safe_add_func_int32_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6:
	if ((safe_add_func_int32_t_s_s_11_13 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7;
	else if ((safe_add_func_int32_t_s_s_11_13 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7:
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9;
LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8:
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9;
LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9:
		next_state = LEGUP_0;
LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2:
	if ((safe_add_func_int32_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3;
	else if ((safe_add_func_int32_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3:
	if ((safe_add_func_int32_t_s_s_4_6 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7;
	else if ((safe_add_func_int32_t_s_s_4_6 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4:
	if ((safe_add_func_int32_t_s_s_7_8 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5;
	else if ((safe_add_func_int32_t_s_s_7_8 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5:
	if ((safe_add_func_int32_t_s_s_9_10 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6;
	else if ((safe_add_func_int32_t_s_s_9_10 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %0*/
	/*   %1 = icmp sgt i32 %si1, 0*/
		safe_add_func_int32_t_s_s_0_1 = ($signed(arg_si1) > $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %2*/
	/*   %3 = icmp sgt i32 %si2, 0*/
		safe_add_func_int32_t_s_s_2_3 = ($signed(arg_si2) > $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %4*/
	/*   %5 = sub nsw i32 2147483647, %si2*/
		safe_add_func_int32_t_s_s_4_5 = (32'd2147483647 - arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %4*/
	/*   %6 = icmp slt i32 %5, %si1*/
		safe_add_func_int32_t_s_s_4_6 = ($signed(safe_add_func_int32_t_s_s_4_5) < $signed(arg_si1));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %7*/
	/*   %8 = icmp slt i32 %si1, 0*/
		safe_add_func_int32_t_s_s_7_8 = ($signed(arg_si1) < $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %9*/
	/*   %10 = icmp slt i32 %si2, 0*/
		safe_add_func_int32_t_s_s_9_10 = ($signed(arg_si2) < $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %11*/
	/*   %12 = sub nsw i32 -2147483648, %si2*/
		safe_add_func_int32_t_s_s_11_12 = (-32'd2147483648 - arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %11*/
	/*   %13 = icmp sgt i32 %12, %si1*/
		safe_add_func_int32_t_s_s_11_13 = ($signed(safe_add_func_int32_t_s_s_11_12) > $signed(arg_si1));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %15*/
	/*   %16 = add nsw i32 %si1, %si2*/
		safe_add_func_int32_t_s_s_15_16 = (arg_si1 + arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18 = arg_si1;
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	else /* if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_add_func_int32_t_s_s_17_18 = safe_add_func_int32_t_s_s_15_16;
	end
end
always @(posedge clk) begin
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18_reg <= safe_add_func_int32_t_s_s_17_18;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_17_18_reg"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18_reg <= safe_add_func_int32_t_s_s_17_18;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_17_18_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9)) begin
		return_val <= safe_add_func_int32_t_s_s_17_18_reg;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_8bytes
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_13 = 5'd13;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_15 = 5'd15;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_17 = 5'd17;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_2 = 5'd2;
parameter [4:0] LEGUP_function_call_4 = 5'd4;
parameter [4:0] LEGUP_function_call_6 = 5'd6;
parameter [4:0] LEGUP_function_call_8 = 5'd8;
parameter [4:0] LEGUP_function_call_10 = 5'd10;
parameter [4:0] LEGUP_function_call_12 = 5'd12;
parameter [4:0] LEGUP_function_call_14 = 5'd14;
parameter [4:0] LEGUP_function_call_16 = 5'd16;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [7:0] crc32_8bytes_0_1;
reg [63:0] crc32_8bytes_0_2;
reg [7:0] crc32_8bytes_0_3;
reg [7:0] crc32_8bytes_0_3_reg;
reg [63:0] crc32_8bytes_0_4;
reg [7:0] crc32_8bytes_0_5;
reg [7:0] crc32_8bytes_0_5_reg;
reg [63:0] crc32_8bytes_0_6;
reg [7:0] crc32_8bytes_0_7;
reg [7:0] crc32_8bytes_0_7_reg;
reg [63:0] crc32_8bytes_0_8;
reg [7:0] crc32_8bytes_0_9;
reg [7:0] crc32_8bytes_0_9_reg;
reg [63:0] crc32_8bytes_0_10;
reg [7:0] crc32_8bytes_0_11;
reg [7:0] crc32_8bytes_0_11_reg;
reg [63:0] crc32_8bytes_0_12;
reg [7:0] crc32_8bytes_0_13;
reg [7:0] crc32_8bytes_0_13_reg;
reg [63:0] crc32_8bytes_0_14;
reg [7:0] crc32_8bytes_0_15;
reg [7:0] crc32_8bytes_0_15_reg;
reg  crc32_byte_start;
reg [7:0] crc32_byte_arg_b;
wire  crc32_byte_memory_controller_enable_a;
wire  crc32_byte_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_a;
wire [1:0] crc32_byte_memory_controller_size_a;
wire  crc32_byte_memory_controller_enable_b;
wire  crc32_byte_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_b;
wire [1:0] crc32_byte_memory_controller_size_b;
reg  crc32_byte_finish_final;
reg  crc32_byte_finish_reg;
wire  crc32_byte_finish;


crc32_byte crc32_byte (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_byte_memory_controller_enable_a),
	.memory_controller_address_a (crc32_byte_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_byte_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_byte_memory_controller_in_a),
	.memory_controller_size_a (crc32_byte_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_byte_memory_controller_enable_b),
	.memory_controller_address_b (crc32_byte_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_byte_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_byte_memory_controller_in_b),
	.memory_controller_size_b (crc32_byte_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_byte_start),
	.finish (crc32_byte_finish),
	.arg_b (crc32_byte_arg_b)
);

defparam
	crc32_byte.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_1;
LEGUP_F_crc32_8bytes_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_crc32_8bytes_BB__0_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_crc32_8bytes_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_crc32_8bytes_BB__0_15:
		next_state = LEGUP_function_call_16;
LEGUP_F_crc32_8bytes_BB__0_17:
		next_state = LEGUP_0;
LEGUP_F_crc32_8bytes_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_crc32_8bytes_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_crc32_8bytes_BB__0_7:
		next_state = LEGUP_function_call_8;
LEGUP_F_crc32_8bytes_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_function_call_10:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_11;
LEGUP_function_call_12:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_13;
LEGUP_function_call_14:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_15;
LEGUP_function_call_16:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_17;
LEGUP_function_call_2:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_3;
LEGUP_function_call_4:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_5;
LEGUP_function_call_6:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_7;
LEGUP_function_call_8:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %1 = trunc i64 %val to i8*/
		crc32_8bytes_0_1 = arg_val[7:0];
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %2 = lshr i64 %val, 8*/
		crc32_8bytes_0_2 = (arg_val >>> (64'd8 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
		crc32_8bytes_0_3 = crc32_8bytes_0_2[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_3_reg <= crc32_8bytes_0_3;
		if (start == 1'b0 && ^(crc32_8bytes_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %4 = lshr i64 %val, 16*/
		crc32_8bytes_0_4 = (arg_val >>> (64'd16 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
		crc32_8bytes_0_5 = crc32_8bytes_0_4[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_5_reg <= crc32_8bytes_0_5;
		if (start == 1'b0 && ^(crc32_8bytes_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %6 = lshr i64 %val, 24*/
		crc32_8bytes_0_6 = (arg_val >>> (64'd24 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
		crc32_8bytes_0_7 = crc32_8bytes_0_6[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_7_reg <= crc32_8bytes_0_7;
		if (start == 1'b0 && ^(crc32_8bytes_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %8 = lshr i64 %val, 32*/
		crc32_8bytes_0_8 = (arg_val >>> (64'd32 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
		crc32_8bytes_0_9 = crc32_8bytes_0_8[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_9_reg <= crc32_8bytes_0_9;
		if (start == 1'b0 && ^(crc32_8bytes_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %10 = lshr i64 %val, 40*/
		crc32_8bytes_0_10 = (arg_val >>> (64'd40 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
		crc32_8bytes_0_11 = crc32_8bytes_0_10[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_11_reg <= crc32_8bytes_0_11;
		if (start == 1'b0 && ^(crc32_8bytes_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %12 = lshr i64 %val, 48*/
		crc32_8bytes_0_12 = (arg_val >>> (64'd48 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
		crc32_8bytes_0_13 = crc32_8bytes_0_12[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_13_reg <= crc32_8bytes_0_13;
		if (start == 1'b0 && ^(crc32_8bytes_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %14 = lshr i64 %val, 56*/
		crc32_8bytes_0_14 = (arg_val >>> (64'd56 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
		crc32_8bytes_0_15 = crc32_8bytes_0_14[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_15_reg <= crc32_8bytes_0_15;
		if (start == 1'b0 && ^(crc32_8bytes_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_15_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_1;
		if (start == 1'b0 && ^(crc32_8bytes_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_3_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_5_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_7_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_9_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_11_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_13_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_15_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
end
always @(*) begin
	crc32_byte_finish_final = crc32_byte_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_1))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_3))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_5))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_7))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_9))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_11))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_13))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_15))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_17)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #2*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #2*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #2*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_19
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_20,
	arg_p_21,
	arg_p_22,
	arg_p_23
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_func_19_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_func_19_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_func_19_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_func_19_BB__0_5 = 4'd5;
parameter [3:0] LEGUP_F_func_19_BB__0_6 = 4'd6;
parameter [3:0] LEGUP_F_func_19_BB__0_7 = 4'd7;
parameter [3:0] LEGUP_F_func_19_BB__0_8 = 4'd8;
parameter [3:0] LEGUP_F_func_19_BB__12_9 = 4'd9;
parameter [3:0] LEGUP_F_func_19_BB__13_10 = 4'd10;
parameter [3:0] LEGUP_F_func_19_BB__13_11 = 4'd11;
parameter [3:0] LEGUP_F_func_19_BB__13_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [3:0] LEGUP_function_call_4 = 4'd4;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [15:0] arg_p_20;
input [7:0] arg_p_21;
input [31:0] arg_p_22;
input [31:0] arg_p_23;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] func_19_0_1;
reg [15:0] func_19_0_2;
reg [7:0] func_19_0_3;
reg [31:0] func_19_0_4;
reg [7:0] func_19_0_5;
reg [7:0] func_19_0_5_reg;
reg [31:0] func_19_0_7;
reg [31:0] func_19_0_8;
reg [31:0] func_19_0_9;
reg [31:0] func_19_0_9_reg;
reg [31:0] func_19_0_10;
reg  func_19_0_11;
reg [31:0] func_19_13_14;
reg [7:0] func_19_13_15;
reg  func_24_start;
reg [15:0] func_24_arg_p_25;
reg [31:0] func_24_arg_p_26;
reg [15:0] func_24_arg_p_27;
reg [7:0] func_24_arg_p_28;
wire  func_24_memory_controller_enable_a;
wire  func_24_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_24_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_24_memory_controller_in_a;
wire [1:0] func_24_memory_controller_size_a;
wire  func_24_memory_controller_enable_b;
wire  func_24_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_24_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_24_memory_controller_in_b;
wire [1:0] func_24_memory_controller_size_b;
reg  func_24_finish_final;
reg  func_24_finish_reg;
wire  func_24_finish;
wire [15:0] func_24_return_val;


func_24 func_24 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_24_memory_controller_enable_a),
	.memory_controller_address_a (func_24_memory_controller_address_a),
	.memory_controller_write_enable_a (func_24_memory_controller_write_enable_a),
	.memory_controller_in_a (func_24_memory_controller_in_a),
	.memory_controller_size_a (func_24_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_24_memory_controller_enable_b),
	.memory_controller_address_b (func_24_memory_controller_address_b),
	.memory_controller_write_enable_b (func_24_memory_controller_write_enable_b),
	.memory_controller_in_b (func_24_memory_controller_in_b),
	.memory_controller_size_b (func_24_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_24_start),
	.finish (func_24_finish),
	.return_val (func_24_return_val),
	.arg_p_25 (func_24_arg_p_25),
	.arg_p_26 (func_24_arg_p_26),
	.arg_p_27 (func_24_arg_p_27),
	.arg_p_28 (func_24_arg_p_28)
);

defparam
	func_24.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_19_BB__0_1;
LEGUP_F_func_19_BB__0_1:
		next_state = LEGUP_F_func_19_BB__0_2;
LEGUP_F_func_19_BB__0_2:
		next_state = LEGUP_F_func_19_BB__0_3;
LEGUP_F_func_19_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_func_19_BB__0_5:
		next_state = LEGUP_F_func_19_BB__0_6;
LEGUP_F_func_19_BB__0_6:
		next_state = LEGUP_F_func_19_BB__0_7;
LEGUP_F_func_19_BB__0_7:
		next_state = LEGUP_F_func_19_BB__0_8;
LEGUP_F_func_19_BB__0_8:
	if ((func_19_0_11 == 1'd1))
		next_state = LEGUP_F_func_19_BB__13_10;
	else if ((func_19_0_11 == 1'd0))
		next_state = LEGUP_F_func_19_BB__12_9;
LEGUP_F_func_19_BB__12_9:
		next_state = LEGUP_F_func_19_BB__13_10;
LEGUP_F_func_19_BB__13_10:
		next_state = LEGUP_F_func_19_BB__13_11;
LEGUP_F_func_19_BB__13_11:
		next_state = LEGUP_F_func_19_BB__13_12;
LEGUP_F_func_19_BB__13_12:
		next_state = LEGUP_0;
LEGUP_function_call_4:
	if ((func_24_finish_final == 1'd1))
		next_state = LEGUP_F_func_19_BB__0_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_19: %0*/
	/*   %1 = load i32* @g_2, align 4*/
		func_19_0_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_19: %0*/
	/*   %2 = trunc i32 %1 to i16*/
		func_19_0_2 = func_19_0_1[15:0];
end
always @(*) begin
	/* func_19: %0*/
	/*   %3 = load i8* @g_12, align 1*/
		func_19_0_3 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* func_19: %0*/
	/*   %4 = zext i8 %3 to i32*/
		func_19_0_4 = func_19_0_3;
end
always @(*) begin
	/* func_19: %0*/
	/*   %5 = trunc i32 %p_22 to i8*/
		func_19_0_5 = arg_p_22[7:0];
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %5 = trunc i32 %p_22 to i8*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		func_19_0_5_reg <= func_19_0_5;
		if (start == 1'b0 && ^(func_19_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* func_19: %0*/
	/*   %7 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_19_0_7 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_19: %0*/
	/*   %8 = xor i32 %7, 5680*/
		func_19_0_8 = (func_19_0_7 ^ 32'd5680);
end
always @(*) begin
	/* func_19: %0*/
	/*   %9 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 1), align 4*/
		func_19_0_9 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %9 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_7)) begin
		func_19_0_9_reg <= func_19_0_9;
		if (start == 1'b0 && ^(func_19_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* func_19: %0*/
	/*   %10 = load i32* @g_2, align 4*/
		func_19_0_10 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_19: %0*/
	/*   %11 = icmp eq i32 %9, %10*/
		func_19_0_11 = (func_19_0_9_reg == func_19_0_10);
end
always @(*) begin
	/* func_19: %13*/
	/*   %14 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_19_13_14 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_19: %13*/
	/*   %15 = trunc i32 %14 to i8*/
		func_19_13_15 = func_19_13_14[7:0];
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_F_func_19_BB__0_3)) begin
		func_24_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		func_24_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_F_func_19_BB__0_3)) begin
		func_24_arg_p_25 <= func_19_0_2;
		if (start == 1'b0 && ^(func_19_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_25"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_F_func_19_BB__0_3)) begin
		func_24_arg_p_26 <= func_19_0_4;
		if (start == 1'b0 && ^(func_19_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_26"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_F_func_19_BB__0_3)) begin
		func_24_arg_p_27 <= -16'd15459;
		if (start == 1'b0 && ^(-16'd15459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_27"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_F_func_19_BB__0_3)) begin
		func_24_arg_p_28 <= func_19_0_5_reg;
		if (start == 1'b0 && ^(func_19_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_28"); $finish; end
	end
end
always @(*) begin
	func_24_finish_final = func_24_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_19_BB__0_3))) begin
		func_24_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_finish_reg"); $finish; end
	end
	if (func_24_finish) begin
		func_24_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_19: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_func_19_BB__13_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = func_24_memory_controller_enable_a;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = func_24_memory_controller_enable_a;
	end
	/* func_19: %0*/
	/*   %1 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_19: %0*/
	/*   %7 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_19: %0*/
	/*   %10 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_19: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_a;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_a;
	end
	/* func_19: %0*/
	/*   %1 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_19: %0*/
	/*   %7 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_19: %0*/
	/*   %10 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_19: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = func_24_memory_controller_write_enable_a;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = func_24_memory_controller_write_enable_a;
	end
	/* func_19: %0*/
	/*   %1 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_19: %0*/
	/*   %7 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_19: %0*/
	/*   %10 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_19: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_a;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_a;
	end
	/* func_19: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_7)) begin
		memory_controller_in_a = func_19_0_8;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = func_24_memory_controller_size_a;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = func_24_memory_controller_size_a;
	end
	/* func_19: %0*/
	/*   %1 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_19: %0*/
	/*   %7 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_19: %0*/
	/*   %10 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_19: %0*/
	/*   store i32 %8, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = func_24_memory_controller_enable_b;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = func_24_memory_controller_enable_b;
	end
	/* func_19: %0*/
	/*   %3 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_19: %0*/
	/*   %9 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_19: %13*/
	/*   %14 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__13_10)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_b;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_b;
	end
	/* func_19: %0*/
	/*   %3 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_g_12_a;
	end
	/* func_19: %0*/
	/*   %9 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd5) + (4 * 32'd1)));
	end
	/* func_19: %13*/
	/*   %14 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__13_10)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = func_24_memory_controller_write_enable_b;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = func_24_memory_controller_write_enable_b;
	end
	/* func_19: %0*/
	/*   %3 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_19: %0*/
	/*   %9 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_19: %13*/
	/*   %14 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__13_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_b;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = func_24_memory_controller_size_b;
	end
	/* func_19: %0*/
	/*   %6 = call zeroext i16 @func_24(i16 zeroext %2, i32 %4, i16 zeroext -15459, i8 signext %5) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = func_24_memory_controller_size_b;
	end
	/* func_19: %0*/
	/*   %3 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_19_BB__0_1)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_19: %0*/
	/*   %9 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_19: %13*/
	/*   %14 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_19_BB__13_10)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_19: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_func_19_BB__13_12)) begin
		return_val <= func_19_13_15;
		if (start == 1'b0 && ^(func_19_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_39
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_40,
	arg_p_41
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_func_39_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_func_39_BB__0_2 = 3'd2;
parameter [2:0] LEGUP_F_func_39_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_func_39_BB__0_5 = 3'd5;
parameter [2:0] LEGUP_F_func_39_BB__0_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_4 = 3'd4;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_p_40;
input [31:0] arg_p_41;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [7:0] func_39_0_1;
reg [31:0] func_39_0_2;
reg [31:0] func_39_0_3;
reg [31:0] func_39_0_4;
reg [31:0] func_39_0_4_reg;
reg  safe_add_func_int32_t_s_s_start;
reg [31:0] safe_add_func_int32_t_s_s_arg_si1;
reg [31:0] safe_add_func_int32_t_s_s_arg_si2;
wire  safe_add_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_add_func_int32_t_s_s_memory_controller_size_a;
wire  safe_add_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_add_func_int32_t_s_s_memory_controller_size_b;
reg  safe_add_func_int32_t_s_s_finish_final;
reg  safe_add_func_int32_t_s_s_finish_reg;
wire  safe_add_func_int32_t_s_s_finish;
wire [31:0] safe_add_func_int32_t_s_s_return_val;
reg [31:0] safe_add_func_int32_t_s_s_return_val_reg;


safe_add_func_int32_t_s_s safe_add_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_int32_t_s_s_start),
	.finish (safe_add_func_int32_t_s_s_finish),
	.return_val (safe_add_func_int32_t_s_s_return_val),
	.arg_si1 (safe_add_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_add_func_int32_t_s_s_arg_si2)
);

defparam
	safe_add_func_int32_t_s_s.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_39_BB__0_1;
LEGUP_F_func_39_BB__0_1:
		next_state = LEGUP_F_func_39_BB__0_2;
LEGUP_F_func_39_BB__0_2:
		next_state = LEGUP_F_func_39_BB__0_3;
LEGUP_F_func_39_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_func_39_BB__0_5:
		next_state = LEGUP_F_func_39_BB__0_6;
LEGUP_F_func_39_BB__0_6:
		next_state = LEGUP_0;
LEGUP_function_call_4:
	if ((safe_add_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_39_BB__0_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_39: %0*/
	/*   %1 = load i8* @g_12, align 1*/
		func_39_0_1 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_39: %0*/
	/*   %2 = zext i8 %1 to i32*/
		func_39_0_2 = func_39_0_1;
end
always @(*) begin
	/* func_39: %0*/
	/*   %3 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 4), align 4*/
		func_39_0_3 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
		func_39_0_4 = safe_add_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		func_39_0_4_reg <= func_39_0_4;
		if (start == 1'b0 && ^(func_39_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_0_4_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_F_func_39_BB__0_3)) begin
		safe_add_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		safe_add_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_F_func_39_BB__0_3)) begin
		safe_add_func_int32_t_s_s_arg_si1 <= func_39_0_2;
		if (start == 1'b0 && ^(func_39_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_F_func_39_BB__0_3)) begin
		safe_add_func_int32_t_s_s_arg_si2 <= func_39_0_3;
		if (start == 1'b0 && ^(func_39_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_int32_t_s_s_finish_final = safe_add_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_39_BB__0_3))) begin
		safe_add_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_add_func_int32_t_s_s_finish) begin
		safe_add_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_39_BB__0_3))) begin
		safe_add_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_add_func_int32_t_s_s_finish) begin
		safe_add_func_int32_t_s_s_return_val_reg <= safe_add_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_39: %0*/
	/*   ret i16 %p_40*/
	if ((cur_state == LEGUP_F_func_39_BB__0_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = safe_add_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = safe_add_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_39: %0*/
	/*   %1 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_39: %0*/
	/*   store i32 %4, i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_39: %0*/
	/*   %1 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_g_12_a;
	end
	/* func_39: %0*/
	/*   store i32 %4, i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_5)) begin
		memory_controller_address_a = `TAG_g_g_44_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_39: %0*/
	/*   %1 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_39: %0*/
	/*   store i32 %4, i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_39: %0*/
	/*   store i32 %4, i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_5)) begin
		memory_controller_in_a = func_39_0_4_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_39: %0*/
	/*   %1 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_39: %0*/
	/*   store i32 %4, i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = safe_add_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = safe_add_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_39: %0*/
	/*   %3 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 4), align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_39: %0*/
	/*   %3 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 4), align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd5) + (4 * 32'd4)));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_39: %0*/
	/*   %3 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 4), align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_39: %0*/
	/*   %4 = call i32 @safe_add_func_int32_t_s_s(i32 %2, i32 %3) #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_39: %0*/
	/*   %3 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 4), align 4*/
	if ((cur_state == LEGUP_F_func_39_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_39: %0*/
	/*   ret i16 %p_40*/
	if ((cur_state == LEGUP_F_func_39_BB__0_6)) begin
		return_val <= arg_p_40;
		if (start == 1'b0 && ^(arg_p_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_func_1_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_func_1_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_func_1_BB__3_3 = 8'd3;
parameter [7:0] LEGUP_F_func_1_BB__3_4 = 8'd4;
parameter [7:0] LEGUP_F_func_1_BB__4_5 = 8'd5;
parameter [7:0] LEGUP_F_func_1_BB__6_6 = 8'd6;
parameter [7:0] LEGUP_F_func_1_BB__7_7 = 8'd7;
parameter [7:0] LEGUP_F_func_1_BB__7_8 = 8'd8;
parameter [7:0] LEGUP_F_func_1_BB__9_9 = 8'd9;
parameter [7:0] LEGUP_F_func_1_BB__9_11 = 8'd11;
parameter [7:0] LEGUP_F_func_1_BB__12_12 = 8'd12;
parameter [7:0] LEGUP_F_func_1_BB__13_13 = 8'd13;
parameter [7:0] LEGUP_F_func_1_BB__14_14 = 8'd14;
parameter [7:0] LEGUP_F_func_1_BB__16_15 = 8'd15;
parameter [7:0] LEGUP_F_func_1_BB__16_16 = 8'd16;
parameter [7:0] LEGUP_F_func_1_BB__17_17 = 8'd17;
parameter [7:0] LEGUP_F_func_1_BB__19_18 = 8'd18;
parameter [7:0] LEGUP_F_func_1_BB__20_19 = 8'd19;
parameter [7:0] LEGUP_F_func_1_BB__24_20 = 8'd20;
parameter [7:0] LEGUP_F_func_1_BB__24_21 = 8'd21;
parameter [7:0] LEGUP_F_func_1_BB__24_22 = 8'd22;
parameter [7:0] LEGUP_F_func_1_BB__24_23 = 8'd23;
parameter [7:0] LEGUP_F_func_1_BB__24_25 = 8'd25;
parameter [7:0] LEGUP_F_func_1_BB__34_26 = 8'd26;
parameter [7:0] LEGUP_F_func_1_BB__34_27 = 8'd27;
parameter [7:0] LEGUP_F_func_1_BB__34_28 = 8'd28;
parameter [7:0] LEGUP_F_func_1_BB__34_29 = 8'd29;
parameter [7:0] LEGUP_F_func_1_BB__34_31 = 8'd31;
parameter [7:0] LEGUP_F_func_1_BB__34_32 = 8'd32;
parameter [7:0] LEGUP_F_func_1_BB__34_33 = 8'd33;
parameter [7:0] LEGUP_F_func_1_BB__34_35 = 8'd35;
parameter [7:0] LEGUP_F_func_1_BB__34_36 = 8'd36;
parameter [7:0] LEGUP_F_func_1_BB__34_38 = 8'd38;
parameter [7:0] LEGUP_F_func_1_BB__34_39 = 8'd39;
parameter [7:0] LEGUP_F_func_1_BB__34_40 = 8'd40;
parameter [7:0] LEGUP_F_func_1_BB__34_42 = 8'd42;
parameter [7:0] LEGUP_F_func_1_BB__54_43 = 8'd43;
parameter [7:0] LEGUP_F_func_1_BB__54_44 = 8'd44;
parameter [7:0] LEGUP_F_func_1_BB__54_45 = 8'd45;
parameter [7:0] LEGUP_F_func_1_BB__54_46 = 8'd46;
parameter [7:0] LEGUP_F_func_1_BB__54_48 = 8'd48;
parameter [7:0] LEGUP_F_func_1_BB__54_50 = 8'd50;
parameter [7:0] LEGUP_F_func_1_BB__54_52 = 8'd52;
parameter [7:0] LEGUP_F_func_1_BB__54_53 = 8'd53;
parameter [7:0] LEGUP_F_func_1_BB__54_54 = 8'd54;
parameter [7:0] LEGUP_F_func_1_BB__54_56 = 8'd56;
parameter [7:0] LEGUP_F_func_1_BB__72_57 = 8'd57;
parameter [7:0] LEGUP_F_func_1_BB__73_58 = 8'd58;
parameter [7:0] LEGUP_F_func_1_BB__73_59 = 8'd59;
parameter [7:0] LEGUP_F_func_1_BB__75_60 = 8'd60;
parameter [7:0] LEGUP_F_func_1_BB__75_61 = 8'd61;
parameter [7:0] LEGUP_F_func_1_BB__75_62 = 8'd62;
parameter [7:0] LEGUP_F_func_1_BB__78_63 = 8'd63;
parameter [7:0] LEGUP_F_func_1_BB__79_64 = 8'd64;
parameter [7:0] LEGUP_F_func_1_BB__79_65 = 8'd65;
parameter [7:0] LEGUP_F_func_1_BB__79_66 = 8'd66;
parameter [7:0] LEGUP_F_func_1_BB__82_67 = 8'd67;
parameter [7:0] LEGUP_F_func_1_BB__83_68 = 8'd68;
parameter [7:0] LEGUP_F_func_1_BB__83_69 = 8'd69;
parameter [7:0] LEGUP_F_func_1_BB__83_70 = 8'd70;
parameter [7:0] LEGUP_F_func_1_BB__86_71 = 8'd71;
parameter [7:0] LEGUP_F_func_1_BB__87_72 = 8'd72;
parameter [7:0] LEGUP_F_func_1_BB__88_73 = 8'd73;
parameter [7:0] LEGUP_F_func_1_BB__88_74 = 8'd74;
parameter [7:0] LEGUP_F_func_1_BB__88_75 = 8'd75;
parameter [7:0] LEGUP_F_func_1_BB_loopexit_76 = 8'd76;
parameter [7:0] LEGUP_F_func_1_BB__91_77 = 8'd77;
parameter [7:0] LEGUP_F_func_1_BB__92_78 = 8'd78;
parameter [7:0] LEGUP_F_func_1_BB__93_79 = 8'd79;
parameter [7:0] LEGUP_F_func_1_BB__93_80 = 8'd80;
parameter [7:0] LEGUP_F_func_1_BB__93_81 = 8'd81;
parameter [7:0] LEGUP_F_func_1_BB__93_83 = 8'd83;
parameter [7:0] LEGUP_F_func_1_BB__101_84 = 8'd84;
parameter [7:0] LEGUP_F_func_1_BB__102_85 = 8'd85;
parameter [7:0] LEGUP_F_func_1_BB__102_86 = 8'd86;
parameter [7:0] LEGUP_F_func_1_BB__102_87 = 8'd87;
parameter [7:0] LEGUP_F_func_1_BB__102_88 = 8'd88;
parameter [7:0] LEGUP_F_func_1_BB__102_90 = 8'd90;
parameter [7:0] LEGUP_F_func_1_BB__115_91 = 8'd91;
parameter [7:0] LEGUP_F_func_1_BB__115_93 = 8'd93;
parameter [7:0] LEGUP_F_func_1_BB__115_94 = 8'd94;
parameter [7:0] LEGUP_F_func_1_BB__115_95 = 8'd95;
parameter [7:0] LEGUP_F_func_1_BB__123_96 = 8'd96;
parameter [7:0] LEGUP_F_func_1_BB__123_97 = 8'd97;
parameter [7:0] LEGUP_F_func_1_BB__123_98 = 8'd98;
parameter [7:0] LEGUP_F_func_1_BB__126_99 = 8'd99;
parameter [7:0] LEGUP_F_func_1_BB__126_101 = 8'd101;
parameter [7:0] LEGUP_F_func_1_BB__126_103 = 8'd103;
parameter [7:0] LEGUP_F_func_1_BB__126_104 = 8'd104;
parameter [7:0] LEGUP_F_func_1_BB__135_105 = 8'd105;
parameter [7:0] LEGUP_F_func_1_BB__135_106 = 8'd106;
parameter [7:0] LEGUP_F_func_1_BB__135_107 = 8'd107;
parameter [7:0] LEGUP_F_func_1_BB__135_109 = 8'd109;
parameter [7:0] LEGUP_F_func_1_BB__135_111 = 8'd111;
parameter [7:0] LEGUP_F_func_1_BB__135_112 = 8'd112;
parameter [7:0] LEGUP_F_func_1_BB__135_113 = 8'd113;
parameter [7:0] LEGUP_F_func_1_BB__135_114 = 8'd114;
parameter [7:0] LEGUP_F_func_1_BB__135_116 = 8'd116;
parameter [7:0] LEGUP_F_func_1_BB__135_118 = 8'd118;
parameter [7:0] LEGUP_F_func_1_BB__135_119 = 8'd119;
parameter [7:0] LEGUP_F_func_1_BB__135_120 = 8'd120;
parameter [7:0] LEGUP_F_func_1_BB__135_122 = 8'd122;
parameter [7:0] LEGUP_F_func_1_BB__135_123 = 8'd123;
parameter [7:0] LEGUP_F_func_1_BB__135_124 = 8'd124;
parameter [7:0] LEGUP_F_func_1_BB__168_125 = 8'd125;
parameter [7:0] LEGUP_F_func_1_BB__169_126 = 8'd126;
parameter [7:0] LEGUP_F_func_1_BB__169_127 = 8'd127;
parameter [7:0] LEGUP_F_func_1_BB__169_128 = 8'd128;
parameter [7:0] LEGUP_F_func_1_BB__169_130 = 8'd130;
parameter [7:0] LEGUP_F_func_1_BB__178_131 = 8'd131;
parameter [7:0] LEGUP_F_func_1_BB__179_132 = 8'd132;
parameter [7:0] LEGUP_F_func_1_BB__179_133 = 8'd133;
parameter [7:0] LEGUP_F_func_1_BB__181_134 = 8'd134;
parameter [7:0] LEGUP_F_func_1_BB__182_135 = 8'd135;
parameter [7:0] LEGUP_F_func_1_BB__182_136 = 8'd136;
parameter [7:0] LEGUP_F_func_1_BB__182_137 = 8'd137;
parameter [7:0] LEGUP_F_func_1_BB__182_139 = 8'd139;
parameter [7:0] LEGUP_F_func_1_BB__182_140 = 8'd140;
parameter [7:0] LEGUP_F_func_1_BB__190_141 = 8'd141;
parameter [7:0] LEGUP_F_func_1_BB__191_142 = 8'd142;
parameter [7:0] LEGUP_F_func_1_BB__191_143 = 8'd143;
parameter [7:0] LEGUP_F_func_1_BB__191_144 = 8'd144;
parameter [7:0] LEGUP_F_func_1_BB__194_145 = 8'd145;
parameter [7:0] LEGUP_F_func_1_BB__194_146 = 8'd146;
parameter [7:0] LEGUP_F_func_1_BB__194_147 = 8'd147;
parameter [7:0] LEGUP_F_func_1_BB__197_148 = 8'd148;
parameter [7:0] LEGUP_F_func_1_BB__197_150 = 8'd150;
parameter [7:0] LEGUP_F_func_1_BB__197_151 = 8'd151;
parameter [7:0] LEGUP_F_func_1_BB__204_152 = 8'd152;
parameter [7:0] LEGUP_F_func_1_BB__204_153 = 8'd153;
parameter [7:0] LEGUP_F_func_1_BB__207_154 = 8'd154;
parameter [7:0] LEGUP_F_func_1_BB__207_155 = 8'd155;
parameter [7:0] LEGUP_F_func_1_BB__207_156 = 8'd156;
parameter [7:0] LEGUP_F_func_1_BB__210_157 = 8'd157;
parameter [7:0] LEGUP_F_func_1_BB__210_159 = 8'd159;
parameter [7:0] LEGUP_F_func_1_BB__210_160 = 8'd160;
parameter [7:0] LEGUP_F_func_1_BB__210_161 = 8'd161;
parameter [7:0] LEGUP_F_func_1_BB__210_163 = 8'd163;
parameter [7:0] LEGUP_F_func_1_BB__210_165 = 8'd165;
parameter [7:0] LEGUP_F_func_1_BB__210_166 = 8'd166;
parameter [7:0] LEGUP_F_func_1_BB__210_167 = 8'd167;
parameter [7:0] LEGUP_F_func_1_BB__210_169 = 8'd169;
parameter [7:0] LEGUP_F_func_1_BB__210_170 = 8'd170;
parameter [7:0] LEGUP_F_func_1_BB__210_171 = 8'd171;
parameter [7:0] LEGUP_F_func_1_BB__210_173 = 8'd173;
parameter [7:0] LEGUP_F_func_1_BB__210_174 = 8'd174;
parameter [7:0] LEGUP_F_func_1_BB__210_175 = 8'd175;
parameter [7:0] LEGUP_F_func_1_BB__210_177 = 8'd177;
parameter [7:0] LEGUP_F_func_1_BB__234_178 = 8'd178;
parameter [7:0] LEGUP_F_func_1_BB__234_179 = 8'd179;
parameter [7:0] LEGUP_F_func_1_BB__234_180 = 8'd180;
parameter [7:0] LEGUP_F_func_1_BB__234_182 = 8'd182;
parameter [7:0] LEGUP_F_func_1_BB__243_183 = 8'd183;
parameter [7:0] LEGUP_F_func_1_BB__243_184 = 8'd184;
parameter [7:0] LEGUP_F_func_1_BB__243_185 = 8'd185;
parameter [7:0] LEGUP_F_func_1_BB__246_186 = 8'd186;
parameter [7:0] LEGUP_F_func_1_BB__246_187 = 8'd187;
parameter [7:0] LEGUP_F_func_1_BB__246_188 = 8'd188;
parameter [7:0] LEGUP_F_func_1_BB__246_190 = 8'd190;
parameter [7:0] LEGUP_F_func_1_BB__246_192 = 8'd192;
parameter [7:0] LEGUP_F_func_1_BB__246_193 = 8'd193;
parameter [7:0] LEGUP_F_func_1_BB__246_194 = 8'd194;
parameter [7:0] LEGUP_F_func_1_BB__246_196 = 8'd196;
parameter [7:0] LEGUP_F_func_1_BB__259_197 = 8'd197;
parameter [7:0] LEGUP_F_func_1_BB__260_198 = 8'd198;
parameter [7:0] LEGUP_F_func_1_BB__260_199 = 8'd199;
parameter [7:0] LEGUP_F_func_1_BB__260_200 = 8'd200;
parameter [7:0] LEGUP_F_func_1_BB__260_201 = 8'd201;
parameter [7:0] LEGUP_F_func_1_BB__260_203 = 8'd203;
parameter [7:0] LEGUP_F_func_1_BB__260_204 = 8'd204;
parameter [7:0] LEGUP_F_func_1_BB__260_205 = 8'd205;
parameter [7:0] LEGUP_F_func_1_BB__260_207 = 8'd207;
parameter [7:0] LEGUP_F_func_1_BB__260_208 = 8'd208;
parameter [7:0] LEGUP_F_func_1_BB__260_209 = 8'd209;
parameter [7:0] LEGUP_F_func_1_BB__260_211 = 8'd211;
parameter [7:0] LEGUP_F_func_1_BB__273_212 = 8'd212;
parameter [7:0] LEGUP_F_func_1_BB__273_213 = 8'd213;
parameter [7:0] LEGUP_F_func_1_BB__273_214 = 8'd214;
parameter [7:0] LEGUP_F_func_1_BB__276_215 = 8'd215;
parameter [7:0] LEGUP_F_func_1_BB__276_217 = 8'd217;
parameter [7:0] LEGUP_F_func_1_BB__281_218 = 8'd218;
parameter [7:0] LEGUP_F_func_1_BB__282_219 = 8'd219;
parameter [7:0] LEGUP_F_func_1_BB__283_220 = 8'd220;
parameter [7:0] LEGUP_F_func_1_BB__285_221 = 8'd221;
parameter [7:0] LEGUP_F_func_1_BB__285_222 = 8'd222;
parameter [7:0] LEGUP_F_func_1_BB__285_223 = 8'd223;
parameter [7:0] LEGUP_F_func_1_BB__285_225 = 8'd225;
parameter [7:0] LEGUP_F_func_1_BB__285_227 = 8'd227;
parameter [7:0] LEGUP_F_func_1_BB__285_228 = 8'd228;
parameter [7:0] LEGUP_F_func_1_BB__285_229 = 8'd229;
parameter [7:0] LEGUP_F_func_1_BB__285_230 = 8'd230;
parameter [7:0] LEGUP_F_func_1_BB__285_231 = 8'd231;
parameter [7:0] LEGUP_F_func_1_BB__301_232 = 8'd232;
parameter [7:0] LEGUP_F_func_1_BB__302_233 = 8'd233;
parameter [7:0] LEGUP_F_func_1_BB__302_234 = 8'd234;
parameter [7:0] LEGUP_F_func_1_BB__302_235 = 8'd235;
parameter [7:0] LEGUP_F_func_1_BB__305_236 = 8'd236;
parameter [7:0] LEGUP_F_func_1_BB__305_237 = 8'd237;
parameter [7:0] LEGUP_F_func_1_BB__305_238 = 8'd238;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_10 = 8'd10;
parameter [7:0] LEGUP_function_call_24 = 8'd24;
parameter [7:0] LEGUP_function_call_30 = 8'd30;
parameter [7:0] LEGUP_function_call_34 = 8'd34;
parameter [7:0] LEGUP_function_call_37 = 8'd37;
parameter [7:0] LEGUP_function_call_41 = 8'd41;
parameter [7:0] LEGUP_function_call_47 = 8'd47;
parameter [7:0] LEGUP_function_call_49 = 8'd49;
parameter [7:0] LEGUP_function_call_51 = 8'd51;
parameter [7:0] LEGUP_function_call_55 = 8'd55;
parameter [7:0] LEGUP_function_call_82 = 8'd82;
parameter [7:0] LEGUP_function_call_89 = 8'd89;
parameter [7:0] LEGUP_function_call_92 = 8'd92;
parameter [7:0] LEGUP_function_call_100 = 8'd100;
parameter [7:0] LEGUP_function_call_102 = 8'd102;
parameter [7:0] LEGUP_function_call_108 = 8'd108;
parameter [7:0] LEGUP_function_call_110 = 8'd110;
parameter [7:0] LEGUP_function_call_115 = 8'd115;
parameter [7:0] LEGUP_function_call_117 = 8'd117;
parameter [7:0] LEGUP_function_call_121 = 8'd121;
parameter [7:0] LEGUP_function_call_129 = 8'd129;
parameter [7:0] LEGUP_function_call_138 = 8'd138;
parameter [7:0] LEGUP_function_call_149 = 8'd149;
parameter [7:0] LEGUP_function_call_158 = 8'd158;
parameter [7:0] LEGUP_function_call_162 = 8'd162;
parameter [7:0] LEGUP_function_call_164 = 8'd164;
parameter [7:0] LEGUP_function_call_168 = 8'd168;
parameter [7:0] LEGUP_function_call_172 = 8'd172;
parameter [7:0] LEGUP_function_call_176 = 8'd176;
parameter [7:0] LEGUP_function_call_181 = 8'd181;
parameter [7:0] LEGUP_function_call_189 = 8'd189;
parameter [7:0] LEGUP_function_call_191 = 8'd191;
parameter [7:0] LEGUP_function_call_195 = 8'd195;
parameter [7:0] LEGUP_function_call_202 = 8'd202;
parameter [7:0] LEGUP_function_call_206 = 8'd206;
parameter [7:0] LEGUP_function_call_210 = 8'd210;
parameter [7:0] LEGUP_function_call_216 = 8'd216;
parameter [7:0] LEGUP_function_call_224 = 8'd224;
parameter [7:0] LEGUP_function_call_226 = 8'd226;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] func_1_1_2;
reg [31:0] func_1_1_2_reg;
reg  func_1_1_exitcond4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_3_scevgep5;
reg [31:0] func_1_4_5;
reg [31:0] func_1_7_storemerge;
reg [31:0] func_1_7_storemerge_reg;
reg [31:0] func_1_7_l_600;
reg [31:0] func_1_7_l_600_reg;
reg  func_1_7_8;
reg  func_1_7_8_reg;
reg [15:0] func_1_9_10;
reg [15:0] func_1_9_10_reg;
reg  func_1_9_11;
reg [31:0] func_1_14_15;
reg [31:0] func_1_14_15_reg;
reg  func_1_14_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_16_scevgep;
reg [31:0] func_1_17_18;
reg [31:0] func_1_20_l_1100;
reg [31:0] func_1_20_l_1100_reg;
reg [31:0] func_1_20_21;
reg [31:0] func_1_20_21_reg;
reg [31:0] func_1_20_l_601;
reg [31:0] func_1_20_l_601_reg;
reg [15:0] func_1_20_22;
reg [15:0] func_1_20_22_reg;
reg [7:0] func_1_20_23;
reg [7:0] func_1_20_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_20_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_20_scevgep3_reg;
reg  func_1_20_exitcond2;
reg [31:0] func_1_24_25;
reg [7:0] func_1_24_26;
reg [7:0] func_1_24_26_reg;
reg [15:0] func_1_24_27;
reg [15:0] func_1_24_28;
reg [15:0] func_1_24_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_24_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_24_29_reg;
reg [31:0] func_1_24_30;
reg [31:0] func_1_24_31;
reg [31:0] func_1_24_31_reg;
reg [7:0] func_1_24_32;
reg [7:0] func_1_24_32_reg;
reg  func_1_24_33;
reg [31:0] func_1_34_35;
reg [7:0] func_1_34_36;
reg [7:0] func_1_34_36_reg;
reg [31:0] func_1_34_37;
reg [15:0] func_1_34_38;
reg [15:0] func_1_34_38_reg;
reg [7:0] func_1_34_39;
reg [31:0] func_1_34_40;
reg [15:0] func_1_34_41;
reg [15:0] func_1_34_41_reg;
reg [31:0] func_1_34_42;
reg [15:0] func_1_34_43;
reg [15:0] func_1_34_43_reg;
reg [31:0] func_1_34_44;
reg [31:0] func_1_34_45;
reg [31:0] func_1_34_45_reg;
reg [7:0] func_1_34_46;
reg [7:0] func_1_34_46_reg;
reg [7:0] func_1_34_47;
reg [7:0] func_1_34_47_reg;
reg [15:0] func_1_34_48;
reg [15:0] func_1_34_48_reg;
reg [31:0] func_1_34_49;
reg [15:0] func_1_34_50;
reg [31:0] func_1_34_51;
reg [7:0] func_1_34_52;
reg [31:0] func_1_54_l_450;
reg [31:0] func_1_54_l_450_reg;
reg [31:0] func_1_54_55;
reg [31:0] func_1_54_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_54_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_54_56_reg;
reg [31:0] func_1_54_57;
reg [31:0] func_1_54_58;
reg  func_1_54_59;
reg [31:0] func_1_54_60;
reg [31:0] func_1_54_60_reg;
reg [31:0] func_1_54_61;
reg [31:0] func_1_54_61_reg;
reg [7:0] func_1_54_62;
reg [7:0] func_1_54_63;
reg [7:0] func_1_54_63_reg;
reg [7:0] func_1_54_64;
reg [7:0] func_1_54_64_reg;
reg [7:0] func_1_54_lobit;
reg [31:0] func_1_54_65;
reg [31:0] func_1_54_not;
reg [31:0] func_1_54_not_reg;
reg [31:0] func_1_54_66;
reg  func_1_54_67;
reg [15:0] func_1_54_68;
reg [15:0] func_1_54_69;
reg [15:0] func_1_54_70;
reg [15:0] func_1_54_70_reg;
reg  func_1_54_71;
reg [7:0] func_1_73_storemerge1;
reg [7:0] func_1_73_storemerge1_reg;
reg  func_1_73_74;
reg  func_1_73_74_reg;
reg [31:0] func_1_75_76;
reg  func_1_75_77;
reg [31:0] func_1_79_80;
reg  func_1_79_81;
reg [31:0] func_1_83_84;
reg  func_1_83_85;
reg [7:0] func_1_88_89;
reg [7:0] func_1_88_90;
reg [31:0] func_1_93_94;
reg [31:0] func_1_93_94_reg;
reg [15:0] func_1_93_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_93_96;
reg [31:0] func_1_93_97;
reg [15:0] func_1_93_98;
reg [15:0] func_1_93_99;
reg [15:0] func_1_93_99_reg;
reg  func_1_93_100;
reg [31:0] func_1_102_103;
reg [31:0] func_1_102_103_reg;
reg [31:0] func_1_102_104;
reg  func_1_102_105;
reg  func_1_102_tmp;
reg  func_1_102_tmp_reg;
reg  func_1_102_106;
reg [31:0] func_1_102_107;
reg [31:0] func_1_102_108;
reg [31:0] func_1_102_109;
reg [31:0] func_1_102_110;
reg [31:0] func_1_102_110_reg;
reg [31:0] func_1_102_111;
reg  func_1_102_112;
reg [15:0] func_1_102_113;
reg [15:0] func_1_115_116;
reg [15:0] func_1_115_116_reg;
reg [15:0] func_1_115_117;
reg [15:0] func_1_115_117_reg;
reg [31:0] func_1_115_118;
reg [31:0] func_1_115_118_reg;
reg [31:0] func_1_115_119;
reg [31:0] func_1_115_120;
reg [31:0] func_1_115_121;
reg  func_1_115_122;
reg [31:0] func_1_123_124;
reg  func_1_123_125;
reg  func_1_126_127;
reg  func_1_126_127_reg;
reg [31:0] func_1_126_128;
reg  func_1_126_129;
reg [15:0] func_1_126_130;
reg [15:0] func_1_126_131;
reg [15:0] func_1_126_131_reg;
reg [15:0] func_1_126_132;
reg [15:0] func_1_126_132_reg;
reg  func_1_126_133;
reg [31:0] func_1_126_134;
reg [31:0] func_1_126_134_reg;
reg [31:0] func_1_135_l_602;
reg [31:0] func_1_135_l_602_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_135_136;
reg [31:0] func_1_135_137;
reg [7:0] func_1_135_138;
reg [7:0] func_1_135_138_reg;
reg [15:0] func_1_135_139;
reg [15:0] func_1_135_139_reg;
reg [31:0] func_1_135_140;
reg [7:0] func_1_135_141;
reg [7:0] func_1_135_141_reg;
reg [31:0] func_1_135_142;
reg [31:0] func_1_135_143;
reg [31:0] func_1_135_143_reg;
reg [31:0] func_1_135_144;
reg [31:0] func_1_135_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_135_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_135_145_reg;
reg [31:0] func_1_135_146;
reg [31:0] func_1_135_146_reg;
reg [31:0] func_1_135_147;
reg [15:0] func_1_135_148;
reg [31:0] func_1_135_149;
reg [15:0] func_1_135_150;
reg [15:0] func_1_135_151;
reg [15:0] func_1_135_151_reg;
reg [31:0] func_1_135_152;
reg  func_1_135_153;
reg [31:0] func_1_135_154;
reg  func_1_135_155;
reg [15:0] func_1_135_156;
reg [15:0] func_1_135_157;
reg [15:0] func_1_135_157_reg;
reg [31:0] func_1_135_158;
reg [31:0] func_1_135_159;
reg [31:0] func_1_135_160;
reg [7:0] func_1_135_161;
reg [7:0] func_1_135_161_reg;
reg [31:0] func_1_135_162;
reg [7:0] func_1_135_163;
reg [7:0] func_1_135_164;
reg [7:0] func_1_135_164_reg;
reg [7:0] func_1_135_165;
reg [7:0] func_1_135_166;
reg  func_1_135_167;
reg [31:0] func_1_169_170;
reg [31:0] func_1_169_170_reg;
reg  func_1_169_171;
reg [15:0] func_1_169_172;
reg [15:0] func_1_169_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_169_173;
reg [31:0] func_1_169_174;
reg [15:0] func_1_169_175;
reg [15:0] func_1_169_176;
reg [15:0] func_1_169_176_reg;
reg  func_1_169_177;
reg [31:0] func_1_179_180;
reg [31:0] func_1_179_180_reg;
reg [31:0] func_1_181_indvar;
reg [31:0] func_1_181_indvar_reg;
reg  func_1_181_exitcond1;
reg [7:0] func_1_182_183;
reg [7:0] func_1_182_183_reg;
reg [31:0] func_1_182_184;
reg [31:0] func_1_182_185;
reg  func_1_182_186;
reg [7:0] func_1_182_187;
reg [7:0] func_1_182_188;
reg [7:0] func_1_182_188_reg;
reg [31:0] func_1_182_189;
reg [31:0] func_1_190_indvarnext;
reg [31:0] func_1_191_192;
reg  func_1_191_193;
reg [31:0] func_1_194_195;
reg [31:0] func_1_194_195_reg;
reg  func_1_194_196;
reg  func_1_197_198;
reg [7:0] func_1_197_199;
reg [7:0] func_1_197_200;
reg [7:0] func_1_197_201;
reg [7:0] func_1_197_201_reg;
reg [15:0] func_1_197_202;
reg  func_1_197_203;
reg  func_1_197_203_reg;
reg  func_1_204_205;
reg  func_1_204_205_reg;
reg [31:0] func_1_204_206;
reg [31:0] func_1_207_208;
reg  func_1_207_209;
reg  func_1_210_211;
reg  func_1_210_211_reg;
reg [7:0] func_1_210_212;
reg [31:0] func_1_210_214;
reg  func_1_210_215;
reg [31:0] func_1_210_216;
reg [31:0] func_1_210_217;
reg  func_1_210_218;
reg [7:0] func_1_210_219;
reg [7:0] func_1_210_221;
reg [7:0] func_1_210_221_reg;
reg [7:0] func_1_210_222;
reg [7:0] func_1_210_222_reg;
reg [31:0] func_1_210_223;
reg [7:0] func_1_210_224;
reg [31:0] func_1_210_226;
reg [7:0] func_1_210_227;
reg [7:0] func_1_210_227_reg;
reg [31:0] func_1_210_228;
reg [31:0] func_1_210_228_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_210_229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_210_229_reg;
reg [31:0] func_1_210_230;
reg [31:0] func_1_210_231;
reg [15:0] func_1_210_232;
reg [31:0] func_1_234_l_1101;
reg [31:0] func_1_234_l_1101_reg;
reg [31:0] func_1_234_235;
reg [31:0] func_1_234_235_reg;
reg [31:0] func_1_234_236;
reg  func_1_234_237;
reg [31:0] func_1_234_238;
reg  func_1_234_239;
reg [15:0] func_1_234_240;
reg [15:0] func_1_234_241;
reg [15:0] func_1_234_241_reg;
reg  func_1_234_242;
reg [31:0] func_1_243_244;
reg  func_1_243_245;
reg  func_1_246_247;
reg  func_1_246_247_reg;
reg [15:0] func_1_246_248;
reg [15:0] func_1_246_248_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_246_249;
reg [31:0] func_1_246_250;
reg [31:0] func_1_246_252;
reg [31:0] func_1_246_252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_246_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_246_253_reg;
reg [31:0] func_1_246_254;
reg [31:0] func_1_246_255;
reg [7:0] func_1_246_256;
reg [7:0] func_1_246_257;
reg [7:0] func_1_246_257_reg;
reg  func_1_246_258;
reg [31:0] func_1_260_261;
reg [15:0] func_1_260_tr;
reg [15:0] func_1_260_262;
reg [15:0] func_1_260_262_reg;
reg [31:0] func_1_260_264;
reg  func_1_260_265;
reg [7:0] func_1_260_266;
reg [31:0] func_1_260_267;
reg [7:0] func_1_260_268;
reg [15:0] func_1_260_270;
reg [7:0] func_1_260_271;
reg [31:0] func_1_273_274;
reg  func_1_273_275;
reg  func_1_276_277;
reg  func_1_276_277_reg;
reg [15:0] func_1_276_278;
reg [15:0] func_1_276_279;
reg [15:0] func_1_276_279_reg;
reg  func_1_276_280;
reg [31:0] func_1_283_284;
reg [31:0] func_1_285_286;
reg [31:0] func_1_285_286_reg;
reg [7:0] func_1_285_287;
reg  func_1_285_288;
reg [31:0] func_1_285_289;
reg [31:0] func_1_285_290;
reg [31:0] func_1_285_290_reg;
reg [31:0] func_1_285_291;
reg [31:0] func_1_285_291_reg;
reg [31:0] func_1_285_292;
reg [31:0] func_1_285_293;
reg [31:0] func_1_285_294;
reg  func_1_285_295;
reg [15:0] func_1_285_296;
reg [15:0] func_1_285_297;
reg [15:0] func_1_285_298;
reg [31:0] func_1_285_299;
reg [31:0] func_1_285_300;
reg [31:0] func_1_301_l_603;
reg [31:0] func_1_301_l_603_reg;
reg [31:0] func_1_302_303;
reg [31:0] func_1_302_304;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_305_306;
reg [31:0] func_1_305_307;
reg [7:0] func_1_305_308;
reg  safe_rshift_func_uint16_t_u_s_start;
reg [15:0] safe_rshift_func_uint16_t_u_s_arg_left;
reg [31:0] safe_rshift_func_uint16_t_u_s_arg_right;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
wire  safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
reg  safe_rshift_func_uint16_t_u_s_finish_final;
reg  safe_rshift_func_uint16_t_u_s_finish_reg;
wire  safe_rshift_func_uint16_t_u_s_finish;
wire [15:0] safe_rshift_func_uint16_t_u_s_return_val;
reg [15:0] safe_rshift_func_uint16_t_u_s_return_val_reg;
reg  func_19_start;
reg [15:0] func_19_arg_p_20;
reg [7:0] func_19_arg_p_21;
reg [31:0] func_19_arg_p_22;
reg [31:0] func_19_arg_p_23;
wire  func_19_memory_controller_enable_a;
wire  func_19_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_19_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_19_memory_controller_in_a;
wire [1:0] func_19_memory_controller_size_a;
wire  func_19_memory_controller_enable_b;
wire  func_19_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_19_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_19_memory_controller_in_b;
wire [1:0] func_19_memory_controller_size_b;
reg  func_19_finish_final;
reg  func_19_finish_reg;
wire  func_19_finish;
wire [7:0] func_19_return_val;
reg [7:0] func_19_return_val_reg;
reg  func_39_start;
reg [15:0] func_39_arg_p_40;
reg [31:0] func_39_arg_p_41;
wire  func_39_memory_controller_enable_a;
wire  func_39_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_39_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_39_memory_controller_in_a;
wire [1:0] func_39_memory_controller_size_a;
wire  func_39_memory_controller_enable_b;
wire  func_39_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_39_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_39_memory_controller_in_b;
wire [1:0] func_39_memory_controller_size_b;
reg  func_39_finish_final;
reg  func_39_finish_reg;
wire  func_39_finish;
wire [15:0] func_39_return_val;
reg [15:0] func_39_return_val_reg;
reg  safe_rshift_func_int16_t_s_s_start;
reg [15:0] safe_rshift_func_int16_t_s_s_arg_left;
reg [31:0] safe_rshift_func_int16_t_s_s_arg_right;
wire  safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_rshift_func_int16_t_s_s_memory_controller_size_a;
wire  safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_rshift_func_int16_t_s_s_memory_controller_size_b;
reg  safe_rshift_func_int16_t_s_s_finish_final;
reg  safe_rshift_func_int16_t_s_s_finish_reg;
wire  safe_rshift_func_int16_t_s_s_finish;
wire [15:0] safe_rshift_func_int16_t_s_s_return_val;
reg [15:0] safe_rshift_func_int16_t_s_s_return_val_reg;
reg  safe_mod_func_int8_t_s_s_start;
reg [7:0] safe_mod_func_int8_t_s_s_arg_si1;
reg [7:0] safe_mod_func_int8_t_s_s_arg_si2;
wire  safe_mod_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_mod_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_mod_func_int8_t_s_s_memory_controller_size_a;
wire  safe_mod_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_mod_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_mod_func_int8_t_s_s_memory_controller_size_b;
reg  safe_mod_func_int8_t_s_s_finish_final;
reg  safe_mod_func_int8_t_s_s_finish_reg;
wire  safe_mod_func_int8_t_s_s_finish;
wire [7:0] safe_mod_func_int8_t_s_s_return_val;
reg [7:0] safe_mod_func_int8_t_s_s_return_val_reg;
reg  func_24_start;
reg [15:0] func_24_arg_p_25;
reg [31:0] func_24_arg_p_26;
reg [15:0] func_24_arg_p_27;
reg [7:0] func_24_arg_p_28;
wire  func_24_memory_controller_enable_a;
wire  func_24_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_24_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_24_memory_controller_in_a;
wire [1:0] func_24_memory_controller_size_a;
wire  func_24_memory_controller_enable_b;
wire  func_24_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_24_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_24_memory_controller_in_b;
wire [1:0] func_24_memory_controller_size_b;
reg  func_24_finish_final;
reg  func_24_finish_reg;
wire  func_24_finish;
wire [15:0] func_24_return_val;
reg  safe_sub_func_int32_t_s_s_start;
reg [31:0] safe_sub_func_int32_t_s_s_arg_si1;
reg [31:0] safe_sub_func_int32_t_s_s_arg_si2;
wire  safe_sub_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_sub_func_int32_t_s_s_memory_controller_size_a;
wire  safe_sub_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_sub_func_int32_t_s_s_memory_controller_size_b;
reg  safe_sub_func_int32_t_s_s_finish_final;
reg  safe_sub_func_int32_t_s_s_finish_reg;
wire  safe_sub_func_int32_t_s_s_finish;
wire [31:0] safe_sub_func_int32_t_s_s_return_val;
reg [31:0] safe_sub_func_int32_t_s_s_return_val_reg;
reg  safe_mul_func_int8_t_s_s_start;
reg [7:0] safe_mul_func_int8_t_s_s_arg_si1;
reg [7:0] safe_mul_func_int8_t_s_s_arg_si2;
wire  safe_mul_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_mul_func_int8_t_s_s_memory_controller_size_a;
wire  safe_mul_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_mul_func_int8_t_s_s_memory_controller_size_b;
reg  safe_mul_func_int8_t_s_s_finish_final;
reg  safe_mul_func_int8_t_s_s_finish_reg;
wire  safe_mul_func_int8_t_s_s_finish;
wire [7:0] safe_mul_func_int8_t_s_s_return_val;
reg [7:0] safe_mul_func_int8_t_s_s_return_val_reg;
reg  safe_mul_func_uint16_t_u_u_start;
reg [15:0] safe_mul_func_uint16_t_u_u_arg_ui1;
reg [15:0] safe_mul_func_uint16_t_u_u_arg_ui2;
wire  safe_mul_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_mul_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_mul_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_mul_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_mul_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_mul_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_mul_func_uint16_t_u_u_finish_final;
reg  safe_mul_func_uint16_t_u_u_finish_reg;
wire  safe_mul_func_uint16_t_u_u_finish;
wire [15:0] safe_mul_func_uint16_t_u_u_return_val;
reg [15:0] safe_mul_func_uint16_t_u_u_return_val_reg;
reg  safe_sub_func_uint16_t_u_u_start;
reg [15:0] safe_sub_func_uint16_t_u_u_arg_ui1;
reg [15:0] safe_sub_func_uint16_t_u_u_arg_ui2;
wire  safe_sub_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_sub_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_sub_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_sub_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_sub_func_uint16_t_u_u_finish_final;
reg  safe_sub_func_uint16_t_u_u_finish_reg;
wire  safe_sub_func_uint16_t_u_u_finish;
wire [15:0] safe_sub_func_uint16_t_u_u_return_val;
reg [15:0] safe_sub_func_uint16_t_u_u_return_val_reg;
reg  safe_mul_func_int16_t_s_s_start;
reg [15:0] safe_mul_func_int16_t_s_s_arg_si1;
reg [15:0] safe_mul_func_int16_t_s_s_arg_si2;
wire  safe_mul_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_mul_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_mul_func_int16_t_s_s_memory_controller_size_a;
wire  safe_mul_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_mul_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_mul_func_int16_t_s_s_memory_controller_size_b;
reg  safe_mul_func_int16_t_s_s_finish_final;
reg  safe_mul_func_int16_t_s_s_finish_reg;
wire  safe_mul_func_int16_t_s_s_finish;
wire [15:0] safe_mul_func_int16_t_s_s_return_val;
reg  safe_lshift_func_uint16_t_u_s_start;
reg [15:0] safe_lshift_func_uint16_t_u_s_arg_left;
reg [31:0] safe_lshift_func_uint16_t_u_s_arg_right;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
wire  safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
reg  safe_lshift_func_uint16_t_u_s_finish_final;
reg  safe_lshift_func_uint16_t_u_s_finish_reg;
wire  safe_lshift_func_uint16_t_u_s_finish;
wire [15:0] safe_lshift_func_uint16_t_u_s_return_val;
reg [15:0] safe_lshift_func_uint16_t_u_s_return_val_reg;
reg  safe_add_func_uint16_t_u_u_start;
reg [15:0] safe_add_func_uint16_t_u_u_arg_ui1;
reg [15:0] safe_add_func_uint16_t_u_u_arg_ui2;
wire  safe_add_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_add_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_add_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_add_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_add_func_uint16_t_u_u_finish_final;
reg  safe_add_func_uint16_t_u_u_finish_reg;
wire  safe_add_func_uint16_t_u_u_finish;
wire [15:0] safe_add_func_uint16_t_u_u_return_val;
reg [15:0] safe_add_func_uint16_t_u_u_return_val_reg;
reg  safe_rshift_func_uint16_t_u_u_start;
reg [15:0] safe_rshift_func_uint16_t_u_u_arg_left;
reg [31:0] safe_rshift_func_uint16_t_u_u_arg_right;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_rshift_func_uint16_t_u_u_finish_final;
reg  safe_rshift_func_uint16_t_u_u_finish_reg;
wire  safe_rshift_func_uint16_t_u_u_finish;
wire [15:0] safe_rshift_func_uint16_t_u_u_return_val;
reg [15:0] safe_rshift_func_uint16_t_u_u_return_val_reg;
reg  safe_lshift_func_uint16_t_u_u_start;
reg [15:0] safe_lshift_func_uint16_t_u_u_arg_left;
reg [31:0] safe_lshift_func_uint16_t_u_u_arg_right;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_lshift_func_uint16_t_u_u_finish_final;
reg  safe_lshift_func_uint16_t_u_u_finish_reg;
wire  safe_lshift_func_uint16_t_u_u_finish;
wire [15:0] safe_lshift_func_uint16_t_u_u_return_val;
reg [15:0] safe_lshift_func_uint16_t_u_u_return_val_reg;
reg  safe_lshift_func_int8_t_s_s_start;
reg [7:0] safe_lshift_func_int8_t_s_s_arg_left;
reg [31:0] safe_lshift_func_int8_t_s_s_arg_right;
wire  safe_lshift_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_int8_t_s_s_memory_controller_size_a;
wire  safe_lshift_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_int8_t_s_s_memory_controller_size_b;
reg  safe_lshift_func_int8_t_s_s_finish_final;
reg  safe_lshift_func_int8_t_s_s_finish_reg;
wire  safe_lshift_func_int8_t_s_s_finish;
wire [7:0] safe_lshift_func_int8_t_s_s_return_val;
reg [7:0] safe_lshift_func_int8_t_s_s_return_val_reg;
reg  safe_sub_func_int16_t_s_s_start;
reg [15:0] safe_sub_func_int16_t_s_s_arg_si1;
reg [15:0] safe_sub_func_int16_t_s_s_arg_si2;
wire  safe_sub_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_sub_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_sub_func_int16_t_s_s_memory_controller_size_a;
wire  safe_sub_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_sub_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_sub_func_int16_t_s_s_memory_controller_size_b;
reg  safe_sub_func_int16_t_s_s_finish_final;
reg  safe_sub_func_int16_t_s_s_finish_reg;
wire  safe_sub_func_int16_t_s_s_finish;
wire [15:0] safe_sub_func_int16_t_s_s_return_val;
reg [15:0] safe_sub_func_int16_t_s_s_return_val_reg;
reg  safe_sub_func_uint8_t_u_u_start;
reg [7:0] safe_sub_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_sub_func_uint8_t_u_u_arg_ui2;
wire  safe_sub_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_sub_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_sub_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_sub_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_sub_func_uint8_t_u_u_finish_final;
reg  safe_sub_func_uint8_t_u_u_finish_reg;
wire  safe_sub_func_uint8_t_u_u_finish;
wire [7:0] safe_sub_func_uint8_t_u_u_return_val;
reg [7:0] safe_sub_func_uint8_t_u_u_return_val_reg;
reg  safe_sub_func_int8_t_s_s_start;
reg [7:0] safe_sub_func_int8_t_s_s_arg_si1;
reg [7:0] safe_sub_func_int8_t_s_s_arg_si2;
wire  safe_sub_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_sub_func_int8_t_s_s_memory_controller_size_a;
wire  safe_sub_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_sub_func_int8_t_s_s_memory_controller_size_b;
reg  safe_sub_func_int8_t_s_s_finish_final;
reg  safe_sub_func_int8_t_s_s_finish_reg;
wire  safe_sub_func_int8_t_s_s_finish;
wire [7:0] safe_sub_func_int8_t_s_s_return_val;
reg [7:0] safe_sub_func_int8_t_s_s_return_val_reg;
reg  safe_rshift_func_uint8_t_u_s_start;
reg [7:0] safe_rshift_func_uint8_t_u_s_arg_left;
reg [31:0] safe_rshift_func_uint8_t_u_s_arg_right;
wire  safe_rshift_func_uint8_t_u_s_memory_controller_enable_a;
wire  safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint8_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint8_t_u_s_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint8_t_u_s_memory_controller_size_a;
wire  safe_rshift_func_uint8_t_u_s_memory_controller_enable_b;
wire  safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint8_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint8_t_u_s_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint8_t_u_s_memory_controller_size_b;
reg  safe_rshift_func_uint8_t_u_s_finish_final;
reg  safe_rshift_func_uint8_t_u_s_finish_reg;
wire  safe_rshift_func_uint8_t_u_s_finish;
wire [7:0] safe_rshift_func_uint8_t_u_s_return_val;
reg [7:0] safe_rshift_func_uint8_t_u_s_return_val_reg;
reg  safe_add_func_uint8_t_u_u_start;
reg [7:0] safe_add_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_add_func_uint8_t_u_u_arg_ui2;
wire  safe_add_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_add_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_add_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_add_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_add_func_uint8_t_u_u_finish_final;
reg  safe_add_func_uint8_t_u_u_finish_reg;
wire  safe_add_func_uint8_t_u_u_finish;
wire [7:0] safe_add_func_uint8_t_u_u_return_val;
reg  safe_add_func_uint32_t_u_u_start;
reg [31:0] safe_add_func_uint32_t_u_u_arg_ui1;
reg [31:0] safe_add_func_uint32_t_u_u_arg_ui2;
wire  safe_add_func_uint32_t_u_u_memory_controller_enable_a;
wire  safe_add_func_uint32_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint32_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint32_t_u_u_memory_controller_in_a;
wire [1:0] safe_add_func_uint32_t_u_u_memory_controller_size_a;
wire  safe_add_func_uint32_t_u_u_memory_controller_enable_b;
wire  safe_add_func_uint32_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint32_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint32_t_u_u_memory_controller_in_b;
wire [1:0] safe_add_func_uint32_t_u_u_memory_controller_size_b;
reg  safe_add_func_uint32_t_u_u_finish_final;
reg  safe_add_func_uint32_t_u_u_finish_reg;
wire  safe_add_func_uint32_t_u_u_finish;
wire [31:0] safe_add_func_uint32_t_u_u_return_val;
reg [31:0] safe_add_func_uint32_t_u_u_return_val_reg;
reg  safe_lshift_func_uint8_t_u_s_start;
reg [7:0] safe_lshift_func_uint8_t_u_s_arg_left;
reg [31:0] safe_lshift_func_uint8_t_u_s_arg_right;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_enable_a;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint8_t_u_s_memory_controller_size_a;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_enable_b;
wire  safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint8_t_u_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint8_t_u_s_memory_controller_size_b;
reg  safe_lshift_func_uint8_t_u_s_finish_final;
reg  safe_lshift_func_uint8_t_u_s_finish_reg;
wire  safe_lshift_func_uint8_t_u_s_finish;
wire [7:0] safe_lshift_func_uint8_t_u_s_return_val;
reg [7:0] safe_lshift_func_uint8_t_u_s_return_val_reg;
reg  safe_div_func_int32_t_s_s_start;
reg [31:0] safe_div_func_int32_t_s_s_arg_si1;
reg [31:0] safe_div_func_int32_t_s_s_arg_si2;
wire  safe_div_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_div_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_div_func_int32_t_s_s_memory_controller_size_a;
wire  safe_div_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_div_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_div_func_int32_t_s_s_memory_controller_size_b;
reg  safe_div_func_int32_t_s_s_finish_final;
reg  safe_div_func_int32_t_s_s_finish_reg;
wire  safe_div_func_int32_t_s_s_finish;
wire [31:0] safe_div_func_int32_t_s_s_return_val;
reg [31:0] safe_div_func_int32_t_s_s_return_val_reg;


safe_rshift_func_uint16_t_u_s safe_rshift_func_uint16_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint16_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint16_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint16_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint16_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint16_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint16_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint16_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint16_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint16_t_u_s_start),
	.finish (safe_rshift_func_uint16_t_u_s_finish),
	.return_val (safe_rshift_func_uint16_t_u_s_return_val),
	.arg_left (safe_rshift_func_uint16_t_u_s_arg_left),
	.arg_right (safe_rshift_func_uint16_t_u_s_arg_right)
);

defparam
	safe_rshift_func_uint16_t_u_s.tag_offset = tag_offset;


func_19 func_19 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_19_memory_controller_enable_a),
	.memory_controller_address_a (func_19_memory_controller_address_a),
	.memory_controller_write_enable_a (func_19_memory_controller_write_enable_a),
	.memory_controller_in_a (func_19_memory_controller_in_a),
	.memory_controller_size_a (func_19_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_19_memory_controller_enable_b),
	.memory_controller_address_b (func_19_memory_controller_address_b),
	.memory_controller_write_enable_b (func_19_memory_controller_write_enable_b),
	.memory_controller_in_b (func_19_memory_controller_in_b),
	.memory_controller_size_b (func_19_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_19_start),
	.finish (func_19_finish),
	.return_val (func_19_return_val),
	.arg_p_20 (func_19_arg_p_20),
	.arg_p_21 (func_19_arg_p_21),
	.arg_p_22 (func_19_arg_p_22),
	.arg_p_23 (func_19_arg_p_23)
);

defparam
	func_19.tag_offset = tag_offset;


func_39 func_39 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_39_memory_controller_enable_a),
	.memory_controller_address_a (func_39_memory_controller_address_a),
	.memory_controller_write_enable_a (func_39_memory_controller_write_enable_a),
	.memory_controller_in_a (func_39_memory_controller_in_a),
	.memory_controller_size_a (func_39_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_39_memory_controller_enable_b),
	.memory_controller_address_b (func_39_memory_controller_address_b),
	.memory_controller_write_enable_b (func_39_memory_controller_write_enable_b),
	.memory_controller_in_b (func_39_memory_controller_in_b),
	.memory_controller_size_b (func_39_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_39_start),
	.finish (func_39_finish),
	.return_val (func_39_return_val),
	.arg_p_40 (func_39_arg_p_40),
	.arg_p_41 (func_39_arg_p_41)
);

defparam
	func_39.tag_offset = tag_offset;


safe_rshift_func_int16_t_s_s safe_rshift_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_int16_t_s_s_start),
	.finish (safe_rshift_func_int16_t_s_s_finish),
	.return_val (safe_rshift_func_int16_t_s_s_return_val),
	.arg_left (safe_rshift_func_int16_t_s_s_arg_left),
	.arg_right (safe_rshift_func_int16_t_s_s_arg_right)
);

defparam
	safe_rshift_func_int16_t_s_s.tag_offset = tag_offset;


safe_mod_func_int8_t_s_s safe_mod_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mod_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mod_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mod_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mod_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mod_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mod_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mod_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mod_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mod_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mod_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mod_func_int8_t_s_s_start),
	.finish (safe_mod_func_int8_t_s_s_finish),
	.return_val (safe_mod_func_int8_t_s_s_return_val),
	.arg_si1 (safe_mod_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_mod_func_int8_t_s_s_arg_si2)
);

defparam
	safe_mod_func_int8_t_s_s.tag_offset = tag_offset;


func_24 func_24 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_24_memory_controller_enable_a),
	.memory_controller_address_a (func_24_memory_controller_address_a),
	.memory_controller_write_enable_a (func_24_memory_controller_write_enable_a),
	.memory_controller_in_a (func_24_memory_controller_in_a),
	.memory_controller_size_a (func_24_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_24_memory_controller_enable_b),
	.memory_controller_address_b (func_24_memory_controller_address_b),
	.memory_controller_write_enable_b (func_24_memory_controller_write_enable_b),
	.memory_controller_in_b (func_24_memory_controller_in_b),
	.memory_controller_size_b (func_24_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_24_start),
	.finish (func_24_finish),
	.return_val (func_24_return_val),
	.arg_p_25 (func_24_arg_p_25),
	.arg_p_26 (func_24_arg_p_26),
	.arg_p_27 (func_24_arg_p_27),
	.arg_p_28 (func_24_arg_p_28)
);

defparam
	func_24.tag_offset = tag_offset;


safe_sub_func_int32_t_s_s safe_sub_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_int32_t_s_s_start),
	.finish (safe_sub_func_int32_t_s_s_finish),
	.return_val (safe_sub_func_int32_t_s_s_return_val),
	.arg_si1 (safe_sub_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_sub_func_int32_t_s_s_arg_si2)
);

defparam
	safe_sub_func_int32_t_s_s.tag_offset = tag_offset;


safe_mul_func_int8_t_s_s safe_mul_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_int8_t_s_s_start),
	.finish (safe_mul_func_int8_t_s_s_finish),
	.return_val (safe_mul_func_int8_t_s_s_return_val),
	.arg_si1 (safe_mul_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_mul_func_int8_t_s_s_arg_si2)
);

defparam
	safe_mul_func_int8_t_s_s.tag_offset = tag_offset;


safe_mul_func_uint16_t_u_u safe_mul_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_uint16_t_u_u_start),
	.finish (safe_mul_func_uint16_t_u_u_finish),
	.return_val (safe_mul_func_uint16_t_u_u_return_val),
	.arg_ui1 (safe_mul_func_uint16_t_u_u_arg_ui1),
	.arg_ui2 (safe_mul_func_uint16_t_u_u_arg_ui2)
);

defparam
	safe_mul_func_uint16_t_u_u.tag_offset = tag_offset;


safe_sub_func_uint16_t_u_u safe_sub_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_uint16_t_u_u_start),
	.finish (safe_sub_func_uint16_t_u_u_finish),
	.return_val (safe_sub_func_uint16_t_u_u_return_val),
	.arg_ui1 (safe_sub_func_uint16_t_u_u_arg_ui1),
	.arg_ui2 (safe_sub_func_uint16_t_u_u_arg_ui2)
);

defparam
	safe_sub_func_uint16_t_u_u.tag_offset = tag_offset;


safe_mul_func_int16_t_s_s safe_mul_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_int16_t_s_s_start),
	.finish (safe_mul_func_int16_t_s_s_finish),
	.return_val (safe_mul_func_int16_t_s_s_return_val),
	.arg_si1 (safe_mul_func_int16_t_s_s_arg_si1),
	.arg_si2 (safe_mul_func_int16_t_s_s_arg_si2)
);

defparam
	safe_mul_func_int16_t_s_s.tag_offset = tag_offset;


safe_lshift_func_uint16_t_u_s safe_lshift_func_uint16_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint16_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint16_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint16_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint16_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint16_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint16_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint16_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint16_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint16_t_u_s_start),
	.finish (safe_lshift_func_uint16_t_u_s_finish),
	.return_val (safe_lshift_func_uint16_t_u_s_return_val),
	.arg_left (safe_lshift_func_uint16_t_u_s_arg_left),
	.arg_right (safe_lshift_func_uint16_t_u_s_arg_right)
);

defparam
	safe_lshift_func_uint16_t_u_s.tag_offset = tag_offset;


safe_add_func_uint16_t_u_u safe_add_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_uint16_t_u_u_start),
	.finish (safe_add_func_uint16_t_u_u_finish),
	.return_val (safe_add_func_uint16_t_u_u_return_val),
	.arg_ui1 (safe_add_func_uint16_t_u_u_arg_ui1),
	.arg_ui2 (safe_add_func_uint16_t_u_u_arg_ui2)
);

defparam
	safe_add_func_uint16_t_u_u.tag_offset = tag_offset;


safe_rshift_func_uint16_t_u_u safe_rshift_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint16_t_u_u_start),
	.finish (safe_rshift_func_uint16_t_u_u_finish),
	.return_val (safe_rshift_func_uint16_t_u_u_return_val),
	.arg_left (safe_rshift_func_uint16_t_u_u_arg_left),
	.arg_right (safe_rshift_func_uint16_t_u_u_arg_right)
);

defparam
	safe_rshift_func_uint16_t_u_u.tag_offset = tag_offset;


safe_lshift_func_uint16_t_u_u safe_lshift_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint16_t_u_u_start),
	.finish (safe_lshift_func_uint16_t_u_u_finish),
	.return_val (safe_lshift_func_uint16_t_u_u_return_val),
	.arg_left (safe_lshift_func_uint16_t_u_u_arg_left),
	.arg_right (safe_lshift_func_uint16_t_u_u_arg_right)
);

defparam
	safe_lshift_func_uint16_t_u_u.tag_offset = tag_offset;


safe_lshift_func_int8_t_s_s safe_lshift_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_int8_t_s_s_start),
	.finish (safe_lshift_func_int8_t_s_s_finish),
	.return_val (safe_lshift_func_int8_t_s_s_return_val),
	.arg_left (safe_lshift_func_int8_t_s_s_arg_left),
	.arg_right (safe_lshift_func_int8_t_s_s_arg_right)
);

defparam
	safe_lshift_func_int8_t_s_s.tag_offset = tag_offset;


safe_sub_func_int16_t_s_s safe_sub_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_int16_t_s_s_start),
	.finish (safe_sub_func_int16_t_s_s_finish),
	.return_val (safe_sub_func_int16_t_s_s_return_val),
	.arg_si1 (safe_sub_func_int16_t_s_s_arg_si1),
	.arg_si2 (safe_sub_func_int16_t_s_s_arg_si2)
);

defparam
	safe_sub_func_int16_t_s_s.tag_offset = tag_offset;


safe_sub_func_uint8_t_u_u safe_sub_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_uint8_t_u_u_start),
	.finish (safe_sub_func_uint8_t_u_u_finish),
	.return_val (safe_sub_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_sub_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_sub_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_sub_func_uint8_t_u_u.tag_offset = tag_offset;


safe_sub_func_int8_t_s_s safe_sub_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_int8_t_s_s_start),
	.finish (safe_sub_func_int8_t_s_s_finish),
	.return_val (safe_sub_func_int8_t_s_s_return_val),
	.arg_si1 (safe_sub_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_sub_func_int8_t_s_s_arg_si2)
);

defparam
	safe_sub_func_int8_t_s_s.tag_offset = tag_offset;


safe_rshift_func_uint8_t_u_s safe_rshift_func_uint8_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint8_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint8_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint8_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint8_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint8_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint8_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint8_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint8_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint8_t_u_s_start),
	.finish (safe_rshift_func_uint8_t_u_s_finish),
	.return_val (safe_rshift_func_uint8_t_u_s_return_val),
	.arg_left (safe_rshift_func_uint8_t_u_s_arg_left),
	.arg_right (safe_rshift_func_uint8_t_u_s_arg_right)
);

defparam
	safe_rshift_func_uint8_t_u_s.tag_offset = tag_offset;


safe_add_func_uint8_t_u_u safe_add_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_uint8_t_u_u_start),
	.finish (safe_add_func_uint8_t_u_u_finish),
	.return_val (safe_add_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_add_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_add_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_add_func_uint8_t_u_u.tag_offset = tag_offset;


safe_add_func_uint32_t_u_u safe_add_func_uint32_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_uint32_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_uint32_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_uint32_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_uint32_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_uint32_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_uint32_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_uint32_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_uint32_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_uint32_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_uint32_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_uint32_t_u_u_start),
	.finish (safe_add_func_uint32_t_u_u_finish),
	.return_val (safe_add_func_uint32_t_u_u_return_val),
	.arg_ui1 (safe_add_func_uint32_t_u_u_arg_ui1),
	.arg_ui2 (safe_add_func_uint32_t_u_u_arg_ui2)
);

defparam
	safe_add_func_uint32_t_u_u.tag_offset = tag_offset;


safe_lshift_func_uint8_t_u_s safe_lshift_func_uint8_t_u_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint8_t_u_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint8_t_u_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint8_t_u_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint8_t_u_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint8_t_u_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint8_t_u_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint8_t_u_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint8_t_u_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint8_t_u_s_start),
	.finish (safe_lshift_func_uint8_t_u_s_finish),
	.return_val (safe_lshift_func_uint8_t_u_s_return_val),
	.arg_left (safe_lshift_func_uint8_t_u_s_arg_left),
	.arg_right (safe_lshift_func_uint8_t_u_s_arg_right)
);

defparam
	safe_lshift_func_uint8_t_u_s.tag_offset = tag_offset;


safe_div_func_int32_t_s_s safe_div_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_int32_t_s_s_start),
	.finish (safe_div_func_int32_t_s_s_finish),
	.return_val (safe_div_func_int32_t_s_s_return_val),
	.arg_si1 (safe_div_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_div_func_int32_t_s_s_arg_si2)
);

defparam
	safe_div_func_int32_t_s_s.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_1;
LEGUP_F_func_1_BB__0_1:
		next_state = LEGUP_F_func_1_BB__1_2;
LEGUP_F_func_1_BB__101_84:
		next_state = LEGUP_F_func_1_BB__102_85;
LEGUP_F_func_1_BB__102_85:
		next_state = LEGUP_F_func_1_BB__102_86;
LEGUP_F_func_1_BB__102_86:
		next_state = LEGUP_F_func_1_BB__102_87;
LEGUP_F_func_1_BB__102_87:
		next_state = LEGUP_F_func_1_BB__102_88;
LEGUP_F_func_1_BB__102_88:
		next_state = LEGUP_function_call_89;
LEGUP_F_func_1_BB__102_90:
		next_state = LEGUP_F_func_1_BB__115_91;
LEGUP_F_func_1_BB__115_91:
		next_state = LEGUP_function_call_92;
LEGUP_F_func_1_BB__115_93:
		next_state = LEGUP_F_func_1_BB__115_94;
LEGUP_F_func_1_BB__115_94:
		next_state = LEGUP_F_func_1_BB__115_95;
LEGUP_F_func_1_BB__115_95:
	if ((func_1_115_122 == 1'd1))
		next_state = LEGUP_F_func_1_BB__123_96;
	else if ((func_1_115_122 == 1'd0))
		next_state = LEGUP_F_func_1_BB__126_99;
LEGUP_F_func_1_BB__123_96:
		next_state = LEGUP_F_func_1_BB__123_97;
LEGUP_F_func_1_BB__123_97:
		next_state = LEGUP_F_func_1_BB__123_98;
LEGUP_F_func_1_BB__123_98:
		next_state = LEGUP_F_func_1_BB__126_99;
LEGUP_F_func_1_BB__126_101:
		next_state = LEGUP_function_call_102;
LEGUP_F_func_1_BB__126_103:
		next_state = LEGUP_F_func_1_BB__126_104;
LEGUP_F_func_1_BB__126_104:
		next_state = LEGUP_F_func_1_BB__135_105;
LEGUP_F_func_1_BB__126_99:
		next_state = LEGUP_function_call_100;
LEGUP_F_func_1_BB__12_12:
		next_state = LEGUP_F_func_1_BB__301_232;
LEGUP_F_func_1_BB__135_105:
		next_state = LEGUP_F_func_1_BB__135_106;
LEGUP_F_func_1_BB__135_106:
		next_state = LEGUP_F_func_1_BB__135_107;
LEGUP_F_func_1_BB__135_107:
		next_state = LEGUP_function_call_108;
LEGUP_F_func_1_BB__135_109:
		next_state = LEGUP_function_call_110;
LEGUP_F_func_1_BB__135_111:
		next_state = LEGUP_F_func_1_BB__135_112;
LEGUP_F_func_1_BB__135_112:
		next_state = LEGUP_F_func_1_BB__135_113;
LEGUP_F_func_1_BB__135_113:
		next_state = LEGUP_F_func_1_BB__135_114;
LEGUP_F_func_1_BB__135_114:
		next_state = LEGUP_function_call_115;
LEGUP_F_func_1_BB__135_116:
		next_state = LEGUP_function_call_117;
LEGUP_F_func_1_BB__135_118:
		next_state = LEGUP_F_func_1_BB__135_119;
LEGUP_F_func_1_BB__135_119:
		next_state = LEGUP_F_func_1_BB__135_120;
LEGUP_F_func_1_BB__135_120:
		next_state = LEGUP_function_call_121;
LEGUP_F_func_1_BB__135_122:
		next_state = LEGUP_F_func_1_BB__135_123;
LEGUP_F_func_1_BB__135_123:
		next_state = LEGUP_F_func_1_BB__135_124;
LEGUP_F_func_1_BB__135_124:
	if ((func_1_135_167 == 1'd1))
		next_state = LEGUP_F_func_1_BB__169_126;
	else if ((func_1_135_167 == 1'd0))
		next_state = LEGUP_F_func_1_BB__168_125;
LEGUP_F_func_1_BB__13_13:
		next_state = LEGUP_F_func_1_BB__14_14;
LEGUP_F_func_1_BB__14_14:
	if ((func_1_14_exitcond == 1'd1))
		next_state = LEGUP_F_func_1_BB__19_18;
	else if ((func_1_14_exitcond == 1'd0))
		next_state = LEGUP_F_func_1_BB__16_15;
LEGUP_F_func_1_BB__168_125:
		next_state = LEGUP_F_func_1_BB__169_126;
LEGUP_F_func_1_BB__169_126:
		next_state = LEGUP_F_func_1_BB__169_127;
LEGUP_F_func_1_BB__169_127:
		next_state = LEGUP_F_func_1_BB__169_128;
LEGUP_F_func_1_BB__169_128:
		next_state = LEGUP_function_call_129;
LEGUP_F_func_1_BB__169_130:
	if ((func_1_169_177 == 1'd1))
		next_state = LEGUP_F_func_1_BB__179_132;
	else if ((func_1_169_177 == 1'd0))
		next_state = LEGUP_F_func_1_BB__178_131;
LEGUP_F_func_1_BB__16_15:
		next_state = LEGUP_F_func_1_BB__16_16;
LEGUP_F_func_1_BB__16_16:
		next_state = LEGUP_F_func_1_BB__17_17;
LEGUP_F_func_1_BB__178_131:
		next_state = LEGUP_F_func_1_BB__179_132;
LEGUP_F_func_1_BB__179_132:
		next_state = LEGUP_F_func_1_BB__179_133;
LEGUP_F_func_1_BB__179_133:
		next_state = LEGUP_F_func_1_BB__181_134;
LEGUP_F_func_1_BB__17_17:
		next_state = LEGUP_F_func_1_BB__14_14;
LEGUP_F_func_1_BB__181_134:
	if ((func_1_181_exitcond1 == 1'd1))
		next_state = LEGUP_F_func_1_BB__191_142;
	else if ((func_1_181_exitcond1 == 1'd0))
		next_state = LEGUP_F_func_1_BB__182_135;
LEGUP_F_func_1_BB__182_135:
		next_state = LEGUP_F_func_1_BB__182_136;
LEGUP_F_func_1_BB__182_136:
		next_state = LEGUP_F_func_1_BB__182_137;
LEGUP_F_func_1_BB__182_137:
		next_state = LEGUP_function_call_138;
LEGUP_F_func_1_BB__182_139:
		next_state = LEGUP_F_func_1_BB__182_140;
LEGUP_F_func_1_BB__182_140:
		next_state = LEGUP_F_func_1_BB__190_141;
LEGUP_F_func_1_BB__190_141:
		next_state = LEGUP_F_func_1_BB__181_134;
LEGUP_F_func_1_BB__191_142:
		next_state = LEGUP_F_func_1_BB__191_143;
LEGUP_F_func_1_BB__191_143:
		next_state = LEGUP_F_func_1_BB__191_144;
LEGUP_F_func_1_BB__191_144:
	if ((func_1_191_193 == 1'd1))
		next_state = LEGUP_F_func_1_BB__234_178;
	else if ((func_1_191_193 == 1'd0))
		next_state = LEGUP_F_func_1_BB__194_145;
LEGUP_F_func_1_BB__194_145:
		next_state = LEGUP_F_func_1_BB__194_146;
LEGUP_F_func_1_BB__194_146:
		next_state = LEGUP_F_func_1_BB__194_147;
LEGUP_F_func_1_BB__194_147:
	if ((func_1_194_196 == 1'd1))
		next_state = LEGUP_F_func_1_BB__204_152;
	else if ((func_1_194_196 == 1'd0))
		next_state = LEGUP_F_func_1_BB__197_148;
LEGUP_F_func_1_BB__197_148:
		next_state = LEGUP_function_call_149;
LEGUP_F_func_1_BB__197_150:
		next_state = LEGUP_F_func_1_BB__197_151;
LEGUP_F_func_1_BB__197_151:
		next_state = LEGUP_F_func_1_BB__204_152;
LEGUP_F_func_1_BB__19_18:
		next_state = LEGUP_F_func_1_BB__20_19;
LEGUP_F_func_1_BB__1_2:
	if ((func_1_1_exitcond4 == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_6;
	else if ((func_1_1_exitcond4 == 1'd0))
		next_state = LEGUP_F_func_1_BB__3_3;
LEGUP_F_func_1_BB__204_152:
		next_state = LEGUP_F_func_1_BB__204_153;
LEGUP_F_func_1_BB__204_153:
	if ((func_1_204_205_reg == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_157;
	else if ((func_1_204_205_reg == 1'd0))
		next_state = LEGUP_F_func_1_BB__207_154;
LEGUP_F_func_1_BB__207_154:
		next_state = LEGUP_F_func_1_BB__207_155;
LEGUP_F_func_1_BB__207_155:
		next_state = LEGUP_F_func_1_BB__207_156;
LEGUP_F_func_1_BB__207_156:
		next_state = LEGUP_F_func_1_BB__210_157;
LEGUP_F_func_1_BB__20_19:
	if ((func_1_20_exitcond2 == 1'd1))
		next_state = LEGUP_F_func_1_BB__285_221;
	else if ((func_1_20_exitcond2 == 1'd0))
		next_state = LEGUP_F_func_1_BB__24_20;
LEGUP_F_func_1_BB__210_157:
		next_state = LEGUP_function_call_158;
LEGUP_F_func_1_BB__210_159:
		next_state = LEGUP_F_func_1_BB__210_160;
LEGUP_F_func_1_BB__210_160:
		next_state = LEGUP_F_func_1_BB__210_161;
LEGUP_F_func_1_BB__210_161:
		next_state = LEGUP_function_call_162;
LEGUP_F_func_1_BB__210_163:
		next_state = LEGUP_function_call_164;
LEGUP_F_func_1_BB__210_165:
		next_state = LEGUP_F_func_1_BB__210_166;
LEGUP_F_func_1_BB__210_166:
		next_state = LEGUP_F_func_1_BB__210_167;
LEGUP_F_func_1_BB__210_167:
		next_state = LEGUP_function_call_168;
LEGUP_F_func_1_BB__210_169:
		next_state = LEGUP_F_func_1_BB__210_170;
LEGUP_F_func_1_BB__210_170:
		next_state = LEGUP_F_func_1_BB__210_171;
LEGUP_F_func_1_BB__210_171:
		next_state = LEGUP_function_call_172;
LEGUP_F_func_1_BB__210_173:
		next_state = LEGUP_F_func_1_BB__210_174;
LEGUP_F_func_1_BB__210_174:
		next_state = LEGUP_F_func_1_BB__210_175;
LEGUP_F_func_1_BB__210_175:
		next_state = LEGUP_function_call_176;
LEGUP_F_func_1_BB__210_177:
		next_state = LEGUP_F_func_1_BB__234_178;
LEGUP_F_func_1_BB__234_178:
		next_state = LEGUP_F_func_1_BB__234_179;
LEGUP_F_func_1_BB__234_179:
		next_state = LEGUP_F_func_1_BB__234_180;
LEGUP_F_func_1_BB__234_180:
		next_state = LEGUP_function_call_181;
LEGUP_F_func_1_BB__234_182:
	if ((func_1_234_242 == 1'd1))
		next_state = LEGUP_F_func_1_BB__246_186;
	else if ((func_1_234_242 == 1'd0))
		next_state = LEGUP_F_func_1_BB__243_183;
LEGUP_F_func_1_BB__243_183:
		next_state = LEGUP_F_func_1_BB__243_184;
LEGUP_F_func_1_BB__243_184:
		next_state = LEGUP_F_func_1_BB__243_185;
LEGUP_F_func_1_BB__243_185:
		next_state = LEGUP_F_func_1_BB__246_186;
LEGUP_F_func_1_BB__246_186:
		next_state = LEGUP_F_func_1_BB__246_187;
LEGUP_F_func_1_BB__246_187:
		next_state = LEGUP_F_func_1_BB__246_188;
LEGUP_F_func_1_BB__246_188:
		next_state = LEGUP_function_call_189;
LEGUP_F_func_1_BB__246_190:
		next_state = LEGUP_function_call_191;
LEGUP_F_func_1_BB__246_192:
		next_state = LEGUP_F_func_1_BB__246_193;
LEGUP_F_func_1_BB__246_193:
		next_state = LEGUP_F_func_1_BB__246_194;
LEGUP_F_func_1_BB__246_194:
		next_state = LEGUP_function_call_195;
LEGUP_F_func_1_BB__246_196:
	if ((func_1_246_258 == 1'd1))
		next_state = LEGUP_F_func_1_BB__259_197;
	else if ((func_1_246_258 == 1'd0))
		next_state = LEGUP_F_func_1_BB__260_198;
LEGUP_F_func_1_BB__24_20:
		next_state = LEGUP_F_func_1_BB__24_21;
LEGUP_F_func_1_BB__24_21:
		next_state = LEGUP_F_func_1_BB__24_22;
LEGUP_F_func_1_BB__24_22:
		next_state = LEGUP_F_func_1_BB__24_23;
LEGUP_F_func_1_BB__24_23:
		next_state = LEGUP_function_call_24;
LEGUP_F_func_1_BB__24_25:
	if ((func_1_24_33 == 1'd1))
		next_state = LEGUP_F_func_1_BB__54_43;
	else if ((func_1_24_33 == 1'd0))
		next_state = LEGUP_F_func_1_BB__34_26;
LEGUP_F_func_1_BB__259_197:
		next_state = LEGUP_F_func_1_BB__260_198;
LEGUP_F_func_1_BB__260_198:
		next_state = LEGUP_F_func_1_BB__260_199;
LEGUP_F_func_1_BB__260_199:
		next_state = LEGUP_F_func_1_BB__260_200;
LEGUP_F_func_1_BB__260_200:
		next_state = LEGUP_F_func_1_BB__260_201;
LEGUP_F_func_1_BB__260_201:
		next_state = LEGUP_function_call_202;
LEGUP_F_func_1_BB__260_203:
		next_state = LEGUP_F_func_1_BB__260_204;
LEGUP_F_func_1_BB__260_204:
		next_state = LEGUP_F_func_1_BB__260_205;
LEGUP_F_func_1_BB__260_205:
		next_state = LEGUP_function_call_206;
LEGUP_F_func_1_BB__260_207:
		next_state = LEGUP_F_func_1_BB__260_208;
LEGUP_F_func_1_BB__260_208:
		next_state = LEGUP_F_func_1_BB__260_209;
LEGUP_F_func_1_BB__260_209:
		next_state = LEGUP_function_call_210;
LEGUP_F_func_1_BB__260_211:
	if ((1'd1 == 1'd1))
		next_state = LEGUP_F_func_1_BB__273_212;
	else if ((1'd1 == 1'd0))
		next_state = LEGUP_F_func_1_BB__276_215;
LEGUP_F_func_1_BB__273_212:
		next_state = LEGUP_F_func_1_BB__273_213;
LEGUP_F_func_1_BB__273_213:
		next_state = LEGUP_F_func_1_BB__273_214;
LEGUP_F_func_1_BB__273_214:
		next_state = LEGUP_F_func_1_BB__276_215;
LEGUP_F_func_1_BB__276_215:
		next_state = LEGUP_function_call_216;
LEGUP_F_func_1_BB__276_217:
	if ((func_1_276_280 == 1'd1))
		next_state = LEGUP_F_func_1_BB__281_218;
	else if ((func_1_276_280 == 1'd0))
		next_state = LEGUP_F_func_1_BB__282_219;
LEGUP_F_func_1_BB__281_218:
		next_state = LEGUP_F_func_1_BB__282_219;
LEGUP_F_func_1_BB__282_219:
		next_state = LEGUP_F_func_1_BB__283_220;
LEGUP_F_func_1_BB__283_220:
		next_state = LEGUP_F_func_1_BB__20_19;
LEGUP_F_func_1_BB__285_221:
		next_state = LEGUP_F_func_1_BB__285_222;
LEGUP_F_func_1_BB__285_222:
		next_state = LEGUP_F_func_1_BB__285_223;
LEGUP_F_func_1_BB__285_223:
		next_state = LEGUP_function_call_224;
LEGUP_F_func_1_BB__285_225:
		next_state = LEGUP_function_call_226;
LEGUP_F_func_1_BB__285_227:
		next_state = LEGUP_F_func_1_BB__285_228;
LEGUP_F_func_1_BB__285_228:
		next_state = LEGUP_F_func_1_BB__285_229;
LEGUP_F_func_1_BB__285_229:
		next_state = LEGUP_F_func_1_BB__285_230;
LEGUP_F_func_1_BB__285_230:
		next_state = LEGUP_F_func_1_BB__285_231;
LEGUP_F_func_1_BB__285_231:
		next_state = LEGUP_F_func_1_BB__301_232;
LEGUP_F_func_1_BB__301_232:
		next_state = LEGUP_F_func_1_BB__302_233;
LEGUP_F_func_1_BB__302_233:
		next_state = LEGUP_F_func_1_BB__302_234;
LEGUP_F_func_1_BB__302_234:
		next_state = LEGUP_F_func_1_BB__302_235;
LEGUP_F_func_1_BB__302_235:
		next_state = LEGUP_F_func_1_BB__7_7;
LEGUP_F_func_1_BB__305_236:
		next_state = LEGUP_F_func_1_BB__305_237;
LEGUP_F_func_1_BB__305_237:
		next_state = LEGUP_F_func_1_BB__305_238;
LEGUP_F_func_1_BB__305_238:
		next_state = LEGUP_0;
LEGUP_F_func_1_BB__34_26:
		next_state = LEGUP_F_func_1_BB__34_27;
LEGUP_F_func_1_BB__34_27:
		next_state = LEGUP_F_func_1_BB__34_28;
LEGUP_F_func_1_BB__34_28:
		next_state = LEGUP_F_func_1_BB__34_29;
LEGUP_F_func_1_BB__34_29:
		next_state = LEGUP_function_call_30;
LEGUP_F_func_1_BB__34_31:
		next_state = LEGUP_F_func_1_BB__34_32;
LEGUP_F_func_1_BB__34_32:
		next_state = LEGUP_F_func_1_BB__34_33;
LEGUP_F_func_1_BB__34_33:
		next_state = LEGUP_function_call_34;
LEGUP_F_func_1_BB__34_35:
		next_state = LEGUP_F_func_1_BB__34_36;
LEGUP_F_func_1_BB__34_36:
		next_state = LEGUP_function_call_37;
LEGUP_F_func_1_BB__34_38:
		next_state = LEGUP_F_func_1_BB__34_39;
LEGUP_F_func_1_BB__34_39:
		next_state = LEGUP_F_func_1_BB__34_40;
LEGUP_F_func_1_BB__34_40:
		next_state = LEGUP_function_call_41;
LEGUP_F_func_1_BB__34_42:
		next_state = LEGUP_F_func_1_BB__54_43;
LEGUP_F_func_1_BB__3_3:
		next_state = LEGUP_F_func_1_BB__3_4;
LEGUP_F_func_1_BB__3_4:
		next_state = LEGUP_F_func_1_BB__4_5;
LEGUP_F_func_1_BB__4_5:
		next_state = LEGUP_F_func_1_BB__1_2;
LEGUP_F_func_1_BB__54_43:
		next_state = LEGUP_F_func_1_BB__54_44;
LEGUP_F_func_1_BB__54_44:
		next_state = LEGUP_F_func_1_BB__54_45;
LEGUP_F_func_1_BB__54_45:
		next_state = LEGUP_F_func_1_BB__54_46;
LEGUP_F_func_1_BB__54_46:
		next_state = LEGUP_function_call_47;
LEGUP_F_func_1_BB__54_48:
		next_state = LEGUP_function_call_49;
LEGUP_F_func_1_BB__54_50:
		next_state = LEGUP_function_call_51;
LEGUP_F_func_1_BB__54_52:
		next_state = LEGUP_F_func_1_BB__54_53;
LEGUP_F_func_1_BB__54_53:
		next_state = LEGUP_F_func_1_BB__54_54;
LEGUP_F_func_1_BB__54_54:
		next_state = LEGUP_function_call_55;
LEGUP_F_func_1_BB__54_56:
	if ((func_1_54_71 == 1'd1))
		next_state = LEGUP_F_func_1_BB__92_78;
	else if ((func_1_54_71 == 1'd0))
		next_state = LEGUP_F_func_1_BB__72_57;
LEGUP_F_func_1_BB__6_6:
		next_state = LEGUP_F_func_1_BB__7_7;
LEGUP_F_func_1_BB__72_57:
		next_state = LEGUP_F_func_1_BB__73_58;
LEGUP_F_func_1_BB__73_58:
		next_state = LEGUP_F_func_1_BB__73_59;
LEGUP_F_func_1_BB__73_59:
	if ((func_1_73_74_reg == 1'd1))
		next_state = LEGUP_F_func_1_BB__75_60;
	else if ((func_1_73_74_reg == 1'd0))
		next_state = LEGUP_F_func_1_BB_loopexit_76;
LEGUP_F_func_1_BB__75_60:
		next_state = LEGUP_F_func_1_BB__75_61;
LEGUP_F_func_1_BB__75_61:
		next_state = LEGUP_F_func_1_BB__75_62;
LEGUP_F_func_1_BB__75_62:
	if ((func_1_75_77 == 1'd1))
		next_state = LEGUP_F_func_1_BB__79_64;
	else if ((func_1_75_77 == 1'd0))
		next_state = LEGUP_F_func_1_BB__78_63;
LEGUP_F_func_1_BB__78_63:
		next_state = LEGUP_F_func_1_BB__91_77;
LEGUP_F_func_1_BB__79_64:
		next_state = LEGUP_F_func_1_BB__79_65;
LEGUP_F_func_1_BB__79_65:
		next_state = LEGUP_F_func_1_BB__79_66;
LEGUP_F_func_1_BB__79_66:
	if ((func_1_79_81 == 1'd1))
		next_state = LEGUP_F_func_1_BB__83_68;
	else if ((func_1_79_81 == 1'd0))
		next_state = LEGUP_F_func_1_BB__82_67;
LEGUP_F_func_1_BB__7_7:
		next_state = LEGUP_F_func_1_BB__7_8;
LEGUP_F_func_1_BB__7_8:
	if ((func_1_7_8_reg == 1'd1))
		next_state = LEGUP_F_func_1_BB__9_9;
	else if ((func_1_7_8_reg == 1'd0))
		next_state = LEGUP_F_func_1_BB__305_236;
LEGUP_F_func_1_BB__82_67:
		next_state = LEGUP_F_func_1_BB__91_77;
LEGUP_F_func_1_BB__83_68:
		next_state = LEGUP_F_func_1_BB__83_69;
LEGUP_F_func_1_BB__83_69:
		next_state = LEGUP_F_func_1_BB__83_70;
LEGUP_F_func_1_BB__83_70:
	if ((func_1_83_85 == 1'd1))
		next_state = LEGUP_F_func_1_BB__87_72;
	else if ((func_1_83_85 == 1'd0))
		next_state = LEGUP_F_func_1_BB__86_71;
LEGUP_F_func_1_BB__86_71:
		next_state = LEGUP_F_func_1_BB__88_73;
LEGUP_F_func_1_BB__87_72:
		next_state = LEGUP_F_func_1_BB__88_73;
LEGUP_F_func_1_BB__88_73:
		next_state = LEGUP_F_func_1_BB__88_74;
LEGUP_F_func_1_BB__88_74:
		next_state = LEGUP_F_func_1_BB__88_75;
LEGUP_F_func_1_BB__88_75:
		next_state = LEGUP_F_func_1_BB__73_58;
LEGUP_F_func_1_BB__91_77:
		next_state = LEGUP_F_func_1_BB__135_105;
LEGUP_F_func_1_BB__92_78:
	if ((1'd1 == 1'd1))
		next_state = LEGUP_F_func_1_BB__93_79;
	else if ((1'd1 == 1'd0))
		next_state = LEGUP_F_func_1_BB__115_91;
LEGUP_F_func_1_BB__93_79:
		next_state = LEGUP_F_func_1_BB__93_80;
LEGUP_F_func_1_BB__93_80:
		next_state = LEGUP_F_func_1_BB__93_81;
LEGUP_F_func_1_BB__93_81:
		next_state = LEGUP_function_call_82;
LEGUP_F_func_1_BB__93_83:
	if ((func_1_93_100 == 1'd1))
		next_state = LEGUP_F_func_1_BB__102_85;
	else if ((func_1_93_100 == 1'd0))
		next_state = LEGUP_F_func_1_BB__101_84;
LEGUP_F_func_1_BB__9_11:
	if ((func_1_9_11 == 1'd1))
		next_state = LEGUP_F_func_1_BB__13_13;
	else if ((func_1_9_11 == 1'd0))
		next_state = LEGUP_F_func_1_BB__12_12;
LEGUP_F_func_1_BB__9_9:
		next_state = LEGUP_function_call_10;
LEGUP_F_func_1_BB_loopexit_76:
		next_state = LEGUP_F_func_1_BB__91_77;
LEGUP_function_call_10:
	if ((safe_rshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__9_11;
LEGUP_function_call_100:
	if ((safe_add_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__126_101;
LEGUP_function_call_102:
	if ((safe_rshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__126_103;
LEGUP_function_call_108:
	if ((safe_lshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__135_109;
LEGUP_function_call_110:
	if ((safe_lshift_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__135_111;
LEGUP_function_call_115:
	if ((safe_sub_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__135_116;
LEGUP_function_call_117:
	if ((safe_rshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__135_118;
LEGUP_function_call_121:
	if ((safe_sub_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__135_122;
LEGUP_function_call_129:
	if ((safe_add_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__169_130;
LEGUP_function_call_138:
	if ((safe_sub_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__182_139;
LEGUP_function_call_149:
	if ((safe_rshift_func_uint8_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__197_150;
LEGUP_function_call_158:
	if ((safe_add_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_159;
LEGUP_function_call_162:
	if ((safe_sub_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_163;
LEGUP_function_call_164:
	if ((safe_mul_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_165;
LEGUP_function_call_168:
	if ((safe_mul_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_169;
LEGUP_function_call_172:
	if ((safe_rshift_func_uint8_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_173;
LEGUP_function_call_176:
	if ((safe_lshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__210_177;
LEGUP_function_call_181:
	if ((safe_rshift_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__234_182;
LEGUP_function_call_189:
	if ((safe_lshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__246_190;
LEGUP_function_call_191:
	if ((safe_add_func_uint32_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__246_192;
LEGUP_function_call_195:
	if ((safe_lshift_func_uint8_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__246_196;
LEGUP_function_call_202:
	if ((safe_lshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__260_203;
LEGUP_function_call_206:
	if ((safe_sub_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__260_207;
LEGUP_function_call_210:
	if ((safe_add_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__260_211;
LEGUP_function_call_216:
	if ((safe_mul_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__276_217;
LEGUP_function_call_224:
	if ((safe_sub_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__285_225;
LEGUP_function_call_226:
	if ((safe_div_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__285_227;
LEGUP_function_call_24:
	if ((func_19_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__24_25;
LEGUP_function_call_30:
	if ((func_39_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__34_31;
LEGUP_function_call_34:
	if ((safe_rshift_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__34_35;
LEGUP_function_call_37:
	if ((safe_mod_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__34_38;
LEGUP_function_call_41:
	if ((func_24_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__34_42;
LEGUP_function_call_47:
	if ((safe_sub_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__54_48;
LEGUP_function_call_49:
	if ((safe_mul_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__54_50;
LEGUP_function_call_51:
	if ((safe_mul_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__54_52;
LEGUP_function_call_55:
	if ((safe_mul_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__54_56;
LEGUP_function_call_82:
	if ((safe_sub_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__93_83;
LEGUP_function_call_89:
	if ((safe_mul_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__102_90;
LEGUP_function_call_92:
	if ((safe_lshift_func_uint16_t_u_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__115_93;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_1_2 = 32'd0;
	end
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__4_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_1_2 = func_1_4_5;
	end
end
always @(posedge clk) begin
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_1_2_reg <= func_1_1_2;
		if (start == 1'b0 && ^(func_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_1_2_reg"); $finish; end
	end
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__4_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_1_2_reg <= func_1_1_2;
		if (start == 1'b0 && ^(func_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %1*/
	/*   %exitcond4 = icmp eq i32 %2, 4*/
		func_1_1_exitcond4 = (func_1_1_2_reg == 32'd4);
end
always @(*) begin
	/* func_1: %3*/
	/*   %scevgep5 = getelementptr [4 x i32]* %l_46, i32 0, i32 %2*/
		func_1_3_scevgep5 = (`TAG_func_1_0_l_46_a + (4 * func_1_1_2_reg));
end
always @(*) begin
	/* func_1: %4*/
	/*   %5 = add nsw i32 %2, 1*/
		func_1_4_5 = (func_1_1_2_reg + 32'd1);
end
always @(*) begin
	/* func_1: %7*/
	/*   %storemerge = phi i32 [ 0, %6 ], [ %304, %302 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_7_storemerge = 32'd0;
	end
	/* func_1: %7*/
	/*   %storemerge = phi i32 [ 0, %6 ], [ %304, %302 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__302_235) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_7_storemerge = func_1_302_304;
	end
end
always @(posedge clk) begin
	/* func_1: %7*/
	/*   %storemerge = phi i32 [ 0, %6 ], [ %304, %302 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_7_storemerge_reg <= func_1_7_storemerge;
		if (start == 1'b0 && ^(func_1_7_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_7_storemerge_reg"); $finish; end
	end
	/* func_1: %7*/
	/*   %storemerge = phi i32 [ 0, %6 ], [ %304, %302 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__302_235) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_7_storemerge_reg <= func_1_7_storemerge;
		if (start == 1'b0 && ^(func_1_7_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_7_storemerge_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %7*/
	/*   %l_60.0 = phi i32 [ -1, %6 ], [ %l_60.3, %302 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_7_l_600 = -32'd1;
	end
	/* func_1: %7*/
	/*   %l_60.0 = phi i32 [ -1, %6 ], [ %l_60.3, %302 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__302_235) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_7_l_600 = func_1_301_l_603_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %7*/
	/*   %l_60.0 = phi i32 [ -1, %6 ], [ %l_60.3, %302 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_7_l_600_reg <= func_1_7_l_600;
		if (start == 1'b0 && ^(func_1_7_l_600) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_7_l_600_reg"); $finish; end
	end
	/* func_1: %7*/
	/*   %l_60.0 = phi i32 [ -1, %6 ], [ %l_60.3, %302 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__302_235) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_7_l_600_reg <= func_1_7_l_600;
		if (start == 1'b0 && ^(func_1_7_l_600) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_7_l_600_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %7*/
	/*   %8 = icmp sgt i32 %storemerge, -8*/
		func_1_7_8 = ($signed(func_1_7_storemerge_reg) > $signed(-32'd8));
end
always @(posedge clk) begin
	/* func_1: %7*/
	/*   %8 = icmp sgt i32 %storemerge, -8*/
	if ((cur_state == LEGUP_F_func_1_BB__7_7)) begin
		func_1_7_8_reg <= func_1_7_8;
		if (start == 1'b0 && ^(func_1_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
		func_1_9_10 = safe_rshift_func_uint16_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		func_1_9_10_reg <= func_1_9_10;
		if (start == 1'b0 && ^(func_1_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %9*/
	/*   %11 = icmp eq i16 %10, 0*/
		func_1_9_11 = (func_1_9_10_reg == 16'd0);
end
always @(*) begin
	/* func_1: %14*/
	/*   %15 = phi i32 [ 0, %13 ], [ %18, %17 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__13_13) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_14_15 = 32'd0;
	end
	/* func_1: %14*/
	/*   %15 = phi i32 [ 0, %13 ], [ %18, %17 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__17_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_14_15 = func_1_17_18;
	end
end
always @(posedge clk) begin
	/* func_1: %14*/
	/*   %15 = phi i32 [ 0, %13 ], [ %18, %17 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__13_13) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_14_15_reg <= func_1_14_15;
		if (start == 1'b0 && ^(func_1_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_14_15_reg"); $finish; end
	end
	/* func_1: %14*/
	/*   %15 = phi i32 [ 0, %13 ], [ %18, %17 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__17_17) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_14_15_reg <= func_1_14_15;
		if (start == 1'b0 && ^(func_1_14_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_14_15_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %14*/
	/*   %exitcond = icmp eq i32 %15, 2*/
		func_1_14_exitcond = (func_1_14_15_reg == 32'd2);
end
always @(*) begin
	/* func_1: %16*/
	/*   %scevgep = getelementptr [2 x i32]* %l_9, i32 0, i32 %15*/
		func_1_16_scevgep = (`TAG_func_1_0_l_9_a + (4 * func_1_14_15_reg));
end
always @(*) begin
	/* func_1: %17*/
	/*   %18 = add nsw i32 %15, 1*/
		func_1_17_18 = (func_1_14_15_reg + 32'd1);
end
always @(*) begin
	/* func_1: %20*/
	/*   %l_110.0 = phi i32 [ 0, %19 ], [ %l_110.1, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_l_1100 = 32'd0;
	end
	/* func_1: %20*/
	/*   %l_110.0 = phi i32 [ 0, %19 ], [ %l_110.1, %283 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__283_220) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_20_l_1100 = func_1_234_l_1101_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %20*/
	/*   %l_110.0 = phi i32 [ 0, %19 ], [ %l_110.1, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_l_1100_reg <= func_1_20_l_1100;
		if (start == 1'b0 && ^(func_1_20_l_1100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_l_1100_reg"); $finish; end
	end
	/* func_1: %20*/
	/*   %l_110.0 = phi i32 [ 0, %19 ], [ %l_110.1, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__283_220) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_l_1100_reg <= func_1_20_l_1100;
		if (start == 1'b0 && ^(func_1_20_l_1100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_l_1100_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %20*/
	/*   %21 = phi i32 [ 0, %19 ], [ %284, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_21 = 32'd0;
	end
	/* func_1: %20*/
	/*   %21 = phi i32 [ 0, %19 ], [ %284, %283 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__283_220) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_20_21 = func_1_283_284;
	end
end
always @(posedge clk) begin
	/* func_1: %20*/
	/*   %21 = phi i32 [ 0, %19 ], [ %284, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_21_reg <= func_1_20_21;
		if (start == 1'b0 && ^(func_1_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_21_reg"); $finish; end
	end
	/* func_1: %20*/
	/*   %21 = phi i32 [ 0, %19 ], [ %284, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__283_220) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_21_reg <= func_1_20_21;
		if (start == 1'b0 && ^(func_1_20_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_21_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %20*/
	/*   %l_60.1 = phi i32 [ %l_60.0, %19 ], [ %l_60.2, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_l_601 = func_1_7_l_600_reg;
	end
	/* func_1: %20*/
	/*   %l_60.1 = phi i32 [ %l_60.0, %19 ], [ %l_60.2, %283 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__283_220) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_20_l_601 = func_1_135_l_602_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %20*/
	/*   %l_60.1 = phi i32 [ %l_60.0, %19 ], [ %l_60.2, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_18) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_l_601_reg <= func_1_20_l_601;
		if (start == 1'b0 && ^(func_1_20_l_601) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_l_601_reg"); $finish; end
	end
	/* func_1: %20*/
	/*   %l_60.1 = phi i32 [ %l_60.0, %19 ], [ %l_60.2, %283 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__283_220) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_20_l_601_reg <= func_1_20_l_601;
		if (start == 1'b0 && ^(func_1_20_l_601) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_l_601_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %20*/
	/*   %22 = trunc i32 %21 to i16*/
		func_1_20_22 = func_1_20_21_reg[15:0];
end
always @(posedge clk) begin
	/* func_1: %20*/
	/*   %22 = trunc i32 %21 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__20_19)) begin
		func_1_20_22_reg <= func_1_20_22;
		if (start == 1'b0 && ^(func_1_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_22_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %20*/
	/*   %23 = trunc i32 %21 to i8*/
		func_1_20_23 = func_1_20_21_reg[7:0];
end
always @(posedge clk) begin
	/* func_1: %20*/
	/*   %23 = trunc i32 %21 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__20_19)) begin
		func_1_20_23_reg <= func_1_20_23;
		if (start == 1'b0 && ^(func_1_20_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_23_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %20*/
	/*   %scevgep3 = getelementptr [2 x i32]* %l_9, i32 0, i32 %21*/
		func_1_20_scevgep3 = (`TAG_func_1_0_l_9_a + (4 * func_1_20_21_reg));
end
always @(posedge clk) begin
	/* func_1: %20*/
	/*   %scevgep3 = getelementptr [2 x i32]* %l_9, i32 0, i32 %21*/
	if ((cur_state == LEGUP_F_func_1_BB__20_19)) begin
		func_1_20_scevgep3_reg <= func_1_20_scevgep3;
		if (start == 1'b0 && ^(func_1_20_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_20_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %20*/
	/*   %exitcond2 = icmp eq i32 %21, 2*/
		func_1_20_exitcond2 = (func_1_20_21_reg == 32'd2);
end
always @(*) begin
	/* func_1: %24*/
	/*   %25 = load i32* %scevgep3, align 4*/
		func_1_24_25 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %24*/
	/*   %26 = trunc i32 %25 to i8*/
		func_1_24_26 = func_1_24_25[7:0];
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %26 = trunc i32 %25 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		func_1_24_26_reg <= func_1_24_26;
		if (start == 1'b0 && ^(func_1_24_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_24_26_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %24*/
	/*   %27 = trunc i32 %25 to i16*/
		func_1_24_27 = func_1_24_25[15:0];
end
always @(*) begin
	/* func_1: %24*/
	/*   %28 = and i16 %27, 255*/
		func_1_24_28 = (func_1_24_27 & 16'd255);
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %28 = and i16 %27, 255*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		func_1_24_28_reg <= func_1_24_28;
		if (start == 1'b0 && ^(func_1_24_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_24_28_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %24*/
	/*   %29 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 1*/
if (reset) begin func_1_24_29 = 0; end
		func_1_24_29 = (`TAG_func_1_0_l_9_a + (4 * 32'd1));
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %29 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		func_1_24_29_reg <= func_1_24_29;
		if (start == 1'b0 && ^(func_1_24_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_24_29_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %24*/
	/*   %30 = load i32* %29, align 4*/
		func_1_24_30 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %24*/
	/*   %31 = load i32* @g_2, align 4*/
		func_1_24_31 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %31 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		func_1_24_31_reg <= func_1_24_31;
		if (start == 1'b0 && ^(func_1_24_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_24_31_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
		func_1_24_32 = func_19_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		func_1_24_32_reg <= func_1_24_32;
		if (start == 1'b0 && ^(func_1_24_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_24_32_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %24*/
	/*   %33 = icmp eq i8 %32, 0*/
		func_1_24_33 = (func_1_24_32_reg == 8'd0);
end
always @(*) begin
	/* func_1: %34*/
	/*   %35 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 3), align 4*/
		func_1_34_35 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %36 = trunc i32 %35 to i8*/
		func_1_34_36 = func_1_34_35[7:0];
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %36 = trunc i32 %35 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__34_28)) begin
		func_1_34_36_reg <= func_1_34_36;
		if (start == 1'b0 && ^(func_1_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_36_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %37 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_1_34_37 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %38 = trunc i32 %37 to i16*/
		func_1_34_38 = func_1_34_37[15:0];
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %38 = trunc i32 %37 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__34_28)) begin
		func_1_34_38_reg <= func_1_34_38;
		if (start == 1'b0 && ^(func_1_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_38_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %39 = load i8* @g_12, align 1*/
		func_1_34_39 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %40 = zext i8 %39 to i32*/
		func_1_34_40 = func_1_34_39;
end
always @(*) begin
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
		func_1_34_41 = func_39_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		func_1_34_41_reg <= func_1_34_41;
		if (start == 1'b0 && ^(func_1_34_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_41_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %42 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_1_34_42 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
		func_1_34_43 = safe_rshift_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		func_1_34_43_reg <= func_1_34_43;
		if (start == 1'b0 && ^(func_1_34_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_43_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %44 = sext i16 %43 to i32*/
		func_1_34_44 = $signed(func_1_34_43_reg);
end
always @(*) begin
	/* func_1: %34*/
	/*   %45 = xor i32 %44, 205*/
		func_1_34_45 = (func_1_34_44 ^ 32'd205);
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %45 = xor i32 %44, 205*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		func_1_34_45_reg <= func_1_34_45;
		if (start == 1'b0 && ^(func_1_34_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_45_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %46 = trunc i32 %45 to i8*/
		func_1_34_46 = func_1_34_45[7:0];
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %46 = trunc i32 %45 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		func_1_34_46_reg <= func_1_34_46;
		if (start == 1'b0 && ^(func_1_34_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_46_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
		func_1_34_47 = safe_mod_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		func_1_34_47_reg <= func_1_34_47;
		if (start == 1'b0 && ^(func_1_34_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_47_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %48 = sext i8 %47 to i16*/
		func_1_34_48 = $signed(func_1_34_47_reg);
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %48 = sext i8 %47 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		func_1_34_48_reg <= func_1_34_48;
		if (start == 1'b0 && ^(func_1_34_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_34_48_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %34*/
	/*   %49 = load i32* %scevgep3, align 4*/
		func_1_34_49 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %50 = trunc i32 %49 to i16*/
		func_1_34_50 = func_1_34_49[15:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %51 = load i32* @g_2, align 4*/
		func_1_34_51 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %34*/
	/*   %52 = trunc i32 %51 to i8*/
		func_1_34_52 = func_1_34_51[7:0];
end
always @(*) begin
	/* func_1: %54*/
	/*   %l_45.0 = phi i32 [ %45, %34 ], [ -10, %24 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__24_25) & (memory_controller_waitrequest == 1'd0)) & (func_1_24_33 == 1'd1))) begin
		func_1_54_l_450 = -32'd10;
	end
	/* func_1: %54*/
	/*   %l_45.0 = phi i32 [ %45, %34 ], [ -10, %24 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__34_42) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_54_l_450 = func_1_34_45_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %l_45.0 = phi i32 [ %45, %34 ], [ -10, %24 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__24_25) & (memory_controller_waitrequest == 1'd0)) & (func_1_24_33 == 1'd1))) begin
		func_1_54_l_450_reg <= func_1_54_l_450;
		if (start == 1'b0 && ^(func_1_54_l_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_l_450_reg"); $finish; end
	end
	/* func_1: %54*/
	/*   %l_45.0 = phi i32 [ %45, %34 ], [ -10, %24 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__34_42) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_54_l_450_reg <= func_1_54_l_450;
		if (start == 1'b0 && ^(func_1_54_l_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_l_450_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %55 = phi i32 [ 1, %34 ], [ 0, %24 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__24_25) & (memory_controller_waitrequest == 1'd0)) & (func_1_24_33 == 1'd1))) begin
		func_1_54_55 = 32'd0;
	end
	/* func_1: %54*/
	/*   %55 = phi i32 [ 1, %34 ], [ 0, %24 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__34_42) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_54_55 = 32'd1;
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %55 = phi i32 [ 1, %34 ], [ 0, %24 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__24_25) & (memory_controller_waitrequest == 1'd0)) & (func_1_24_33 == 1'd1))) begin
		func_1_54_55_reg <= func_1_54_55;
		if (start == 1'b0 && ^(func_1_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_55_reg"); $finish; end
	end
	/* func_1: %54*/
	/*   %55 = phi i32 [ 1, %34 ], [ 0, %24 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__34_42) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_54_55_reg <= func_1_54_55;
		if (start == 1'b0 && ^(func_1_54_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_55_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %56 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 0*/
if (reset) begin func_1_54_56 = 0; end
		func_1_54_56 = `TAG_func_1_0_l_46_a;
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %56 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_func_1_BB__54_43)) begin
		func_1_54_56_reg <= func_1_54_56;
		if (start == 1'b0 && ^(func_1_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_56_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %57 = load i32* %56, align 4*/
		func_1_54_57 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %54*/
	/*   %58 = or i32 %57, %55*/
		func_1_54_58 = (func_1_54_57 | func_1_54_55_reg);
end
always @(*) begin
	/* func_1: %54*/
	/*   %59 = icmp ugt i32 %58, -6*/
		func_1_54_59 = (func_1_54_58 > -32'd6);
end
always @(*) begin
	/* func_1: %54*/
	/*   %60 = zext i1 %59 to i32*/
		func_1_54_60 = func_1_54_59;
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %60 = zext i1 %59 to i32*/
	if ((cur_state == LEGUP_F_func_1_BB__54_45)) begin
		func_1_54_60_reg <= func_1_54_60;
		if (start == 1'b0 && ^(func_1_54_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_60_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
		func_1_54_61 = safe_sub_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		func_1_54_61_reg <= func_1_54_61;
		if (start == 1'b0 && ^(func_1_54_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_61_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %62 = trunc i32 %61 to i8*/
		func_1_54_62 = func_1_54_61_reg[7:0];
end
always @(*) begin
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
		func_1_54_63 = safe_mul_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		func_1_54_63_reg <= func_1_54_63;
		if (start == 1'b0 && ^(func_1_54_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_63_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
		func_1_54_64 = safe_mul_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		func_1_54_64_reg <= func_1_54_64;
		if (start == 1'b0 && ^(func_1_54_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_64_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %.lobit = lshr i8 %64, 7*/
		func_1_54_lobit = (func_1_54_64_reg >>> (8'd7 % 8'd8));
end
always @(*) begin
	/* func_1: %54*/
	/*   %65 = zext i8 %.lobit to i32*/
		func_1_54_65 = func_1_54_lobit;
end
always @(*) begin
	/* func_1: %54*/
	/*   %.not = xor i32 %65, 1*/
		func_1_54_not = (func_1_54_65 ^ 32'd1);
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %.not = xor i32 %65, 1*/
	if ((cur_state == LEGUP_F_func_1_BB__54_52)) begin
		func_1_54_not_reg <= func_1_54_not;
		if (start == 1'b0 && ^(func_1_54_not) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_not_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %66 = load i32* @g_2, align 4*/
		func_1_54_66 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %54*/
	/*   %67 = icmp slt i32 %.not, %66*/
		func_1_54_67 = ($signed(func_1_54_not_reg) < $signed(func_1_54_66));
end
always @(*) begin
	/* func_1: %54*/
	/*   %68 = zext i1 %67 to i16*/
		func_1_54_68 = func_1_54_67;
end
always @(*) begin
	/* func_1: %54*/
	/*   %69 = trunc i32 %66 to i16*/
		func_1_54_69 = func_1_54_66[15:0];
end
always @(*) begin
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
		func_1_54_70 = safe_mul_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		func_1_54_70_reg <= func_1_54_70;
		if (start == 1'b0 && ^(func_1_54_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_54_70_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %54*/
	/*   %71 = icmp eq i16 %70, 0*/
		func_1_54_71 = (func_1_54_70_reg == 16'd0);
end
always @(*) begin
	/* func_1: %73*/
	/*   %storemerge1 = phi i8 [ 0, %72 ], [ %90, %88 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__72_57) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_73_storemerge1 = 8'd0;
	end
	/* func_1: %73*/
	/*   %storemerge1 = phi i8 [ 0, %72 ], [ %90, %88 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__88_75) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_73_storemerge1 = func_1_88_90;
	end
end
always @(posedge clk) begin
	/* func_1: %73*/
	/*   %storemerge1 = phi i8 [ 0, %72 ], [ %90, %88 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__72_57) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_73_storemerge1_reg <= func_1_73_storemerge1;
		if (start == 1'b0 && ^(func_1_73_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_73_storemerge1_reg"); $finish; end
	end
	/* func_1: %73*/
	/*   %storemerge1 = phi i8 [ 0, %72 ], [ %90, %88 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__88_75) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_73_storemerge1_reg <= func_1_73_storemerge1;
		if (start == 1'b0 && ^(func_1_73_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_73_storemerge1_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %73*/
	/*   %74 = icmp ult i8 %storemerge1, 2*/
		func_1_73_74 = (func_1_73_storemerge1_reg < 8'd2);
end
always @(posedge clk) begin
	/* func_1: %73*/
	/*   %74 = icmp ult i8 %storemerge1, 2*/
	if ((cur_state == LEGUP_F_func_1_BB__73_58)) begin
		func_1_73_74_reg <= func_1_73_74;
		if (start == 1'b0 && ^(func_1_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_73_74_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %75*/
	/*   %76 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 5), align 4*/
		func_1_75_76 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %75*/
	/*   %77 = icmp eq i32 %76, 0*/
		func_1_75_77 = (func_1_75_76 == 32'd0);
end
always @(*) begin
	/* func_1: %79*/
	/*   %80 = load i32* @g_44, align 4*/
		func_1_79_80 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %79*/
	/*   %81 = icmp eq i32 %80, 0*/
		func_1_79_81 = (func_1_79_80 == 32'd0);
end
always @(*) begin
	/* func_1: %83*/
	/*   %84 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_1_83_84 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %83*/
	/*   %85 = icmp eq i32 %84, 0*/
		func_1_83_85 = (func_1_83_84 == 32'd0);
end
always @(*) begin
	/* func_1: %88*/
	/*   %89 = load i8* @g_12, align 1*/
		func_1_88_89 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* func_1: %88*/
	/*   %90 = add i8 %89, 1*/
		func_1_88_90 = (func_1_88_89 + 8'd1);
end
always @(*) begin
	/* func_1: %93*/
	/*   %94 = load i32* @g_44, align 4*/
		func_1_93_94 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* func_1: %93*/
	/*   %94 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_81)) begin
		func_1_93_94_reg <= func_1_93_94;
		if (start == 1'b0 && ^(func_1_93_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_93_94_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %93*/
	/*   %95 = trunc i32 %94 to i16*/
		func_1_93_95 = func_1_93_94[15:0];
end
always @(*) begin
	/* func_1: %93*/
	/*   %96 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 1*/
if (reset) begin func_1_93_96 = 0; end
		func_1_93_96 = (`TAG_func_1_0_l_9_a + (4 * 32'd1));
end
always @(*) begin
	/* func_1: %93*/
	/*   %97 = load i32* %96, align 4*/
		func_1_93_97 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %93*/
	/*   %98 = trunc i32 %97 to i16*/
		func_1_93_98 = func_1_93_97[15:0];
end
always @(*) begin
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
		func_1_93_99 = safe_sub_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		func_1_93_99_reg <= func_1_93_99;
		if (start == 1'b0 && ^(func_1_93_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_93_99_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %93*/
	/*   %100 = icmp eq i16 %99, 0*/
		func_1_93_100 = (func_1_93_99_reg == 16'd0);
end
always @(*) begin
	/* func_1: %102*/
	/*   %103 = xor i32 %21, 2*/
		func_1_102_103 = (func_1_20_21_reg ^ 32'd2);
end
always @(posedge clk) begin
	/* func_1: %102*/
	/*   %103 = xor i32 %21, 2*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		func_1_102_103_reg <= func_1_102_103;
		if (start == 1'b0 && ^(func_1_102_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_102_103_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %102*/
	/*   %104 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 2, i32 5), align 4*/
		func_1_102_104 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %102*/
	/*   %105 = icmp ule i32 %103, %104*/
		func_1_102_105 = (func_1_102_103_reg <= func_1_102_104);
end
always @(*) begin
	/* func_1: %102*/
	/*   %tmp = icmp ult i32 %94, -1627762983*/
		func_1_102_tmp = (func_1_93_94_reg < -32'd1627762983);
end
always @(posedge clk) begin
	/* func_1: %102*/
	/*   %tmp = icmp ult i32 %94, -1627762983*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		func_1_102_tmp_reg <= func_1_102_tmp;
		if (start == 1'b0 && ^(func_1_102_tmp) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_102_tmp_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %102*/
	/*   %106 = or i1 %105, %tmp*/
		func_1_102_106 = (func_1_102_105 | func_1_102_tmp_reg);
end
always @(*) begin
	/* func_1: %102*/
	/*   %107 = zext i1 %106 to i32*/
		func_1_102_107 = func_1_102_106;
end
always @(*) begin
	/* func_1: %102*/
	/*   %108 = or i32 %107, %21*/
		func_1_102_108 = (func_1_102_107 | func_1_20_21_reg);
end
always @(*) begin
	/* func_1: %102*/
	/*   %109 = load i32* @g_44, align 4*/
		func_1_102_109 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %102*/
	/*   %110 = and i32 %108, %109*/
		func_1_102_110 = (func_1_102_108 & func_1_102_109);
end
always @(posedge clk) begin
	/* func_1: %102*/
	/*   %110 = and i32 %108, %109*/
	if ((cur_state == LEGUP_F_func_1_BB__102_87)) begin
		func_1_102_110_reg <= func_1_102_110;
		if (start == 1'b0 && ^(func_1_102_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_102_110_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %102*/
	/*   %111 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 6, i32 5), align 4*/
		func_1_102_111 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %102*/
	/*   %112 = icmp ule i32 %110, %111*/
		func_1_102_112 = (func_1_102_110_reg <= func_1_102_111);
end
always @(*) begin
	/* func_1: %102*/
	/*   %113 = zext i1 %112 to i16*/
		func_1_102_113 = func_1_102_112;
end
always @(*) begin
	/* func_1: %115*/
	/*   %116 = phi i16 [ 0, %92 ], [ 1, %102 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__92_78) & (memory_controller_waitrequest == 1'd0)) & (1'd1 == 1'd0))) begin
		func_1_115_116 = 16'd0;
	end
	/* func_1: %115*/
	/*   %116 = phi i16 [ 0, %92 ], [ 1, %102 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__102_90) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_115_116 = 16'd1;
	end
end
always @(posedge clk) begin
	/* func_1: %115*/
	/*   %116 = phi i16 [ 0, %92 ], [ 1, %102 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__92_78) & (memory_controller_waitrequest == 1'd0)) & (1'd1 == 1'd0))) begin
		func_1_115_116_reg <= func_1_115_116;
		if (start == 1'b0 && ^(func_1_115_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_115_116_reg"); $finish; end
	end
	/* func_1: %115*/
	/*   %116 = phi i16 [ 0, %92 ], [ 1, %102 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__102_90) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_115_116_reg <= func_1_115_116;
		if (start == 1'b0 && ^(func_1_115_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_115_116_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
		func_1_115_117 = safe_lshift_func_uint16_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		func_1_115_117_reg <= func_1_115_117;
		if (start == 1'b0 && ^(func_1_115_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_115_117_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %115*/
	/*   %118 = zext i16 %117 to i32*/
		func_1_115_118 = func_1_115_117_reg;
end
always @(posedge clk) begin
	/* func_1: %115*/
	/*   %118 = zext i16 %117 to i32*/
	if ((cur_state == LEGUP_F_func_1_BB__115_93)) begin
		func_1_115_118_reg <= func_1_115_118;
		if (start == 1'b0 && ^(func_1_115_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_115_118_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %115*/
	/*   %119 = load i32* @g_44, align 4*/
		func_1_115_119 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %115*/
	/*   %120 = xor i32 %118, %119*/
		func_1_115_120 = (func_1_115_118_reg ^ func_1_115_119);
end
always @(*) begin
	/* func_1: %115*/
	/*   %121 = and i32 %120, 76*/
		func_1_115_121 = (func_1_115_120 & 32'd76);
end
always @(*) begin
	/* func_1: %115*/
	/*   %122 = icmp eq i32 %121, 0*/
		func_1_115_122 = (func_1_115_121 == 32'd0);
end
always @(*) begin
	/* func_1: %123*/
	/*   %124 = load i32* @g_2, align 4*/
		func_1_123_124 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %123*/
	/*   %125 = icmp ne i32 %124, 0*/
		func_1_123_125 = (func_1_123_124 != 32'd0);
end
always @(*) begin
	/* func_1: %126*/
	/*   %127 = phi i1 [ true, %115 ], [ %125, %123 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__115_95) & (memory_controller_waitrequest == 1'd0)) & (func_1_115_122 == 1'd0))) begin
		func_1_126_127 = 1'd1;
	end
	/* func_1: %126*/
	/*   %127 = phi i1 [ true, %115 ], [ %125, %123 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__123_98) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_126_127 = func_1_123_125;
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %127 = phi i1 [ true, %115 ], [ %125, %123 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__115_95) & (memory_controller_waitrequest == 1'd0)) & (func_1_115_122 == 1'd0))) begin
		func_1_126_127_reg <= func_1_126_127;
		if (start == 1'b0 && ^(func_1_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_126_127_reg"); $finish; end
	end
	/* func_1: %126*/
	/*   %127 = phi i1 [ true, %115 ], [ %125, %123 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__123_98) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_126_127_reg <= func_1_126_127;
		if (start == 1'b0 && ^(func_1_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %126*/
	/*   %128 = zext i1 %127 to i32*/
		func_1_126_128 = func_1_126_127_reg;
end
always @(*) begin
	/* func_1: %126*/
	/*   %129 = icmp sgt i32 %128, %21*/
		func_1_126_129 = ($signed(func_1_126_128) > $signed(func_1_20_21_reg));
end
always @(*) begin
	/* func_1: %126*/
	/*   %130 = zext i1 %129 to i16*/
		func_1_126_130 = func_1_126_129;
end
always @(*) begin
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
		func_1_126_131 = safe_add_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		func_1_126_131_reg <= func_1_126_131;
		if (start == 1'b0 && ^(func_1_126_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_126_131_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
		func_1_126_132 = safe_rshift_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		func_1_126_132_reg <= func_1_126_132;
		if (start == 1'b0 && ^(func_1_126_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_126_132_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %126*/
	/*   %133 = icmp ult i16 %132, 187*/
		func_1_126_133 = (func_1_126_132_reg < 16'd187);
end
always @(*) begin
	/* func_1: %126*/
	/*   %134 = zext i1 %133 to i32*/
		func_1_126_134 = func_1_126_133;
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %134 = zext i1 %133 to i32*/
	if ((cur_state == LEGUP_F_func_1_BB__126_103)) begin
		func_1_126_134_reg <= func_1_126_134;
		if (start == 1'b0 && ^(func_1_126_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_126_134_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %l_60.2 = phi i32 [ %l_60.1, %91 ], [ %134, %126 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__91_77) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_135_l_602 = func_1_20_l_601_reg;
	end
	/* func_1: %135*/
	/*   %l_60.2 = phi i32 [ %l_60.1, %91 ], [ %134, %126 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__126_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_135_l_602 = func_1_126_134_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %l_60.2 = phi i32 [ %l_60.1, %91 ], [ %134, %126 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__91_77) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_135_l_602_reg <= func_1_135_l_602;
		if (start == 1'b0 && ^(func_1_135_l_602) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_l_602_reg"); $finish; end
	end
	/* func_1: %135*/
	/*   %l_60.2 = phi i32 [ %l_60.1, %91 ], [ %134, %126 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__126_104) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_135_l_602_reg <= func_1_135_l_602;
		if (start == 1'b0 && ^(func_1_135_l_602) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_l_602_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %136 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 0*/
if (reset) begin func_1_135_136 = 0; end
		func_1_135_136 = `TAG_func_1_0_l_9_a;
end
always @(*) begin
	/* func_1: %135*/
	/*   %137 = load i32* %136, align 4*/
		func_1_135_137 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %138 = trunc i32 %137 to i8*/
		func_1_135_138 = func_1_135_137[7:0];
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %138 = trunc i32 %137 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__135_107)) begin
		func_1_135_138_reg <= func_1_135_138;
		if (start == 1'b0 && ^(func_1_135_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_138_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
		func_1_135_139 = safe_lshift_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		func_1_135_139_reg <= func_1_135_139;
		if (start == 1'b0 && ^(func_1_135_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_139_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %140 = zext i16 %139 to i32*/
		func_1_135_140 = func_1_135_139_reg;
end
always @(*) begin
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
		func_1_135_141 = safe_lshift_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		func_1_135_141_reg <= func_1_135_141;
		if (start == 1'b0 && ^(func_1_135_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_141_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %142 = sext i8 %141 to i32*/
		func_1_135_142 = $signed(func_1_135_141_reg);
end
always @(*) begin
	/* func_1: %135*/
	/*   %143 = xor i32 %142, 1*/
		func_1_135_143 = (func_1_135_142 ^ 32'd1);
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %143 = xor i32 %142, 1*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		func_1_135_143_reg <= func_1_135_143;
		if (start == 1'b0 && ^(func_1_135_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_143_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %144 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 5), align 4*/
		func_1_135_144 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %144 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_113)) begin
		func_1_135_144_reg <= func_1_135_144;
		if (start == 1'b0 && ^(func_1_135_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_144_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %145 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 0*/
if (reset) begin func_1_135_145 = 0; end
		func_1_135_145 = `TAG_func_1_0_l_9_a;
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %145 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_func_1_BB__135_105)) begin
		func_1_135_145_reg <= func_1_135_145;
		if (start == 1'b0 && ^(func_1_135_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_145_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %146 = load i32* %145, align 4*/
		func_1_135_146 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %146 = load i32* %145, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_113)) begin
		func_1_135_146_reg <= func_1_135_146;
		if (start == 1'b0 && ^(func_1_135_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_146_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %147 = load i32* @g_44, align 4*/
		func_1_135_147 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %148 = trunc i32 %147 to i16*/
		func_1_135_148 = func_1_135_147[15:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %149 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 3, i32 1), align 4*/
		func_1_135_149 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %150 = trunc i32 %149 to i16*/
		func_1_135_150 = func_1_135_149[15:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
		func_1_135_151 = safe_sub_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		func_1_135_151_reg <= func_1_135_151;
		if (start == 1'b0 && ^(func_1_135_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_151_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %152 = sext i16 %151 to i32*/
		func_1_135_152 = $signed(func_1_135_151_reg);
end
always @(*) begin
	/* func_1: %135*/
	/*   %153 = icmp sgt i32 %146, %152*/
		func_1_135_153 = ($signed(func_1_135_146_reg) > $signed(func_1_135_152));
end
always @(*) begin
	/* func_1: %135*/
	/*   %154 = zext i1 %153 to i32*/
		func_1_135_154 = func_1_135_153;
end
always @(*) begin
	/* func_1: %135*/
	/*   %155 = icmp slt i32 %154, %21*/
		func_1_135_155 = ($signed(func_1_135_154) < $signed(func_1_20_21_reg));
end
always @(*) begin
	/* func_1: %135*/
	/*   %156 = zext i1 %155 to i16*/
		func_1_135_156 = func_1_135_155;
end
always @(*) begin
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
		func_1_135_157 = safe_rshift_func_uint16_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		func_1_135_157_reg <= func_1_135_157;
		if (start == 1'b0 && ^(func_1_135_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_157_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %158 = zext i16 %157 to i32*/
		func_1_135_158 = func_1_135_157_reg;
end
always @(*) begin
	/* func_1: %135*/
	/*   %159 = and i32 %144, %158*/
		func_1_135_159 = (func_1_135_144_reg & func_1_135_158);
end
always @(*) begin
	/* func_1: %135*/
	/*   %160 = xor i32 %l_45.0, %159*/
		func_1_135_160 = (func_1_54_l_450_reg ^ func_1_135_159);
end
always @(*) begin
	/* func_1: %135*/
	/*   %161 = trunc i32 %160 to i8*/
		func_1_135_161 = func_1_135_160[7:0];
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %161 = trunc i32 %160 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__135_118)) begin
		func_1_135_161_reg <= func_1_135_161;
		if (start == 1'b0 && ^(func_1_135_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_161_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %162 = load i32* @g_44, align 4*/
		func_1_135_162 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %163 = trunc i32 %162 to i8*/
		func_1_135_163 = func_1_135_162[7:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
		func_1_135_164 = safe_sub_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		func_1_135_164_reg <= func_1_135_164;
		if (start == 1'b0 && ^(func_1_135_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_135_164_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %135*/
	/*   %165 = load i8* @g_12, align 1*/
		func_1_135_165 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* func_1: %135*/
	/*   %166 = and i8 %164, %165*/
		func_1_135_166 = (func_1_135_164_reg & func_1_135_165);
end
always @(*) begin
	/* func_1: %135*/
	/*   %167 = icmp eq i8 %166, 0*/
		func_1_135_167 = (func_1_135_166 == 8'd0);
end
always @(*) begin
	/* func_1: %169*/
	/*   %170 = phi i32 [ 0, %135 ], [ 1, %168 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__135_124) & (memory_controller_waitrequest == 1'd0)) & (func_1_135_167 == 1'd1))) begin
		func_1_169_170 = 32'd0;
	end
	/* func_1: %169*/
	/*   %170 = phi i32 [ 0, %135 ], [ 1, %168 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__168_125) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_169_170 = 32'd1;
	end
end
always @(posedge clk) begin
	/* func_1: %169*/
	/*   %170 = phi i32 [ 0, %135 ], [ 1, %168 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__135_124) & (memory_controller_waitrequest == 1'd0)) & (func_1_135_167 == 1'd1))) begin
		func_1_169_170_reg <= func_1_169_170;
		if (start == 1'b0 && ^(func_1_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_169_170_reg"); $finish; end
	end
	/* func_1: %169*/
	/*   %170 = phi i32 [ 0, %135 ], [ 1, %168 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__168_125) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_169_170_reg <= func_1_169_170;
		if (start == 1'b0 && ^(func_1_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_169_170_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %169*/
	/*   %171 = icmp sle i32 %143, %170*/
		func_1_169_171 = ($signed(func_1_135_143_reg) <= $signed(func_1_169_170_reg));
end
always @(*) begin
	/* func_1: %169*/
	/*   %172 = zext i1 %171 to i16*/
		func_1_169_172 = func_1_169_171;
end
always @(posedge clk) begin
	/* func_1: %169*/
	/*   %172 = zext i1 %171 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__169_126)) begin
		func_1_169_172_reg <= func_1_169_172;
		if (start == 1'b0 && ^(func_1_169_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_169_172_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %169*/
	/*   %173 = getelementptr inbounds [2 x i32]* %l_9, i32 0, i32 1*/
if (reset) begin func_1_169_173 = 0; end
		func_1_169_173 = (`TAG_func_1_0_l_9_a + (4 * 32'd1));
end
always @(*) begin
	/* func_1: %169*/
	/*   %174 = load i32* %173, align 4*/
		func_1_169_174 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %169*/
	/*   %175 = trunc i32 %174 to i16*/
		func_1_169_175 = func_1_169_174[15:0];
end
always @(*) begin
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
		func_1_169_176 = safe_add_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		func_1_169_176_reg <= func_1_169_176;
		if (start == 1'b0 && ^(func_1_169_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_169_176_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %169*/
	/*   %177 = icmp eq i16 %176, 0*/
		func_1_169_177 = (func_1_169_176_reg == 16'd0);
end
always @(*) begin
	/* func_1: %179*/
	/*   %180 = phi i32 [ 0, %169 ], [ 1, %178 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__169_130) & (memory_controller_waitrequest == 1'd0)) & (func_1_169_177 == 1'd1))) begin
		func_1_179_180 = 32'd0;
	end
	/* func_1: %179*/
	/*   %180 = phi i32 [ 0, %169 ], [ 1, %178 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__178_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_179_180 = 32'd1;
	end
end
always @(posedge clk) begin
	/* func_1: %179*/
	/*   %180 = phi i32 [ 0, %169 ], [ 1, %178 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__169_130) & (memory_controller_waitrequest == 1'd0)) & (func_1_169_177 == 1'd1))) begin
		func_1_179_180_reg <= func_1_179_180;
		if (start == 1'b0 && ^(func_1_179_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_179_180_reg"); $finish; end
	end
	/* func_1: %179*/
	/*   %180 = phi i32 [ 0, %169 ], [ 1, %178 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__178_131) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_179_180_reg <= func_1_179_180;
		if (start == 1'b0 && ^(func_1_179_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_179_180_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %181*/
	/*   %indvar = phi i32 [ %indvar.next, %190 ], [ 0, %179 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__179_133) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_181_indvar = 32'd0;
	end
	/* func_1: %181*/
	/*   %indvar = phi i32 [ %indvar.next, %190 ], [ 0, %179 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__190_141) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_181_indvar = func_1_190_indvarnext;
	end
end
always @(posedge clk) begin
	/* func_1: %181*/
	/*   %indvar = phi i32 [ %indvar.next, %190 ], [ 0, %179 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__179_133) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_181_indvar_reg <= func_1_181_indvar;
		if (start == 1'b0 && ^(func_1_181_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_181_indvar_reg"); $finish; end
	end
	/* func_1: %181*/
	/*   %indvar = phi i32 [ %indvar.next, %190 ], [ 0, %179 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__190_141) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_181_indvar_reg <= func_1_181_indvar;
		if (start == 1'b0 && ^(func_1_181_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_181_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %181*/
	/*   %exitcond1 = icmp eq i32 %indvar, 2*/
		func_1_181_exitcond1 = (func_1_181_indvar_reg == 32'd2);
end
always @(*) begin
	/* func_1: %182*/
	/*   %183 = trunc i32 %l_60.2 to i8*/
		func_1_182_183 = func_1_135_l_602_reg[7:0];
end
always @(posedge clk) begin
	/* func_1: %182*/
	/*   %183 = trunc i32 %l_60.2 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		func_1_182_183_reg <= func_1_182_183;
		if (start == 1'b0 && ^(func_1_182_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_182_183_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %182*/
	/*   %184 = load i32* @g_2, align 4*/
		func_1_182_184 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %182*/
	/*   %185 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 5), align 4*/
		func_1_182_185 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %182*/
	/*   %186 = icmp ugt i32 %184, %185*/
		func_1_182_186 = (func_1_182_184 > func_1_182_185);
end
always @(*) begin
	/* func_1: %182*/
	/*   %187 = zext i1 %186 to i8*/
		func_1_182_187 = func_1_182_186;
end
always @(*) begin
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
		func_1_182_188 = safe_sub_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		func_1_182_188_reg <= func_1_182_188;
		if (start == 1'b0 && ^(func_1_182_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_182_188_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %182*/
	/*   %189 = sext i8 %188 to i32*/
		func_1_182_189 = $signed(func_1_182_188_reg);
end
always @(*) begin
	/* func_1: %190*/
	/*   %indvar.next = add i32 %indvar, 1*/
		func_1_190_indvarnext = (func_1_181_indvar_reg + 32'd1);
end
always @(*) begin
	/* func_1: %191*/
	/*   %192 = load i32* @g_77, align 4*/
		func_1_191_192 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %191*/
	/*   %193 = icmp eq i32 %192, 0*/
		func_1_191_193 = (func_1_191_192 == 32'd0);
end
always @(*) begin
	/* func_1: %194*/
	/*   %195 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 2), align 4*/
		func_1_194_195 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %194*/
	/*   %195 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__194_147)) begin
		func_1_194_195_reg <= func_1_194_195;
		if (start == 1'b0 && ^(func_1_194_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_194_195_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %194*/
	/*   %196 = icmp eq i32 %195, 0*/
		func_1_194_196 = (func_1_194_195 == 32'd0);
end
always @(*) begin
	/* func_1: %197*/
	/*   %198 = icmp ne i32 %21, 1*/
		func_1_197_198 = (func_1_20_21_reg != 32'd1);
end
always @(*) begin
	/* func_1: %197*/
	/*   %199 = zext i1 %198 to i8*/
		func_1_197_199 = func_1_197_198;
end
always @(*) begin
	/* func_1: %197*/
	/*   %200 = or i8 %199, -94*/
		func_1_197_200 = (func_1_197_199 | -8'd94);
end
always @(*) begin
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
		func_1_197_201 = safe_rshift_func_uint8_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		func_1_197_201_reg <= func_1_197_201;
		if (start == 1'b0 && ^(func_1_197_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_197_201_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %197*/
	/*   %202 = zext i8 %201 to i16*/
		func_1_197_202 = func_1_197_201_reg;
end
always @(*) begin
	/* func_1: %197*/
	/*   %203 = icmp ne i8 %201, 0*/
		func_1_197_203 = (func_1_197_201_reg != 8'd0);
end
always @(posedge clk) begin
	/* func_1: %197*/
	/*   %203 = icmp ne i8 %201, 0*/
	if ((cur_state == LEGUP_F_func_1_BB__197_150)) begin
		func_1_197_203_reg <= func_1_197_203;
		if (start == 1'b0 && ^(func_1_197_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_197_203_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %204*/
	/*   %205 = phi i1 [ false, %194 ], [ %203, %197 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__194_147) & (memory_controller_waitrequest == 1'd0)) & (func_1_194_196 == 1'd1))) begin
		func_1_204_205 = 1'd0;
	end
	/* func_1: %204*/
	/*   %205 = phi i1 [ false, %194 ], [ %203, %197 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__197_151) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_204_205 = func_1_197_203_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %204*/
	/*   %205 = phi i1 [ false, %194 ], [ %203, %197 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__194_147) & (memory_controller_waitrequest == 1'd0)) & (func_1_194_196 == 1'd1))) begin
		func_1_204_205_reg <= func_1_204_205;
		if (start == 1'b0 && ^(func_1_204_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_204_205_reg"); $finish; end
	end
	/* func_1: %204*/
	/*   %205 = phi i1 [ false, %194 ], [ %203, %197 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__197_151) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_204_205_reg <= func_1_204_205;
		if (start == 1'b0 && ^(func_1_204_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_204_205_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %204*/
	/*   %206 = zext i1 %205 to i32*/
		func_1_204_206 = func_1_204_205_reg;
end
always @(*) begin
	/* func_1: %207*/
	/*   %208 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_1_207_208 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %207*/
	/*   %209 = icmp ne i32 %208, 0*/
		func_1_207_209 = (func_1_207_208 != 32'd0);
end
always @(*) begin
	/* func_1: %210*/
	/*   %211 = phi i1 [ true, %204 ], [ %209, %207 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__204_153) & (memory_controller_waitrequest == 1'd0)) & (func_1_204_205_reg == 1'd1))) begin
		func_1_210_211 = 1'd1;
	end
	/* func_1: %210*/
	/*   %211 = phi i1 [ true, %204 ], [ %209, %207 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__207_156) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_210_211 = func_1_207_209;
	end
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %211 = phi i1 [ true, %204 ], [ %209, %207 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__204_153) & (memory_controller_waitrequest == 1'd0)) & (func_1_204_205_reg == 1'd1))) begin
		func_1_210_211_reg <= func_1_210_211;
		if (start == 1'b0 && ^(func_1_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_211_reg"); $finish; end
	end
	/* func_1: %210*/
	/*   %211 = phi i1 [ true, %204 ], [ %209, %207 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__207_156) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_210_211_reg <= func_1_210_211;
		if (start == 1'b0 && ^(func_1_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_211_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %210*/
	/*   %212 = zext i1 %211 to i8*/
		func_1_210_212 = func_1_210_211_reg;
end
always @(*) begin
	/* func_1: %210*/
	/*   %214 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_1_210_214 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %210*/
	/*   %215 = icmp eq i32 %214, 0*/
		func_1_210_215 = (func_1_210_214 == 32'd0);
end
always @(*) begin
	/* func_1: %210*/
	/*   %216 = zext i1 %215 to i32*/
		func_1_210_216 = func_1_210_215;
end
always @(*) begin
	/* func_1: %210*/
	/*   %217 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
		func_1_210_217 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %210*/
	/*   %218 = icmp slt i32 %216, %217*/
		func_1_210_218 = ($signed(func_1_210_216) < $signed(func_1_210_217));
end
always @(*) begin
	/* func_1: %210*/
	/*   %219 = zext i1 %218 to i8*/
		func_1_210_219 = func_1_210_218;
end
always @(*) begin
	/* func_1: %210*/
	/*   %221 = trunc i32 %195 to i8*/
		func_1_210_221 = func_1_194_195_reg[7:0];
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %221 = trunc i32 %195 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__210_157)) begin
		func_1_210_221_reg <= func_1_210_221;
		if (start == 1'b0 && ^(func_1_210_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_221_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
		func_1_210_222 = safe_mul_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		func_1_210_222_reg <= func_1_210_222;
		if (start == 1'b0 && ^(func_1_210_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_222_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %210*/
	/*   %223 = load i32* @g_114, align 4*/
		func_1_210_223 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %210*/
	/*   %224 = trunc i32 %223 to i8*/
		func_1_210_224 = func_1_210_223[7:0];
end
always @(*) begin
	/* func_1: %210*/
	/*   %226 = load i32* %scevgep3, align 4*/
		func_1_210_226 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
		func_1_210_227 = safe_rshift_func_uint8_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		func_1_210_227_reg <= func_1_210_227;
		if (start == 1'b0 && ^(func_1_210_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_227_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %210*/
	/*   %228 = zext i8 %227 to i32*/
		func_1_210_228 = func_1_210_227_reg;
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %228 = zext i8 %227 to i32*/
	if ((cur_state == LEGUP_F_func_1_BB__210_173)) begin
		func_1_210_228_reg <= func_1_210_228;
		if (start == 1'b0 && ^(func_1_210_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_228_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %210*/
	/*   %229 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 0*/
if (reset) begin func_1_210_229 = 0; end
		func_1_210_229 = `TAG_func_1_0_l_46_a;
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %229 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_func_1_BB__210_157)) begin
		func_1_210_229_reg <= func_1_210_229;
		if (start == 1'b0 && ^(func_1_210_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_210_229_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %210*/
	/*   %230 = load i32* %229, align 4*/
		func_1_210_230 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %210*/
	/*   %231 = and i32 %228, %230*/
		func_1_210_231 = (func_1_210_228_reg & func_1_210_230);
end
always @(*) begin
	/* func_1: %210*/
	/*   %232 = trunc i32 %231 to i16*/
		func_1_210_232 = func_1_210_231[15:0];
end
always @(*) begin
	/* func_1: %234*/
	/*   %l_110.1 = phi i32 [ %195, %210 ], [ %l_110.0, %191 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__191_144) & (memory_controller_waitrequest == 1'd0)) & (func_1_191_193 == 1'd1))) begin
		func_1_234_l_1101 = func_1_20_l_1100_reg;
	end
	/* func_1: %234*/
	/*   %l_110.1 = phi i32 [ %195, %210 ], [ %l_110.0, %191 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__210_177) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_234_l_1101 = func_1_194_195_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %234*/
	/*   %l_110.1 = phi i32 [ %195, %210 ], [ %l_110.0, %191 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__191_144) & (memory_controller_waitrequest == 1'd0)) & (func_1_191_193 == 1'd1))) begin
		func_1_234_l_1101_reg <= func_1_234_l_1101;
		if (start == 1'b0 && ^(func_1_234_l_1101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_234_l_1101_reg"); $finish; end
	end
	/* func_1: %234*/
	/*   %l_110.1 = phi i32 [ %195, %210 ], [ %l_110.0, %191 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__210_177) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_234_l_1101_reg <= func_1_234_l_1101;
		if (start == 1'b0 && ^(func_1_234_l_1101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_234_l_1101_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %234*/
	/*   %235 = phi i32 [ 1, %210 ], [ 0, %191 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__191_144) & (memory_controller_waitrequest == 1'd0)) & (func_1_191_193 == 1'd1))) begin
		func_1_234_235 = 32'd0;
	end
	/* func_1: %234*/
	/*   %235 = phi i32 [ 1, %210 ], [ 0, %191 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__210_177) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_234_235 = 32'd1;
	end
end
always @(posedge clk) begin
	/* func_1: %234*/
	/*   %235 = phi i32 [ 1, %210 ], [ 0, %191 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__191_144) & (memory_controller_waitrequest == 1'd0)) & (func_1_191_193 == 1'd1))) begin
		func_1_234_235_reg <= func_1_234_235;
		if (start == 1'b0 && ^(func_1_234_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_234_235_reg"); $finish; end
	end
	/* func_1: %234*/
	/*   %235 = phi i32 [ 1, %210 ], [ 0, %191 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__210_177) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_234_235_reg <= func_1_234_235;
		if (start == 1'b0 && ^(func_1_234_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_234_235_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %234*/
	/*   %236 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 5), align 4*/
		func_1_234_236 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %234*/
	/*   %237 = icmp ugt i32 %235, %236*/
		func_1_234_237 = (func_1_234_235_reg > func_1_234_236);
end
always @(*) begin
	/* func_1: %234*/
	/*   %238 = zext i1 %237 to i32*/
		func_1_234_238 = func_1_234_237;
end
always @(*) begin
	/* func_1: %234*/
	/*   %239 = icmp sle i32 %238, %21*/
		func_1_234_239 = ($signed(func_1_234_238) <= $signed(func_1_20_21_reg));
end
always @(*) begin
	/* func_1: %234*/
	/*   %240 = zext i1 %239 to i16*/
		func_1_234_240 = func_1_234_239;
end
always @(*) begin
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
		func_1_234_241 = safe_rshift_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		func_1_234_241_reg <= func_1_234_241;
		if (start == 1'b0 && ^(func_1_234_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_234_241_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %234*/
	/*   %242 = icmp eq i16 %241, 0*/
		func_1_234_242 = (func_1_234_241_reg == 16'd0);
end
always @(*) begin
	/* func_1: %243*/
	/*   %244 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 0), align 4*/
		func_1_243_244 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %243*/
	/*   %245 = icmp ne i32 %244, 0*/
		func_1_243_245 = (func_1_243_244 != 32'd0);
end
always @(*) begin
	/* func_1: %246*/
	/*   %247 = phi i1 [ false, %234 ], [ %245, %243 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__234_182) & (memory_controller_waitrequest == 1'd0)) & (func_1_234_242 == 1'd1))) begin
		func_1_246_247 = 1'd0;
	end
	/* func_1: %246*/
	/*   %247 = phi i1 [ false, %234 ], [ %245, %243 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__243_185) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_246_247 = func_1_243_245;
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %247 = phi i1 [ false, %234 ], [ %245, %243 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__234_182) & (memory_controller_waitrequest == 1'd0)) & (func_1_234_242 == 1'd1))) begin
		func_1_246_247_reg <= func_1_246_247;
		if (start == 1'b0 && ^(func_1_246_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_246_247_reg"); $finish; end
	end
	/* func_1: %246*/
	/*   %247 = phi i1 [ false, %234 ], [ %245, %243 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__243_185) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_246_247_reg <= func_1_246_247;
		if (start == 1'b0 && ^(func_1_246_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_246_247_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %246*/
	/*   %248 = zext i1 %247 to i16*/
		func_1_246_248 = func_1_246_247_reg;
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %248 = zext i1 %247 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__246_186)) begin
		func_1_246_248_reg <= func_1_246_248;
		if (start == 1'b0 && ^(func_1_246_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_246_248_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %246*/
	/*   %249 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 0*/
if (reset) begin func_1_246_249 = 0; end
		func_1_246_249 = `TAG_func_1_0_l_46_a;
end
always @(*) begin
	/* func_1: %246*/
	/*   %250 = load i32* %249, align 4*/
		func_1_246_250 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
		func_1_246_252 = safe_add_func_uint32_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		func_1_246_252_reg <= func_1_246_252;
		if (start == 1'b0 && ^(func_1_246_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_246_252_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %246*/
	/*   %253 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 2*/
if (reset) begin func_1_246_253 = 0; end
		func_1_246_253 = (`TAG_func_1_0_l_46_a + (4 * 32'd2));
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %253 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_186)) begin
		func_1_246_253_reg <= func_1_246_253;
		if (start == 1'b0 && ^(func_1_246_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_246_253_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %246*/
	/*   %254 = load i32* %253, align 4*/
		func_1_246_254 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %246*/
	/*   %255 = or i32 %252, %254*/
		func_1_246_255 = (func_1_246_252_reg | func_1_246_254);
end
always @(*) begin
	/* func_1: %246*/
	/*   %256 = trunc i32 %255 to i8*/
		func_1_246_256 = func_1_246_255[7:0];
end
always @(*) begin
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
		func_1_246_257 = safe_lshift_func_uint8_t_u_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		func_1_246_257_reg <= func_1_246_257;
		if (start == 1'b0 && ^(func_1_246_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_246_257_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %246*/
	/*   %258 = icmp eq i8 %257, 0*/
		func_1_246_258 = (func_1_246_257_reg == 8'd0);
end
always @(*) begin
	/* func_1: %260*/
	/*   %261 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 1), align 4*/
		func_1_260_261 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %260*/
	/*   %.tr = trunc i32 %261 to i16*/
		func_1_260_tr = func_1_260_261[15:0];
end
always @(*) begin
	/* func_1: %260*/
	/*   %262 = and i16 %.tr, 1*/
		func_1_260_262 = (func_1_260_tr & 16'd1);
end
always @(posedge clk) begin
	/* func_1: %260*/
	/*   %262 = and i16 %.tr, 1*/
	if ((cur_state == LEGUP_F_func_1_BB__260_200)) begin
		func_1_260_262_reg <= func_1_260_262;
		if (start == 1'b0 && ^(func_1_260_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_260_262_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %260*/
	/*   %264 = load i32* %scevgep3, align 4*/
		func_1_260_264 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %260*/
	/*   %265 = icmp slt i32 %l_110.1, %264*/
		func_1_260_265 = ($signed(func_1_234_l_1101_reg) < $signed(func_1_260_264));
end
always @(*) begin
	/* func_1: %260*/
	/*   %266 = zext i1 %265 to i8*/
		func_1_260_266 = func_1_260_265;
end
always @(*) begin
	/* func_1: %260*/
	/*   %267 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
		func_1_260_267 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %260*/
	/*   %268 = trunc i32 %267 to i8*/
		func_1_260_268 = func_1_260_267[7:0];
end
always @(*) begin
	/* func_1: %260*/
	/*   %270 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
		func_1_260_270 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* func_1: %260*/
	/*   %271 = trunc i16 %270 to i8*/
		func_1_260_271 = func_1_260_270[7:0];
end
always @(*) begin
	/* func_1: %273*/
	/*   %274 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
		func_1_273_274 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %273*/
	/*   %275 = icmp ne i32 %274, 0*/
		func_1_273_275 = (func_1_273_274 != 32'd0);
end
always @(*) begin
	/* func_1: %276*/
	/*   %277 = phi i1 [ false, %260 ], [ %275, %273 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__260_211) & (memory_controller_waitrequest == 1'd0)) & (1'd1 == 1'd0))) begin
		func_1_276_277 = 1'd0;
	end
	/* func_1: %276*/
	/*   %277 = phi i1 [ false, %260 ], [ %275, %273 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__273_214) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_276_277 = func_1_273_275;
	end
end
always @(posedge clk) begin
	/* func_1: %276*/
	/*   %277 = phi i1 [ false, %260 ], [ %275, %273 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__260_211) & (memory_controller_waitrequest == 1'd0)) & (1'd1 == 1'd0))) begin
		func_1_276_277_reg <= func_1_276_277;
		if (start == 1'b0 && ^(func_1_276_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_276_277_reg"); $finish; end
	end
	/* func_1: %276*/
	/*   %277 = phi i1 [ false, %260 ], [ %275, %273 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__273_214) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_276_277_reg <= func_1_276_277;
		if (start == 1'b0 && ^(func_1_276_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_276_277_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %276*/
	/*   %278 = zext i1 %277 to i16*/
		func_1_276_278 = func_1_276_277_reg;
end
always @(*) begin
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
		func_1_276_279 = safe_mul_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		func_1_276_279_reg <= func_1_276_279;
		if (start == 1'b0 && ^(func_1_276_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_276_279_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %276*/
	/*   %280 = icmp eq i16 %279, 0*/
		func_1_276_280 = (func_1_276_279_reg == 16'd0);
end
always @(*) begin
	/* func_1: %283*/
	/*   %284 = add nsw i32 %21, 1*/
		func_1_283_284 = (func_1_20_21_reg + 32'd1);
end
always @(*) begin
	/* func_1: %285*/
	/*   %286 = and i32 %l_110.0, 255*/
		func_1_285_286 = (func_1_20_l_1100_reg & 32'd255);
end
always @(posedge clk) begin
	/* func_1: %285*/
	/*   %286 = and i32 %l_110.0, 255*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		func_1_285_286_reg <= func_1_285_286;
		if (start == 1'b0 && ^(func_1_285_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_285_286_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %285*/
	/*   %287 = load i8* @g_12, align 1*/
		func_1_285_287 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* func_1: %285*/
	/*   %288 = icmp ne i8 %287, 0*/
		func_1_285_288 = (func_1_285_287 != 8'd0);
end
always @(*) begin
	/* func_1: %285*/
	/*   %289 = zext i1 %288 to i32*/
		func_1_285_289 = func_1_285_288;
end
always @(*) begin
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
		func_1_285_290 = safe_sub_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		func_1_285_290_reg <= func_1_285_290;
		if (start == 1'b0 && ^(func_1_285_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_285_290_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
		func_1_285_291 = safe_div_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		func_1_285_291_reg <= func_1_285_291;
		if (start == 1'b0 && ^(func_1_285_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_285_291_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %285*/
	/*   %292 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
		func_1_285_292 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %285*/
	/*   %293 = and i32 %292, %291*/
		func_1_285_293 = (func_1_285_292 & func_1_285_291_reg);
end
always @(*) begin
	/* func_1: %285*/
	/*   %294 = xor i32 %l_60.1, %293*/
		func_1_285_294 = (func_1_20_l_601_reg ^ func_1_285_293);
end
always @(*) begin
	/* func_1: %285*/
	/*   %295 = icmp ult i32 %286, %294*/
		func_1_285_295 = (func_1_285_286_reg < func_1_285_294);
end
always @(*) begin
	/* func_1: %285*/
	/*   %296 = zext i1 %295 to i16*/
		func_1_285_296 = func_1_285_295;
end
always @(*) begin
	/* func_1: %285*/
	/*   %297 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
		func_1_285_297 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* func_1: %285*/
	/*   %298 = and i16 %297, %296*/
		func_1_285_298 = (func_1_285_297 & func_1_285_296);
end
always @(*) begin
	/* func_1: %285*/
	/*   %299 = load i32* @g_114, align 4*/
		func_1_285_299 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %285*/
	/*   %300 = and i32 %299, 1*/
		func_1_285_300 = (func_1_285_299 & 32'd1);
end
always @(*) begin
	/* func_1: %301*/
	/*   %l_60.3 = phi i32 [ %l_60.0, %12 ], [ %l_60.1, %285 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__12_12) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_301_l_603 = func_1_7_l_600_reg;
	end
	/* func_1: %301*/
	/*   %l_60.3 = phi i32 [ %l_60.0, %12 ], [ %l_60.1, %285 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__285_231) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_301_l_603 = func_1_20_l_601_reg;
	end
end
always @(posedge clk) begin
	/* func_1: %301*/
	/*   %l_60.3 = phi i32 [ %l_60.0, %12 ], [ %l_60.1, %285 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__12_12) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_301_l_603_reg <= func_1_301_l_603;
		if (start == 1'b0 && ^(func_1_301_l_603) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_301_l_603_reg"); $finish; end
	end
	/* func_1: %301*/
	/*   %l_60.3 = phi i32 [ %l_60.0, %12 ], [ %l_60.1, %285 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__285_231) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_301_l_603_reg <= func_1_301_l_603;
		if (start == 1'b0 && ^(func_1_301_l_603) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_301_l_603_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %302*/
	/*   %303 = load i32* @g_2, align 4*/
		func_1_302_303 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %302*/
	/*   %304 = add nsw i32 %303, -1*/
		func_1_302_304 = (func_1_302_303 + -32'd1);
end
always @(*) begin
	/* func_1: %305*/
	/*   %306 = getelementptr inbounds [4 x i32]* %l_46, i32 0, i32 0*/
if (reset) begin func_1_305_306 = 0; end
		func_1_305_306 = `TAG_func_1_0_l_46_a;
end
always @(*) begin
	/* func_1: %305*/
	/*   %307 = load i32* %306, align 4*/
		func_1_305_307 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %305*/
	/*   %308 = trunc i32 %307 to i8*/
		func_1_305_308 = func_1_305_307[7:0];
end
always @(posedge clk) begin
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__9_9)) begin
		safe_rshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		safe_rshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_start"); $finish; end
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_116)) begin
		safe_rshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_117)) begin
		safe_rshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__9_9)) begin
		safe_rshift_func_uint16_t_u_s_arg_left <= 16'd22550;
		if (start == 1'b0 && ^(16'd22550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_116)) begin
		safe_rshift_func_uint16_t_u_s_arg_left <= func_1_135_156;
		if (start == 1'b0 && ^(func_1_135_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__9_9)) begin
		safe_rshift_func_uint16_t_u_s_arg_right <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_116)) begin
		safe_rshift_func_uint16_t_u_s_arg_right <= 32'd9;
		if (start == 1'b0 && ^(32'd9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint16_t_u_s_finish_final = safe_rshift_func_uint16_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__9_9))) begin
		safe_rshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_s_finish) begin
		safe_rshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_116))) begin
		safe_rshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_s_finish) begin
		safe_rshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__9_9))) begin
		safe_rshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_s_finish) begin
		safe_rshift_func_uint16_t_u_s_return_val_reg <= safe_rshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_116))) begin
		safe_rshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_s_finish) begin
		safe_rshift_func_uint16_t_u_s_return_val_reg <= safe_rshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__24_23)) begin
		func_19_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		func_19_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__24_23)) begin
		func_19_arg_p_20 <= func_1_24_28_reg;
		if (start == 1'b0 && ^(func_1_24_28_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_arg_p_20"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__24_23)) begin
		func_19_arg_p_21 <= func_1_24_26_reg;
		if (start == 1'b0 && ^(func_1_24_26_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_arg_p_21"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__24_23)) begin
		func_19_arg_p_22 <= func_1_24_30;
		if (start == 1'b0 && ^(func_1_24_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_arg_p_22"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__24_23)) begin
		func_19_arg_p_23 <= func_1_24_31_reg;
		if (start == 1'b0 && ^(func_1_24_31_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_arg_p_23"); $finish; end
	end
end
always @(*) begin
	func_19_finish_final = func_19_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__24_23))) begin
		func_19_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_finish_reg"); $finish; end
	end
	if (func_19_finish) begin
		func_19_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__24_23))) begin
		func_19_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_return_val_reg"); $finish; end
	end
	if (func_19_finish) begin
		func_19_return_val_reg <= func_19_return_val;
		if (start == 1'b0 && ^(func_19_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_19_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_29)) begin
		func_39_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_30)) begin
		func_39_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_29)) begin
		func_39_arg_p_40 <= func_1_34_38_reg;
		if (start == 1'b0 && ^(func_1_34_38_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_arg_p_40"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_29)) begin
		func_39_arg_p_41 <= func_1_34_40;
		if (start == 1'b0 && ^(func_1_34_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_arg_p_41"); $finish; end
	end
end
always @(*) begin
	func_39_finish_final = func_39_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_29))) begin
		func_39_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_finish_reg"); $finish; end
	end
	if (func_39_finish) begin
		func_39_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_29))) begin
		func_39_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_return_val_reg"); $finish; end
	end
	if (func_39_finish) begin
		func_39_return_val_reg <= func_39_return_val;
		if (start == 1'b0 && ^(func_39_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_39_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_33)) begin
		safe_rshift_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		safe_rshift_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_start"); $finish; end
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__234_180)) begin
		safe_rshift_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_181)) begin
		safe_rshift_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_33)) begin
		safe_rshift_func_int16_t_s_s_arg_left <= func_1_34_41_reg;
		if (start == 1'b0 && ^(func_1_34_41_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_arg_left"); $finish; end
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__234_180)) begin
		safe_rshift_func_int16_t_s_s_arg_left <= func_1_234_240;
		if (start == 1'b0 && ^(func_1_234_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_33)) begin
		safe_rshift_func_int16_t_s_s_arg_right <= func_1_34_42;
		if (start == 1'b0 && ^(func_1_34_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_arg_right"); $finish; end
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__234_180)) begin
		safe_rshift_func_int16_t_s_s_arg_right <= 32'd1;
		if (start == 1'b0 && ^(32'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_int16_t_s_s_finish_final = safe_rshift_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_33))) begin
		safe_rshift_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_int16_t_s_s_finish) begin
		safe_rshift_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__234_180))) begin
		safe_rshift_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_int16_t_s_s_finish) begin
		safe_rshift_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_33))) begin
		safe_rshift_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_int16_t_s_s_finish) begin
		safe_rshift_func_int16_t_s_s_return_val_reg <= safe_rshift_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__234_180))) begin
		safe_rshift_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_int16_t_s_s_finish) begin
		safe_rshift_func_int16_t_s_s_return_val_reg <= safe_rshift_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_36)) begin
		safe_mod_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_37)) begin
		safe_mod_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_36)) begin
		safe_mod_func_int8_t_s_s_arg_si1 <= func_1_34_36_reg;
		if (start == 1'b0 && ^(func_1_34_36_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_36)) begin
		safe_mod_func_int8_t_s_s_arg_si2 <= func_1_34_46_reg;
		if (start == 1'b0 && ^(func_1_34_46_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mod_func_int8_t_s_s_finish_final = safe_mod_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_36))) begin
		safe_mod_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mod_func_int8_t_s_s_finish) begin
		safe_mod_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_36))) begin
		safe_mod_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mod_func_int8_t_s_s_finish) begin
		safe_mod_func_int8_t_s_s_return_val_reg <= safe_mod_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mod_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_40)) begin
		func_24_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_41)) begin
		func_24_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_40)) begin
		func_24_arg_p_25 <= func_1_34_48_reg;
		if (start == 1'b0 && ^(func_1_34_48_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_25"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_40)) begin
		func_24_arg_p_26 <= func_1_20_21_reg;
		if (start == 1'b0 && ^(func_1_20_21_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_26"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_40)) begin
		func_24_arg_p_27 <= func_1_34_50;
		if (start == 1'b0 && ^(func_1_34_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_27"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__34_40)) begin
		func_24_arg_p_28 <= func_1_34_52;
		if (start == 1'b0 && ^(func_1_34_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_arg_p_28"); $finish; end
	end
end
always @(*) begin
	func_24_finish_final = func_24_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__34_40))) begin
		func_24_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_finish_reg"); $finish; end
	end
	if (func_24_finish) begin
		func_24_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_24_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_46)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_47)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_223)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_224)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_46)) begin
		safe_sub_func_int32_t_s_s_arg_si1 <= func_1_54_60_reg;
		if (start == 1'b0 && ^(func_1_54_60_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si1"); $finish; end
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_223)) begin
		safe_sub_func_int32_t_s_s_arg_si1 <= func_1_285_289;
		if (start == 1'b0 && ^(func_1_285_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_46)) begin
		safe_sub_func_int32_t_s_s_arg_si2 <= -32'd384561695;
		if (start == 1'b0 && ^(-32'd384561695) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si2"); $finish; end
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_223)) begin
		safe_sub_func_int32_t_s_s_arg_si2 <= func_1_20_l_1100_reg;
		if (start == 1'b0 && ^(func_1_20_l_1100_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_int32_t_s_s_finish_final = safe_sub_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_46))) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__285_223))) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_46))) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= safe_sub_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__285_223))) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= safe_sub_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_48)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_50)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_51)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_163)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_164)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_167)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_168)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_48)) begin
		safe_mul_func_int8_t_s_s_arg_si1 <= func_1_54_62;
		if (start == 1'b0 && ^(func_1_54_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si1"); $finish; end
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_50)) begin
		safe_mul_func_int8_t_s_s_arg_si1 <= -8'd49;
		if (start == 1'b0 && ^(-8'd49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si1"); $finish; end
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_163)) begin
		safe_mul_func_int8_t_s_s_arg_si1 <= func_1_210_221_reg;
		if (start == 1'b0 && ^(func_1_210_221_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si1"); $finish; end
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_167)) begin
		safe_mul_func_int8_t_s_s_arg_si1 <= func_1_210_222_reg;
		if (start == 1'b0 && ^(func_1_210_222_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_48)) begin
		safe_mul_func_int8_t_s_s_arg_si2 <= -8'd78;
		if (start == 1'b0 && ^(-8'd78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si2"); $finish; end
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_50)) begin
		safe_mul_func_int8_t_s_s_arg_si2 <= func_1_54_63_reg;
		if (start == 1'b0 && ^(func_1_54_63_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si2"); $finish; end
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_163)) begin
		safe_mul_func_int8_t_s_s_arg_si2 <= func_1_20_23_reg;
		if (start == 1'b0 && ^(func_1_20_23_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si2"); $finish; end
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_167)) begin
		safe_mul_func_int8_t_s_s_arg_si2 <= func_1_210_224;
		if (start == 1'b0 && ^(func_1_210_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_int8_t_s_s_finish_final = safe_mul_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_48))) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_50))) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_163))) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_167))) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_48))) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= safe_mul_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_50))) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= safe_mul_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_163))) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= safe_mul_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_167))) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= safe_mul_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_54)) begin
		safe_mul_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_55)) begin
		safe_mul_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_start"); $finish; end
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__276_215)) begin
		safe_mul_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_216)) begin
		safe_mul_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_54)) begin
		safe_mul_func_uint16_t_u_u_arg_ui1 <= func_1_54_68;
		if (start == 1'b0 && ^(func_1_54_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__276_215)) begin
		safe_mul_func_uint16_t_u_u_arg_ui1 <= func_1_276_278;
		if (start == 1'b0 && ^(func_1_276_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__54_54)) begin
		safe_mul_func_uint16_t_u_u_arg_ui2 <= func_1_54_69;
		if (start == 1'b0 && ^(func_1_54_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__276_215)) begin
		safe_mul_func_uint16_t_u_u_arg_ui2 <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_uint16_t_u_u_finish_final = safe_mul_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_54))) begin
		safe_mul_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_mul_func_uint16_t_u_u_finish) begin
		safe_mul_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__276_215))) begin
		safe_mul_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_mul_func_uint16_t_u_u_finish) begin
		safe_mul_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__54_54))) begin
		safe_mul_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_mul_func_uint16_t_u_u_finish) begin
		safe_mul_func_uint16_t_u_u_return_val_reg <= safe_mul_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_mul_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__276_215))) begin
		safe_mul_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_mul_func_uint16_t_u_u_finish) begin
		safe_mul_func_uint16_t_u_u_return_val_reg <= safe_mul_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_mul_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__93_81)) begin
		safe_sub_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_82)) begin
		safe_sub_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__93_81)) begin
		safe_sub_func_uint16_t_u_u_arg_ui1 <= func_1_93_95;
		if (start == 1'b0 && ^(func_1_93_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__93_81)) begin
		safe_sub_func_uint16_t_u_u_arg_ui2 <= func_1_93_98;
		if (start == 1'b0 && ^(func_1_93_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_uint16_t_u_u_finish_final = safe_sub_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__93_81))) begin
		safe_sub_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_sub_func_uint16_t_u_u_finish) begin
		safe_sub_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__93_81))) begin
		safe_sub_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_sub_func_uint16_t_u_u_finish) begin
		safe_sub_func_uint16_t_u_u_return_val_reg <= safe_sub_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_sub_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__102_88)) begin
		safe_mul_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		safe_mul_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__102_88)) begin
		safe_mul_func_int16_t_s_s_arg_si1 <= func_1_102_113;
		if (start == 1'b0 && ^(func_1_102_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__102_88)) begin
		safe_mul_func_int16_t_s_s_arg_si2 <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_int16_t_s_s_finish_final = safe_mul_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__102_88))) begin
		safe_mul_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int16_t_s_s_finish) begin
		safe_mul_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__115_91)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_92)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_175)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_176)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_201)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_202)) begin
		safe_lshift_func_uint16_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__115_91)) begin
		safe_lshift_func_uint16_t_u_s_arg_left <= func_1_115_116_reg;
		if (start == 1'b0 && ^(func_1_115_116_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_175)) begin
		safe_lshift_func_uint16_t_u_s_arg_left <= func_1_210_232;
		if (start == 1'b0 && ^(func_1_210_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_201)) begin
		safe_lshift_func_uint16_t_u_s_arg_left <= func_1_260_262_reg;
		if (start == 1'b0 && ^(func_1_260_262_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__115_91)) begin
		safe_lshift_func_uint16_t_u_s_arg_right <= 32'd11;
		if (start == 1'b0 && ^(32'd11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_175)) begin
		safe_lshift_func_uint16_t_u_s_arg_right <= func_1_20_21_reg;
		if (start == 1'b0 && ^(func_1_20_21_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_201)) begin
		safe_lshift_func_uint16_t_u_s_arg_right <= 32'd13;
		if (start == 1'b0 && ^(32'd13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint16_t_u_s_finish_final = safe_lshift_func_uint16_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__115_91))) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_175))) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__260_201))) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__115_91))) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= safe_lshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_175))) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= safe_lshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__260_201))) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_s_finish) begin
		safe_lshift_func_uint16_t_u_s_return_val_reg <= safe_lshift_func_uint16_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__126_99)) begin
		safe_add_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_100)) begin
		safe_add_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_start"); $finish; end
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__169_128)) begin
		safe_add_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_129)) begin
		safe_add_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__126_99)) begin
		safe_add_func_uint16_t_u_u_arg_ui1 <= func_1_126_130;
		if (start == 1'b0 && ^(func_1_126_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__169_128)) begin
		safe_add_func_uint16_t_u_u_arg_ui1 <= func_1_169_172_reg;
		if (start == 1'b0 && ^(func_1_169_172_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__126_99)) begin
		safe_add_func_uint16_t_u_u_arg_ui2 <= func_1_20_22_reg;
		if (start == 1'b0 && ^(func_1_20_22_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__169_128)) begin
		safe_add_func_uint16_t_u_u_arg_ui2 <= func_1_169_175;
		if (start == 1'b0 && ^(func_1_169_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_uint16_t_u_u_finish_final = safe_add_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__126_99))) begin
		safe_add_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint16_t_u_u_finish) begin
		safe_add_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__169_128))) begin
		safe_add_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint16_t_u_u_finish) begin
		safe_add_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__126_99))) begin
		safe_add_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_add_func_uint16_t_u_u_finish) begin
		safe_add_func_uint16_t_u_u_return_val_reg <= safe_add_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_add_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__169_128))) begin
		safe_add_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_add_func_uint16_t_u_u_finish) begin
		safe_add_func_uint16_t_u_u_return_val_reg <= safe_add_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_add_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__126_101)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_102)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__126_101)) begin
		safe_rshift_func_uint16_t_u_u_arg_left <= func_1_126_131_reg;
		if (start == 1'b0 && ^(func_1_126_131_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__126_101)) begin
		safe_rshift_func_uint16_t_u_u_arg_right <= -32'd3;
		if (start == 1'b0 && ^(-32'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint16_t_u_u_finish_final = safe_rshift_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__126_101))) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__126_101))) begin
		safe_rshift_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_return_val_reg <= safe_rshift_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_107)) begin
		safe_lshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_108)) begin
		safe_lshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_start"); $finish; end
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_188)) begin
		safe_lshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_189)) begin
		safe_lshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_107)) begin
		safe_lshift_func_uint16_t_u_u_arg_left <= 16'd1;
		if (start == 1'b0 && ^(16'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_188)) begin
		safe_lshift_func_uint16_t_u_u_arg_left <= func_1_246_248_reg;
		if (start == 1'b0 && ^(func_1_246_248_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_107)) begin
		safe_lshift_func_uint16_t_u_u_arg_right <= 32'd12;
		if (start == 1'b0 && ^(32'd12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_188)) begin
		safe_lshift_func_uint16_t_u_u_arg_right <= func_1_246_250;
		if (start == 1'b0 && ^(func_1_246_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint16_t_u_u_finish_final = safe_lshift_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_107))) begin
		safe_lshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_u_finish) begin
		safe_lshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__246_188))) begin
		safe_lshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_u_finish) begin
		safe_lshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_107))) begin
		safe_lshift_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_u_finish) begin
		safe_lshift_func_uint16_t_u_u_return_val_reg <= safe_lshift_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__246_188))) begin
		safe_lshift_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_u_finish) begin
		safe_lshift_func_uint16_t_u_u_return_val_reg <= safe_lshift_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_109)) begin
		safe_lshift_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_110)) begin
		safe_lshift_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_109)) begin
		safe_lshift_func_int8_t_s_s_arg_left <= func_1_135_138_reg;
		if (start == 1'b0 && ^(func_1_135_138_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_109)) begin
		safe_lshift_func_int8_t_s_s_arg_right <= func_1_135_140;
		if (start == 1'b0 && ^(func_1_135_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_int8_t_s_s_finish_final = safe_lshift_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_109))) begin
		safe_lshift_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_int8_t_s_s_finish) begin
		safe_lshift_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_109))) begin
		safe_lshift_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_int8_t_s_s_finish) begin
		safe_lshift_func_int8_t_s_s_return_val_reg <= safe_lshift_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_114)) begin
		safe_sub_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_115)) begin
		safe_sub_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_114)) begin
		safe_sub_func_int16_t_s_s_arg_si1 <= func_1_135_148;
		if (start == 1'b0 && ^(func_1_135_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_114)) begin
		safe_sub_func_int16_t_s_s_arg_si2 <= func_1_135_150;
		if (start == 1'b0 && ^(func_1_135_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_int16_t_s_s_finish_final = safe_sub_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_114))) begin
		safe_sub_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int16_t_s_s_finish) begin
		safe_sub_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_114))) begin
		safe_sub_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int16_t_s_s_finish) begin
		safe_sub_func_int16_t_s_s_return_val_reg <= safe_sub_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_120)) begin
		safe_sub_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_121)) begin
		safe_sub_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_120)) begin
		safe_sub_func_uint8_t_u_u_arg_ui1 <= func_1_135_161_reg;
		if (start == 1'b0 && ^(func_1_135_161_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__135_120)) begin
		safe_sub_func_uint8_t_u_u_arg_ui2 <= func_1_135_163;
		if (start == 1'b0 && ^(func_1_135_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_uint8_t_u_u_finish_final = safe_sub_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_120))) begin
		safe_sub_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_sub_func_uint8_t_u_u_finish) begin
		safe_sub_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__135_120))) begin
		safe_sub_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_sub_func_uint8_t_u_u_finish) begin
		safe_sub_func_uint8_t_u_u_return_val_reg <= safe_sub_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_sub_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__182_137)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_138)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_161)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_162)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_205)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_206)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__182_137)) begin
		safe_sub_func_int8_t_s_s_arg_si1 <= func_1_182_183_reg;
		if (start == 1'b0 && ^(func_1_182_183_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si1"); $finish; end
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_161)) begin
		safe_sub_func_int8_t_s_s_arg_si1 <= func_1_210_219;
		if (start == 1'b0 && ^(func_1_210_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si1"); $finish; end
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_205)) begin
		safe_sub_func_int8_t_s_s_arg_si1 <= func_1_260_266;
		if (start == 1'b0 && ^(func_1_260_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__182_137)) begin
		safe_sub_func_int8_t_s_s_arg_si2 <= func_1_182_187;
		if (start == 1'b0 && ^(func_1_182_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si2"); $finish; end
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_161)) begin
		safe_sub_func_int8_t_s_s_arg_si2 <= -8'd1;
		if (start == 1'b0 && ^(-8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si2"); $finish; end
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_205)) begin
		safe_sub_func_int8_t_s_s_arg_si2 <= func_1_260_268;
		if (start == 1'b0 && ^(func_1_260_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_int8_t_s_s_finish_final = safe_sub_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__182_137))) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_161))) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__260_205))) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__182_137))) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= safe_sub_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_161))) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= safe_sub_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__260_205))) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_return_val_reg <= safe_sub_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_148)) begin
		safe_rshift_func_uint8_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_149)) begin
		safe_rshift_func_uint8_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_start"); $finish; end
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_171)) begin
		safe_rshift_func_uint8_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_172)) begin
		safe_rshift_func_uint8_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_148)) begin
		safe_rshift_func_uint8_t_u_s_arg_left <= func_1_197_200;
		if (start == 1'b0 && ^(func_1_197_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_arg_left"); $finish; end
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_171)) begin
		safe_rshift_func_uint8_t_u_s_arg_left <= 8'd1;
		if (start == 1'b0 && ^(8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_148)) begin
		safe_rshift_func_uint8_t_u_s_arg_right <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_arg_right"); $finish; end
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_171)) begin
		safe_rshift_func_uint8_t_u_s_arg_right <= func_1_210_226;
		if (start == 1'b0 && ^(func_1_210_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint8_t_u_s_finish_final = safe_rshift_func_uint8_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__197_148))) begin
		safe_rshift_func_uint8_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint8_t_u_s_finish) begin
		safe_rshift_func_uint8_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_171))) begin
		safe_rshift_func_uint8_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint8_t_u_s_finish) begin
		safe_rshift_func_uint8_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__197_148))) begin
		safe_rshift_func_uint8_t_u_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint8_t_u_s_finish) begin
		safe_rshift_func_uint8_t_u_s_return_val_reg <= safe_rshift_func_uint8_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_171))) begin
		safe_rshift_func_uint8_t_u_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint8_t_u_s_finish) begin
		safe_rshift_func_uint8_t_u_s_return_val_reg <= safe_rshift_func_uint8_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_157)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_158)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_209)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_210)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_157)) begin
		safe_add_func_uint8_t_u_u_arg_ui1 <= func_1_210_212;
		if (start == 1'b0 && ^(func_1_210_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_209)) begin
		safe_add_func_uint8_t_u_u_arg_ui1 <= func_1_260_271;
		if (start == 1'b0 && ^(func_1_260_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__210_157)) begin
		safe_add_func_uint8_t_u_u_arg_ui2 <= -8'd7;
		if (start == 1'b0 && ^(-8'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_209)) begin
		safe_add_func_uint8_t_u_u_arg_ui2 <= -8'd1;
		if (start == 1'b0 && ^(-8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_uint8_t_u_u_finish_final = safe_add_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__210_157))) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_1_BB__260_209))) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_190)) begin
		safe_add_func_uint32_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_191)) begin
		safe_add_func_uint32_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_190)) begin
		safe_add_func_uint32_t_u_u_arg_ui1 <= -32'd989156845;
		if (start == 1'b0 && ^(-32'd989156845) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_190)) begin
		safe_add_func_uint32_t_u_u_arg_ui2 <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_uint32_t_u_u_finish_final = safe_add_func_uint32_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__246_190))) begin
		safe_add_func_uint32_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint32_t_u_u_finish) begin
		safe_add_func_uint32_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__246_190))) begin
		safe_add_func_uint32_t_u_u_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_add_func_uint32_t_u_u_finish) begin
		safe_add_func_uint32_t_u_u_return_val_reg <= safe_add_func_uint32_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_add_func_uint32_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint32_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_194)) begin
		safe_lshift_func_uint8_t_u_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_195)) begin
		safe_lshift_func_uint8_t_u_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_194)) begin
		safe_lshift_func_uint8_t_u_s_arg_left <= func_1_246_256;
		if (start == 1'b0 && ^(func_1_246_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__246_194)) begin
		safe_lshift_func_uint8_t_u_s_arg_right <= 32'd17530;
		if (start == 1'b0 && ^(32'd17530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint8_t_u_s_finish_final = safe_lshift_func_uint8_t_u_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__246_194))) begin
		safe_lshift_func_uint8_t_u_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint8_t_u_s_finish) begin
		safe_lshift_func_uint8_t_u_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__246_194))) begin
		safe_lshift_func_uint8_t_u_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint8_t_u_s_finish) begin
		safe_lshift_func_uint8_t_u_s_return_val_reg <= safe_lshift_func_uint8_t_u_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_225)) begin
		safe_div_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_226)) begin
		safe_div_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_225)) begin
		safe_div_func_int32_t_s_s_arg_si1 <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_225)) begin
		safe_div_func_int32_t_s_s_arg_si2 <= func_1_285_290_reg;
		if (start == 1'b0 && ^(func_1_285_290_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_int32_t_s_s_finish_final = safe_div_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__285_225))) begin
		safe_div_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_div_func_int32_t_s_s_finish) begin
		safe_div_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__285_225))) begin
		safe_div_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_div_func_int32_t_s_s_finish) begin
		safe_div_func_int32_t_s_s_return_val_reg <= safe_div_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_1: %305*/
	/*   ret i8 %308*/
	if ((cur_state == LEGUP_F_func_1_BB__305_238)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = func_19_memory_controller_enable_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = func_19_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_a = func_39_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_a = func_39_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_a = safe_mod_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_a = safe_mod_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_enable_a = func_24_memory_controller_enable_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_enable_a = func_24_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_a = safe_mul_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_a = safe_mul_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_enable_a = safe_add_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_enable_a = safe_add_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_enable_a = safe_sub_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_enable_a = safe_sub_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_a = safe_add_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_a = safe_add_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_enable_a = safe_add_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_enable_a = safe_add_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_enable_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_enable_a = safe_div_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_enable_a = safe_div_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %3*/
	/*   store i32 4, i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %7*/
	/*   store i32 %storemerge, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__7_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %16*/
	/*   store i32 5790591, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__16_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %24*/
	/*   %25 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %24*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %24*/
	/*   store i8 %26, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %34*/
	/*   %35 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %34*/
	/*   %49 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %93*/
	/*   %94 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %102*/
	/*   %104 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %135*/
	/*   %137 = load i32* %136, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %135*/
	/*   %144 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %135*/
	/*   %147 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %135*/
	/*   %162 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_118)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %135*/
	/*   %165 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__135_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %169*/
	/*   %174 = load i32* %173, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__169_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %182*/
	/*   %184 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %182*/
	/*   store i32 %189, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_139)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %204*/
	/*   store i32 %206, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__204_152)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %210*/
	/*   %214 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %210*/
	/*   %226 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_169)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %234*/
	/*   %236 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__234_178)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %243*/
	/*   %244 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__243_183)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %246*/
	/*   %250 = load i32* %249, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_186)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %260*/
	/*   %261 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_198)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %260*/
	/*   store i16 %262, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 2, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_200)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %260*/
	/*   %264 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %285*/
	/*   store i32 0, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %285*/
	/*   %292 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %285*/
	/*   store i32 %293, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %302*/
	/*   %303 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__302_233)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %305*/
	/*   %307 = load i32* %306, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__305_236)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_19_memory_controller_address_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_19_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_39_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_39_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %3*/
	/*   store i32 4, i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_address_a = func_1_3_scevgep5;
	end
	/* func_1: %7*/
	/*   store i32 %storemerge, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__7_7)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_1: %16*/
	/*   store i32 5790591, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__16_15)) begin
		memory_controller_address_a = func_1_16_scevgep;
	end
	/* func_1: %24*/
	/*   %25 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_address_a = func_1_20_scevgep3_reg;
	end
	/* func_1: %24*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_21)) begin
		memory_controller_address_a = func_1_24_29_reg;
	end
	/* func_1: %24*/
	/*   store i8 %26, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		memory_controller_address_a = `TAG_g_g_12_a;
	end
	/* func_1: %34*/
	/*   %35 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd4) + (4 * 32'd3)));
	end
	/* func_1: %34*/
	/*   %49 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_address_a = func_1_20_scevgep3_reg;
	end
	/* func_1: %93*/
	/*   %94 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_address_a = `TAG_g_g_44_a;
	end
	/* func_1: %102*/
	/*   %104 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd2) + (4 * 32'd5)));
	end
	/* func_1: %135*/
	/*   %137 = load i32* %136, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_105)) begin
		memory_controller_address_a = func_1_135_136;
	end
	/* func_1: %135*/
	/*   %144 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd5) + (4 * 32'd5)));
	end
	/* func_1: %135*/
	/*   %147 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_address_a = `TAG_g_g_44_a;
	end
	/* func_1: %135*/
	/*   %162 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_118)) begin
		memory_controller_address_a = `TAG_g_g_44_a;
	end
	/* func_1: %135*/
	/*   %165 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__135_122)) begin
		memory_controller_address_a = `TAG_g_g_12_a;
	end
	/* func_1: %169*/
	/*   %174 = load i32* %173, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__169_126)) begin
		memory_controller_address_a = func_1_169_173;
	end
	/* func_1: %182*/
	/*   %184 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_1: %182*/
	/*   store i32 %189, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_139)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* func_1: %204*/
	/*   store i32 %206, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__204_152)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* func_1: %210*/
	/*   %214 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %210*/
	/*   %226 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_169)) begin
		memory_controller_address_a = func_1_20_scevgep3_reg;
	end
	/* func_1: %234*/
	/*   %236 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__234_178)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + (4 * 32'd5));
	end
	/* func_1: %243*/
	/*   %244 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__243_183)) begin
		memory_controller_address_a = `TAG_g_g_61_a;
	end
	/* func_1: %246*/
	/*   %250 = load i32* %249, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_186)) begin
		memory_controller_address_a = func_1_246_249;
	end
	/* func_1: %260*/
	/*   %261 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_198)) begin
		memory_controller_address_a = (`TAG_g_g_61_a + (4 * 32'd1));
	end
	/* func_1: %260*/
	/*   store i16 %262, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 2, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_200)) begin
		memory_controller_address_a = (`TAG_g_g_116_a + (2 * 32'd2));
	end
	/* func_1: %260*/
	/*   %264 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_address_a = func_1_20_scevgep3_reg;
	end
	/* func_1: %285*/
	/*   store i32 0, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* func_1: %285*/
	/*   %292 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %285*/
	/*   store i32 %293, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_address_a = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %302*/
	/*   %303 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__302_233)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* func_1: %305*/
	/*   %307 = load i32* %306, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__305_236)) begin
		memory_controller_address_a = func_1_305_306;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = func_19_memory_controller_write_enable_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = func_19_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_a = func_39_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_a = func_39_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_a = safe_mod_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_a = safe_mod_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_write_enable_a = func_24_memory_controller_write_enable_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_write_enable_a = func_24_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_write_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_write_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_a = safe_mul_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_a = safe_mul_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_write_enable_a = safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_write_enable_a = safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_write_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_write_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_write_enable_a = safe_sub_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_write_enable_a = safe_sub_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_write_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_write_enable_a = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_a = safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_a = safe_add_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_write_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_write_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_write_enable_a = safe_add_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_write_enable_a = safe_add_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_write_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_write_enable_a = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_write_enable_a = safe_div_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_write_enable_a = safe_div_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %3*/
	/*   store i32 4, i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %7*/
	/*   store i32 %storemerge, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__7_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %16*/
	/*   store i32 5790591, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__16_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %24*/
	/*   %25 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %24*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %24*/
	/*   store i8 %26, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %34*/
	/*   %35 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %34*/
	/*   %49 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %93*/
	/*   %94 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %102*/
	/*   %104 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %135*/
	/*   %137 = load i32* %136, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_105)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %135*/
	/*   %144 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %135*/
	/*   %147 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %135*/
	/*   %162 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_118)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %135*/
	/*   %165 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__135_122)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %169*/
	/*   %174 = load i32* %173, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__169_126)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %182*/
	/*   %184 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %182*/
	/*   store i32 %189, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_139)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %204*/
	/*   store i32 %206, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__204_152)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %210*/
	/*   %214 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %210*/
	/*   %226 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_169)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %234*/
	/*   %236 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__234_178)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %243*/
	/*   %244 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__243_183)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %246*/
	/*   %250 = load i32* %249, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_186)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %260*/
	/*   %261 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_198)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %260*/
	/*   store i16 %262, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 2, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_200)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %260*/
	/*   %264 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %285*/
	/*   store i32 0, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %285*/
	/*   %292 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %285*/
	/*   store i32 %293, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %302*/
	/*   %303 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__302_233)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %305*/
	/*   %307 = load i32* %306, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__305_236)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_19_memory_controller_in_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_19_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_39_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_39_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %3*/
	/*   store i32 4, i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_in_a = 32'd4;
	end
	/* func_1: %7*/
	/*   store i32 %storemerge, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__7_7)) begin
		memory_controller_in_a = func_1_7_storemerge_reg;
	end
	/* func_1: %16*/
	/*   store i32 5790591, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__16_15)) begin
		memory_controller_in_a = 32'd5790591;
	end
	/* func_1: %24*/
	/*   store i8 %26, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		memory_controller_in_a = func_1_24_26;
	end
	/* func_1: %182*/
	/*   store i32 %189, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_139)) begin
		memory_controller_in_a = func_1_182_189;
	end
	/* func_1: %204*/
	/*   store i32 %206, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__204_152)) begin
		memory_controller_in_a = func_1_204_206;
	end
	/* func_1: %260*/
	/*   store i16 %262, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 2, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_200)) begin
		memory_controller_in_a = func_1_260_262;
	end
	/* func_1: %285*/
	/*   store i32 0, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_in_a = 32'd0;
	end
	/* func_1: %285*/
	/*   store i32 %293, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_in_a = func_1_285_293;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = func_19_memory_controller_size_a;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = func_19_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_a[1:0] = func_39_memory_controller_size_a;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_a[1:0] = func_39_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_a[1:0] = safe_mod_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_a[1:0] = safe_mod_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_size_a[1:0] = func_24_memory_controller_size_a;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_size_a[1:0] = func_24_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_a[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_a[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint32_t_u_u_memory_controller_size_a;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint32_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_size_a[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_size_a[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_size_a[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_size_a[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_1: %3*/
	/*   store i32 4, i32* %scevgep5, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %7*/
	/*   store i32 %storemerge, i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__7_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %16*/
	/*   store i32 5790591, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__16_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %24*/
	/*   %25 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %24*/
	/*   %30 = load i32* %29, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %24*/
	/*   store i8 %26, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__24_22)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_1: %34*/
	/*   %35 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 3), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %34*/
	/*   %49 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %93*/
	/*   %94 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %102*/
	/*   %104 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 2, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %135*/
	/*   %137 = load i32* %136, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %135*/
	/*   %144 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 5, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %135*/
	/*   %147 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %135*/
	/*   %162 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_118)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %135*/
	/*   %165 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__135_122)) begin
		memory_controller_size_a = 2'd0;
	end
	/* func_1: %169*/
	/*   %174 = load i32* %173, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__169_126)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %182*/
	/*   %184 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %182*/
	/*   store i32 %189, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_139)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %204*/
	/*   store i32 %206, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__204_152)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %210*/
	/*   %214 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %210*/
	/*   %226 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_169)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %234*/
	/*   %236 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__234_178)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %243*/
	/*   %244 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__243_183)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %246*/
	/*   %250 = load i32* %249, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_186)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %260*/
	/*   %261 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_198)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %260*/
	/*   store i16 %262, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 2, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_200)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %260*/
	/*   %264 = load i32* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %285*/
	/*   store i32 0, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %285*/
	/*   %292 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %285*/
	/*   store i32 %293, i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %302*/
	/*   %303 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__302_233)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %305*/
	/*   %307 = load i32* %306, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__305_236)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = func_19_memory_controller_enable_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = func_19_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_b = func_39_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_enable_b = func_39_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_b = safe_mod_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_b = safe_mod_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_enable_b = func_24_memory_controller_enable_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_enable_b = func_24_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_b = safe_mul_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_enable_b = safe_mul_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_enable_b = safe_add_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_enable_b = safe_add_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_enable_b = safe_sub_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_enable_b = safe_sub_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_b = safe_add_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_enable_b = safe_add_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_enable_b = safe_add_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_enable_b = safe_add_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_enable_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_enable_b = safe_div_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_enable_b = safe_div_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %24*/
	/*   %31 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %34*/
	/*   %37 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %34*/
	/*   %39 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %34*/
	/*   %42 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %34*/
	/*   store i8 %46, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %34*/
	/*   %51 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %54*/
	/*   %57 = load i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %54*/
	/*   store i32 %58, i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %54*/
	/*   %66 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %73*/
	/*   store i8 %storemerge1, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__73_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %75*/
	/*   %76 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__75_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %79*/
	/*   %80 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__79_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %83*/
	/*   %84 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__83_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %88*/
	/*   %89 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__88_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %93*/
	/*   %97 = load i32* %96, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %102*/
	/*   %109 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %102*/
	/*   %111 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 6, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %115*/
	/*   %119 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__115_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %123*/
	/*   %124 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__123_96)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %126*/
	/*   store i32 %134, i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__126_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %135*/
	/*   %146 = load i32* %145, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %135*/
	/*   %149 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 3, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %179*/
	/*   store i32 %180, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__179_132)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %182*/
	/*   %185 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %191*/
	/*   %192 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__191_142)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %194*/
	/*   %195 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__194_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %197*/
	/*   store i16 %202, i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %207*/
	/*   %208 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__207_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %210*/
	/*   %217 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %210*/
	/*   %223 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_165)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %210*/
	/*   %230 = load i32* %229, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_173)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %246*/
	/*   %254 = load i32* %253, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_192)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %260*/
	/*   %267 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %260*/
	/*   %270 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_207)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %273*/
	/*   %274 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__273_212)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %285*/
	/*   %287 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %285*/
	/*   %297 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %285*/
	/*   %299 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_228)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %285*/
	/*   store i16 %298, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %285*/
	/*   store i32 %300, i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_230)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_19_memory_controller_address_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_19_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_39_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_39_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_24_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_address_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_address_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %24*/
	/*   %31 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_address_b = `TAG_g_g_2_a;
	end
	/* func_1: %34*/
	/*   %37 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %34*/
	/*   %39 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_27)) begin
		memory_controller_address_b = `TAG_g_g_12_a;
	end
	/* func_1: %34*/
	/*   %42 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_31)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %34*/
	/*   store i8 %46, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		memory_controller_address_b = `TAG_g_g_12_a;
	end
	/* func_1: %34*/
	/*   %51 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_address_b = `TAG_g_g_2_a;
	end
	/* func_1: %54*/
	/*   %57 = load i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_43)) begin
		memory_controller_address_b = func_1_54_56;
	end
	/* func_1: %54*/
	/*   store i32 %58, i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_45)) begin
		memory_controller_address_b = func_1_54_56_reg;
	end
	/* func_1: %54*/
	/*   %66 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_52)) begin
		memory_controller_address_b = `TAG_g_g_2_a;
	end
	/* func_1: %73*/
	/*   store i8 %storemerge1, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__73_58)) begin
		memory_controller_address_b = `TAG_g_g_12_a;
	end
	/* func_1: %75*/
	/*   %76 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__75_60)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd5)));
	end
	/* func_1: %79*/
	/*   %80 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__79_64)) begin
		memory_controller_address_b = `TAG_g_g_44_a;
	end
	/* func_1: %83*/
	/*   %84 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__83_68)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %88*/
	/*   %89 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__88_73)) begin
		memory_controller_address_b = `TAG_g_g_12_a;
	end
	/* func_1: %93*/
	/*   %97 = load i32* %96, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_address_b = func_1_93_96;
	end
	/* func_1: %102*/
	/*   %109 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_address_b = `TAG_g_g_44_a;
	end
	/* func_1: %102*/
	/*   %111 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 6, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_86)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd6) + (4 * 32'd5)));
	end
	/* func_1: %115*/
	/*   %119 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__115_93)) begin
		memory_controller_address_b = `TAG_g_g_44_a;
	end
	/* func_1: %123*/
	/*   %124 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__123_96)) begin
		memory_controller_address_b = `TAG_g_g_2_a;
	end
	/* func_1: %126*/
	/*   store i32 %134, i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__126_103)) begin
		memory_controller_address_b = (`TAG_g_g_61_a + (4 * 32'd2));
	end
	/* func_1: %135*/
	/*   %146 = load i32* %145, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_address_b = func_1_135_145_reg;
	end
	/* func_1: %135*/
	/*   %149 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 3, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd3) + (4 * 32'd1)));
	end
	/* func_1: %179*/
	/*   store i32 %180, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__179_132)) begin
		memory_controller_address_b = `TAG_g_g_77_a;
	end
	/* func_1: %182*/
	/*   %185 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd4) + (4 * 32'd5)));
	end
	/* func_1: %191*/
	/*   %192 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__191_142)) begin
		memory_controller_address_b = `TAG_g_g_77_a;
	end
	/* func_1: %194*/
	/*   %195 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__194_145)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + (4 * 32'd2));
	end
	/* func_1: %197*/
	/*   store i16 %202, i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_150)) begin
		memory_controller_address_b = `TAG_g_g_113_a;
	end
	/* func_1: %207*/
	/*   %208 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__207_154)) begin
		memory_controller_address_b = (`TAG_g_g_34_a + ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* func_1: %210*/
	/*   %217 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_address_b = (`TAG_g_g_61_a + (4 * 32'd2));
	end
	/* func_1: %210*/
	/*   %223 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_165)) begin
		memory_controller_address_b = `TAG_g_g_114_a;
	end
	/* func_1: %210*/
	/*   %230 = load i32* %229, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_173)) begin
		memory_controller_address_b = func_1_210_229_reg;
	end
	/* func_1: %246*/
	/*   %254 = load i32* %253, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_192)) begin
		memory_controller_address_b = func_1_246_253_reg;
	end
	/* func_1: %260*/
	/*   %267 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_address_b = (`TAG_g_g_61_a + (4 * 32'd2));
	end
	/* func_1: %260*/
	/*   %270 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_207)) begin
		memory_controller_address_b = (`TAG_g_g_116_a + (2 * 32'd7));
	end
	/* func_1: %273*/
	/*   %274 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__273_212)) begin
		memory_controller_address_b = (`TAG_g_g_61_a + (4 * 32'd2));
	end
	/* func_1: %285*/
	/*   %287 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_address_b = `TAG_g_g_12_a;
	end
	/* func_1: %285*/
	/*   %297 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_address_b = (`TAG_g_g_116_a + (2 * 32'd7));
	end
	/* func_1: %285*/
	/*   %299 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_228)) begin
		memory_controller_address_b = `TAG_g_g_114_a;
	end
	/* func_1: %285*/
	/*   store i16 %298, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_address_b = (`TAG_g_g_116_a + (2 * 32'd7));
	end
	/* func_1: %285*/
	/*   store i32 %300, i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_230)) begin
		memory_controller_address_b = `TAG_g_g_114_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = func_19_memory_controller_write_enable_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = func_19_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_b = func_39_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_write_enable_b = func_39_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_b = safe_mod_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_b = safe_mod_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_write_enable_b = func_24_memory_controller_write_enable_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_write_enable_b = func_24_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_write_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_write_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_write_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_b = safe_mul_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_write_enable_b = safe_mul_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_write_enable_b = safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_write_enable_b = safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_write_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_write_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_write_enable_b = safe_sub_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_write_enable_b = safe_sub_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_write_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_write_enable_b = safe_sub_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_b = safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_write_enable_b = safe_add_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_write_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_write_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_write_enable_b = safe_add_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_write_enable_b = safe_add_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint8_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_s_memory_controller_write_enable_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_write_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_write_enable_b = safe_mul_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_write_enable_b = safe_div_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_write_enable_b = safe_div_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %24*/
	/*   %31 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %34*/
	/*   %37 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %34*/
	/*   %39 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %34*/
	/*   %42 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %34*/
	/*   store i8 %46, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %34*/
	/*   %51 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %54*/
	/*   %57 = load i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %54*/
	/*   store i32 %58, i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_45)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %54*/
	/*   %66 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %73*/
	/*   store i8 %storemerge1, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__73_58)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %75*/
	/*   %76 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__75_60)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %79*/
	/*   %80 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__79_64)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %83*/
	/*   %84 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__83_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %88*/
	/*   %89 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__88_73)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %93*/
	/*   %97 = load i32* %96, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %102*/
	/*   %109 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %102*/
	/*   %111 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 6, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_86)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %115*/
	/*   %119 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__115_93)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %123*/
	/*   %124 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__123_96)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %126*/
	/*   store i32 %134, i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__126_103)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %135*/
	/*   %146 = load i32* %145, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %135*/
	/*   %149 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 3, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %179*/
	/*   store i32 %180, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__179_132)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %182*/
	/*   %185 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %191*/
	/*   %192 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__191_142)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %194*/
	/*   %195 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__194_145)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %197*/
	/*   store i16 %202, i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_150)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %207*/
	/*   %208 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__207_154)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %210*/
	/*   %217 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %210*/
	/*   %223 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_165)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %210*/
	/*   %230 = load i32* %229, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_173)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %246*/
	/*   %254 = load i32* %253, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_192)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %260*/
	/*   %267 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %260*/
	/*   %270 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_207)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %273*/
	/*   %274 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__273_212)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %285*/
	/*   %287 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %285*/
	/*   %297 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %285*/
	/*   %299 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_228)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %285*/
	/*   store i16 %298, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %285*/
	/*   store i32 %300, i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_230)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_19_memory_controller_in_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_19_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_39_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_39_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_24_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_in_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_in_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %34*/
	/*   store i8 %46, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		memory_controller_in_b = func_1_34_46;
	end
	/* func_1: %54*/
	/*   store i32 %58, i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_45)) begin
		memory_controller_in_b = func_1_54_58;
	end
	/* func_1: %73*/
	/*   store i8 %storemerge1, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__73_58)) begin
		memory_controller_in_b = func_1_73_storemerge1_reg;
	end
	/* func_1: %126*/
	/*   store i32 %134, i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__126_103)) begin
		memory_controller_in_b = func_1_126_134;
	end
	/* func_1: %179*/
	/*   store i32 %180, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__179_132)) begin
		memory_controller_in_b = func_1_179_180_reg;
	end
	/* func_1: %197*/
	/*   store i16 %202, i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_150)) begin
		memory_controller_in_b = func_1_197_202;
	end
	/* func_1: %285*/
	/*   store i16 %298, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_in_b = func_1_285_298;
	end
	/* func_1: %285*/
	/*   store i32 %300, i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_230)) begin
		memory_controller_in_b = func_1_285_300;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_1: %9*/
	/*   %10 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext 22550, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = func_19_memory_controller_size_b;
	end
	/* func_1: %24*/
	/*   %32 = call signext i8 @func_19(i16 signext %28, i8 signext %26, i32 %30, i32 %31) #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = func_19_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_b[1:0] = func_39_memory_controller_size_b;
	end
	/* func_1: %34*/
	/*   %41 = call signext i16 @func_39(i16 signext %38, i32 %40) #2*/
	if ((cur_state == LEGUP_function_call_30)) begin
		memory_controller_size_b[1:0] = func_39_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_1: %34*/
	/*   %43 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %41, i32 %42) #2*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_b[1:0] = safe_mod_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %34*/
	/*   %47 = call signext i8 @safe_mod_func_int8_t_s_s(i8 signext %36, i8 signext %46) #2*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_b[1:0] = safe_mod_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_size_b[1:0] = func_24_memory_controller_size_b;
	end
	/* func_1: %34*/
	/*   %53 = call zeroext i16 @func_24(i16 zeroext %48, i32 %21, i16 zeroext %50, i8 signext %52) #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		memory_controller_size_b[1:0] = func_24_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_1: %54*/
	/*   %61 = call i32 @safe_sub_func_int32_t_s_s(i32 %60, i32 -384561695) #2*/
	if ((cur_state == LEGUP_function_call_47)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %54*/
	/*   %63 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %62, i8 signext -78) #2*/
	if ((cur_state == LEGUP_function_call_49)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %54*/
	/*   %64 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext -49, i8 signext %63) #2*/
	if ((cur_state == LEGUP_function_call_51)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_b[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %54*/
	/*   %70 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %68, i16 zeroext %69) #2*/
	if ((cur_state == LEGUP_function_call_55)) begin
		memory_controller_size_b[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %93*/
	/*   %99 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %95, i16 zeroext %98) #2*/
	if ((cur_state == LEGUP_function_call_82)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_1: %102*/
	/*   %114 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %113, i16 signext 0) #2*/
	if ((cur_state == LEGUP_function_call_89)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_1: %115*/
	/*   %117 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %116, i32 11) #2*/
	if ((cur_state == LEGUP_function_call_92)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %126*/
	/*   %131 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %130, i16 zeroext %22) #2*/
	if ((cur_state == LEGUP_function_call_100)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %126*/
	/*   %132 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %131, i32 -3) #2*/
	if ((cur_state == LEGUP_function_call_102)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %135*/
	/*   %139 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext 1, i32 12) #2*/
	if ((cur_state == LEGUP_function_call_108)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %135*/
	/*   %141 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext %138, i32 %140) #2*/
	if ((cur_state == LEGUP_function_call_110)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_1: %135*/
	/*   %151 = call signext i16 @safe_sub_func_int16_t_s_s(i16 signext %148, i16 signext %150) #2*/
	if ((cur_state == LEGUP_function_call_115)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_1: %135*/
	/*   %157 = call zeroext i16 @safe_rshift_func_uint16_t_u_s(i16 zeroext %156, i32 9) #2*/
	if ((cur_state == LEGUP_function_call_117)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_1: %135*/
	/*   %164 = call zeroext i8 @safe_sub_func_uint8_t_u_u(i8 zeroext %161, i8 zeroext %163) #2*/
	if ((cur_state == LEGUP_function_call_121)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %169*/
	/*   %176 = call zeroext i16 @safe_add_func_uint16_t_u_u(i16 zeroext %172, i16 zeroext %175) #2*/
	if ((cur_state == LEGUP_function_call_129)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %182*/
	/*   %188 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %183, i8 signext %187) #2*/
	if ((cur_state == LEGUP_function_call_138)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	/* func_1: %197*/
	/*   %201 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext %200, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_149)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_1: %210*/
	/*   %213 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %212, i8 zeroext -7) #2*/
	if ((cur_state == LEGUP_function_call_158)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %210*/
	/*   %220 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %219, i8 signext -1) #2*/
	if ((cur_state == LEGUP_function_call_162)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %210*/
	/*   %222 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %221, i8 signext %23) #2*/
	if ((cur_state == LEGUP_function_call_164)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %210*/
	/*   %225 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext %222, i8 signext %224) #2*/
	if ((cur_state == LEGUP_function_call_168)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	/* func_1: %210*/
	/*   %227 = call zeroext i8 @safe_rshift_func_uint8_t_u_s(i8 zeroext 1, i32 %226) #2*/
	if ((cur_state == LEGUP_function_call_172)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_1: %210*/
	/*   %233 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %232, i32 %21) #2*/
	if ((cur_state == LEGUP_function_call_176)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_1: %234*/
	/*   %241 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %240, i32 1) #2*/
	if ((cur_state == LEGUP_function_call_181)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %246*/
	/*   %251 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %248, i32 %250) #2*/
	if ((cur_state == LEGUP_function_call_189)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint32_t_u_u_memory_controller_size_b;
	end
	/* func_1: %246*/
	/*   %252 = call i32 @safe_add_func_uint32_t_u_u(i32 -989156845, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_191)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint32_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	/* func_1: %246*/
	/*   %257 = call zeroext i8 @safe_lshift_func_uint8_t_u_s(i8 zeroext %256, i32 17530) #2*/
	if ((cur_state == LEGUP_function_call_195)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint8_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	/* func_1: %260*/
	/*   %263 = call zeroext i16 @safe_lshift_func_uint16_t_u_s(i16 zeroext %262, i32 13) #2*/
	if ((cur_state == LEGUP_function_call_202)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %260*/
	/*   %269 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %266, i8 signext %268) #2*/
	if ((cur_state == LEGUP_function_call_206)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_1: %260*/
	/*   %272 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %271, i8 zeroext -1) #2*/
	if ((cur_state == LEGUP_function_call_210)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_size_b[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %276*/
	/*   %279 = call zeroext i16 @safe_mul_func_uint16_t_u_u(i16 zeroext %278, i16 zeroext 0) #2*/
	if ((cur_state == LEGUP_function_call_216)) begin
		memory_controller_size_b[1:0] = safe_mul_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_1: %285*/
	/*   %290 = call i32 @safe_sub_func_int32_t_s_s(i32 %289, i32 %l_110.0) #2*/
	if ((cur_state == LEGUP_function_call_224)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_size_b[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_1: %285*/
	/*   %291 = call i32 @safe_div_func_int32_t_s_s(i32 0, i32 %290) #2*/
	if ((cur_state == LEGUP_function_call_226)) begin
		memory_controller_size_b[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_1: %24*/
	/*   %31 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__24_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %34*/
	/*   %37 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %34*/
	/*   %39 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_27)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_1: %34*/
	/*   %42 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %34*/
	/*   store i8 %46, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__34_35)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_1: %34*/
	/*   %51 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__34_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %54*/
	/*   %57 = load i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %54*/
	/*   store i32 %58, i32* %56, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %54*/
	/*   %66 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__54_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %73*/
	/*   store i8 %storemerge1, i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__73_58)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_1: %75*/
	/*   %76 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__75_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %79*/
	/*   %80 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__79_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %83*/
	/*   %84 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__83_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %88*/
	/*   %89 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__88_73)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_1: %93*/
	/*   %97 = load i32* %96, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__93_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %102*/
	/*   %109 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %102*/
	/*   %111 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 6, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__102_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %115*/
	/*   %119 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__115_93)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %123*/
	/*   %124 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__123_96)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %126*/
	/*   store i32 %134, i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__126_103)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %135*/
	/*   %146 = load i32* %145, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %135*/
	/*   %149 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 3, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__135_112)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %179*/
	/*   store i32 %180, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__179_132)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %182*/
	/*   %185 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 4, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__182_135)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %191*/
	/*   %192 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__191_142)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %194*/
	/*   %195 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__194_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %197*/
	/*   store i16 %202, i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__197_150)) begin
		memory_controller_size_b = 2'd1;
	end
	/* func_1: %207*/
	/*   %208 = load i32* getelementptr inbounds ([7 x [6 x i32]]* @g_34, i32 0, i32 1, i32 1), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__207_154)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %210*/
	/*   %217 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_159)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %210*/
	/*   %223 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_165)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %210*/
	/*   %230 = load i32* %229, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__210_173)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %246*/
	/*   %254 = load i32* %253, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__246_192)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %260*/
	/*   %267 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__260_203)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %260*/
	/*   %270 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__260_207)) begin
		memory_controller_size_b = 2'd1;
	end
	/* func_1: %273*/
	/*   %274 = load i32* getelementptr inbounds ([3 x i32]* @g_61, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__273_212)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %285*/
	/*   %287 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_func_1_BB__285_221)) begin
		memory_controller_size_b = 2'd0;
	end
	/* func_1: %285*/
	/*   %297 = load i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_227)) begin
		memory_controller_size_b = 2'd1;
	end
	/* func_1: %285*/
	/*   %299 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_228)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %285*/
	/*   store i16 %298, i16* getelementptr inbounds ([9 x [1 x i16]]* @g_116, i32 0, i32 7, i32 0), align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__285_229)) begin
		memory_controller_size_b = 2'd1;
	end
	/* func_1: %285*/
	/*   store i32 %300, i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__285_230)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_1: %305*/
	/*   ret i8 %308*/
	if ((cur_state == LEGUP_F_func_1_BB__305_238)) begin
		return_val <= func_1_305_308;
		if (start == 1'b0 && ^(func_1_305_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module transparent_crc
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val,
	arg_vname,
	arg_flag
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_4 = 3'd4;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_5 = 3'd5;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_6 = 3'd6;
parameter [2:0] LEGUP_F_transparent_crc_BB__6_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_2 = 3'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_vname;
input [31:0] arg_flag;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  transparent_crc_0_1;
reg  transparent_crc_0_1_reg;
reg [31:0] transparent_crc_2_3;
reg [31:0] transparent_crc_2_4;
reg  crc32_8bytes_start;
reg [63:0] crc32_8bytes_arg_val;
wire  crc32_8bytes_memory_controller_enable_a;
wire  crc32_8bytes_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_a;
wire [1:0] crc32_8bytes_memory_controller_size_a;
wire  crc32_8bytes_memory_controller_enable_b;
wire  crc32_8bytes_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_b;
wire [1:0] crc32_8bytes_memory_controller_size_b;
reg  crc32_8bytes_finish_final;
reg  crc32_8bytes_finish_reg;
wire  crc32_8bytes_finish;


crc32_8bytes crc32_8bytes (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_8bytes_memory_controller_enable_a),
	.memory_controller_address_a (crc32_8bytes_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_8bytes_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_8bytes_memory_controller_in_a),
	.memory_controller_size_a (crc32_8bytes_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_8bytes_memory_controller_enable_b),
	.memory_controller_address_b (crc32_8bytes_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_8bytes_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_8bytes_memory_controller_in_b),
	.memory_controller_size_b (crc32_8bytes_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_8bytes_start),
	.finish (crc32_8bytes_finish),
	.arg_val (crc32_8bytes_arg_val)
);

defparam
	crc32_8bytes.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* transparent_crc: %2*/
	/*   %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str12, i32 0, i32 0), i8* %vname, i32 %4) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_6)) begin
		$write("...checksum after hashing %s : %lX\n", $signed(arg_vname), $signed(transparent_crc_2_4));
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_vname) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(transparent_crc_2_4) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_1;
LEGUP_F_transparent_crc_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_transparent_crc_BB__0_3:
	if ((transparent_crc_0_1_reg == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__6_7;
	else if ((transparent_crc_0_1_reg == 1'd0))
		next_state = LEGUP_F_transparent_crc_BB__2_4;
LEGUP_F_transparent_crc_BB__2_4:
		next_state = LEGUP_F_transparent_crc_BB__2_5;
LEGUP_F_transparent_crc_BB__2_5:
		next_state = LEGUP_F_transparent_crc_BB__2_6;
LEGUP_F_transparent_crc_BB__2_6:
		next_state = LEGUP_F_transparent_crc_BB__6_7;
LEGUP_F_transparent_crc_BB__6_7:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((crc32_8bytes_finish_final == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
		transparent_crc_0_1 = (arg_flag == 32'd0);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		transparent_crc_0_1_reg <= transparent_crc_0_1;
		if (start == 1'b0 && ^(transparent_crc_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
		transparent_crc_2_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %4 = xor i32 %3, -1*/
		transparent_crc_2_4 = (transparent_crc_2_3 ^ -32'd1);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_8bytes_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_arg_val <= arg_val;
		if (start == 1'b0 && ^(arg_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_arg_val"); $finish; end
	end
end
always @(*) begin
	crc32_8bytes_finish_final = crc32_8bytes_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_transparent_crc_BB__0_1))) begin
		crc32_8bytes_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
	if (crc32_8bytes_finish) begin
		crc32_8bytes_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* transparent_crc: %6*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__6_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_argc,
	arg_argv
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__0_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB__0_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB__0_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB__0_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB__0_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB__0_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__0_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__0_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__6_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__8_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__9_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__11_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__11_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__11_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__11_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__14_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB__15_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__16_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__18_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB__19_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB__21_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB__21_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB__21_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__21_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB__24_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__26_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__26_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__26_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__26_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__29_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB__30_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB__31_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__33_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__33_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__33_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__33_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__33_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__33_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__33_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB__33_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__33_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__33_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB__40_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB__42_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB__43_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__45_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB__45_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB__45_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB__45_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__45_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__49_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__50_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB__51_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__53_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__54_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__56_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB__56_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB__56_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB__56_74 = 7'd74;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_2 = 7'd2;
parameter [6:0] LEGUP_function_call_4 = 7'd4;
parameter [6:0] LEGUP_function_call_6 = 7'd6;
parameter [6:0] LEGUP_function_call_10 = 7'd10;
parameter [6:0] LEGUP_function_call_14 = 7'd14;
parameter [6:0] LEGUP_function_call_22 = 7'd22;
parameter [6:0] LEGUP_function_call_32 = 7'd32;
parameter [6:0] LEGUP_function_call_38 = 7'd38;
parameter [6:0] LEGUP_function_call_46 = 7'd46;
parameter [6:0] LEGUP_function_call_50 = 7'd50;
parameter [6:0] LEGUP_function_call_54 = 7'd54;
parameter [6:0] LEGUP_function_call_63 = 7'd63;
parameter [6:0] LEGUP_function_call_73 = 7'd73;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_argc;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_argv;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_0_2;
reg [63:0] main_0_3;
reg [7:0] main_0_4;
reg [63:0] main_0_5;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg  main_6_exitcond7;
reg [31:0] main_9_10;
reg [31:0] main_9_10_reg;
reg  main_9_exitcond5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_11_scevgep6;
reg [31:0] main_11_12;
reg [63:0] main_11_13;
reg [31:0] main_16_17;
reg [31:0] main_19_20;
reg [31:0] main_21_22;
reg [63:0] main_21_23;
reg [31:0] main_24_25;
reg [31:0] main_24_25_reg;
reg  main_24_exitcond3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_26_scevgep4;
reg [31:0] main_26_27;
reg [63:0] main_26_28;
reg [31:0] main_31_32;
reg [31:0] main_33_34;
reg [63:0] main_33_35;
reg [15:0] main_33_36;
reg [63:0] main_33_37;
reg [31:0] main_33_38;
reg [63:0] main_33_39;
reg [31:0] main_40_41;
reg [31:0] main_40_41_reg;
reg  main_40_exitcond1;
reg [31:0] main_43_44;
reg [31:0] main_43_44_reg;
reg  main_43_exitcond;
reg [31:0] main_45_46;
reg [31:0] main_45_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_45_scevgep;
reg [15:0] main_45_47;
reg [63:0] main_45_48;
reg [31:0] main_51_52;
reg [31:0] main_54_55;
reg [31:0] main_56_57;
reg [31:0] main_56_58;
reg [31:0] main_56_59;
reg [31:0] main_56_59_reg;
reg  platform_main_begin_start;
wire  platform_main_begin_memory_controller_enable_a;
wire  platform_main_begin_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_a;
wire [1:0] platform_main_begin_memory_controller_size_a;
wire  platform_main_begin_memory_controller_enable_b;
wire  platform_main_begin_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_b;
wire [1:0] platform_main_begin_memory_controller_size_b;
reg  platform_main_begin_finish_final;
reg  platform_main_begin_finish_reg;
wire  platform_main_begin_finish;
reg  crc32_gentab_start;
wire  crc32_gentab_memory_controller_enable_a;
wire  crc32_gentab_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_a;
wire [1:0] crc32_gentab_memory_controller_size_a;
wire  crc32_gentab_memory_controller_enable_b;
wire  crc32_gentab_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_b;
wire [1:0] crc32_gentab_memory_controller_size_b;
reg  crc32_gentab_finish_final;
reg  crc32_gentab_finish_reg;
wire  crc32_gentab_finish;
reg  func_1_start;
wire  func_1_memory_controller_enable_a;
wire  func_1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_a;
wire [1:0] func_1_memory_controller_size_a;
wire  func_1_memory_controller_enable_b;
wire  func_1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_b;
wire [1:0] func_1_memory_controller_size_b;
reg  func_1_finish_final;
reg  func_1_finish_reg;
wire  func_1_finish;
wire [7:0] func_1_return_val;
reg  transparent_crc_start;
reg [63:0] transparent_crc_arg_val;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_arg_vname;
reg [31:0] transparent_crc_arg_flag;
wire  transparent_crc_memory_controller_enable_a;
wire  transparent_crc_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_a;
wire [1:0] transparent_crc_memory_controller_size_a;
wire  transparent_crc_memory_controller_enable_b;
wire  transparent_crc_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_b;
wire [1:0] transparent_crc_memory_controller_size_b;
reg  transparent_crc_finish_final;
reg  transparent_crc_finish_reg;
wire  transparent_crc_finish;
reg  platform_main_end_start;
reg [31:0] platform_main_end_arg_crc;
reg [31:0] platform_main_end_arg_flag;
wire  platform_main_end_memory_controller_enable_a;
wire  platform_main_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_a;
wire [1:0] platform_main_end_memory_controller_size_a;
wire  platform_main_end_memory_controller_enable_b;
wire  platform_main_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_b;
wire [1:0] platform_main_end_memory_controller_size_b;
reg  platform_main_end_finish_final;
reg  platform_main_end_finish_reg;
wire  platform_main_end_finish;
wire [31:0] platform_main_end_return_val;
reg [31:0] platform_main_end_return_val_reg;


platform_main_begin platform_main_begin (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_begin_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_begin_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_begin_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_begin_memory_controller_in_a),
	.memory_controller_size_a (platform_main_begin_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_begin_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_begin_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_begin_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_begin_memory_controller_in_b),
	.memory_controller_size_b (platform_main_begin_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_begin_start),
	.finish (platform_main_begin_finish)
);

defparam
	platform_main_begin.tag_offset = tag_offset;


crc32_gentab crc32_gentab (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_gentab_memory_controller_enable_a),
	.memory_controller_address_a (crc32_gentab_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_gentab_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_gentab_memory_controller_in_a),
	.memory_controller_size_a (crc32_gentab_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_gentab_memory_controller_enable_b),
	.memory_controller_address_b (crc32_gentab_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_gentab_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_gentab_memory_controller_in_b),
	.memory_controller_size_b (crc32_gentab_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_gentab_start),
	.finish (crc32_gentab_finish)
);

defparam
	crc32_gentab.tag_offset = tag_offset;


func_1 func_1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_1_memory_controller_enable_a),
	.memory_controller_address_a (func_1_memory_controller_address_a),
	.memory_controller_write_enable_a (func_1_memory_controller_write_enable_a),
	.memory_controller_in_a (func_1_memory_controller_in_a),
	.memory_controller_size_a (func_1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_1_memory_controller_enable_b),
	.memory_controller_address_b (func_1_memory_controller_address_b),
	.memory_controller_write_enable_b (func_1_memory_controller_write_enable_b),
	.memory_controller_in_b (func_1_memory_controller_in_b),
	.memory_controller_size_b (func_1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_1_start),
	.finish (func_1_finish),
	.return_val (func_1_return_val)
);

defparam
	func_1.tag_offset = tag_offset;


transparent_crc transparent_crc (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (transparent_crc_memory_controller_enable_a),
	.memory_controller_address_a (transparent_crc_memory_controller_address_a),
	.memory_controller_write_enable_a (transparent_crc_memory_controller_write_enable_a),
	.memory_controller_in_a (transparent_crc_memory_controller_in_a),
	.memory_controller_size_a (transparent_crc_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (transparent_crc_memory_controller_enable_b),
	.memory_controller_address_b (transparent_crc_memory_controller_address_b),
	.memory_controller_write_enable_b (transparent_crc_memory_controller_write_enable_b),
	.memory_controller_in_b (transparent_crc_memory_controller_in_b),
	.memory_controller_size_b (transparent_crc_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (transparent_crc_start),
	.finish (transparent_crc_finish),
	.arg_val (transparent_crc_arg_val),
	.arg_vname (transparent_crc_arg_vname),
	.arg_flag (transparent_crc_arg_flag)
);

defparam
	transparent_crc.tag_offset = tag_offset;


platform_main_end platform_main_end (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_end_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_end_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_end_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_end_memory_controller_in_a),
	.memory_controller_size_a (platform_main_end_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_end_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_end_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_end_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_end_memory_controller_in_b),
	.memory_controller_size_b (platform_main_end_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_end_start),
	.finish (platform_main_end_finish),
	.return_val (platform_main_end_return_val),
	.arg_crc (platform_main_end_arg_crc),
	.arg_flag (platform_main_end_arg_flag)
);

defparam
	platform_main_end.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_F_main_BB__11_19:
		next_state = LEGUP_F_main_BB__11_20;
LEGUP_F_main_BB__11_20:
		next_state = LEGUP_F_main_BB__11_21;
LEGUP_F_main_BB__11_21:
		next_state = LEGUP_function_call_22;
LEGUP_F_main_BB__11_23:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__14_24;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__15_25;
LEGUP_F_main_BB__14_24:
		next_state = LEGUP_F_main_BB__15_25;
LEGUP_F_main_BB__15_25:
		next_state = LEGUP_F_main_BB__16_26;
LEGUP_F_main_BB__16_26:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__18_27:
		next_state = LEGUP_F_main_BB__19_28;
LEGUP_F_main_BB__19_28:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__21_29:
		next_state = LEGUP_F_main_BB__21_30;
LEGUP_F_main_BB__21_30:
		next_state = LEGUP_F_main_BB__21_31;
LEGUP_F_main_BB__21_31:
		next_state = LEGUP_function_call_32;
LEGUP_F_main_BB__21_33:
		next_state = LEGUP_F_main_BB__24_34;
LEGUP_F_main_BB__24_34:
	if ((main_24_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB__33_43;
	else if ((main_24_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB__26_35;
LEGUP_F_main_BB__26_35:
		next_state = LEGUP_F_main_BB__26_36;
LEGUP_F_main_BB__26_36:
		next_state = LEGUP_F_main_BB__26_37;
LEGUP_F_main_BB__26_37:
		next_state = LEGUP_function_call_38;
LEGUP_F_main_BB__26_39:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__29_40;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__30_41;
LEGUP_F_main_BB__29_40:
		next_state = LEGUP_F_main_BB__30_41;
LEGUP_F_main_BB__30_41:
		next_state = LEGUP_F_main_BB__31_42;
LEGUP_F_main_BB__31_42:
		next_state = LEGUP_F_main_BB__24_34;
LEGUP_F_main_BB__33_43:
		next_state = LEGUP_F_main_BB__33_44;
LEGUP_F_main_BB__33_44:
		next_state = LEGUP_F_main_BB__33_45;
LEGUP_F_main_BB__33_45:
		next_state = LEGUP_function_call_46;
LEGUP_F_main_BB__33_47:
		next_state = LEGUP_F_main_BB__33_48;
LEGUP_F_main_BB__33_48:
		next_state = LEGUP_F_main_BB__33_49;
LEGUP_F_main_BB__33_49:
		next_state = LEGUP_function_call_50;
LEGUP_F_main_BB__33_51:
		next_state = LEGUP_F_main_BB__33_52;
LEGUP_F_main_BB__33_52:
		next_state = LEGUP_F_main_BB__33_53;
LEGUP_F_main_BB__33_53:
		next_state = LEGUP_function_call_54;
LEGUP_F_main_BB__33_55:
		next_state = LEGUP_F_main_BB__40_56;
LEGUP_F_main_BB__40_56:
	if ((main_40_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__56_70;
	else if ((main_40_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__42_57;
LEGUP_F_main_BB__42_57:
		next_state = LEGUP_F_main_BB__43_58;
LEGUP_F_main_BB__43_58:
	if ((main_43_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__53_68;
	else if ((main_43_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__45_59;
LEGUP_F_main_BB__45_59:
		next_state = LEGUP_F_main_BB__45_60;
LEGUP_F_main_BB__45_60:
		next_state = LEGUP_F_main_BB__45_61;
LEGUP_F_main_BB__45_61:
		next_state = LEGUP_F_main_BB__45_62;
LEGUP_F_main_BB__45_62:
		next_state = LEGUP_function_call_63;
LEGUP_F_main_BB__45_64:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__49_65;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__50_66;
LEGUP_F_main_BB__49_65:
		next_state = LEGUP_F_main_BB__50_66;
LEGUP_F_main_BB__50_66:
		next_state = LEGUP_F_main_BB__51_67;
LEGUP_F_main_BB__51_67:
		next_state = LEGUP_F_main_BB__43_58;
LEGUP_F_main_BB__53_68:
		next_state = LEGUP_F_main_BB__54_69;
LEGUP_F_main_BB__54_69:
		next_state = LEGUP_F_main_BB__40_56;
LEGUP_F_main_BB__56_70:
		next_state = LEGUP_F_main_BB__56_71;
LEGUP_F_main_BB__56_71:
		next_state = LEGUP_F_main_BB__56_72;
LEGUP_F_main_BB__56_72:
		next_state = LEGUP_function_call_73;
LEGUP_F_main_BB__56_74:
		next_state = LEGUP_0;
LEGUP_F_main_BB__6_16:
	if ((main_6_exitcond7 == 1'd1))
		next_state = LEGUP_F_main_BB__21_29;
	else if ((main_6_exitcond7 == 1'd0))
		next_state = LEGUP_F_main_BB__8_17;
LEGUP_F_main_BB__8_17:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__9_18:
	if ((main_9_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB__18_27;
	else if ((main_9_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB__11_19;
LEGUP_function_call_10:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_function_call_14:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_function_call_2:
	if ((platform_main_begin_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_function_call_22:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__11_23;
LEGUP_function_call_32:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__21_33;
LEGUP_function_call_38:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__26_39;
LEGUP_function_call_4:
	if ((crc32_gentab_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_function_call_46:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__33_47;
LEGUP_function_call_50:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__33_51;
LEGUP_function_call_54:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__33_55;
LEGUP_function_call_6:
	if ((func_1_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_function_call_63:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__45_64;
LEGUP_function_call_73:
	if ((platform_main_end_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__56_74;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %2 = load i32* @g_2, align 4*/
		main_0_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %3 = sext i32 %2 to i64*/
		main_0_3 = $signed(main_0_2);
end
always @(*) begin
	/* main: %0*/
	/*   %4 = load i8* @g_12, align 1*/
		main_0_4 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %0*/
	/*   %5 = zext i8 %4 to i64*/
		main_0_5 = main_0_4;
end
always @(*) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7 = 32'd0;
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_6_7 = main_19_20;
	end
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %exitcond7 = icmp eq i32 %7, 7*/
		main_6_exitcond7 = (main_6_7_reg == 32'd7);
end
always @(*) begin
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10 = 32'd0;
	end
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__16_26) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_9_10 = main_16_17;
	end
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB__16_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %exitcond5 = icmp eq i32 %10, 6*/
		main_9_exitcond5 = (main_9_10_reg == 32'd6);
end
always @(*) begin
	/* main: %11*/
	/*   %scevgep6 = getelementptr [7 x [6 x i32]]* @g_34, i32 0, i32 %7, i32 %10*/
		main_11_scevgep6 = (`TAG_g_g_34_a + ((24 * main_6_7_reg) + (4 * main_9_10_reg)));
end
always @(*) begin
	/* main: %11*/
	/*   %12 = load i32* %scevgep6, align 4*/
		main_11_12 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %11*/
	/*   %13 = zext i32 %12 to i64*/
		main_11_13 = main_11_12;
end
always @(*) begin
	/* main: %16*/
	/*   %17 = add nsw i32 %10, 1*/
		main_16_17 = (main_9_10_reg + 32'd1);
end
always @(*) begin
	/* main: %19*/
	/*   %20 = add nsw i32 %7, 1*/
		main_19_20 = (main_6_7_reg + 32'd1);
end
always @(*) begin
	/* main: %21*/
	/*   %22 = load i32* @g_44, align 4*/
		main_21_22 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %21*/
	/*   %23 = sext i32 %22 to i64*/
		main_21_23 = $signed(main_21_22);
end
always @(*) begin
	/* main: %24*/
	/*   %25 = phi i32 [ 0, %21 ], [ %32, %31 ]*/
	if (((cur_state == LEGUP_F_main_BB__21_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_24_25 = 32'd0;
	end
	/* main: %24*/
	/*   %25 = phi i32 [ 0, %21 ], [ %32, %31 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__31_42) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_24_25 = main_31_32;
	end
end
always @(posedge clk) begin
	/* main: %24*/
	/*   %25 = phi i32 [ 0, %21 ], [ %32, %31 ]*/
	if (((cur_state == LEGUP_F_main_BB__21_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_24_25_reg <= main_24_25;
		if (start == 1'b0 && ^(main_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_25_reg"); $finish; end
	end
	/* main: %24*/
	/*   %25 = phi i32 [ 0, %21 ], [ %32, %31 ]*/
	if (((cur_state == LEGUP_F_main_BB__31_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_24_25_reg <= main_24_25;
		if (start == 1'b0 && ^(main_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %24*/
	/*   %exitcond3 = icmp eq i32 %25, 3*/
		main_24_exitcond3 = (main_24_25_reg == 32'd3);
end
always @(*) begin
	/* main: %26*/
	/*   %scevgep4 = getelementptr [3 x i32]* @g_61, i32 0, i32 %25*/
		main_26_scevgep4 = (`TAG_g_g_61_a + (4 * main_24_25_reg));
end
always @(*) begin
	/* main: %26*/
	/*   %27 = load i32* %scevgep4, align 4*/
		main_26_27 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %26*/
	/*   %28 = sext i32 %27 to i64*/
		main_26_28 = $signed(main_26_27);
end
always @(*) begin
	/* main: %31*/
	/*   %32 = add nsw i32 %25, 1*/
		main_31_32 = (main_24_25_reg + 32'd1);
end
always @(*) begin
	/* main: %33*/
	/*   %34 = load i32* @g_77, align 4*/
		main_33_34 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %33*/
	/*   %35 = sext i32 %34 to i64*/
		main_33_35 = $signed(main_33_34);
end
always @(*) begin
	/* main: %33*/
	/*   %36 = load i16* @g_113, align 2*/
		main_33_36 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %33*/
	/*   %37 = sext i16 %36 to i64*/
		main_33_37 = $signed(main_33_36);
end
always @(*) begin
	/* main: %33*/
	/*   %38 = load i32* @g_114, align 4*/
		main_33_38 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %33*/
	/*   %39 = sext i32 %38 to i64*/
		main_33_39 = $signed(main_33_38);
end
always @(*) begin
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %33 ], [ %55, %54 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_40_41 = 32'd0;
	end
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %33 ], [ %55, %54 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__54_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_40_41 = main_54_55;
	end
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %33 ], [ %55, %54 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %33 ], [ %55, %54 ]*/
	if (((cur_state == LEGUP_F_main_BB__54_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %exitcond1 = icmp eq i32 %41, 9*/
		main_40_exitcond1 = (main_40_41_reg == 32'd9);
end
always @(*) begin
	/* main: %43*/
	/*   %44 = phi i32 [ 0, %42 ], [ %52, %51 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_43_44 = 32'd0;
	end
	/* main: %43*/
	/*   %44 = phi i32 [ 0, %42 ], [ %52, %51 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__51_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_43_44 = main_51_52;
	end
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %44 = phi i32 [ 0, %42 ], [ %52, %51 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_43_44_reg <= main_43_44;
		if (start == 1'b0 && ^(main_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_44_reg"); $finish; end
	end
	/* main: %43*/
	/*   %44 = phi i32 [ 0, %42 ], [ %52, %51 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_43_44_reg <= main_43_44;
		if (start == 1'b0 && ^(main_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %exitcond = icmp eq i32 %44, 1*/
		main_43_exitcond = (main_43_44_reg == 32'd1);
end
always @(*) begin
	/* main: %45*/
	/*   %46 = add i32 %41, %44*/
		main_45_46 = (main_40_41_reg + main_43_44_reg);
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %46 = add i32 %41, %44*/
	if ((cur_state == LEGUP_F_main_BB__45_59)) begin
		main_45_46_reg <= main_45_46;
		if (start == 1'b0 && ^(main_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %scevgep = getelementptr [9 x [1 x i16]]* @g_116, i32 0, i32 %46, i32 0*/
		main_45_scevgep = (`TAG_g_g_116_a + (2 * main_45_46_reg));
end
always @(*) begin
	/* main: %45*/
	/*   %47 = load i16* %scevgep, align 2*/
		main_45_47 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %45*/
	/*   %48 = zext i16 %47 to i64*/
		main_45_48 = main_45_47;
end
always @(*) begin
	/* main: %51*/
	/*   %52 = add nsw i32 %44, 1*/
		main_51_52 = (main_43_44_reg + 32'd1);
end
always @(*) begin
	/* main: %54*/
	/*   %55 = add nsw i32 %41, 1*/
		main_54_55 = (main_40_41_reg + 32'd1);
end
always @(*) begin
	/* main: %56*/
	/*   %57 = load i32* @crc32_context, align 4*/
		main_56_57 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %56*/
	/*   %58 = xor i32 %57, -1*/
		main_56_58 = (main_56_57 ^ -32'd1);
end
always @(*) begin
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
		main_56_59 = platform_main_end_return_val_reg;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		main_56_59_reg <= main_56_59;
		if (start == 1'b0 && ^(main_56_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_59_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		platform_main_begin_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		platform_main_begin_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
end
always @(*) begin
	platform_main_begin_finish_final = platform_main_begin_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		platform_main_begin_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
	if (platform_main_begin_finish) begin
		platform_main_begin_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		crc32_gentab_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_gentab_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
end
always @(*) begin
	crc32_gentab_finish_final = crc32_gentab_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_3))) begin
		crc32_gentab_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
	if (crc32_gentab_finish) begin
		crc32_gentab_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		func_1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		func_1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
end
always @(*) begin
	func_1_finish_final = func_1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_5))) begin
		func_1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
	if (func_1_finish) begin
		func_1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__26_37)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_38)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_45)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_49)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_53)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__45_62)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_63)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_val <= main_0_3;
		if (start == 1'b0 && ^(main_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_val <= main_0_5;
		if (start == 1'b0 && ^(main_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_arg_val <= main_11_13;
		if (start == 1'b0 && ^(main_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_arg_val <= main_21_23;
		if (start == 1'b0 && ^(main_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__26_37)) begin
		transparent_crc_arg_val <= main_26_28;
		if (start == 1'b0 && ^(main_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_45)) begin
		transparent_crc_arg_val <= main_33_35;
		if (start == 1'b0 && ^(main_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_49)) begin
		transparent_crc_arg_val <= main_33_37;
		if (start == 1'b0 && ^(main_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_53)) begin
		transparent_crc_arg_val <= main_33_39;
		if (start == 1'b0 && ^(main_33_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__45_62)) begin
		transparent_crc_arg_val <= main_45_48;
		if (start == 1'b0 && ^(main_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_vname <= `TAG_g_str_a;
		if (start == 1'b0 && ^(`TAG_g_str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_vname <= `TAG_g_str1_a;
		if (start == 1'b0 && ^(`TAG_g_str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_arg_vname <= `TAG_g_str2_a;
		if (start == 1'b0 && ^(`TAG_g_str2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_arg_vname <= `TAG_g_str4_a;
		if (start == 1'b0 && ^(`TAG_g_str4_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__26_37)) begin
		transparent_crc_arg_vname <= `TAG_g_str5_a;
		if (start == 1'b0 && ^(`TAG_g_str5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_45)) begin
		transparent_crc_arg_vname <= `TAG_g_str7_a;
		if (start == 1'b0 && ^(`TAG_g_str7_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_49)) begin
		transparent_crc_arg_vname <= `TAG_g_str8_a;
		if (start == 1'b0 && ^(`TAG_g_str8_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_53)) begin
		transparent_crc_arg_vname <= `TAG_g_str9_a;
		if (start == 1'b0 && ^(`TAG_g_str9_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__45_62)) begin
		transparent_crc_arg_vname <= `TAG_g_str10_a;
		if (start == 1'b0 && ^(`TAG_g_str10_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__11_21)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__26_37)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_45)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_49)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__33_53)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__45_62)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
end
always @(*) begin
	transparent_crc_finish_final = transparent_crc_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_9))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__0_13))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__11_21))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__21_31))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__26_37))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__33_45))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__33_49))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__33_53))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__45_62))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__56_72)) begin
		platform_main_end_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		platform_main_end_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__56_72)) begin
		platform_main_end_arg_crc <= main_56_58;
		if (start == 1'b0 && ^(main_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_crc"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_F_main_BB__56_72)) begin
		platform_main_end_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_flag"); $finish; end
	end
end
always @(*) begin
	platform_main_end_finish_final = platform_main_end_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__56_72))) begin
		platform_main_end_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__56_72))) begin
		platform_main_end_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_return_val_reg <= platform_main_end_return_val;
		if (start == 1'b0 && ^(platform_main_end_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %56*/
	/*   ret i32 %59*/
	if ((cur_state == LEGUP_F_main_BB__56_74)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   %4 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %22 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %26*/
	/*   %27 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__26_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   %34 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   %36 = load i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_main_BB__33_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   %38 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %45*/
	/*   %47 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__45_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %56*/
	/*   %57 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__56_70)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_g_2_a;
	end
	/* main: %0*/
	/*   %4 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = `TAG_g_g_12_a;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_address_a = main_11_scevgep6;
	end
	/* main: %21*/
	/*   %22 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_address_a = `TAG_g_g_44_a;
	end
	/* main: %26*/
	/*   %27 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__26_35)) begin
		memory_controller_address_a = main_26_scevgep4;
	end
	/* main: %33*/
	/*   %34 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_43)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* main: %33*/
	/*   %36 = load i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_main_BB__33_47)) begin
		memory_controller_address_a = `TAG_g_g_113_a;
	end
	/* main: %33*/
	/*   %38 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_51)) begin
		memory_controller_address_a = `TAG_g_g_114_a;
	end
	/* main: %45*/
	/*   %47 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__45_60)) begin
		memory_controller_address_a = main_45_scevgep;
	end
	/* main: %56*/
	/*   %57 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__56_70)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %4 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %22 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %26*/
	/*   %27 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__26_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %33*/
	/*   %34 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %33*/
	/*   %36 = load i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_main_BB__33_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %33*/
	/*   %38 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %45*/
	/*   %47 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__45_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %56*/
	/*   %57 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__56_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   %4 = load i8* @g_12, align 1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %11*/
	/*   %12 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__11_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %22 = load i32* @g_44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__21_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %26*/
	/*   %27 = load i32* %scevgep4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__26_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %33*/
	/*   %34 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %33*/
	/*   %36 = load i16* @g_113, align 2*/
	if ((cur_state == LEGUP_F_main_BB__33_47)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %33*/
	/*   %38 = load i32* @g_114, align 4*/
	if ((cur_state == LEGUP_F_main_BB__33_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %45*/
	/*   %47 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__45_60)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %56*/
	/*   %57 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__56_70)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #2*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #2*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	/* main: %0*/
	/*   %1 = call signext i8 @func_1() #2*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %11*/
	/*   call void @transparent_crc(i64 %13, i8* getelementptr inbounds ([11 x i8]* @.str2, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %21*/
	/*   call void @transparent_crc(i64 %23, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %26*/
	/*   call void @transparent_crc(i64 %28, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_38)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %35, i8* getelementptr inbounds ([5 x i8]* @.str7, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %37, i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %33*/
	/*   call void @transparent_crc(i64 %39, i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_54)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %45*/
	/*   call void @transparent_crc(i64 %48, i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0), i32 0) #2*/
	if ((cur_state == LEGUP_function_call_63)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
	/* main: %56*/
	/*   %59 = call i32 @platform_main_end(i32 %58, i32 0) #2*/
	if ((cur_state == LEGUP_function_call_73)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %56*/
	/*   ret i32 %59*/
	if ((cur_state == LEGUP_F_main_BB__56_74)) begin
		return_val <= main_56_59_reg;
		if (start == 1'b0 && ^(main_56_59_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
