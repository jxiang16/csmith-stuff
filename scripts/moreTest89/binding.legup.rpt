//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Jun 16 17:57:19 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: safe_mod_func_uint32_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
unsigned_modulus_32           1                             
--------------------------------------------------------------------------------
Function: safe_sub_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_div_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
signed_divide_32              1                             
--------------------------------------------------------------------------------
Function: safe_sub_func_int32_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_int32_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_unary_minus_func_int16_t_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_mul_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_uint8_t_u_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_div_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
unsigned_divide_16            1                             
--------------------------------------------------------------------------------
Function: safe_lshift_func_uint16_t_u_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: platform_main_begin
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_gentab
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: func_1
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: transparent_crc
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: platform_main_end
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_8bytes
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_byte
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: safe_add_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: func_11
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_sub_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: func_32
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: safe_lshift_func_int8_t_s_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_int8_t_s_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: func_39
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: safe_add_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_div_func_int32_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
signed_divide_32              1                             
--------------------------------------------------------------------------------
Function: safe_lshift_func_uint8_t_u_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_lshift_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_uint32_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_lshift_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_lshift_func_uint16_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_mul_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_mul_func_int8_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_lshift_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_div_func_int16_t_s_s
--------------------------------------------------------------------------------
Function unit type:           Number Required               
signed_divide_32              1                             
--------------------------------------------------------------------------------
Function: legup_memcpy_4
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             

Running Bipartite Weighted Matching on function: platform_main_begin

Running Bipartite Weighted Matching on function: crc32_gentab
State: LEGUP_F_crc32_gentab_BB__15
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  crc32_gentab_mem_dual_port_0  
  store i32 %crc.0, i32* %scev... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_gentab_mem_dual_port_0  
  store i32 %crc.0, i32* %scev... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %crc.0, i32* %scev... (idx: 0) -> crc32_gentab_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: platform_main_end

Running Bipartite Weighted Matching on function: crc32_byte
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %1 = load i32* @crc32_contex... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %1 = load i32* @crc32_contex... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i32* @crc32_contex... (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %5, align 4 can share an output register with another operation already assigned to crc32_byte_mem_dual_port_0
                                                  crc32_byte_mem_dual_port_0    
  %6 = load i32* %5, align 4 (idx: 0)             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %6 = load i32* %5, align 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %5, align 4 (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* @crc32_co... can share an output register with another operation already assigned to crc32_byte_mem_dual_port_0
                                                  crc32_byte_mem_dual_port_0    
  store i32 %7, i32* @crc32_co... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  store i32 %7, i32* @crc32_co... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* @crc32_co... (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: safe_add_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: func_11

Running Bipartite Weighted Matching on function: safe_sub_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: safe_mod_func_uint32_t_u_u
State: LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3
Binding functional unit type: unsigned_modulus_32
Weight matrix for operation/function unit matching:
                                                  safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0
  %4 = urem i32 %ui1, %ui2 (idx: 0)               0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0
  %4 = urem i32 %ui1, %ui2 (idx: 0)               1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = urem i32 %ui1, %ui2 (idx: 0) -> safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: safe_mul_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: safe_rshift_func_uint8_t_u_s

Running Bipartite Weighted Matching on function: safe_div_func_uint16_t_u_u
State: LEGUP_F_safe_div_func_uint16_t_u_u_BB__3
Binding functional unit type: unsigned_divide_16
Weight matrix for operation/function unit matching:
                                                  safe_div_func_uint16_t_u_u_unsigned_divide_16_0
  %div = udiv i16 %ui1, %ui2 (idx: 0)             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_uint16_t_u_u_unsigned_divide_16_0
  %div = udiv i16 %ui1, %ui2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %div = udiv i16 %ui1, %ui2 (idx: 0) -> safe_div_func_uint16_t_u_u_unsigned_divide_16_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: safe_lshift_func_uint16_t_u_s

Running Bipartite Weighted Matching on function: safe_rshift_func_int8_t_s_u

Running Bipartite Weighted Matching on function: func_39
State: LEGUP_F_func_39_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_39_mem_dual_port_0       
  %1 = load volatile i8* @g_51... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_39_mem_dual_port_0       
  %1 = load volatile i8* @g_51... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load volatile i8* @g_51... (idx: 0) -> func_39_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_39_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i8 %2, i8* @g... can share an output register with another operation already assigned to func_39_mem_dual_port_0
                                                  func_39_mem_dual_port_0       
  store volatile i8 %2, i8* @g... (idx: 0)        5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_39_mem_dual_port_0       
  store volatile i8 %2, i8* @g... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i8 %2, i8* @g... (idx: 0) -> func_39_mem_dual_port_0 (mux inputs: 1)

Running Bipartite Weighted Matching on function: safe_add_func_int8_t_s_s

Running Bipartite Weighted Matching on function: safe_div_func_int32_t_s_s
State: LEGUP_F_safe_div_func_int32_t_s_s_BB__7
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  safe_div_func_int32_t_s_s_signed_divide_32_0
  %8 = sdiv i32 %si1, %si2 (idx: 0)               0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_int32_t_s_s_signed_divide_32_0
  %8 = sdiv i32 %si1, %si2 (idx: 0)               1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %8 = sdiv i32 %si1, %si2 (idx: 0) -> safe_div_func_int32_t_s_s_signed_divide_32_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: safe_lshift_func_uint8_t_u_s

Running Bipartite Weighted Matching on function: safe_rshift_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_add_func_int16_t_s_s

Running Bipartite Weighted Matching on function: safe_rshift_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: safe_lshift_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_sub_func_int16_t_s_s

Running Bipartite Weighted Matching on function: safe_div_func_int8_t_s_s
State: LEGUP_F_safe_div_func_int8_t_s_s_BB__8
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  safe_div_func_int8_t_s_s_signed_divide_32_0
  %11 = sdiv i32 %9, %10 (idx: 0)                 20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_int8_t_s_s_signed_divide_32_0
  %11 = sdiv i32 %9, %10 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %11 = sdiv i32 %9, %10 (idx: 0) -> safe_div_func_int8_t_s_s_signed_divide_32_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: safe_sub_func_int32_t_s_s

Running Bipartite Weighted Matching on function: safe_add_func_int32_t_s_s

Running Bipartite Weighted Matching on function: safe_unary_minus_func_int16_t_s

Running Bipartite Weighted Matching on function: safe_add_func_uint32_t_u_u

Running Bipartite Weighted Matching on function: safe_lshift_func_int8_t_s_s

Running Bipartite Weighted Matching on function: safe_lshift_func_int8_t_s_u

Running Bipartite Weighted Matching on function: safe_rshift_func_int16_t_s_s

Running Bipartite Weighted Matching on function: safe_lshift_func_uint16_t_u_u

Running Bipartite Weighted Matching on function: safe_mul_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_mul_func_int8_t_s_s

Running Bipartite Weighted Matching on function: safe_lshift_func_int16_t_s_s

Running Bipartite Weighted Matching on function: safe_div_func_int16_t_s_s
State: LEGUP_F_safe_div_func_int16_t_s_s_BB__8
Binding functional unit type: signed_divide_32
Weight matrix for operation/function unit matching:
                                                  safe_div_func_int16_t_s_s_signed_divide_32_0
  %11 = sdiv i32 %9, %10 (idx: 0)                 20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_int16_t_s_s_signed_divide_32_0
  %11 = sdiv i32 %9, %10 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %11 = sdiv i32 %9, %10 (idx: 0) -> safe_div_func_int16_t_s_s_signed_divide_32_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: legup_memcpy_4
State: LEGUP_F_legup_memcpy_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        10                            10                            
  store i32* %2, i32** %dt, al... (idx: 1)        20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        1                             0                             
  store i32* %2, i32** %dt, al... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %1, align... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 1)
  store i32* %2, i32** %dt, al... (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %3, i32** %st, al... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %3, i32** %st, al... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32 %4, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %3, i32** %st, al... (idx: 0)        16                            17                            
  store i32 %4, i32* %1, align... (idx: 1)        6                             17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %3, i32** %st, al... (idx: 0)        0                             1                             
  store i32 %4, i32* %1, align... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %1, align... (idx: 1) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 2)
  store i32* %3, i32** %st, al... (idx: 0) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_4_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %1, align 4 can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             -3                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %1, align 4 (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_4_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        7                             19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* %1, align... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32** %st, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %10 = load i32** %st, align ... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %13 = load i32** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %13 = load i32** %dt, align ... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %13 = load i32** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... (idx: 0)        8                             -1                            
  %13 = load i32** %dt, align ... (idx: 1)        8                             -1                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... (idx: 0)        1                             0                             
  %13 = load i32** %dt, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32** %st, align ... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 4)
  %13 = load i32** %dt, align ... (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %11, i32** %st, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %11, i32** %st, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %11, i32** %st, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %12 = load i32* %10, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %12 = load i32* %10, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... (idx: 0)        9                             9                             
  %12 = load i32* %10, align 4 (idx: 1)           9                             9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... (idx: 0)        1                             0                             
  %12 = load i32* %10, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %11, i32** %st, a... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 5)
  %12 = load i32* %10, align 4 (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %14, i32** %dt, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %14, i32** %dt, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... (idx: 0)        20                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %14, i32** %dt, a... (idx: 0) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* %13, ali... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %12, i32* %13, ali... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %12, i32* %13, ali... (idx: 0)        20                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %12, i32* %13, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* %13, ali... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 7)

Running Bipartite Weighted Matching on function: crc32_8bytes

Running Bipartite Weighted Matching on function: func_32
State: LEGUP_F_func_32_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  store i32 -4, i32* @g_59, al... (idx: 0)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  store i32 -4, i32* @g_59, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 -4, i32* @g_59, al... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_32_BB__6
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %9 = load i16* @g_55, align ... can share an output register with another operation already assigned to func_32_mem_dual_port_0
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %9 = load i16* @g_55, align ... (idx: 0)        -5                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %9 = load i16* @g_55, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %9 = load i16* @g_55, align ... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_32_BB__16
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %17 = load i16* @g_55, align... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  %19 = load i32* @g_59, align... can share an output register with another operation already assigned to func_32_mem_dual_port_0
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %17 = load i16* @g_55, align... (idx: 0)        -5                            0                             
  %19 = load i32* @g_59, align... (idx: 1)        -5                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %17 = load i16* @g_55, align... (idx: 0)        1                             0                             
  %19 = load i32* @g_59, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %17 = load i16* @g_55, align... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 0)
  %19 = load i32* @g_59, align... (idx: 1) -> func_32_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_32_BB__30
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %34 = load i16* @g_81, align... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  %34 = load i16* @g_81, align... can share an output register with another operation already assigned to func_32_mem_dual_port_1
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %34 = load i16* @g_81, align... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %34 = load i16* @g_81, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %34 = load i16* @g_81, align... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_32_BB__30
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %38 = load i32* @g_54, align... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  %38 = load i32* @g_54, align... can share an output register with another operation already assigned to func_32_mem_dual_port_1
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %38 = load i32* @g_54, align... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %38 = load i32* @g_54, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = load i32* @g_54, align... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_32_BB__43
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %46 = load i32* @g_54, align... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  %46 = load i32* @g_54, align... can share an output register with another operation already assigned to func_32_mem_dual_port_1
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %46 = load i32* @g_54, align... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %46 = load i32* @g_54, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %46 = load i32* @g_54, align... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_func_32_BB__43
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %49, i32* @g_119, ... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  store i32 %49, i32* @g_119, ... can share an output register with another operation already assigned to func_32_mem_dual_port_1
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  store i32 %49, i32* @g_119, ... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  store i32 %49, i32* @g_119, ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %49, i32* @g_119, ... (idx: 0) -> func_32_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_32_BB__43
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %63 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  %63 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_32_mem_dual_port_1
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %63 = load i32* @g_3, align ... (idx: 0)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %63 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %63 = load i32* @g_3, align ... (idx: 0) -> func_32_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_32_BB__65
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %69 = load i32* @g_119, alig... can share an output register with another operation already assigned to func_32_mem_dual_port_0
  %69 = load i32* @g_119, alig... can share an output register with another operation already assigned to func_32_mem_dual_port_1
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %69 = load i32* @g_119, alig... (idx: 0)        -4                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_32_mem_dual_port_0       func_32_mem_dual_port_1       
  %69 = load i32* @g_119, alig... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %69 = load i32* @g_119, alig... (idx: 0) -> func_32_mem_dual_port_1 (mux inputs: 0)

Running Bipartite Weighted Matching on function: func_1
State: LEGUP_F_func_1_BB__1
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %storemerge, i32* ... (idx: 0)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %storemerge, i32* ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %storemerge, i32* ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_1_BB__3
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %7 = load i32* @g_3, align 4 can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %7 = load i32* @g_3, align 4 (idx: 0)           -4                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %7 = load i32* @g_3, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %7 = load i32* @g_3, align 4 (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_1_BB__21
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %26 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %28 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %26 = load i32* @g_3, align ... (idx: 0)        -4                            0                             
  %28 = load i32* @g_3, align ... (idx: 1)        -4                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %26 = load i32* @g_3, align ... (idx: 0)        1                             0                             
  %28 = load i32* @g_3, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %26 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
  %28 = load i32* @g_3, align ... (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__21
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %26, i32* %27, ali... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %26, i32* %27, ali... (idx: 0)        16                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %26, i32* %27, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %26, i32* %27, ali... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_func_1_BB__21
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %32 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %32 = load i32* @g_3, align ... (idx: 0)        -2                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %32 = load i32* @g_3, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %32 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %38 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %38 = load i32* @g_3, align ... (idx: 0)        -2                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %38 = load i32* @g_3, align ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %41 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %41 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %41 = load i32* @g_3, align ... (idx: 0)        -2                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %41 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %41 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %46 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %46 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %46 = load i32* @g_3, align ... (idx: 0)        -2                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %46 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %46 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %52 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %52 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
  %57 = load i16* @g_55, align... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %57 = load i16* @g_55, align... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %52 = load i32* @g_3, align ... (idx: 0)        -2                            -5                            
  %57 = load i16* @g_55, align... (idx: 1)        -2                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %52 = load i32* @g_3, align ... (idx: 0)        1                             0                             
  %57 = load i16* @g_55, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %52 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 3)
  %57 = load i16* @g_55, align... (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %60 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %60 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %60 = load i32* @g_3, align ... (idx: 0)        -2                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %60 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %60 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %64 = load i32* @g_54, align... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %64 = load i32* @g_54, align... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %64 = load i32* @g_54, align... (idx: 0)        -2                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %64 = load i32* @g_54, align... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %64 = load i32* @g_54, align... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %69 = load i16* @g_123, alig... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %69 = load i16* @g_123, alig... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %69 = load i16* @g_123, alig... (idx: 0)        -2                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %69 = load i16* @g_123, alig... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %69 = load i16* @g_123, alig... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__35
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %70, i16* @g_123, ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  store i16 %70, i16* @g_123, ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i16 %70, i16* @g_123, ... (idx: 0)        8                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i16 %70, i16* @g_123, ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %70, i16* @g_123, ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_func_1_BB__71
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %72 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %72 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %72 = load i32* @g_3, align ... (idx: 0)        -2                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %72 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %72 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_func_1_BB__74
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %75 = load i16* @g_81, align... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %75 = load i16* @g_81, align... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %75 = load i16* @g_81, align... (idx: 0)        -2                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %75 = load i16* @g_81, align... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %75 = load i16* @g_81, align... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 1)

Running Bipartite Weighted Matching on function: transparent_crc
State: LEGUP_F_transparent_crc_BB__2
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  transparent_crc_mem_dual_port_0
  %3 = load i32* @crc32_contex... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  transparent_crc_mem_dual_port_0
  %3 = load i32* @crc32_contex... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* @crc32_contex... (idx: 0) -> transparent_crc_mem_dual_port_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %2 = load i32* @g_3, align 4 (idx: 0)           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %2 = load i32* @g_3, align 4 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %2 = load i32* @g_3, align 4 (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load volatile i8* @g_51... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %4 = load volatile i8* @g_51... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %4 = load volatile i8* @g_51... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load volatile i8* @g_51... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* @g_54, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %6 = load i32* @g_54, align ... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %6 = load i32* @g_54, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* @g_54, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %8 = load i16* @g_55, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %8 = load i16* @g_55, align ... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %8 = load i16* @g_55, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %8 = load i16* @g_55, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* @g_59, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %10 = load i32* @g_59, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %10 = load i32* @g_59, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* @g_59, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %12 = load i16* @g_81, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %12 = load i16* @g_81, align... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %12 = load i16* @g_81, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load i16* @g_81, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i32* @g_119, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %14 = load i32* @g_119, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %14 = load i32* @g_119, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i32* @g_119, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i16* @g_123, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %16 = load i16* @g_123, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %16 = load i16* @g_123, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i16* @g_123, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %18 = load i32* @crc32_conte... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %18 = load i32* @crc32_conte... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %18 = load i32* @crc32_conte... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %18 = load i32* @crc32_conte... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)

