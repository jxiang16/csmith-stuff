//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 12 20:22:33 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: platform_main_begin
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_gentab
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: func_1
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
--------------------------------------------------------------------------------
Function: transparent_crc
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: platform_main_end
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_8bytes
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: crc32_byte
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: safe_div_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
unsigned_divide_8             1                             
--------------------------------------------------------------------------------
Function: func_13
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
--------------------------------------------------------------------------------
Function: func_17
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_uint32_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_rshift_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: safe_add_func_uint8_t_u_u
--------------------------------------------------------------------------------
Function unit type:           Number Required               
--------------------------------------------------------------------------------
Function: legup_memcpy_4
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             

Running Bipartite Weighted Matching on function: platform_main_begin

Running Bipartite Weighted Matching on function: crc32_gentab
State: LEGUP_F_crc32_gentab_BB__15
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  crc32_gentab_mem_dual_port_0  
  store i32 %crc.0, i32* %scev... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_gentab_mem_dual_port_0  
  store i32 %crc.0, i32* %scev... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %crc.0, i32* %scev... (idx: 0) -> crc32_gentab_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: platform_main_end

Running Bipartite Weighted Matching on function: crc32_byte
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %1 = load i32* @crc32_contex... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %1 = load i32* @crc32_contex... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i32* @crc32_contex... (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %5, align 4 can share an output register with another operation already assigned to crc32_byte_mem_dual_port_0
                                                  crc32_byte_mem_dual_port_0    
  %6 = load i32* %5, align 4 (idx: 0)             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  %6 = load i32* %5, align 4 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %5, align 4 (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_crc32_byte_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* @crc32_co... can share an output register with another operation already assigned to crc32_byte_mem_dual_port_0
                                                  crc32_byte_mem_dual_port_0    
  store i32 %7, i32* @crc32_co... (idx: 0)        6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  crc32_byte_mem_dual_port_0    
  store i32 %7, i32* @crc32_co... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* @crc32_co... (idx: 0) -> crc32_byte_mem_dual_port_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: safe_div_func_uint8_t_u_u
State: LEGUP_F_safe_div_func_uint8_t_u_u_BB__3
Binding functional unit type: unsigned_divide_8
Weight matrix for operation/function unit matching:
                                                  safe_div_func_uint8_t_u_u_unsigned_divide_8_0
  %div = udiv i8 %ui1, %ui2 (idx: 0)              0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  safe_div_func_uint8_t_u_u_unsigned_divide_8_0
  %div = udiv i8 %ui1, %ui2 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %div = udiv i8 %ui1, %ui2 (idx: 0) -> safe_div_func_uint8_t_u_u_unsigned_divide_8_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: func_13
State: LEGUP_F_func_13_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_13_mem_dual_port_0       
  %1 = load i32* @g_6, align 4 (idx: 0)           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_13_mem_dual_port_0       
  %1 = load i32* @g_6, align 4 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i32* @g_6, align 4 (idx: 0) -> func_13_mem_dual_port_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: func_17

Running Bipartite Weighted Matching on function: safe_add_func_uint32_t_u_u

Running Bipartite Weighted Matching on function: safe_rshift_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: safe_add_func_uint8_t_u_u

Running Bipartite Weighted Matching on function: legup_memcpy_4
State: LEGUP_F_legup_memcpy_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        10                            10                            
  store i32* %2, i32** %dt, al... (idx: 1)        20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %n, i32* %1, align... (idx: 0)        1                             0                             
  store i32* %2, i32** %dt, al... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %1, align... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 1)
  store i32* %2, i32** %dt, al... (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %3, i32** %st, al... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %3, i32** %st, al... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32 %4, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %4, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %3, i32** %st, al... (idx: 0)        16                            17                            
  store i32 %4, i32* %1, align... (idx: 1)        6                             17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %3, i32** %st, al... (idx: 0)        0                             1                             
  store i32 %4, i32* %1, align... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %4, i32* %1, align... (idx: 1) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 2)
  store i32* %3, i32** %st, al... (idx: 0) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_4_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %1, align 4 can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %6 = load i32* %1, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             -3                            9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %6 = load i32* %1, align 4 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %1, align 4 (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memcpy_4_BB__5
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %7, i32* %1, align... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %7, i32* %1, align... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        7                             19                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %7, i32* %1, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %7, i32* %1, align... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32** %st, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %10 = load i32** %st, align ... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %13 = load i32** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %13 = load i32** %dt, align ... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %13 = load i32** %dt, align ... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... (idx: 0)        8                             -1                            
  %13 = load i32** %dt, align ... (idx: 1)        8                             -1                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  %10 = load i32** %st, align ... (idx: 0)        1                             0                             
  %13 = load i32** %dt, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32** %st, align ... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 4)
  %13 = load i32** %dt, align ... (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %11, i32** %st, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %11, i32** %st, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %11, i32** %st, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  %12 = load i32* %10, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  %12 = load i32* %10, align 4 can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... (idx: 0)        9                             9                             
  %12 = load i32* %10, align 4 (idx: 1)           9                             9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %11, i32** %st, a... (idx: 0)        1                             0                             
  %12 = load i32* %10, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %11, i32** %st, a... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 5)
  %12 = load i32* %10, align 4 (idx: 1) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %14, i32** %dt, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32* %14, i32** %dt, a... can share an input with another operation already assigned to legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... (idx: 0)        20                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32* %14, i32** %dt, a... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %14, i32** %dt, a... (idx: 0) -> legup_memcpy_4_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_legup_memcpy_4_BB__9
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* %13, ali... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_0
  store i32 %12, i32* %13, ali... can share an output register with another operation already assigned to legup_memcpy_4_mem_dual_port_1
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %12, i32* %13, ali... (idx: 0)        20                            21                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memcpy_4_mem_dual_port_0legup_memcpy_4_mem_dual_port_1
  store i32 %12, i32* %13, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* %13, ali... (idx: 0) -> legup_memcpy_4_mem_dual_port_0 (mux inputs: 7)

Running Bipartite Weighted Matching on function: func_1
State: LEGUP_F_func_1_BB__3
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i16 9015, i16* %scevge... (idx: 0)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i16 9015, i16* %scevge... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 9015, i16* %scevge... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_func_1_BB__7
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %storemerge, i32* ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %storemerge, i32* ... (idx: 0)        6                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %storemerge, i32* ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %storemerge, i32* ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_func_1_BB__10
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %storemerge1, i32*... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %storemerge1, i32*... (idx: 0)        7                             10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 %storemerge1, i32*... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %storemerge1, i32*... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_func_1_BB__12
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i16* %13, align 2 can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %16 = load volatile i32* @g_... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %14 = load i16* %13, align 2 (idx: 0)           8                             10                            
  %16 = load volatile i32* @g_... (idx: 1)        -2                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %14 = load i16* %13, align 2 (idx: 0)           1                             0                             
  %16 = load volatile i32* @g_... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i16* %13, align 2 (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 4)
  %16 = load volatile i32* @g_... (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__12
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 -50606592, i32* @g... can share an output register with another operation already assigned to func_1_mem_dual_port_0
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 -50606592, i32* @g... (idx: 0)        -1                            0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  store i32 -50606592, i32* @g... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 -50606592, i32* @g... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_func_1_BB__12
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %19 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %19 = load i32* @g_3, align ... (idx: 0)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %19 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__29
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %30 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %30 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %30 = load i32* @g_6, align ... (idx: 0)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %30 = load i32* @g_6, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %30 = load i32* @g_6, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__33
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %34 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %34 = load i32* @g_3, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %34 = load i32* @g_3, align ... (idx: 0)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %34 = load i32* @g_3, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %34 = load i32* @g_3, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__36
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %37 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %37 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
  %39 = load i32* @g_21, align... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %39 = load i32* @g_21, align... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %37 = load i32* @g_6, align ... (idx: 0)        -1                            -5                            
  %39 = load i32* @g_21, align... (idx: 1)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %37 = load i32* @g_6, align ... (idx: 0)        1                             0                             
  %39 = load i32* @g_21, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %37 = load i32* @g_6, align ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 4)
  %39 = load i32* @g_21, align... (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__42
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %43 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %43 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
  %46 = load i32* @g_21, align... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %46 = load i32* @g_21, align... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %43 = load i32* @g_6, align ... (idx: 0)        -1                            -5                            
  %46 = load i32* @g_21, align... (idx: 1)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %43 = load i32* @g_6, align ... (idx: 0)        1                             0                             
  %46 = load i32* @g_21, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %43 = load i32* @g_6, align ... (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 4)
  %46 = load i32* @g_21, align... (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__42
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %49 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %49 = load i32* @g_6, align ... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %49 = load i32* @g_6, align ... (idx: 0)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %49 = load i32* @g_6, align ... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %49 = load i32* @g_6, align ... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__42
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %54 = load i16* %53, align 2 can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %54 = load i16* %53, align 2 can share an output register with another operation already assigned to func_1_mem_dual_port_1
  %58 = load volatile i32* @g_... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %58 = load volatile i32* @g_... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %54 = load i16* %53, align 2 (idx: 0)           9                             5                             
  %58 = load volatile i32* @g_... (idx: 1)        -1                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %54 = load i16* %53, align 2 (idx: 0)           1                             0                             
  %58 = load volatile i32* @g_... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %54 = load i16* %53, align 2 (idx: 0) -> func_1_mem_dual_port_0 (mux inputs: 5)
  %58 = load volatile i32* @g_... (idx: 1) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__62
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %63 = load i32* getelementpt... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %63 = load i32* getelementpt... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %63 = load i32* getelementpt... (idx: 0)        0                             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %63 = load i32* getelementpt... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %63 = load i32* getelementpt... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__62
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %66 = load i32* getelementpt... can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %66 = load i32* getelementpt... can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %66 = load i32* getelementpt... (idx: 0)        0                             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %66 = load i32* getelementpt... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %66 = load i32* getelementpt... (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_func_1_BB__71
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %73 = load i16* %72, align 2 can share an output register with another operation already assigned to func_1_mem_dual_port_0
  %73 = load i16* %72, align 2 can share an output register with another operation already assigned to func_1_mem_dual_port_1
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %73 = load i16* %72, align 2 (idx: 0)           10                            5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  func_1_mem_dual_port_0        func_1_mem_dual_port_1        
  %73 = load i16* %72, align 2 (idx: 0)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %73 = load i16* %72, align 2 (idx: 0) -> func_1_mem_dual_port_1 (mux inputs: 1)

Running Bipartite Weighted Matching on function: crc32_8bytes

Running Bipartite Weighted Matching on function: transparent_crc
State: LEGUP_F_transparent_crc_BB__2
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  transparent_crc_mem_dual_port_0
  %3 = load i32* @crc32_contex... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  transparent_crc_mem_dual_port_0
  %3 = load i32* @crc32_contex... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i32* @crc32_contex... (idx: 0) -> transparent_crc_mem_dual_port_0 (mux inputs: 0)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %2 = load volatile i32* @g_2... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %2 = load volatile i32* @g_2... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %2 = load volatile i32* @g_2... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i32* @g_3, align 4 can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %4 = load i32* @g_3, align 4 (idx: 0)           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %4 = load i32* @g_3, align 4 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i32* @g_3, align 4 (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* @g_6, align 4 can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %6 = load i32* @g_6, align 4 (idx: 0)           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %6 = load i32* @g_6, align 4 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* @g_6, align 4 (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %8 = load i32* @g_21, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %8 = load i32* @g_21, align ... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %8 = load i32* @g_21, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %8 = load i32* @g_21, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB__12
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %13 = load i32* %scevgep, al... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %13 = load i32* %scevgep, al... (idx: 0)        5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %13 = load i32* %scevgep, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %13 = load i32* %scevgep, al... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__19
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %20 = load i32* @crc32_conte... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %20 = load i32* @crc32_conte... (idx: 0)        -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %20 = load i32* @crc32_conte... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = load i32* @crc32_conte... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)

