//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Jun 13 18:44:46 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 25
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %l_4 = alloca [7 x i16], align 2
`define TAG_func_1_0_l_4 `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_func_1_0_l_4_a {`TAG_func_1_0_l_4, 23'd0}
//   %l_51 = alloca [8 x i16], align 2
`define TAG_func_7_0_l_51 `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_func_7_0_l_51_a {`TAG_func_7_0_l_51, 23'd0}
//   %l_76 = alloca [2 x [8 x i32]], align 4
`define TAG_func_7_0_l_76 `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_func_7_0_l_76_a {`TAG_func_7_0_l_76, 23'd0}
// @crc32_context = internal global i32 -1, align 4
`define TAG_g_crc32_context `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_crc32_context_a {`TAG_g_crc32_context, 23'd0}
// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
`define TAG_g_crc32_tab `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_crc32_tab_a {`TAG_g_crc32_tab, 23'd0}
// @func_7.l_51 = private unnamed_addr constant [8 x i16] [i16 28655, i16 28655, i16 30401, i16 28655, i16 28655, i16 30401, i16 28655, i16 28655], align 2
`define TAG_g_func_7l_51 `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_func_7l_51_a {`TAG_g_func_7l_51, 23'd0}
// @func_7.l_76 = private unnamed_addr constant [2 x [8 x i32]] [[8 x i32] [i32 3, i32 -5, i32 3, i32 3, i32 -5, i32 3, i32 3, i32 -5], [8 x i32] [i32 -5, i32 3, i32 3, i32 -5, i32 3, i32 3, i32 -5, i32 ...
`define TAG_g_func_7l_76 `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_func_7l_76_a {`TAG_g_func_7l_76, 23'd0}
// @g_22 = internal global i32 610651448, align 4
`define TAG_g_g_22 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_g_22_a {`TAG_g_g_22, 23'd0}
// @g_37 = internal global i32 -1440149336, align 4
`define TAG_g_g_37 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_g_37_a {`TAG_g_g_37, 23'd0}
// @g_38 = internal global [7 x i32] zeroinitializer, align 4
`define TAG_g_g_38 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_g_38_a {`TAG_g_g_38, 23'd0}
// @g_77 = internal global i32 -843448218, align 4
`define TAG_g_g_77 `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_g_77_a {`TAG_g_g_77, 23'd0}
// @g_78 = internal global [6 x i16] [i16 -1, i16 -1, i16 22749, i16 -1, i16 -1, i16 22749], align 2
`define TAG_g_g_78 `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_g_78_a {`TAG_g_g_78, 23'd0}
// @g_79 = internal global i32 -1, align 4
`define TAG_g_g_79 `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_g_79_a {`TAG_g_g_79, 23'd0}
// @.str = private unnamed_addr constant [5 x i8] c"g_22\00", align 1
`define TAG_g_str `MEMORY_CONTROLLER_TAG_SIZE'd3
// @.str1 = private unnamed_addr constant [5 x i8] c"g_37\00", align 1
`define TAG_g_str1 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_str1_a {`TAG_g_str1, 23'd0}
// @.str2 = private unnamed_addr constant [8 x i8] c"g_38[i]\00", align 1
`define TAG_g_str2 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_str2_a {`TAG_g_str2, 23'd0}
// @.str4 = private unnamed_addr constant [5 x i8] c"g_77\00", align 1
`define TAG_g_str4 `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_str4_a {`TAG_g_str4, 23'd0}
// @.str5 = private unnamed_addr constant [8 x i8] c"g_78[i]\00", align 1
`define TAG_g_str5 `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_str5_a {`TAG_g_str5, 23'd0}
// @.str6 = private unnamed_addr constant [5 x i8] c"g_79\00", align 1
`define TAG_g_str6 `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_str6_a {`TAG_g_str6, 23'd0}
`define TAG_g_str_a {`TAG_g_str, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_2_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_legup_memcpy_2_0_1_a {`TAG_legup_memcpy_2_0_1, 23'd0}
//   %dt = alloca i16*, align 4
`define TAG_legup_memcpy_2_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_legup_memcpy_2_0_dt_a {`TAG_legup_memcpy_2_0_dt, 23'd0}
//   %st = alloca i16*, align 4
`define TAG_legup_memcpy_2_0_st `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_legup_memcpy_2_0_st_a {`TAG_legup_memcpy_2_0_st, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_4_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_legup_memcpy_4_0_1_a {`TAG_legup_memcpy_4_0_1, 23'd0}
//   %dt = alloca i32*, align 4
`define TAG_legup_memcpy_4_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd25
`define TAG_legup_memcpy_4_0_dt_a {`TAG_legup_memcpy_4_0_dt, 23'd0}
//   %st = alloca i32*, align 4
`define TAG_legup_memcpy_4_0_st `MEMORY_CONTROLLER_TAG_SIZE'd26
`define TAG_legup_memcpy_4_0_st_a {`TAG_legup_memcpy_4_0_st, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] g_22_address_a;
reg [0:0] g_22_address_b;
reg g_22_write_enable_a;
reg g_22_write_enable_b;
reg [31:0] g_22_in_a;
reg [31:0] g_22_in_b;
wire [31:0] g_22_out_a;
wire [31:0] g_22_out_b;

// @g_22 = internal global i32 610651448, align 4
ram_dual_port g_22 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_22_address_a ),
	.address_b( g_22_address_b ),
	.wren_a( g_22_write_enable_a ),
	.wren_b( g_22_write_enable_b ),
	.data_a( g_22_in_a ),
	.data_b( g_22_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_22_out_a ),
	.q_b( g_22_out_b)
);
defparam g_22.width_a = 32;
defparam g_22.width_b = 32;
defparam g_22.widthad_a = 1;
defparam g_22.widthad_b = 1;
defparam g_22.width_be_a = 1;
defparam g_22.width_be_b = 1;
defparam g_22.numwords_a = 1;
defparam g_22.numwords_b = 1;
defparam g_22.latency = ram_latency;
defparam g_22.init_file = "g_22.mif";

reg [2:0] str_address_a;
reg [2:0] str_address_b;
reg str_write_enable_a;
reg str_write_enable_b;
reg [7:0] str_in_a;
reg [7:0] str_in_b;
wire [7:0] str_out_a;
wire [7:0] str_out_b;

// @.str = private unnamed_addr constant [5 x i8] c"g_22\00", align 1
rom_dual_port str (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str_address_a ),
	.address_b( str_address_b ),
	.q_a( str_out_a ),
	.q_b( str_out_b)
);
defparam str.width_a = 8;
defparam str.width_b = 8;
defparam str.widthad_a = 3;
defparam str.widthad_b = 3;
defparam str.numwords_a = 5;
defparam str.numwords_b = 5;
defparam str.latency = ram_latency;
defparam str.init_file = "str.mif";

reg [0:0] g_37_address_a;
reg [0:0] g_37_address_b;
reg g_37_write_enable_a;
reg g_37_write_enable_b;
reg [31:0] g_37_in_a;
reg [31:0] g_37_in_b;
wire [31:0] g_37_out_a;
wire [31:0] g_37_out_b;

// @g_37 = internal global i32 -1440149336, align 4
ram_dual_port g_37 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_37_address_a ),
	.address_b( g_37_address_b ),
	.wren_a( g_37_write_enable_a ),
	.wren_b( g_37_write_enable_b ),
	.data_a( g_37_in_a ),
	.data_b( g_37_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_37_out_a ),
	.q_b( g_37_out_b)
);
defparam g_37.width_a = 32;
defparam g_37.width_b = 32;
defparam g_37.widthad_a = 1;
defparam g_37.widthad_b = 1;
defparam g_37.width_be_a = 1;
defparam g_37.width_be_b = 1;
defparam g_37.numwords_a = 1;
defparam g_37.numwords_b = 1;
defparam g_37.latency = ram_latency;
defparam g_37.init_file = "g_37.mif";

reg [2:0] str1_address_a;
reg [2:0] str1_address_b;
reg str1_write_enable_a;
reg str1_write_enable_b;
reg [7:0] str1_in_a;
reg [7:0] str1_in_b;
wire [7:0] str1_out_a;
wire [7:0] str1_out_b;

// @.str1 = private unnamed_addr constant [5 x i8] c"g_37\00", align 1
rom_dual_port str1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str1_address_a ),
	.address_b( str1_address_b ),
	.q_a( str1_out_a ),
	.q_b( str1_out_b)
);
defparam str1.width_a = 8;
defparam str1.width_b = 8;
defparam str1.widthad_a = 3;
defparam str1.widthad_b = 3;
defparam str1.numwords_a = 5;
defparam str1.numwords_b = 5;
defparam str1.latency = ram_latency;
defparam str1.init_file = "str1.mif";

reg [2:0] g_38_address_a;
reg [2:0] g_38_address_b;
reg g_38_write_enable_a;
reg g_38_write_enable_b;
reg [31:0] g_38_in_a;
reg [31:0] g_38_in_b;
wire [31:0] g_38_out_a;
wire [31:0] g_38_out_b;

// @g_38 = internal global [7 x i32] zeroinitializer, align 4
ram_dual_port g_38 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_38_address_a ),
	.address_b( g_38_address_b ),
	.wren_a( g_38_write_enable_a ),
	.wren_b( g_38_write_enable_b ),
	.data_a( g_38_in_a ),
	.data_b( g_38_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_38_out_a ),
	.q_b( g_38_out_b)
);
defparam g_38.width_a = 32;
defparam g_38.width_b = 32;
defparam g_38.widthad_a = 3;
defparam g_38.widthad_b = 3;
defparam g_38.width_be_a = 1;
defparam g_38.width_be_b = 1;
defparam g_38.numwords_a = 7;
defparam g_38.numwords_b = 7;
defparam g_38.latency = ram_latency;
defparam g_38.init_file = "g_38.mif";

reg [2:0] str2_address_a;
reg [2:0] str2_address_b;
reg str2_write_enable_a;
reg str2_write_enable_b;
reg [7:0] str2_in_a;
reg [7:0] str2_in_b;
wire [7:0] str2_out_a;
wire [7:0] str2_out_b;

// @.str2 = private unnamed_addr constant [8 x i8] c"g_38[i]\00", align 1
rom_dual_port str2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str2_address_a ),
	.address_b( str2_address_b ),
	.q_a( str2_out_a ),
	.q_b( str2_out_b)
);
defparam str2.width_a = 8;
defparam str2.width_b = 8;
defparam str2.widthad_a = 3;
defparam str2.widthad_b = 3;
defparam str2.numwords_a = 8;
defparam str2.numwords_b = 8;
defparam str2.latency = ram_latency;
defparam str2.init_file = "str2.mif";

reg [0:0] g_77_address_a;
reg [0:0] g_77_address_b;
reg g_77_write_enable_a;
reg g_77_write_enable_b;
reg [31:0] g_77_in_a;
reg [31:0] g_77_in_b;
wire [31:0] g_77_out_a;
wire [31:0] g_77_out_b;

// @g_77 = internal global i32 -843448218, align 4
ram_dual_port g_77 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_77_address_a ),
	.address_b( g_77_address_b ),
	.wren_a( g_77_write_enable_a ),
	.wren_b( g_77_write_enable_b ),
	.data_a( g_77_in_a ),
	.data_b( g_77_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_77_out_a ),
	.q_b( g_77_out_b)
);
defparam g_77.width_a = 32;
defparam g_77.width_b = 32;
defparam g_77.widthad_a = 1;
defparam g_77.widthad_b = 1;
defparam g_77.width_be_a = 1;
defparam g_77.width_be_b = 1;
defparam g_77.numwords_a = 1;
defparam g_77.numwords_b = 1;
defparam g_77.latency = ram_latency;
defparam g_77.init_file = "g_77.mif";

reg [2:0] str4_address_a;
reg [2:0] str4_address_b;
reg str4_write_enable_a;
reg str4_write_enable_b;
reg [7:0] str4_in_a;
reg [7:0] str4_in_b;
wire [7:0] str4_out_a;
wire [7:0] str4_out_b;

// @.str4 = private unnamed_addr constant [5 x i8] c"g_77\00", align 1
rom_dual_port str4 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str4_address_a ),
	.address_b( str4_address_b ),
	.q_a( str4_out_a ),
	.q_b( str4_out_b)
);
defparam str4.width_a = 8;
defparam str4.width_b = 8;
defparam str4.widthad_a = 3;
defparam str4.widthad_b = 3;
defparam str4.numwords_a = 5;
defparam str4.numwords_b = 5;
defparam str4.latency = ram_latency;
defparam str4.init_file = "str4.mif";

reg [2:0] g_78_address_a;
reg [2:0] g_78_address_b;
reg g_78_write_enable_a;
reg g_78_write_enable_b;
reg [15:0] g_78_in_a;
reg [15:0] g_78_in_b;
wire [15:0] g_78_out_a;
wire [15:0] g_78_out_b;

// @g_78 = internal global [6 x i16] [i16 -1, i16 -1, i16 22749, i16 -1, i16 -1, i16 22749], align 2
ram_dual_port g_78 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_78_address_a ),
	.address_b( g_78_address_b ),
	.wren_a( g_78_write_enable_a ),
	.wren_b( g_78_write_enable_b ),
	.data_a( g_78_in_a ),
	.data_b( g_78_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_78_out_a ),
	.q_b( g_78_out_b)
);
defparam g_78.width_a = 16;
defparam g_78.width_b = 16;
defparam g_78.widthad_a = 3;
defparam g_78.widthad_b = 3;
defparam g_78.width_be_a = 1;
defparam g_78.width_be_b = 1;
defparam g_78.numwords_a = 6;
defparam g_78.numwords_b = 6;
defparam g_78.latency = ram_latency;
defparam g_78.init_file = "g_78.mif";

reg [2:0] str5_address_a;
reg [2:0] str5_address_b;
reg str5_write_enable_a;
reg str5_write_enable_b;
reg [7:0] str5_in_a;
reg [7:0] str5_in_b;
wire [7:0] str5_out_a;
wire [7:0] str5_out_b;

// @.str5 = private unnamed_addr constant [8 x i8] c"g_78[i]\00", align 1
rom_dual_port str5 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str5_address_a ),
	.address_b( str5_address_b ),
	.q_a( str5_out_a ),
	.q_b( str5_out_b)
);
defparam str5.width_a = 8;
defparam str5.width_b = 8;
defparam str5.widthad_a = 3;
defparam str5.widthad_b = 3;
defparam str5.numwords_a = 8;
defparam str5.numwords_b = 8;
defparam str5.latency = ram_latency;
defparam str5.init_file = "str5.mif";

reg [0:0] g_79_address_a;
reg [0:0] g_79_address_b;
reg g_79_write_enable_a;
reg g_79_write_enable_b;
reg [31:0] g_79_in_a;
reg [31:0] g_79_in_b;
wire [31:0] g_79_out_a;
wire [31:0] g_79_out_b;

// @g_79 = internal global i32 -1, align 4
ram_dual_port g_79 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_79_address_a ),
	.address_b( g_79_address_b ),
	.wren_a( g_79_write_enable_a ),
	.wren_b( g_79_write_enable_b ),
	.data_a( g_79_in_a ),
	.data_b( g_79_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_79_out_a ),
	.q_b( g_79_out_b)
);
defparam g_79.width_a = 32;
defparam g_79.width_b = 32;
defparam g_79.widthad_a = 1;
defparam g_79.widthad_b = 1;
defparam g_79.width_be_a = 1;
defparam g_79.width_be_b = 1;
defparam g_79.numwords_a = 1;
defparam g_79.numwords_b = 1;
defparam g_79.latency = ram_latency;
defparam g_79.init_file = "g_79.mif";

reg [2:0] str6_address_a;
reg [2:0] str6_address_b;
reg str6_write_enable_a;
reg str6_write_enable_b;
reg [7:0] str6_in_a;
reg [7:0] str6_in_b;
wire [7:0] str6_out_a;
wire [7:0] str6_out_b;

// @.str6 = private unnamed_addr constant [5 x i8] c"g_79\00", align 1
rom_dual_port str6 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str6_address_a ),
	.address_b( str6_address_b ),
	.q_a( str6_out_a ),
	.q_b( str6_out_b)
);
defparam str6.width_a = 8;
defparam str6.width_b = 8;
defparam str6.widthad_a = 3;
defparam str6.widthad_b = 3;
defparam str6.numwords_a = 5;
defparam str6.numwords_b = 5;
defparam str6.latency = ram_latency;
defparam str6.init_file = "str6.mif";

reg [0:0] crc32_context_address_a;
reg [0:0] crc32_context_address_b;
reg crc32_context_write_enable_a;
reg crc32_context_write_enable_b;
reg [31:0] crc32_context_in_a;
reg [31:0] crc32_context_in_b;
wire [31:0] crc32_context_out_a;
wire [31:0] crc32_context_out_b;

// @crc32_context = internal global i32 -1, align 4
ram_dual_port crc32_context (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_context_address_a ),
	.address_b( crc32_context_address_b ),
	.wren_a( crc32_context_write_enable_a ),
	.wren_b( crc32_context_write_enable_b ),
	.data_a( crc32_context_in_a ),
	.data_b( crc32_context_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_context_out_a ),
	.q_b( crc32_context_out_b)
);
defparam crc32_context.width_a = 32;
defparam crc32_context.width_b = 32;
defparam crc32_context.widthad_a = 1;
defparam crc32_context.widthad_b = 1;
defparam crc32_context.width_be_a = 1;
defparam crc32_context.width_be_b = 1;
defparam crc32_context.numwords_a = 1;
defparam crc32_context.numwords_b = 1;
defparam crc32_context.latency = ram_latency;
defparam crc32_context.init_file = "crc32_context.mif";

reg [7:0] crc32_tab_address_a;
reg [7:0] crc32_tab_address_b;
reg crc32_tab_write_enable_a;
reg crc32_tab_write_enable_b;
reg [31:0] crc32_tab_in_a;
reg [31:0] crc32_tab_in_b;
wire [31:0] crc32_tab_out_a;
wire [31:0] crc32_tab_out_b;

// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
ram_dual_port crc32_tab (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_tab_address_a ),
	.address_b( crc32_tab_address_b ),
	.wren_a( crc32_tab_write_enable_a ),
	.wren_b( crc32_tab_write_enable_b ),
	.data_a( crc32_tab_in_a ),
	.data_b( crc32_tab_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_tab_out_a ),
	.q_b( crc32_tab_out_b)
);
defparam crc32_tab.width_a = 32;
defparam crc32_tab.width_b = 32;
defparam crc32_tab.widthad_a = 8;
defparam crc32_tab.widthad_b = 8;
defparam crc32_tab.width_be_a = 1;
defparam crc32_tab.width_be_b = 1;
defparam crc32_tab.numwords_a = 256;
defparam crc32_tab.numwords_b = 256;
defparam crc32_tab.latency = ram_latency;
defparam crc32_tab.init_file = "crc32_tab.mif";

reg [2:0] func_7l_51_address_a;
reg [2:0] func_7l_51_address_b;
reg func_7l_51_write_enable_a;
reg func_7l_51_write_enable_b;
reg [15:0] func_7l_51_in_a;
reg [15:0] func_7l_51_in_b;
wire [15:0] func_7l_51_out_a;
wire [15:0] func_7l_51_out_b;

// @func_7.l_51 = private unnamed_addr constant [8 x i16] [i16 28655, i16 28655, i16 30401, i16 28655, i16 28655, i16 30401, i16 28655, i16 28655], align 2
rom_dual_port func_7l_51 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_7l_51_address_a ),
	.address_b( func_7l_51_address_b ),
	.q_a( func_7l_51_out_a ),
	.q_b( func_7l_51_out_b)
);
defparam func_7l_51.width_a = 16;
defparam func_7l_51.width_b = 16;
defparam func_7l_51.widthad_a = 3;
defparam func_7l_51.widthad_b = 3;
defparam func_7l_51.numwords_a = 8;
defparam func_7l_51.numwords_b = 8;
defparam func_7l_51.latency = ram_latency;
defparam func_7l_51.init_file = "func_7l_51.mif";

reg [3:0] func_7l_76_address_a;
reg [3:0] func_7l_76_address_b;
reg func_7l_76_write_enable_a;
reg func_7l_76_write_enable_b;
reg [31:0] func_7l_76_in_a;
reg [31:0] func_7l_76_in_b;
wire [31:0] func_7l_76_out_a;
wire [31:0] func_7l_76_out_b;

// @func_7.l_76 = private unnamed_addr constant [2 x [8 x i32]] [[8 x i32] [i32 3, i32 -5, i32 3, i32 3, i32 -5, i32 3, i32 3, i32 -5], [8 x i32] [i32 -5, i32 3, i32 3, i32 -5, i32 3, i32 3, i32 -5, i32 ...
rom_dual_port func_7l_76 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_7l_76_address_a ),
	.address_b( func_7l_76_address_b ),
	.q_a( func_7l_76_out_a ),
	.q_b( func_7l_76_out_b)
);
defparam func_7l_76.width_a = 32;
defparam func_7l_76.width_b = 32;
defparam func_7l_76.widthad_a = 4;
defparam func_7l_76.widthad_b = 4;
defparam func_7l_76.numwords_a = 16;
defparam func_7l_76.numwords_b = 16;
defparam func_7l_76.latency = ram_latency;
defparam func_7l_76.init_file = "func_7l_76.mif";

reg [2:0] func_1_0_l_4_address_a;
reg [2:0] func_1_0_l_4_address_b;
reg func_1_0_l_4_write_enable_a;
reg func_1_0_l_4_write_enable_b;
reg [15:0] func_1_0_l_4_in_a;
reg [15:0] func_1_0_l_4_in_b;
wire [15:0] func_1_0_l_4_out_a;
wire [15:0] func_1_0_l_4_out_b;

//   %l_4 = alloca [7 x i16], align 2
ram_dual_port func_1_0_l_4 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1_0_l_4_address_a ),
	.address_b( func_1_0_l_4_address_b ),
	.wren_a( func_1_0_l_4_write_enable_a ),
	.wren_b( func_1_0_l_4_write_enable_b ),
	.data_a( func_1_0_l_4_in_a ),
	.data_b( func_1_0_l_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_1_0_l_4_out_a ),
	.q_b( func_1_0_l_4_out_b)
);
defparam func_1_0_l_4.width_a = 16;
defparam func_1_0_l_4.width_b = 16;
defparam func_1_0_l_4.widthad_a = 3;
defparam func_1_0_l_4.widthad_b = 3;
defparam func_1_0_l_4.width_be_a = 1;
defparam func_1_0_l_4.width_be_b = 1;
defparam func_1_0_l_4.numwords_a = 7;
defparam func_1_0_l_4.numwords_b = 7;
defparam func_1_0_l_4.latency = ram_latency;

reg [2:0] func_7_0_l_51_address_a;
reg [2:0] func_7_0_l_51_address_b;
reg func_7_0_l_51_write_enable_a;
reg func_7_0_l_51_write_enable_b;
reg [15:0] func_7_0_l_51_in_a;
reg [15:0] func_7_0_l_51_in_b;
wire [15:0] func_7_0_l_51_out_a;
wire [15:0] func_7_0_l_51_out_b;

//   %l_51 = alloca [8 x i16], align 2
ram_dual_port func_7_0_l_51 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_7_0_l_51_address_a ),
	.address_b( func_7_0_l_51_address_b ),
	.wren_a( func_7_0_l_51_write_enable_a ),
	.wren_b( func_7_0_l_51_write_enable_b ),
	.data_a( func_7_0_l_51_in_a ),
	.data_b( func_7_0_l_51_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_7_0_l_51_out_a ),
	.q_b( func_7_0_l_51_out_b)
);
defparam func_7_0_l_51.width_a = 16;
defparam func_7_0_l_51.width_b = 16;
defparam func_7_0_l_51.widthad_a = 3;
defparam func_7_0_l_51.widthad_b = 3;
defparam func_7_0_l_51.width_be_a = 1;
defparam func_7_0_l_51.width_be_b = 1;
defparam func_7_0_l_51.numwords_a = 8;
defparam func_7_0_l_51.numwords_b = 8;
defparam func_7_0_l_51.latency = ram_latency;

reg [3:0] func_7_0_l_76_address_a;
reg [3:0] func_7_0_l_76_address_b;
reg func_7_0_l_76_write_enable_a;
reg func_7_0_l_76_write_enable_b;
reg [31:0] func_7_0_l_76_in_a;
reg [31:0] func_7_0_l_76_in_b;
wire [31:0] func_7_0_l_76_out_a;
wire [31:0] func_7_0_l_76_out_b;

//   %l_76 = alloca [2 x [8 x i32]], align 4
ram_dual_port func_7_0_l_76 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_7_0_l_76_address_a ),
	.address_b( func_7_0_l_76_address_b ),
	.wren_a( func_7_0_l_76_write_enable_a ),
	.wren_b( func_7_0_l_76_write_enable_b ),
	.data_a( func_7_0_l_76_in_a ),
	.data_b( func_7_0_l_76_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_7_0_l_76_out_a ),
	.q_b( func_7_0_l_76_out_b)
);
defparam func_7_0_l_76.width_a = 32;
defparam func_7_0_l_76.width_b = 32;
defparam func_7_0_l_76.widthad_a = 4;
defparam func_7_0_l_76.widthad_b = 4;
defparam func_7_0_l_76.width_be_a = 1;
defparam func_7_0_l_76.width_be_b = 1;
defparam func_7_0_l_76.numwords_a = 16;
defparam func_7_0_l_76.numwords_b = 16;
defparam func_7_0_l_76.latency = ram_latency;

reg [0:0] legup_memcpy_2_0_1_address_a;
reg [0:0] legup_memcpy_2_0_1_address_b;
reg legup_memcpy_2_0_1_write_enable_a;
reg legup_memcpy_2_0_1_write_enable_b;
reg [31:0] legup_memcpy_2_0_1_in_a;
reg [31:0] legup_memcpy_2_0_1_in_b;
wire [31:0] legup_memcpy_2_0_1_out_a;
wire [31:0] legup_memcpy_2_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_2_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_2_0_1_address_a ),
	.address_b( legup_memcpy_2_0_1_address_b ),
	.wren_a( legup_memcpy_2_0_1_write_enable_a ),
	.wren_b( legup_memcpy_2_0_1_write_enable_b ),
	.data_a( legup_memcpy_2_0_1_in_a ),
	.data_b( legup_memcpy_2_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_2_0_1_out_a ),
	.q_b( legup_memcpy_2_0_1_out_b)
);
defparam legup_memcpy_2_0_1.width_a = 32;
defparam legup_memcpy_2_0_1.width_b = 32;
defparam legup_memcpy_2_0_1.widthad_a = 1;
defparam legup_memcpy_2_0_1.widthad_b = 1;
defparam legup_memcpy_2_0_1.width_be_a = 1;
defparam legup_memcpy_2_0_1.width_be_b = 1;
defparam legup_memcpy_2_0_1.numwords_a = 1;
defparam legup_memcpy_2_0_1.numwords_b = 1;
defparam legup_memcpy_2_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_2_0_dt_address_a;
reg [0:0] legup_memcpy_2_0_dt_address_b;
reg legup_memcpy_2_0_dt_write_enable_a;
reg legup_memcpy_2_0_dt_write_enable_b;
reg [31:0] legup_memcpy_2_0_dt_in_a;
reg [31:0] legup_memcpy_2_0_dt_in_b;
wire [31:0] legup_memcpy_2_0_dt_out_a;
wire [31:0] legup_memcpy_2_0_dt_out_b;

//   %dt = alloca i16*, align 4
ram_dual_port legup_memcpy_2_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_2_0_dt_address_a ),
	.address_b( legup_memcpy_2_0_dt_address_b ),
	.wren_a( legup_memcpy_2_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_2_0_dt_write_enable_b ),
	.data_a( legup_memcpy_2_0_dt_in_a ),
	.data_b( legup_memcpy_2_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_2_0_dt_out_a ),
	.q_b( legup_memcpy_2_0_dt_out_b)
);
defparam legup_memcpy_2_0_dt.width_a = 32;
defparam legup_memcpy_2_0_dt.width_b = 32;
defparam legup_memcpy_2_0_dt.widthad_a = 1;
defparam legup_memcpy_2_0_dt.widthad_b = 1;
defparam legup_memcpy_2_0_dt.width_be_a = 1;
defparam legup_memcpy_2_0_dt.width_be_b = 1;
defparam legup_memcpy_2_0_dt.numwords_a = 1;
defparam legup_memcpy_2_0_dt.numwords_b = 1;
defparam legup_memcpy_2_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_2_0_st_address_a;
reg [0:0] legup_memcpy_2_0_st_address_b;
reg legup_memcpy_2_0_st_write_enable_a;
reg legup_memcpy_2_0_st_write_enable_b;
reg [31:0] legup_memcpy_2_0_st_in_a;
reg [31:0] legup_memcpy_2_0_st_in_b;
wire [31:0] legup_memcpy_2_0_st_out_a;
wire [31:0] legup_memcpy_2_0_st_out_b;

//   %st = alloca i16*, align 4
ram_dual_port legup_memcpy_2_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_2_0_st_address_a ),
	.address_b( legup_memcpy_2_0_st_address_b ),
	.wren_a( legup_memcpy_2_0_st_write_enable_a ),
	.wren_b( legup_memcpy_2_0_st_write_enable_b ),
	.data_a( legup_memcpy_2_0_st_in_a ),
	.data_b( legup_memcpy_2_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_2_0_st_out_a ),
	.q_b( legup_memcpy_2_0_st_out_b)
);
defparam legup_memcpy_2_0_st.width_a = 32;
defparam legup_memcpy_2_0_st.width_b = 32;
defparam legup_memcpy_2_0_st.widthad_a = 1;
defparam legup_memcpy_2_0_st.widthad_b = 1;
defparam legup_memcpy_2_0_st.width_be_a = 1;
defparam legup_memcpy_2_0_st.width_be_b = 1;
defparam legup_memcpy_2_0_st.numwords_a = 1;
defparam legup_memcpy_2_0_st.numwords_b = 1;
defparam legup_memcpy_2_0_st.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_1_address_a;
reg [0:0] legup_memcpy_4_0_1_address_b;
reg legup_memcpy_4_0_1_write_enable_a;
reg legup_memcpy_4_0_1_write_enable_b;
reg [31:0] legup_memcpy_4_0_1_in_a;
reg [31:0] legup_memcpy_4_0_1_in_b;
wire [31:0] legup_memcpy_4_0_1_out_a;
wire [31:0] legup_memcpy_4_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_4_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_1_address_a ),
	.address_b( legup_memcpy_4_0_1_address_b ),
	.wren_a( legup_memcpy_4_0_1_write_enable_a ),
	.wren_b( legup_memcpy_4_0_1_write_enable_b ),
	.data_a( legup_memcpy_4_0_1_in_a ),
	.data_b( legup_memcpy_4_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_1_out_a ),
	.q_b( legup_memcpy_4_0_1_out_b)
);
defparam legup_memcpy_4_0_1.width_a = 32;
defparam legup_memcpy_4_0_1.width_b = 32;
defparam legup_memcpy_4_0_1.widthad_a = 1;
defparam legup_memcpy_4_0_1.widthad_b = 1;
defparam legup_memcpy_4_0_1.width_be_a = 1;
defparam legup_memcpy_4_0_1.width_be_b = 1;
defparam legup_memcpy_4_0_1.numwords_a = 1;
defparam legup_memcpy_4_0_1.numwords_b = 1;
defparam legup_memcpy_4_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_dt_address_a;
reg [0:0] legup_memcpy_4_0_dt_address_b;
reg legup_memcpy_4_0_dt_write_enable_a;
reg legup_memcpy_4_0_dt_write_enable_b;
reg [31:0] legup_memcpy_4_0_dt_in_a;
reg [31:0] legup_memcpy_4_0_dt_in_b;
wire [31:0] legup_memcpy_4_0_dt_out_a;
wire [31:0] legup_memcpy_4_0_dt_out_b;

//   %dt = alloca i32*, align 4
ram_dual_port legup_memcpy_4_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_dt_address_a ),
	.address_b( legup_memcpy_4_0_dt_address_b ),
	.wren_a( legup_memcpy_4_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_4_0_dt_write_enable_b ),
	.data_a( legup_memcpy_4_0_dt_in_a ),
	.data_b( legup_memcpy_4_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_dt_out_a ),
	.q_b( legup_memcpy_4_0_dt_out_b)
);
defparam legup_memcpy_4_0_dt.width_a = 32;
defparam legup_memcpy_4_0_dt.width_b = 32;
defparam legup_memcpy_4_0_dt.widthad_a = 1;
defparam legup_memcpy_4_0_dt.widthad_b = 1;
defparam legup_memcpy_4_0_dt.width_be_a = 1;
defparam legup_memcpy_4_0_dt.width_be_b = 1;
defparam legup_memcpy_4_0_dt.numwords_a = 1;
defparam legup_memcpy_4_0_dt.numwords_b = 1;
defparam legup_memcpy_4_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_st_address_a;
reg [0:0] legup_memcpy_4_0_st_address_b;
reg legup_memcpy_4_0_st_write_enable_a;
reg legup_memcpy_4_0_st_write_enable_b;
reg [31:0] legup_memcpy_4_0_st_in_a;
reg [31:0] legup_memcpy_4_0_st_in_b;
wire [31:0] legup_memcpy_4_0_st_out_a;
wire [31:0] legup_memcpy_4_0_st_out_b;

//   %st = alloca i32*, align 4
ram_dual_port legup_memcpy_4_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_st_address_a ),
	.address_b( legup_memcpy_4_0_st_address_b ),
	.wren_a( legup_memcpy_4_0_st_write_enable_a ),
	.wren_b( legup_memcpy_4_0_st_write_enable_b ),
	.data_a( legup_memcpy_4_0_st_in_a ),
	.data_b( legup_memcpy_4_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_st_out_a ),
	.q_b( legup_memcpy_4_0_st_out_b)
);
defparam legup_memcpy_4_0_st.width_a = 32;
defparam legup_memcpy_4_0_st.width_b = 32;
defparam legup_memcpy_4_0_st.widthad_a = 1;
defparam legup_memcpy_4_0_st.widthad_b = 1;
defparam legup_memcpy_4_0_st.width_be_a = 1;
defparam legup_memcpy_4_0_st.width_be_b = 1;
defparam legup_memcpy_4_0_st.numwords_a = 1;
defparam legup_memcpy_4_0_st.numwords_b = 1;
defparam legup_memcpy_4_0_st.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_g_22_a;
assign select_g_22_a = (tag_a == `TAG_g_g_22);
reg [ram_latency:0] select_g_22_reg_a;
wire [31:0] memory_controller_g_22_out_a;
assign memory_controller_g_22_out_a = {32{ select_g_22_reg_a[ram_latency]}} & g_22_out_a;

wire select_str_a;
assign select_str_a = (tag_a == `TAG_g_str);
reg [ram_latency:0] select_str_reg_a;
wire [7:0] memory_controller_str_out_a;
assign memory_controller_str_out_a = {8{ select_str_reg_a[ram_latency]}} & str_out_a;

wire select_g_37_a;
assign select_g_37_a = (tag_a == `TAG_g_g_37);
reg [ram_latency:0] select_g_37_reg_a;
wire [31:0] memory_controller_g_37_out_a;
assign memory_controller_g_37_out_a = {32{ select_g_37_reg_a[ram_latency]}} & g_37_out_a;

wire select_str1_a;
assign select_str1_a = (tag_a == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_a;
wire [7:0] memory_controller_str1_out_a;
assign memory_controller_str1_out_a = {8{ select_str1_reg_a[ram_latency]}} & str1_out_a;

wire select_g_38_a;
assign select_g_38_a = (tag_a == `TAG_g_g_38);
reg [ram_latency:0] select_g_38_reg_a;
wire [31:0] memory_controller_g_38_out_a;
assign memory_controller_g_38_out_a = {32{ select_g_38_reg_a[ram_latency]}} & g_38_out_a;

wire select_str2_a;
assign select_str2_a = (tag_a == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_a;
wire [7:0] memory_controller_str2_out_a;
assign memory_controller_str2_out_a = {8{ select_str2_reg_a[ram_latency]}} & str2_out_a;

wire select_g_77_a;
assign select_g_77_a = (tag_a == `TAG_g_g_77);
reg [ram_latency:0] select_g_77_reg_a;
wire [31:0] memory_controller_g_77_out_a;
assign memory_controller_g_77_out_a = {32{ select_g_77_reg_a[ram_latency]}} & g_77_out_a;

wire select_str4_a;
assign select_str4_a = (tag_a == `TAG_g_str4);
reg [ram_latency:0] select_str4_reg_a;
wire [7:0] memory_controller_str4_out_a;
assign memory_controller_str4_out_a = {8{ select_str4_reg_a[ram_latency]}} & str4_out_a;

wire select_g_78_a;
assign select_g_78_a = (tag_a == `TAG_g_g_78);
reg [ram_latency:0] select_g_78_reg_a;
wire [15:0] memory_controller_g_78_out_a;
assign memory_controller_g_78_out_a = {16{ select_g_78_reg_a[ram_latency]}} & g_78_out_a;

wire select_str5_a;
assign select_str5_a = (tag_a == `TAG_g_str5);
reg [ram_latency:0] select_str5_reg_a;
wire [7:0] memory_controller_str5_out_a;
assign memory_controller_str5_out_a = {8{ select_str5_reg_a[ram_latency]}} & str5_out_a;

wire select_g_79_a;
assign select_g_79_a = (tag_a == `TAG_g_g_79);
reg [ram_latency:0] select_g_79_reg_a;
wire [31:0] memory_controller_g_79_out_a;
assign memory_controller_g_79_out_a = {32{ select_g_79_reg_a[ram_latency]}} & g_79_out_a;

wire select_str6_a;
assign select_str6_a = (tag_a == `TAG_g_str6);
reg [ram_latency:0] select_str6_reg_a;
wire [7:0] memory_controller_str6_out_a;
assign memory_controller_str6_out_a = {8{ select_str6_reg_a[ram_latency]}} & str6_out_a;

wire select_crc32_context_a;
assign select_crc32_context_a = (tag_a == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_a;
wire [31:0] memory_controller_crc32_context_out_a;
assign memory_controller_crc32_context_out_a = {32{ select_crc32_context_reg_a[ram_latency]}} & crc32_context_out_a;

wire select_crc32_tab_a;
assign select_crc32_tab_a = (tag_a == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_a;
wire [31:0] memory_controller_crc32_tab_out_a;
assign memory_controller_crc32_tab_out_a = {32{ select_crc32_tab_reg_a[ram_latency]}} & crc32_tab_out_a;

wire select_func_7l_51_a;
assign select_func_7l_51_a = (tag_a == `TAG_g_func_7l_51);
reg [ram_latency:0] select_func_7l_51_reg_a;
wire [15:0] memory_controller_func_7l_51_out_a;
assign memory_controller_func_7l_51_out_a = {16{ select_func_7l_51_reg_a[ram_latency]}} & func_7l_51_out_a;

wire select_func_7l_76_a;
assign select_func_7l_76_a = (tag_a == `TAG_g_func_7l_76);
reg [ram_latency:0] select_func_7l_76_reg_a;
wire [31:0] memory_controller_func_7l_76_out_a;
assign memory_controller_func_7l_76_out_a = {32{ select_func_7l_76_reg_a[ram_latency]}} & func_7l_76_out_a;

wire select_func_1_0_l_4_a;
assign select_func_1_0_l_4_a = (tag_a == `TAG_func_1_0_l_4);
reg [ram_latency:0] select_func_1_0_l_4_reg_a;
wire [15:0] memory_controller_func_1_0_l_4_out_a;
assign memory_controller_func_1_0_l_4_out_a = {16{ select_func_1_0_l_4_reg_a[ram_latency]}} & func_1_0_l_4_out_a;

wire select_func_7_0_l_51_a;
assign select_func_7_0_l_51_a = (tag_a == `TAG_func_7_0_l_51);
reg [ram_latency:0] select_func_7_0_l_51_reg_a;
wire [15:0] memory_controller_func_7_0_l_51_out_a;
assign memory_controller_func_7_0_l_51_out_a = {16{ select_func_7_0_l_51_reg_a[ram_latency]}} & func_7_0_l_51_out_a;

wire select_func_7_0_l_76_a;
assign select_func_7_0_l_76_a = (tag_a == `TAG_func_7_0_l_76);
reg [ram_latency:0] select_func_7_0_l_76_reg_a;
wire [31:0] memory_controller_func_7_0_l_76_out_a;
assign memory_controller_func_7_0_l_76_out_a = {32{ select_func_7_0_l_76_reg_a[ram_latency]}} & func_7_0_l_76_out_a;

wire select_legup_memcpy_2_0_1_a;
assign select_legup_memcpy_2_0_1_a = (tag_a == `TAG_legup_memcpy_2_0_1);
reg [ram_latency:0] select_legup_memcpy_2_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_2_0_1_out_a;
assign memory_controller_legup_memcpy_2_0_1_out_a = {32{ select_legup_memcpy_2_0_1_reg_a[ram_latency]}} & legup_memcpy_2_0_1_out_a;

wire select_legup_memcpy_2_0_dt_a;
assign select_legup_memcpy_2_0_dt_a = (tag_a == `TAG_legup_memcpy_2_0_dt);
reg [ram_latency:0] select_legup_memcpy_2_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_2_0_dt_out_a;
assign memory_controller_legup_memcpy_2_0_dt_out_a = {32{ select_legup_memcpy_2_0_dt_reg_a[ram_latency]}} & legup_memcpy_2_0_dt_out_a;

wire select_legup_memcpy_2_0_st_a;
assign select_legup_memcpy_2_0_st_a = (tag_a == `TAG_legup_memcpy_2_0_st);
reg [ram_latency:0] select_legup_memcpy_2_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_2_0_st_out_a;
assign memory_controller_legup_memcpy_2_0_st_out_a = {32{ select_legup_memcpy_2_0_st_reg_a[ram_latency]}} & legup_memcpy_2_0_st_out_a;

wire select_legup_memcpy_4_0_1_a;
assign select_legup_memcpy_4_0_1_a = (tag_a == `TAG_legup_memcpy_4_0_1);
reg [ram_latency:0] select_legup_memcpy_4_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_1_out_a;
assign memory_controller_legup_memcpy_4_0_1_out_a = {32{ select_legup_memcpy_4_0_1_reg_a[ram_latency]}} & legup_memcpy_4_0_1_out_a;

wire select_legup_memcpy_4_0_dt_a;
assign select_legup_memcpy_4_0_dt_a = (tag_a == `TAG_legup_memcpy_4_0_dt);
reg [ram_latency:0] select_legup_memcpy_4_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_dt_out_a;
assign memory_controller_legup_memcpy_4_0_dt_out_a = {32{ select_legup_memcpy_4_0_dt_reg_a[ram_latency]}} & legup_memcpy_4_0_dt_out_a;

wire select_legup_memcpy_4_0_st_a;
assign select_legup_memcpy_4_0_st_a = (tag_a == `TAG_legup_memcpy_4_0_st);
reg [ram_latency:0] select_legup_memcpy_4_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_st_out_a;
assign memory_controller_legup_memcpy_4_0_st_out_a = {32{ select_legup_memcpy_4_0_st_reg_a[ram_latency]}} & legup_memcpy_4_0_st_out_a;

always @(*)
begin
	g_22_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_22_a}};
	g_22_write_enable_a = memory_controller_write_enable_a & select_g_22_a;
	g_22_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str_a}};
	str_write_enable_a = memory_controller_write_enable_a & select_str_a;
	str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_37_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_37_a}};
	g_37_write_enable_a = memory_controller_write_enable_a & select_g_37_a;
	g_37_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str1_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str1_a}};
	str1_write_enable_a = memory_controller_write_enable_a & select_str1_a;
	str1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_38_address_a = memory_controller_address_a [3-1+2:2] & {3{select_g_38_a}};
	g_38_write_enable_a = memory_controller_write_enable_a & select_g_38_a;
	g_38_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str2_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str2_a}};
	str2_write_enable_a = memory_controller_write_enable_a & select_str2_a;
	str2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_77_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_77_a}};
	g_77_write_enable_a = memory_controller_write_enable_a & select_g_77_a;
	g_77_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str4_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str4_a}};
	str4_write_enable_a = memory_controller_write_enable_a & select_str4_a;
	str4_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_78_address_a = memory_controller_address_a [3-1+1:1] & {3{select_g_78_a}};
	g_78_write_enable_a = memory_controller_write_enable_a & select_g_78_a;
	g_78_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	str5_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str5_a}};
	str5_write_enable_a = memory_controller_write_enable_a & select_str5_a;
	str5_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_79_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_79_a}};
	g_79_write_enable_a = memory_controller_write_enable_a & select_g_79_a;
	g_79_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str6_address_a = memory_controller_address_a [3-1+0:0] & {3{select_str6_a}};
	str6_write_enable_a = memory_controller_write_enable_a & select_str6_a;
	str6_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	crc32_context_address_a = memory_controller_address_a [1-1+2:2] & {1{select_crc32_context_a}};
	crc32_context_write_enable_a = memory_controller_write_enable_a & select_crc32_context_a;
	crc32_context_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	crc32_tab_address_a = memory_controller_address_a [8-1+2:2] & {8{select_crc32_tab_a}};
	crc32_tab_write_enable_a = memory_controller_write_enable_a & select_crc32_tab_a;
	crc32_tab_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_7l_51_address_a = memory_controller_address_a [3-1+1:1] & {3{select_func_7l_51_a}};
	func_7l_51_write_enable_a = memory_controller_write_enable_a & select_func_7l_51_a;
	func_7l_51_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	func_7l_76_address_a = memory_controller_address_a [4-1+2:2] & {4{select_func_7l_76_a}};
	func_7l_76_write_enable_a = memory_controller_write_enable_a & select_func_7l_76_a;
	func_7l_76_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1_0_l_4_address_a = memory_controller_address_a [3-1+1:1] & {3{select_func_1_0_l_4_a}};
	func_1_0_l_4_write_enable_a = memory_controller_write_enable_a & select_func_1_0_l_4_a;
	func_1_0_l_4_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	func_7_0_l_51_address_a = memory_controller_address_a [3-1+1:1] & {3{select_func_7_0_l_51_a}};
	func_7_0_l_51_write_enable_a = memory_controller_write_enable_a & select_func_7_0_l_51_a;
	func_7_0_l_51_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	func_7_0_l_76_address_a = memory_controller_address_a [4-1+2:2] & {4{select_func_7_0_l_76_a}};
	func_7_0_l_76_write_enable_a = memory_controller_write_enable_a & select_func_7_0_l_76_a;
	func_7_0_l_76_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_2_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_2_0_1_a}};
	legup_memcpy_2_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_2_0_1_a;
	legup_memcpy_2_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_2_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_2_0_dt_a}};
	legup_memcpy_2_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_2_0_dt_a;
	legup_memcpy_2_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_2_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_2_0_st_a}};
	legup_memcpy_2_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_2_0_st_a;
	legup_memcpy_2_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_1_a}};
	legup_memcpy_4_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_1_a;
	legup_memcpy_4_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_dt_a}};
	legup_memcpy_4_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_dt_a;
	legup_memcpy_4_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_st_a}};
	legup_memcpy_4_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_st_a;
	legup_memcpy_4_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_g_22_reg_a[ram_latency]}} | {2{select_g_37_reg_a[ram_latency]}} | {2{select_g_38_reg_a[ram_latency]}} | {2{select_g_77_reg_a[ram_latency]}} | {1{select_g_78_reg_a[ram_latency]}} | {2{select_g_79_reg_a[ram_latency]}} | {2{select_crc32_context_reg_a[ram_latency]}} | {2{select_crc32_tab_reg_a[ram_latency]}} | {1{select_func_7l_51_reg_a[ram_latency]}} | {2{select_func_7l_76_reg_a[ram_latency]}} | {1{select_func_1_0_l_4_reg_a[ram_latency]}} | {1{select_func_7_0_l_51_reg_a[ram_latency]}} | {2{select_func_7_0_l_76_reg_a[ram_latency]}} | {2{select_legup_memcpy_2_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_2_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_2_0_st_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_st_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_g_22_out_a | memory_controller_str_out_a | memory_controller_g_37_out_a | memory_controller_str1_out_a | memory_controller_g_38_out_a | memory_controller_str2_out_a | memory_controller_g_77_out_a | memory_controller_str4_out_a | memory_controller_g_78_out_a | memory_controller_str5_out_a | memory_controller_g_79_out_a | memory_controller_str6_out_a | memory_controller_crc32_context_out_a | memory_controller_crc32_tab_out_a | memory_controller_func_7l_51_out_a | memory_controller_func_7l_76_out_a | memory_controller_func_1_0_l_4_out_a | memory_controller_func_7_0_l_51_out_a | memory_controller_func_7_0_l_76_out_a | memory_controller_legup_memcpy_2_0_1_out_a | memory_controller_legup_memcpy_2_0_dt_out_a | memory_controller_legup_memcpy_2_0_st_out_a | memory_controller_legup_memcpy_4_0_1_out_a | memory_controller_legup_memcpy_4_0_dt_out_a | memory_controller_legup_memcpy_4_0_st_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_22_reg_a[j+1] <= select_g_22_reg_a[j];
select_str_reg_a[j+1] <= select_str_reg_a[j];
select_g_37_reg_a[j+1] <= select_g_37_reg_a[j];
select_str1_reg_a[j+1] <= select_str1_reg_a[j];
select_g_38_reg_a[j+1] <= select_g_38_reg_a[j];
select_str2_reg_a[j+1] <= select_str2_reg_a[j];
select_g_77_reg_a[j+1] <= select_g_77_reg_a[j];
select_str4_reg_a[j+1] <= select_str4_reg_a[j];
select_g_78_reg_a[j+1] <= select_g_78_reg_a[j];
select_str5_reg_a[j+1] <= select_str5_reg_a[j];
select_g_79_reg_a[j+1] <= select_g_79_reg_a[j];
select_str6_reg_a[j+1] <= select_str6_reg_a[j];
select_crc32_context_reg_a[j+1] <= select_crc32_context_reg_a[j];
select_crc32_tab_reg_a[j+1] <= select_crc32_tab_reg_a[j];
select_func_7l_51_reg_a[j+1] <= select_func_7l_51_reg_a[j];
select_func_7l_76_reg_a[j+1] <= select_func_7l_76_reg_a[j];
select_func_1_0_l_4_reg_a[j+1] <= select_func_1_0_l_4_reg_a[j];
select_func_7_0_l_51_reg_a[j+1] <= select_func_7_0_l_51_reg_a[j];
select_func_7_0_l_76_reg_a[j+1] <= select_func_7_0_l_76_reg_a[j];
select_legup_memcpy_2_0_1_reg_a[j+1] <= select_legup_memcpy_2_0_1_reg_a[j];
select_legup_memcpy_2_0_dt_reg_a[j+1] <= select_legup_memcpy_2_0_dt_reg_a[j];
select_legup_memcpy_2_0_st_reg_a[j+1] <= select_legup_memcpy_2_0_st_reg_a[j];
select_legup_memcpy_4_0_1_reg_a[j+1] <= select_legup_memcpy_4_0_1_reg_a[j];
select_legup_memcpy_4_0_dt_reg_a[j+1] <= select_legup_memcpy_4_0_dt_reg_a[j];
select_legup_memcpy_4_0_st_reg_a[j+1] <= select_legup_memcpy_4_0_st_reg_a[j];
end
always @(*)
begin
select_g_22_reg_a[0] <= select_g_22_a;
select_str_reg_a[0] <= select_str_a;
select_g_37_reg_a[0] <= select_g_37_a;
select_str1_reg_a[0] <= select_str1_a;
select_g_38_reg_a[0] <= select_g_38_a;
select_str2_reg_a[0] <= select_str2_a;
select_g_77_reg_a[0] <= select_g_77_a;
select_str4_reg_a[0] <= select_str4_a;
select_g_78_reg_a[0] <= select_g_78_a;
select_str5_reg_a[0] <= select_str5_a;
select_g_79_reg_a[0] <= select_g_79_a;
select_str6_reg_a[0] <= select_str6_a;
select_crc32_context_reg_a[0] <= select_crc32_context_a;
select_crc32_tab_reg_a[0] <= select_crc32_tab_a;
select_func_7l_51_reg_a[0] <= select_func_7l_51_a;
select_func_7l_76_reg_a[0] <= select_func_7l_76_a;
select_func_1_0_l_4_reg_a[0] <= select_func_1_0_l_4_a;
select_func_7_0_l_51_reg_a[0] <= select_func_7_0_l_51_a;
select_func_7_0_l_76_reg_a[0] <= select_func_7_0_l_76_a;
select_legup_memcpy_2_0_1_reg_a[0] <= select_legup_memcpy_2_0_1_a;
select_legup_memcpy_2_0_dt_reg_a[0] <= select_legup_memcpy_2_0_dt_a;
select_legup_memcpy_2_0_st_reg_a[0] <= select_legup_memcpy_2_0_st_a;
select_legup_memcpy_4_0_1_reg_a[0] <= select_legup_memcpy_4_0_1_a;
select_legup_memcpy_4_0_dt_reg_a[0] <= select_legup_memcpy_4_0_dt_a;
select_legup_memcpy_4_0_st_reg_a[0] <= select_legup_memcpy_4_0_st_a;
end

reg [2:0] select_not_struct_b;

wire select_g_22_b;
assign select_g_22_b = (tag_b == `TAG_g_g_22);
reg [ram_latency:0] select_g_22_reg_b;
wire [31:0] memory_controller_g_22_out_b;
assign memory_controller_g_22_out_b = {32{ select_g_22_reg_b[ram_latency]}} & g_22_out_b;

wire select_str_b;
assign select_str_b = (tag_b == `TAG_g_str);
reg [ram_latency:0] select_str_reg_b;
wire [7:0] memory_controller_str_out_b;
assign memory_controller_str_out_b = {8{ select_str_reg_b[ram_latency]}} & str_out_b;

wire select_g_37_b;
assign select_g_37_b = (tag_b == `TAG_g_g_37);
reg [ram_latency:0] select_g_37_reg_b;
wire [31:0] memory_controller_g_37_out_b;
assign memory_controller_g_37_out_b = {32{ select_g_37_reg_b[ram_latency]}} & g_37_out_b;

wire select_str1_b;
assign select_str1_b = (tag_b == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_b;
wire [7:0] memory_controller_str1_out_b;
assign memory_controller_str1_out_b = {8{ select_str1_reg_b[ram_latency]}} & str1_out_b;

wire select_g_38_b;
assign select_g_38_b = (tag_b == `TAG_g_g_38);
reg [ram_latency:0] select_g_38_reg_b;
wire [31:0] memory_controller_g_38_out_b;
assign memory_controller_g_38_out_b = {32{ select_g_38_reg_b[ram_latency]}} & g_38_out_b;

wire select_str2_b;
assign select_str2_b = (tag_b == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_b;
wire [7:0] memory_controller_str2_out_b;
assign memory_controller_str2_out_b = {8{ select_str2_reg_b[ram_latency]}} & str2_out_b;

wire select_g_77_b;
assign select_g_77_b = (tag_b == `TAG_g_g_77);
reg [ram_latency:0] select_g_77_reg_b;
wire [31:0] memory_controller_g_77_out_b;
assign memory_controller_g_77_out_b = {32{ select_g_77_reg_b[ram_latency]}} & g_77_out_b;

wire select_str4_b;
assign select_str4_b = (tag_b == `TAG_g_str4);
reg [ram_latency:0] select_str4_reg_b;
wire [7:0] memory_controller_str4_out_b;
assign memory_controller_str4_out_b = {8{ select_str4_reg_b[ram_latency]}} & str4_out_b;

wire select_g_78_b;
assign select_g_78_b = (tag_b == `TAG_g_g_78);
reg [ram_latency:0] select_g_78_reg_b;
wire [15:0] memory_controller_g_78_out_b;
assign memory_controller_g_78_out_b = {16{ select_g_78_reg_b[ram_latency]}} & g_78_out_b;

wire select_str5_b;
assign select_str5_b = (tag_b == `TAG_g_str5);
reg [ram_latency:0] select_str5_reg_b;
wire [7:0] memory_controller_str5_out_b;
assign memory_controller_str5_out_b = {8{ select_str5_reg_b[ram_latency]}} & str5_out_b;

wire select_g_79_b;
assign select_g_79_b = (tag_b == `TAG_g_g_79);
reg [ram_latency:0] select_g_79_reg_b;
wire [31:0] memory_controller_g_79_out_b;
assign memory_controller_g_79_out_b = {32{ select_g_79_reg_b[ram_latency]}} & g_79_out_b;

wire select_str6_b;
assign select_str6_b = (tag_b == `TAG_g_str6);
reg [ram_latency:0] select_str6_reg_b;
wire [7:0] memory_controller_str6_out_b;
assign memory_controller_str6_out_b = {8{ select_str6_reg_b[ram_latency]}} & str6_out_b;

wire select_crc32_context_b;
assign select_crc32_context_b = (tag_b == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_b;
wire [31:0] memory_controller_crc32_context_out_b;
assign memory_controller_crc32_context_out_b = {32{ select_crc32_context_reg_b[ram_latency]}} & crc32_context_out_b;

wire select_crc32_tab_b;
assign select_crc32_tab_b = (tag_b == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_b;
wire [31:0] memory_controller_crc32_tab_out_b;
assign memory_controller_crc32_tab_out_b = {32{ select_crc32_tab_reg_b[ram_latency]}} & crc32_tab_out_b;

wire select_func_7l_51_b;
assign select_func_7l_51_b = (tag_b == `TAG_g_func_7l_51);
reg [ram_latency:0] select_func_7l_51_reg_b;
wire [15:0] memory_controller_func_7l_51_out_b;
assign memory_controller_func_7l_51_out_b = {16{ select_func_7l_51_reg_b[ram_latency]}} & func_7l_51_out_b;

wire select_func_7l_76_b;
assign select_func_7l_76_b = (tag_b == `TAG_g_func_7l_76);
reg [ram_latency:0] select_func_7l_76_reg_b;
wire [31:0] memory_controller_func_7l_76_out_b;
assign memory_controller_func_7l_76_out_b = {32{ select_func_7l_76_reg_b[ram_latency]}} & func_7l_76_out_b;

wire select_func_1_0_l_4_b;
assign select_func_1_0_l_4_b = (tag_b == `TAG_func_1_0_l_4);
reg [ram_latency:0] select_func_1_0_l_4_reg_b;
wire [15:0] memory_controller_func_1_0_l_4_out_b;
assign memory_controller_func_1_0_l_4_out_b = {16{ select_func_1_0_l_4_reg_b[ram_latency]}} & func_1_0_l_4_out_b;

wire select_func_7_0_l_51_b;
assign select_func_7_0_l_51_b = (tag_b == `TAG_func_7_0_l_51);
reg [ram_latency:0] select_func_7_0_l_51_reg_b;
wire [15:0] memory_controller_func_7_0_l_51_out_b;
assign memory_controller_func_7_0_l_51_out_b = {16{ select_func_7_0_l_51_reg_b[ram_latency]}} & func_7_0_l_51_out_b;

wire select_func_7_0_l_76_b;
assign select_func_7_0_l_76_b = (tag_b == `TAG_func_7_0_l_76);
reg [ram_latency:0] select_func_7_0_l_76_reg_b;
wire [31:0] memory_controller_func_7_0_l_76_out_b;
assign memory_controller_func_7_0_l_76_out_b = {32{ select_func_7_0_l_76_reg_b[ram_latency]}} & func_7_0_l_76_out_b;

wire select_legup_memcpy_2_0_1_b;
assign select_legup_memcpy_2_0_1_b = (tag_b == `TAG_legup_memcpy_2_0_1);
reg [ram_latency:0] select_legup_memcpy_2_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_2_0_1_out_b;
assign memory_controller_legup_memcpy_2_0_1_out_b = {32{ select_legup_memcpy_2_0_1_reg_b[ram_latency]}} & legup_memcpy_2_0_1_out_b;

wire select_legup_memcpy_2_0_dt_b;
assign select_legup_memcpy_2_0_dt_b = (tag_b == `TAG_legup_memcpy_2_0_dt);
reg [ram_latency:0] select_legup_memcpy_2_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_2_0_dt_out_b;
assign memory_controller_legup_memcpy_2_0_dt_out_b = {32{ select_legup_memcpy_2_0_dt_reg_b[ram_latency]}} & legup_memcpy_2_0_dt_out_b;

wire select_legup_memcpy_2_0_st_b;
assign select_legup_memcpy_2_0_st_b = (tag_b == `TAG_legup_memcpy_2_0_st);
reg [ram_latency:0] select_legup_memcpy_2_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_2_0_st_out_b;
assign memory_controller_legup_memcpy_2_0_st_out_b = {32{ select_legup_memcpy_2_0_st_reg_b[ram_latency]}} & legup_memcpy_2_0_st_out_b;

wire select_legup_memcpy_4_0_1_b;
assign select_legup_memcpy_4_0_1_b = (tag_b == `TAG_legup_memcpy_4_0_1);
reg [ram_latency:0] select_legup_memcpy_4_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_1_out_b;
assign memory_controller_legup_memcpy_4_0_1_out_b = {32{ select_legup_memcpy_4_0_1_reg_b[ram_latency]}} & legup_memcpy_4_0_1_out_b;

wire select_legup_memcpy_4_0_dt_b;
assign select_legup_memcpy_4_0_dt_b = (tag_b == `TAG_legup_memcpy_4_0_dt);
reg [ram_latency:0] select_legup_memcpy_4_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_dt_out_b;
assign memory_controller_legup_memcpy_4_0_dt_out_b = {32{ select_legup_memcpy_4_0_dt_reg_b[ram_latency]}} & legup_memcpy_4_0_dt_out_b;

wire select_legup_memcpy_4_0_st_b;
assign select_legup_memcpy_4_0_st_b = (tag_b == `TAG_legup_memcpy_4_0_st);
reg [ram_latency:0] select_legup_memcpy_4_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_st_out_b;
assign memory_controller_legup_memcpy_4_0_st_out_b = {32{ select_legup_memcpy_4_0_st_reg_b[ram_latency]}} & legup_memcpy_4_0_st_out_b;

always @(*)
begin
	g_22_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_22_b}};
	g_22_write_enable_b = memory_controller_write_enable_b & select_g_22_b;
	g_22_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str_b}};
	str_write_enable_b = memory_controller_write_enable_b & select_str_b;
	str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_37_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_37_b}};
	g_37_write_enable_b = memory_controller_write_enable_b & select_g_37_b;
	g_37_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str1_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str1_b}};
	str1_write_enable_b = memory_controller_write_enable_b & select_str1_b;
	str1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_38_address_b = memory_controller_address_b [3-1+2:2] & {3{select_g_38_b}};
	g_38_write_enable_b = memory_controller_write_enable_b & select_g_38_b;
	g_38_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str2_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str2_b}};
	str2_write_enable_b = memory_controller_write_enable_b & select_str2_b;
	str2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_77_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_77_b}};
	g_77_write_enable_b = memory_controller_write_enable_b & select_g_77_b;
	g_77_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str4_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str4_b}};
	str4_write_enable_b = memory_controller_write_enable_b & select_str4_b;
	str4_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_78_address_b = memory_controller_address_b [3-1+1:1] & {3{select_g_78_b}};
	g_78_write_enable_b = memory_controller_write_enable_b & select_g_78_b;
	g_78_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	str5_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str5_b}};
	str5_write_enable_b = memory_controller_write_enable_b & select_str5_b;
	str5_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_79_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_79_b}};
	g_79_write_enable_b = memory_controller_write_enable_b & select_g_79_b;
	g_79_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str6_address_b = memory_controller_address_b [3-1+0:0] & {3{select_str6_b}};
	str6_write_enable_b = memory_controller_write_enable_b & select_str6_b;
	str6_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	crc32_context_address_b = memory_controller_address_b [1-1+2:2] & {1{select_crc32_context_b}};
	crc32_context_write_enable_b = memory_controller_write_enable_b & select_crc32_context_b;
	crc32_context_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	crc32_tab_address_b = memory_controller_address_b [8-1+2:2] & {8{select_crc32_tab_b}};
	crc32_tab_write_enable_b = memory_controller_write_enable_b & select_crc32_tab_b;
	crc32_tab_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_7l_51_address_b = memory_controller_address_b [3-1+1:1] & {3{select_func_7l_51_b}};
	func_7l_51_write_enable_b = memory_controller_write_enable_b & select_func_7l_51_b;
	func_7l_51_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	func_7l_76_address_b = memory_controller_address_b [4-1+2:2] & {4{select_func_7l_76_b}};
	func_7l_76_write_enable_b = memory_controller_write_enable_b & select_func_7l_76_b;
	func_7l_76_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1_0_l_4_address_b = memory_controller_address_b [3-1+1:1] & {3{select_func_1_0_l_4_b}};
	func_1_0_l_4_write_enable_b = memory_controller_write_enable_b & select_func_1_0_l_4_b;
	func_1_0_l_4_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	func_7_0_l_51_address_b = memory_controller_address_b [3-1+1:1] & {3{select_func_7_0_l_51_b}};
	func_7_0_l_51_write_enable_b = memory_controller_write_enable_b & select_func_7_0_l_51_b;
	func_7_0_l_51_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	func_7_0_l_76_address_b = memory_controller_address_b [4-1+2:2] & {4{select_func_7_0_l_76_b}};
	func_7_0_l_76_write_enable_b = memory_controller_write_enable_b & select_func_7_0_l_76_b;
	func_7_0_l_76_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_2_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_2_0_1_b}};
	legup_memcpy_2_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_2_0_1_b;
	legup_memcpy_2_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_2_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_2_0_dt_b}};
	legup_memcpy_2_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_2_0_dt_b;
	legup_memcpy_2_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_2_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_2_0_st_b}};
	legup_memcpy_2_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_2_0_st_b;
	legup_memcpy_2_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_1_b}};
	legup_memcpy_4_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_1_b;
	legup_memcpy_4_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_dt_b}};
	legup_memcpy_4_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_dt_b;
	legup_memcpy_4_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_st_b}};
	legup_memcpy_4_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_st_b;
	legup_memcpy_4_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_g_22_reg_b[ram_latency]}} | {2{select_g_37_reg_b[ram_latency]}} | {2{select_g_38_reg_b[ram_latency]}} | {2{select_g_77_reg_b[ram_latency]}} | {1{select_g_78_reg_b[ram_latency]}} | {2{select_g_79_reg_b[ram_latency]}} | {2{select_crc32_context_reg_b[ram_latency]}} | {2{select_crc32_tab_reg_b[ram_latency]}} | {1{select_func_7l_51_reg_b[ram_latency]}} | {2{select_func_7l_76_reg_b[ram_latency]}} | {1{select_func_1_0_l_4_reg_b[ram_latency]}} | {1{select_func_7_0_l_51_reg_b[ram_latency]}} | {2{select_func_7_0_l_76_reg_b[ram_latency]}} | {2{select_legup_memcpy_2_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_2_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_2_0_st_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_st_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_g_22_out_b | memory_controller_str_out_b | memory_controller_g_37_out_b | memory_controller_str1_out_b | memory_controller_g_38_out_b | memory_controller_str2_out_b | memory_controller_g_77_out_b | memory_controller_str4_out_b | memory_controller_g_78_out_b | memory_controller_str5_out_b | memory_controller_g_79_out_b | memory_controller_str6_out_b | memory_controller_crc32_context_out_b | memory_controller_crc32_tab_out_b | memory_controller_func_7l_51_out_b | memory_controller_func_7l_76_out_b | memory_controller_func_1_0_l_4_out_b | memory_controller_func_7_0_l_51_out_b | memory_controller_func_7_0_l_76_out_b | memory_controller_legup_memcpy_2_0_1_out_b | memory_controller_legup_memcpy_2_0_dt_out_b | memory_controller_legup_memcpy_2_0_st_out_b | memory_controller_legup_memcpy_4_0_1_out_b | memory_controller_legup_memcpy_4_0_dt_out_b | memory_controller_legup_memcpy_4_0_st_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_22_reg_b[j+1] <= select_g_22_reg_b[j];
select_str_reg_b[j+1] <= select_str_reg_b[j];
select_g_37_reg_b[j+1] <= select_g_37_reg_b[j];
select_str1_reg_b[j+1] <= select_str1_reg_b[j];
select_g_38_reg_b[j+1] <= select_g_38_reg_b[j];
select_str2_reg_b[j+1] <= select_str2_reg_b[j];
select_g_77_reg_b[j+1] <= select_g_77_reg_b[j];
select_str4_reg_b[j+1] <= select_str4_reg_b[j];
select_g_78_reg_b[j+1] <= select_g_78_reg_b[j];
select_str5_reg_b[j+1] <= select_str5_reg_b[j];
select_g_79_reg_b[j+1] <= select_g_79_reg_b[j];
select_str6_reg_b[j+1] <= select_str6_reg_b[j];
select_crc32_context_reg_b[j+1] <= select_crc32_context_reg_b[j];
select_crc32_tab_reg_b[j+1] <= select_crc32_tab_reg_b[j];
select_func_7l_51_reg_b[j+1] <= select_func_7l_51_reg_b[j];
select_func_7l_76_reg_b[j+1] <= select_func_7l_76_reg_b[j];
select_func_1_0_l_4_reg_b[j+1] <= select_func_1_0_l_4_reg_b[j];
select_func_7_0_l_51_reg_b[j+1] <= select_func_7_0_l_51_reg_b[j];
select_func_7_0_l_76_reg_b[j+1] <= select_func_7_0_l_76_reg_b[j];
select_legup_memcpy_2_0_1_reg_b[j+1] <= select_legup_memcpy_2_0_1_reg_b[j];
select_legup_memcpy_2_0_dt_reg_b[j+1] <= select_legup_memcpy_2_0_dt_reg_b[j];
select_legup_memcpy_2_0_st_reg_b[j+1] <= select_legup_memcpy_2_0_st_reg_b[j];
select_legup_memcpy_4_0_1_reg_b[j+1] <= select_legup_memcpy_4_0_1_reg_b[j];
select_legup_memcpy_4_0_dt_reg_b[j+1] <= select_legup_memcpy_4_0_dt_reg_b[j];
select_legup_memcpy_4_0_st_reg_b[j+1] <= select_legup_memcpy_4_0_st_reg_b[j];
end
always @(*)
begin
select_g_22_reg_b[0] <= select_g_22_b;
select_str_reg_b[0] <= select_str_b;
select_g_37_reg_b[0] <= select_g_37_b;
select_str1_reg_b[0] <= select_str1_b;
select_g_38_reg_b[0] <= select_g_38_b;
select_str2_reg_b[0] <= select_str2_b;
select_g_77_reg_b[0] <= select_g_77_b;
select_str4_reg_b[0] <= select_str4_b;
select_g_78_reg_b[0] <= select_g_78_b;
select_str5_reg_b[0] <= select_str5_b;
select_g_79_reg_b[0] <= select_g_79_b;
select_str6_reg_b[0] <= select_str6_b;
select_crc32_context_reg_b[0] <= select_crc32_context_b;
select_crc32_tab_reg_b[0] <= select_crc32_tab_b;
select_func_7l_51_reg_b[0] <= select_func_7l_51_b;
select_func_7l_76_reg_b[0] <= select_func_7l_76_b;
select_func_1_0_l_4_reg_b[0] <= select_func_1_0_l_4_b;
select_func_7_0_l_51_reg_b[0] <= select_func_7_0_l_51_b;
select_func_7_0_l_76_reg_b[0] <= select_func_7_0_l_76_b;
select_legup_memcpy_2_0_1_reg_b[0] <= select_legup_memcpy_2_0_1_b;
select_legup_memcpy_2_0_dt_reg_b[0] <= select_legup_memcpy_2_0_dt_b;
select_legup_memcpy_2_0_st_reg_b[0] <= select_legup_memcpy_2_0_st_b;
select_legup_memcpy_4_0_1_reg_b[0] <= select_legup_memcpy_4_0_1_b;
select_legup_memcpy_4_0_dt_reg_b[0] <= select_legup_memcpy_4_0_dt_b;
select_legup_memcpy_4_0_st_reg_b[0] <= select_legup_memcpy_4_0_st_b;
end

endmodule 

`timescale 1 ns / 1 ns
module platform_main_begin
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_begin_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_begin_BB__0_1;
LEGUP_F_platform_main_begin_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_begin: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_platform_main_begin_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_gentab
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_crc32_gentab_BB__1_1 = 4'd1;
parameter [3:0] LEGUP_F_crc32_gentab_BB__3_2 = 4'd2;
parameter [3:0] LEGUP_F_crc32_gentab_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_crc32_gentab_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_crc32_gentab_BB__8_5 = 4'd5;
parameter [3:0] LEGUP_F_crc32_gentab_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_crc32_gentab_BB__13_7 = 4'd7;
parameter [3:0] LEGUP_F_crc32_gentab_BB__14_8 = 4'd8;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_9 = 4'd9;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_10 = 4'd10;
parameter [3:0] LEGUP_F_crc32_gentab_BB__16_11 = 4'd11;
parameter [3:0] LEGUP_F_crc32_gentab_BB__18_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] crc32_gentab_1_2;
reg [31:0] crc32_gentab_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep_reg;
reg  crc32_gentab_1_exitcond1;
reg [31:0] crc32_gentab_4_indvar;
reg [31:0] crc32_gentab_4_indvar_reg;
reg [31:0] crc32_gentab_4_crc0;
reg [31:0] crc32_gentab_4_crc0_reg;
reg  crc32_gentab_4_exitcond;
reg [31:0] crc32_gentab_5_6;
reg  crc32_gentab_5_7;
reg [31:0] crc32_gentab_8_9;
reg [31:0] crc32_gentab_8_10;
reg [31:0] crc32_gentab_11_12;
reg [31:0] crc32_gentab_13_crc1;
reg [31:0] crc32_gentab_13_crc1_reg;
reg [31:0] crc32_gentab_14_indvarnext;
reg [31:0] crc32_gentab_16_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__11_6:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
LEGUP_F_crc32_gentab_BB__13_7:
		next_state = LEGUP_F_crc32_gentab_BB__14_8;
LEGUP_F_crc32_gentab_BB__14_8:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__15_10:
		next_state = LEGUP_F_crc32_gentab_BB__16_11;
LEGUP_F_crc32_gentab_BB__15_9:
		next_state = LEGUP_F_crc32_gentab_BB__15_10;
LEGUP_F_crc32_gentab_BB__16_11:
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__18_12:
		next_state = LEGUP_0;
LEGUP_F_crc32_gentab_BB__1_1:
	if ((crc32_gentab_1_exitcond1 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__18_12;
	else if ((crc32_gentab_1_exitcond1 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__3_2;
LEGUP_F_crc32_gentab_BB__3_2:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__4_3:
	if ((crc32_gentab_4_exitcond == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__15_9;
	else if ((crc32_gentab_4_exitcond == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__5_4;
LEGUP_F_crc32_gentab_BB__5_4:
	if ((crc32_gentab_5_7 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__11_6;
	else if ((crc32_gentab_5_7 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__8_5;
LEGUP_F_crc32_gentab_BB__8_5:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2 = 32'd0;
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_1_2 = crc32_gentab_16_17;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
		crc32_gentab_1_scevgep = (`TAG_g_crc32_tab_a + (4 * crc32_gentab_1_2_reg));
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__1_1)) begin
		crc32_gentab_1_scevgep_reg <= crc32_gentab_1_scevgep;
		if (start == 1'b0 && ^(crc32_gentab_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %exitcond1 = icmp eq i32 %2, 256*/
		crc32_gentab_1_exitcond1 = (crc32_gentab_1_2_reg == 32'd256);
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar = 32'd0;
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_indvar = crc32_gentab_14_indvarnext;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0 = crc32_gentab_1_2_reg;
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_crc0 = crc32_gentab_13_crc1_reg;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %exitcond = icmp eq i32 %indvar, 8*/
		crc32_gentab_4_exitcond = (crc32_gentab_4_indvar_reg == 32'd8);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %6 = and i32 %crc.0, 1*/
		crc32_gentab_5_6 = (crc32_gentab_4_crc0_reg & 32'd1);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %7 = icmp eq i32 %6, 0*/
		crc32_gentab_5_7 = (crc32_gentab_5_6 == 32'd0);
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %9 = lshr i32 %crc.0, 1*/
		crc32_gentab_8_9 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %10 = xor i32 %9, -306674912*/
		crc32_gentab_8_10 = (crc32_gentab_8_9 ^ -32'd306674912);
end
always @(*) begin
	/* crc32_gentab: %11*/
	/*   %12 = lshr i32 %crc.0, 1*/
		crc32_gentab_11_12 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1 = crc32_gentab_8_10;
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_13_crc1 = crc32_gentab_11_12;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %14*/
	/*   %indvar.next = add i32 %indvar, 1*/
		crc32_gentab_14_indvarnext = (crc32_gentab_4_indvar_reg + 32'd1);
end
always @(*) begin
	/* crc32_gentab: %16*/
	/*   %17 = add nsw i32 %2, 1*/
		crc32_gentab_16_17 = (crc32_gentab_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_gentab: %18*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__18_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_address_a = crc32_gentab_1_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_in_a = crc32_gentab_4_crc0_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module platform_main_end
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_crc,
	arg_flag
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_end_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_crc;
input [31:0] arg_flag;
reg  cur_state;
reg  next_state;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* platform_main_end: %0*/
	/*   %1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str7, i32 0, i32 0), i32 %crc) #3*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		$write("checksum = %d\n", arg_crc);
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_crc) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_end_BB__0_1;
LEGUP_F_platform_main_end_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		return_val <= arg_crc;
		if (start == 1'b0 && ^(arg_crc) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_byte
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_b
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_2 = 3'd2;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_4 = 3'd4;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_5 = 3'd5;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_6 = 3'd6;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [7:0] arg_b;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] crc32_byte_0_1;
reg [31:0] crc32_byte_0_2;
reg [31:0] crc32_byte_0_2_reg;
reg [31:0] crc32_byte_0_3;
reg [31:0] crc32_byte_0_3_reg;
reg [31:0] crc32_byte_0_masked;
reg [31:0] crc32_byte_0_4;
reg [31:0] crc32_byte_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_0_5;
reg [31:0] crc32_byte_0_6;
reg [31:0] crc32_byte_0_7;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_byte_BB__0_1;
LEGUP_F_crc32_byte_BB__0_1:
		next_state = LEGUP_F_crc32_byte_BB__0_2;
LEGUP_F_crc32_byte_BB__0_2:
		next_state = LEGUP_F_crc32_byte_BB__0_3;
LEGUP_F_crc32_byte_BB__0_3:
		next_state = LEGUP_F_crc32_byte_BB__0_4;
LEGUP_F_crc32_byte_BB__0_4:
		next_state = LEGUP_F_crc32_byte_BB__0_5;
LEGUP_F_crc32_byte_BB__0_5:
		next_state = LEGUP_F_crc32_byte_BB__0_6;
LEGUP_F_crc32_byte_BB__0_6:
		next_state = LEGUP_F_crc32_byte_BB__0_7;
LEGUP_F_crc32_byte_BB__0_7:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
		crc32_byte_0_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
		crc32_byte_0_2 = (crc32_byte_0_1 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_2_reg <= crc32_byte_0_2;
		if (start == 1'b0 && ^(crc32_byte_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
		crc32_byte_0_3 = arg_b;
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		crc32_byte_0_3_reg <= crc32_byte_0_3;
		if (start == 1'b0 && ^(crc32_byte_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %.masked = and i32 %1, 255*/
		crc32_byte_0_masked = (crc32_byte_0_1 & 32'd255);
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
		crc32_byte_0_4 = (crc32_byte_0_masked ^ crc32_byte_0_3_reg);
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_4_reg <= crc32_byte_0_4;
		if (start == 1'b0 && ^(crc32_byte_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %5 = getelementptr inbounds [256 x i32]* @crc32_tab, i32 0, i32 %4*/
		crc32_byte_0_5 = (`TAG_g_crc32_tab_a + (4 * crc32_byte_0_4_reg));
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
		crc32_byte_0_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %7 = xor i32 %2, %6*/
		crc32_byte_0_7 = (crc32_byte_0_2_reg ^ crc32_byte_0_6);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_byte: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_address_a = crc32_byte_0_5;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_in_a = crc32_byte_0_7;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_ui1;
input [15:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [15:0] safe_sub_func_uint16_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_uint16_t_u_u: %0*/
	/*   %1 = sub i16 %ui1, %ui2*/
		safe_sub_func_uint16_t_u_u_0_1 = (arg_ui1 - arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_uint16_t_u_u: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_uint16_t_u_u_BB__0_1)) begin
		return_val <= safe_sub_func_uint16_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_sub_func_uint16_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [7:0] safe_mul_func_int8_t_s_s_0_1;
reg  lpm_mult_safe_mul_func_int8_t_s_s_0_1_en;
reg [7:0] safe_mul_func_int8_t_s_s_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2;
LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_int8_t_s_s_0_1 = safe_mul_func_int8_t_s_s_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_int8_t_s_s_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   %1 = mul i8 %si1, %si2*/
	if ((lpm_mult_safe_mul_func_int8_t_s_s_0_1_en == 1'd1)) begin
		safe_mul_func_int8_t_s_s_0_1_stage0_reg <= (arg_si1 * arg_si2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int8_t_s_s_BB__0_2)) begin
		return_val <= safe_mul_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4 = 4'd4;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5 = 4'd5;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7 = 4'd7;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8 = 4'd8;
parameter [3:0] LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9 = 4'd9;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [3:0] cur_state;
reg [3:0] next_state;
reg  safe_add_func_int32_t_s_s_0_1;
reg  safe_add_func_int32_t_s_s_2_3;
reg [31:0] safe_add_func_int32_t_s_s_4_5;
reg  safe_add_func_int32_t_s_s_4_6;
reg  safe_add_func_int32_t_s_s_7_8;
reg  safe_add_func_int32_t_s_s_9_10;
reg [31:0] safe_add_func_int32_t_s_s_11_12;
reg  safe_add_func_int32_t_s_s_11_13;
reg [31:0] safe_add_func_int32_t_s_s_15_16;
reg [31:0] safe_add_func_int32_t_s_s_17_18;
reg [31:0] safe_add_func_int32_t_s_s_17_18_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_add_func_int32_t_s_s_BB__0_1:
	if ((safe_add_func_int32_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2;
	else if ((safe_add_func_int32_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6:
	if ((safe_add_func_int32_t_s_s_11_13 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7;
	else if ((safe_add_func_int32_t_s_s_11_13 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7:
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9;
LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8:
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9;
LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9:
		next_state = LEGUP_0;
LEGUP_F_safe_add_func_int32_t_s_s_BB__2_2:
	if ((safe_add_func_int32_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3;
	else if ((safe_add_func_int32_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__4_3:
	if ((safe_add_func_int32_t_s_s_4_6 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7;
	else if ((safe_add_func_int32_t_s_s_4_6 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4;
LEGUP_F_safe_add_func_int32_t_s_s_BB__7_4:
	if ((safe_add_func_int32_t_s_s_7_8 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5;
	else if ((safe_add_func_int32_t_s_s_7_8 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
LEGUP_F_safe_add_func_int32_t_s_s_BB__9_5:
	if ((safe_add_func_int32_t_s_s_9_10 == 1'd1))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__11_6;
	else if ((safe_add_func_int32_t_s_s_9_10 == 1'd0))
		next_state = LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %0*/
	/*   %1 = icmp sgt i32 %si1, 0*/
		safe_add_func_int32_t_s_s_0_1 = ($signed(arg_si1) > $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %2*/
	/*   %3 = icmp sgt i32 %si2, 0*/
		safe_add_func_int32_t_s_s_2_3 = ($signed(arg_si2) > $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %4*/
	/*   %5 = sub nsw i32 2147483647, %si2*/
		safe_add_func_int32_t_s_s_4_5 = (32'd2147483647 - arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %4*/
	/*   %6 = icmp slt i32 %5, %si1*/
		safe_add_func_int32_t_s_s_4_6 = ($signed(safe_add_func_int32_t_s_s_4_5) < $signed(arg_si1));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %7*/
	/*   %8 = icmp slt i32 %si1, 0*/
		safe_add_func_int32_t_s_s_7_8 = ($signed(arg_si1) < $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %9*/
	/*   %10 = icmp slt i32 %si2, 0*/
		safe_add_func_int32_t_s_s_9_10 = ($signed(arg_si2) < $signed(32'd0));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %11*/
	/*   %12 = sub nsw i32 -2147483648, %si2*/
		safe_add_func_int32_t_s_s_11_12 = (-32'd2147483648 - arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %11*/
	/*   %13 = icmp sgt i32 %12, %si1*/
		safe_add_func_int32_t_s_s_11_13 = ($signed(safe_add_func_int32_t_s_s_11_12) > $signed(arg_si1));
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %15*/
	/*   %16 = add nsw i32 %si1, %si2*/
		safe_add_func_int32_t_s_s_15_16 = (arg_si1 + arg_si2);
end
always @(*) begin
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18 = arg_si1;
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	else /* if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_add_func_int32_t_s_s_17_18 = safe_add_func_int32_t_s_s_15_16;
	end
end
always @(posedge clk) begin
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__14_7) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18_reg <= safe_add_func_int32_t_s_s_17_18;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_17_18_reg"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   %18 = phi i32 [ %si1, %14 ], [ %16, %15 ]*/
	if (((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__15_8) & (memory_controller_waitrequest == 1'd0))) begin
		safe_add_func_int32_t_s_s_17_18_reg <= safe_add_func_int32_t_s_s_17_18;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_17_18_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_int32_t_s_s: %17*/
	/*   ret i32 %18*/
	if ((cur_state == LEGUP_F_safe_add_func_int32_t_s_s_BB__17_9)) begin
		return_val <= safe_add_func_int32_t_s_s_17_18_reg;
		if (start == 1'b0 && ^(safe_add_func_int32_t_s_s_17_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_13
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_14,
	arg_p_15,
	arg_p_16
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_func_13_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [15:0] arg_p_14;
input [15:0] arg_p_15;
input [7:0] arg_p_16;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_13_BB__0_1;
LEGUP_F_func_13_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_13: %0*/
	/*   ret i32 1209876222*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_13: %0*/
	/*   ret i32 1209876222*/
	if ((cur_state == LEGUP_F_func_13_BB__0_1)) begin
		return_val <= 32'd1209876222;
		if (start == 1'b0 && ^(32'd1209876222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_sub_func_int8_t_s_s_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   %1 = sub i8 %si1, %si2*/
		safe_sub_func_int8_t_s_s_0_1 = (arg_si1 - arg_si2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_sub_func_int8_t_s_s_BB__0_1)) begin
		return_val <= safe_sub_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_sub_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__4_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_36 = 6'd36;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37 = 6'd37;
parameter [5:0] LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_div_func_int32_t_s_s_0_1;
reg  safe_div_func_int32_t_s_s_2_3;
reg  safe_div_func_int32_t_s_s_4_5;
reg [31:0] safe_div_func_int32_t_s_s_7_8;
reg [31:0] safe_div_func_int32_t_s_s_9_10;
reg [31:0] safe_div_func_int32_t_s_s_9_10_reg;
reg [31:0] safe_div_func_int32_t_s_s_signed_divide_32_0_op0;
reg [31:0] safe_div_func_int32_t_s_s_signed_divide_32_0_op1;
wire [31:0] lpm_divide_safe_div_func_int32_t_s_s_7_8_temp_out;
wire [31:0] safe_div_func_int32_t_s_s_7_8_unused;
reg  lpm_divide_safe_div_func_int32_t_s_s_7_8_en;
reg [31:0] lpm_divide_safe_div_func_int32_t_s_s_7_8_out;
reg [31:0] safe_div_func_int32_t_s_s_signed_divide_32_0;

/*   %8 = sdiv i32 %si1, %si2*/
lpm_divide lpm_divide_safe_div_func_int32_t_s_s_7_8 (
	.quotient (lpm_divide_safe_div_func_int32_t_s_s_7_8_temp_out),
	.remain (safe_div_func_int32_t_s_s_7_8_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_int32_t_s_s_7_8_en),
	.numer (safe_div_func_int32_t_s_s_signed_divide_32_0_op0),
	.denom (safe_div_func_int32_t_s_s_signed_divide_32_0_op1)
);

defparam
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_pipeline = 32,
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_widthn = 32,
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_widthd = 32,
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_drepresentation = "SIGNED",
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_nrepresentation = "SIGNED",
	lpm_divide_safe_div_func_int32_t_s_s_7_8.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_div_func_int32_t_s_s_BB__0_1:
	if ((safe_div_func_int32_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4;
	else if ((safe_div_func_int32_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__2_2;
LEGUP_F_safe_div_func_int32_t_s_s_BB__2_2:
	if ((safe_div_func_int32_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__4_3;
	else if ((safe_div_func_int32_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5;
LEGUP_F_safe_div_func_int32_t_s_s_BB__4_3:
	if ((safe_div_func_int32_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4;
	else if ((safe_div_func_int32_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5;
LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_10:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_11;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_11:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_12;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_12:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_13;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_13:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_14;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_14:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_15;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_15:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_16;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_16:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_17;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_17:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_18;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_18:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_19;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_19:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_20;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_20:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_21;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_21:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_22;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_22:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_23;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_23:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_24;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_24:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_25;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_25:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_26;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_26:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_27;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_27:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_28;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_28:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_29;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_29:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_30;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_30:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_31;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_31:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_32;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_32:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_33;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_33:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_34;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_34:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_35;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_35:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_36;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_36:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_5:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_6;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_6:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_7;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_7:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_8;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_8:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_9;
LEGUP_F_safe_div_func_int32_t_s_s_BB__7_9:
		next_state = LEGUP_F_safe_div_func_int32_t_s_s_BB__7_10;
LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %0*/
	/*   %1 = icmp eq i32 %si2, 0*/
		safe_div_func_int32_t_s_s_0_1 = (arg_si2 == 32'd0);
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %2*/
	/*   %3 = icmp eq i32 %si1, -2147483648*/
		safe_div_func_int32_t_s_s_2_3 = (arg_si1 == -32'd2147483648);
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %4*/
	/*   %5 = icmp eq i32 %si2, -1*/
		safe_div_func_int32_t_s_s_4_5 = (arg_si2 == -32'd1);
end
always @(*) begin
	safe_div_func_int32_t_s_s_7_8 = safe_div_func_int32_t_s_s_signed_divide_32_0;
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int32_t_s_s_9_10 = arg_si1;
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_int32_t_s_s_9_10 = safe_div_func_int32_t_s_s_7_8;
	end
end
always @(posedge clk) begin
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int32_t_s_s_9_10_reg <= safe_div_func_int32_t_s_s_9_10;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_9_10_reg"); $finish; end
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   %10 = phi i32 [ %si1, %6 ], [ %8, %7 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__7_37) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int32_t_s_s_9_10_reg <= safe_div_func_int32_t_s_s_9_10;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %7*/
	/*   %8 = sdiv i32 %si1, %si2*/
		safe_div_func_int32_t_s_s_signed_divide_32_0_op0 = arg_si1;
end
always @(*) begin
	/* safe_div_func_int32_t_s_s: %7*/
	/*   %8 = sdiv i32 %si1, %si2*/
		safe_div_func_int32_t_s_s_signed_divide_32_0_op1 = arg_si2;
end
always @(*) begin
	lpm_divide_safe_div_func_int32_t_s_s_7_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_int32_t_s_s_7_8_out = lpm_divide_safe_div_func_int32_t_s_s_7_8_temp_out;
end
always @(*) begin
	safe_div_func_int32_t_s_s_signed_divide_32_0 = lpm_divide_safe_div_func_int32_t_s_s_7_8_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   ret i32 %10*/
	if ((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_int32_t_s_s: %9*/
	/*   ret i32 %10*/
	if ((cur_state == LEGUP_F_safe_div_func_int32_t_s_s_BB__9_38)) begin
		return_val <= safe_div_func_int32_t_s_s_9_10_reg;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_9_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__6_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__11_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint8_t_u_u_0_1;
reg [31:0] safe_lshift_func_uint8_t_u_u_2_3;
reg [31:0] safe_lshift_func_uint8_t_u_u_2_4;
reg  safe_lshift_func_uint8_t_u_u_2_5;
reg [31:0] safe_lshift_func_uint8_t_u_u_6_7;
reg [31:0] safe_lshift_func_uint8_t_u_u_8_9;
reg [31:0] safe_lshift_func_uint8_t_u_u_8_10;
reg [31:0] safe_lshift_func_uint8_t_u_u_11_12;
reg [31:0] safe_lshift_func_uint8_t_u_u_11_12_reg;
reg [7:0] safe_lshift_func_uint8_t_u_u_11_13;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__0_1:
	if ((safe_lshift_func_uint8_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__6_3;
	else if ((safe_lshift_func_uint8_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__2_2;
LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__11_5:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__2_2:
	if ((safe_lshift_func_uint8_t_u_u_2_5 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__6_3;
	else if ((safe_lshift_func_uint8_t_u_u_2_5 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__8_4;
LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__6_3:
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__11_5;
LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__11_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_lshift_func_uint8_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %2*/
	/*   %3 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %2*/
	/*   %4 = lshr i32 255, %right*/
		safe_lshift_func_uint8_t_u_u_2_4 = (32'd255 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %2*/
	/*   %5 = icmp sgt i32 %3, %4*/
		safe_lshift_func_uint8_t_u_u_2_5 = ($signed(safe_lshift_func_uint8_t_u_u_2_3) > $signed(safe_lshift_func_uint8_t_u_u_2_4));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %6*/
	/*   %7 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_u_6_7 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %8*/
	/*   %9 = zext i8 %left to i32*/
		safe_lshift_func_uint8_t_u_u_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %8*/
	/*   %10 = shl i32 %9, %right*/
		safe_lshift_func_uint8_t_u_u_8_10 = (safe_lshift_func_uint8_t_u_u_8_9 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_u_11_12 = safe_lshift_func_uint8_t_u_u_6_7;
	end
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint8_t_u_u_11_12 = safe_lshift_func_uint8_t_u_u_8_10;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_u_11_12_reg <= safe_lshift_func_uint8_t_u_u_11_12;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_u_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_11_12_reg"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint8_t_u_u_11_12_reg <= safe_lshift_func_uint8_t_u_u_11_12;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_u_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   %13 = trunc i32 %12 to i8*/
		safe_lshift_func_uint8_t_u_u_11_13 = safe_lshift_func_uint8_t_u_u_11_12_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   ret i8 %13*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__11_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint8_t_u_u: %11*/
	/*   ret i8 %13*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint8_t_u_u_BB__11_5)) begin
		return_val <= safe_lshift_func_uint8_t_u_u_11_13;
		if (start == 1'b0 && ^(safe_lshift_func_uint8_t_u_u_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_25
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_26,
	arg_p_27,
	arg_p_28,
	arg_p_29,
	arg_p_30
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_func_25_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [7:0] arg_p_26;
input [31:0] arg_p_27;
input [7:0] arg_p_28;
input [31:0] arg_p_29;
input [15:0] arg_p_30;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_25_BB__0_1;
LEGUP_F_func_25_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_25: %0*/
	/*   ret i16 %p_30*/
	if ((cur_state == LEGUP_F_func_25_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_25: %0*/
	/*   ret i16 %p_30*/
	if ((cur_state == LEGUP_F_func_25_BB__0_1)) begin
		return_val <= arg_p_30;
		if (start == 1'b0 && ^(arg_p_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__4_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__6_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_36 = 6'd36;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__8_37 = 6'd37;
parameter [5:0] LEGUP_F_safe_div_func_int8_t_s_s_BB__12_38 = 6'd38;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_div_func_int8_t_s_s_0_1;
reg  safe_div_func_int8_t_s_s_2_3;
reg  safe_div_func_int8_t_s_s_4_5;
reg [31:0] safe_div_func_int8_t_s_s_6_7;
reg [31:0] safe_div_func_int8_t_s_s_8_9;
reg [31:0] safe_div_func_int8_t_s_s_8_10;
reg [31:0] safe_div_func_int8_t_s_s_8_11;
reg [31:0] safe_div_func_int8_t_s_s_12_13;
reg [31:0] safe_div_func_int8_t_s_s_12_13_reg;
reg [7:0] safe_div_func_int8_t_s_s_12_14;
reg [31:0] safe_div_func_int8_t_s_s_signed_divide_32_0_op0;
reg [31:0] safe_div_func_int8_t_s_s_signed_divide_32_0_op1;
wire [31:0] lpm_divide_safe_div_func_int8_t_s_s_8_11_temp_out;
wire [31:0] safe_div_func_int8_t_s_s_8_11_unused;
reg  lpm_divide_safe_div_func_int8_t_s_s_8_11_en;
reg [31:0] lpm_divide_safe_div_func_int8_t_s_s_8_11_out;
reg [31:0] safe_div_func_int8_t_s_s_signed_divide_32_0;

/*   %11 = sdiv i32 %9, %10*/
lpm_divide lpm_divide_safe_div_func_int8_t_s_s_8_11 (
	.quotient (lpm_divide_safe_div_func_int8_t_s_s_8_11_temp_out),
	.remain (safe_div_func_int8_t_s_s_8_11_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_int8_t_s_s_8_11_en),
	.numer (safe_div_func_int8_t_s_s_signed_divide_32_0_op0),
	.denom (safe_div_func_int8_t_s_s_signed_divide_32_0_op1)
);

defparam
	lpm_divide_safe_div_func_int8_t_s_s_8_11.lpm_pipeline = 32,
	lpm_divide_safe_div_func_int8_t_s_s_8_11.lpm_widthn = 32,
	lpm_divide_safe_div_func_int8_t_s_s_8_11.lpm_widthd = 32,
	lpm_divide_safe_div_func_int8_t_s_s_8_11.lpm_drepresentation = "SIGNED",
	lpm_divide_safe_div_func_int8_t_s_s_8_11.lpm_nrepresentation = "SIGNED",
	lpm_divide_safe_div_func_int8_t_s_s_8_11.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_div_func_int8_t_s_s_BB__0_1:
	if ((safe_div_func_int8_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__6_4;
	else if ((safe_div_func_int8_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__2_2;
LEGUP_F_safe_div_func_int8_t_s_s_BB__12_38:
		next_state = LEGUP_0;
LEGUP_F_safe_div_func_int8_t_s_s_BB__2_2:
	if ((safe_div_func_int8_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__4_3;
	else if ((safe_div_func_int8_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_5;
LEGUP_F_safe_div_func_int8_t_s_s_BB__4_3:
	if ((safe_div_func_int8_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__6_4;
	else if ((safe_div_func_int8_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_5;
LEGUP_F_safe_div_func_int8_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__12_38;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_10:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_11;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_11:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_12;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_12:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_13;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_13:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_14;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_14:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_15;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_15:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_16;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_16:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_17;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_17:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_18;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_18:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_19;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_19:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_20;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_20:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_21;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_21:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_22;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_22:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_23;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_23:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_24;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_24:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_25;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_25:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_26;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_26:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_27;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_27:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_28;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_28:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_29;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_29:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_30;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_30:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_31;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_31:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_32;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_32:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_33;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_33:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_34;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_34:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_35;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_35:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_36;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_36:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_37;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_37:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__12_38;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_5:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_6;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_6:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_7;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_7:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_8;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_8:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_9;
LEGUP_F_safe_div_func_int8_t_s_s_BB__8_9:
		next_state = LEGUP_F_safe_div_func_int8_t_s_s_BB__8_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %0*/
	/*   %1 = icmp eq i8 %si2, 0*/
		safe_div_func_int8_t_s_s_0_1 = (arg_si2 == 8'd0);
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %2*/
	/*   %3 = icmp eq i8 %si1, -128*/
		safe_div_func_int8_t_s_s_2_3 = (arg_si1 == -8'd128);
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %4*/
	/*   %5 = icmp eq i8 %si2, -1*/
		safe_div_func_int8_t_s_s_4_5 = (arg_si2 == -8'd1);
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %6*/
	/*   %7 = sext i8 %si1 to i32*/
		safe_div_func_int8_t_s_s_6_7 = $signed(arg_si1);
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %8*/
	/*   %9 = sext i8 %si1 to i32*/
		safe_div_func_int8_t_s_s_8_9 = $signed(arg_si1);
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %8*/
	/*   %10 = sext i8 %si2 to i32*/
		safe_div_func_int8_t_s_s_8_10 = $signed(arg_si2);
end
always @(*) begin
	safe_div_func_int8_t_s_s_8_11 = safe_div_func_int8_t_s_s_signed_divide_32_0;
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int8_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int8_t_s_s_12_13 = safe_div_func_int8_t_s_s_6_7;
	end
	/* safe_div_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_int8_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_int8_t_s_s_12_13 = safe_div_func_int8_t_s_s_8_11;
	end
end
always @(posedge clk) begin
	/* safe_div_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int8_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int8_t_s_s_12_13_reg <= safe_div_func_int8_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_div_func_int8_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_12_13_reg"); $finish; end
	end
	/* safe_div_func_int8_t_s_s: %12*/
	/*   %13 = phi i32 [ %7, %6 ], [ %11, %8 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_int8_t_s_s_BB__8_37) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_int8_t_s_s_12_13_reg <= safe_div_func_int8_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_div_func_int8_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %12*/
	/*   %14 = trunc i32 %13 to i8*/
		safe_div_func_int8_t_s_s_12_14 = safe_div_func_int8_t_s_s_12_13_reg[7:0];
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %8*/
	/*   %11 = sdiv i32 %9, %10*/
		safe_div_func_int8_t_s_s_signed_divide_32_0_op0 = safe_div_func_int8_t_s_s_8_9;
end
always @(*) begin
	/* safe_div_func_int8_t_s_s: %8*/
	/*   %11 = sdiv i32 %9, %10*/
		safe_div_func_int8_t_s_s_signed_divide_32_0_op1 = safe_div_func_int8_t_s_s_8_10;
end
always @(*) begin
	lpm_divide_safe_div_func_int8_t_s_s_8_11_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_int8_t_s_s_8_11_out = lpm_divide_safe_div_func_int8_t_s_s_8_11_temp_out;
end
always @(*) begin
	safe_div_func_int8_t_s_s_signed_divide_32_0 = lpm_divide_safe_div_func_int8_t_s_s_8_11_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_int8_t_s_s: %12*/
	/*   ret i8 %14*/
	if ((cur_state == LEGUP_F_safe_div_func_int8_t_s_s_BB__12_38)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_int8_t_s_s: %12*/
	/*   ret i8 %14*/
	if ((cur_state == LEGUP_F_safe_div_func_int8_t_s_s_BB__12_38)) begin
		return_val <= safe_div_func_int8_t_s_s_12_14;
		if (start == 1'b0 && ^(safe_div_func_int8_t_s_s_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_int16_t_s_s_0_1;
reg  safe_rshift_func_int16_t_s_s_2_3;
reg  safe_rshift_func_int16_t_s_s_4_5;
reg [31:0] safe_rshift_func_int16_t_s_s_6_7;
reg [31:0] safe_rshift_func_int16_t_s_s_8_9;
reg [31:0] safe_rshift_func_int16_t_s_s_8_10;
reg [31:0] safe_rshift_func_int16_t_s_s_11_12;
reg [31:0] safe_rshift_func_int16_t_s_s_11_12_reg;
reg [15:0] safe_rshift_func_int16_t_s_s_11_13;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__0_1:
	if ((safe_rshift_func_int16_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4;
	else if ((safe_rshift_func_int16_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__2_2;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6:
		next_state = LEGUP_0;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__2_2:
	if ((safe_rshift_func_int16_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4;
	else if ((safe_rshift_func_int16_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__4_3;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__4_3:
	if ((safe_rshift_func_int16_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4;
	else if ((safe_rshift_func_int16_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4:
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6;
LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5:
		next_state = LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %0*/
	/*   %1 = icmp slt i16 %left, 0*/
		safe_rshift_func_int16_t_s_s_0_1 = ($signed(arg_left) < $signed(16'd0));
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %2*/
	/*   %3 = icmp slt i32 %right, 0*/
		safe_rshift_func_int16_t_s_s_2_3 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %4*/
	/*   %5 = icmp sgt i32 %right, 31*/
		safe_rshift_func_int16_t_s_s_4_5 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %6*/
	/*   %7 = sext i16 %left to i32*/
		safe_rshift_func_int16_t_s_s_6_7 = $signed(arg_left);
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %8*/
	/*   %9 = sext i16 %left to i32*/
		safe_rshift_func_int16_t_s_s_8_9 = $signed(arg_left);
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %8*/
	/*   %10 = ashr i32 %9, %right*/
		safe_rshift_func_int16_t_s_s_8_10 = ($signed(safe_rshift_func_int16_t_s_s_8_9) >>> arg_right);
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_int16_t_s_s_11_12 = safe_rshift_func_int16_t_s_s_6_7;
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_int16_t_s_s_11_12 = safe_rshift_func_int16_t_s_s_8_10;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__6_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_int16_t_s_s_11_12_reg <= safe_rshift_func_int16_t_s_s_11_12;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_11_12_reg"); $finish; end
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_int16_t_s_s_11_12_reg <= safe_rshift_func_int16_t_s_s_11_12;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   %13 = trunc i32 %12 to i16*/
		safe_rshift_func_int16_t_s_s_11_13 = safe_rshift_func_int16_t_s_s_11_12_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_int16_t_s_s: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_rshift_func_int16_t_s_s_BB__11_6)) begin
		return_val <= safe_rshift_func_int16_t_s_s_11_13;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_si1;
input [7:0] arg_si2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_add_func_int8_t_s_s_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_int8_t_s_s: %0*/
	/*   %1 = add i8 %si1, %si2*/
		safe_add_func_int8_t_s_s_0_1 = (arg_si1 + arg_si2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_int8_t_s_s: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_int8_t_s_s_BB__0_1)) begin
		return_val <= safe_add_func_int8_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_add_func_int8_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_div_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_3 = 4'd3;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_4 = 4'd4;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_5 = 4'd5;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_6 = 4'd6;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_7 = 4'd7;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_8 = 4'd8;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_9 = 4'd9;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_10 = 4'd10;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11 = 4'd11;
parameter [3:0] LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg [3:0] cur_state;
reg [3:0] next_state;
reg  safe_div_func_uint8_t_u_u_0_1;
reg [7:0] safe_div_func_uint8_t_u_u_3_div;
reg [7:0] safe_div_func_uint8_t_u_u_4_in;
reg [7:0] safe_div_func_uint8_t_u_u_4_in_reg;
reg [7:0] safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op0;
reg [7:0] safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op1;
wire [7:0] lpm_divide_safe_div_func_uint8_t_u_u_3_div_temp_out;
wire [7:0] safe_div_func_uint8_t_u_u_3_div_unused;
reg  lpm_divide_safe_div_func_uint8_t_u_u_3_div_en;
reg [7:0] lpm_divide_safe_div_func_uint8_t_u_u_3_div_out;
reg [7:0] safe_div_func_uint8_t_u_u_unsigned_divide_8_0;

/*   %div = udiv i8 %ui1, %ui2*/
lpm_divide lpm_divide_safe_div_func_uint8_t_u_u_3_div (
	.quotient (lpm_divide_safe_div_func_uint8_t_u_u_3_div_temp_out),
	.remain (safe_div_func_uint8_t_u_u_3_div_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_div_func_uint8_t_u_u_3_div_en),
	.numer (safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op0),
	.denom (safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op1)
);

defparam
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_pipeline = 8,
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_widthn = 8,
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_widthd = 8,
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_drepresentation = "UNSIGNED",
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_safe_div_func_uint8_t_u_u_3_div.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__0_1:
	if ((safe_div_func_uint8_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2;
	else if ((safe_div_func_uint8_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_3;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_10:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_3:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_4;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_4:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_5;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_5:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_6;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_6:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_7;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_7:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_8;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_8:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_9;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_9:
		next_state = LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_10;
LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %0*/
	/*   %1 = icmp eq i8 %ui2, 0*/
		safe_div_func_uint8_t_u_u_0_1 = (arg_ui2 == 8'd0);
end
always @(*) begin
	safe_div_func_uint8_t_u_u_3_div = safe_div_func_uint8_t_u_u_unsigned_divide_8_0;
end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint8_t_u_u_4_in = arg_ui1;
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	else /* if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_div_func_uint8_t_u_u_4_in = safe_div_func_uint8_t_u_u_3_div;
	end
end
always @(posedge clk) begin
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint8_t_u_u_4_in_reg <= safe_div_func_uint8_t_u_u_4_in;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_4_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_4_in_reg"); $finish; end
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   %.in = phi i8 [ %ui1, %2 ], [ %div, %3 ]*/
	if (((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__3_11) & (memory_controller_waitrequest == 1'd0))) begin
		safe_div_func_uint8_t_u_u_4_in_reg <= safe_div_func_uint8_t_u_u_4_in;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_4_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_4_in_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %3*/
	/*   %div = udiv i8 %ui1, %ui2*/
		safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op0 = arg_ui1;
end
always @(*) begin
	/* safe_div_func_uint8_t_u_u: %3*/
	/*   %div = udiv i8 %ui1, %ui2*/
		safe_div_func_uint8_t_u_u_unsigned_divide_8_0_op1 = arg_ui2;
end
always @(*) begin
	lpm_divide_safe_div_func_uint8_t_u_u_3_div_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_div_func_uint8_t_u_u_3_div_out = lpm_divide_safe_div_func_uint8_t_u_u_3_div_temp_out;
end
always @(*) begin
	safe_div_func_uint8_t_u_u_unsigned_divide_8_0 = lpm_divide_safe_div_func_uint8_t_u_u_3_div_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   ret i8 %.in*/
	if ((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_div_func_uint8_t_u_u: %4*/
	/*   ret i8 %.in*/
	if ((cur_state == LEGUP_F_safe_div_func_uint8_t_u_u_BB__4_12)) begin
		return_val <= safe_div_func_uint8_t_u_u_4_in_reg;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_4_in_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_sub_func_int32_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4 = 3'd4;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_si1;
input [31:0] arg_si2;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] safe_sub_func_int32_t_s_s_0_1;
reg [31:0] safe_sub_func_int32_t_s_s_0_2;
reg [31:0] safe_sub_func_int32_t_s_s_0_3;
reg [31:0] safe_sub_func_int32_t_s_s_0_4;
reg [31:0] safe_sub_func_int32_t_s_s_0_5;
reg [31:0] safe_sub_func_int32_t_s_s_0_6;
reg [31:0] safe_sub_func_int32_t_s_s_0_7;
reg  safe_sub_func_int32_t_s_s_0_8;
reg [31:0] safe_sub_func_int32_t_s_s_10_11;
reg [31:0] safe_sub_func_int32_t_s_s_12_13;
reg [31:0] safe_sub_func_int32_t_s_s_12_13_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__0_1;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__0_1:
	if ((safe_sub_func_int32_t_s_s_0_8 == 1'd1))
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2;
	else if ((safe_sub_func_int32_t_s_s_0_8 == 1'd0))
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3:
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4:
		next_state = LEGUP_0;
LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2:
		next_state = LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %1 = xor i32 %si1, %si2*/
		safe_sub_func_int32_t_s_s_0_1 = (arg_si1 ^ arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %2 = xor i32 %si1, %si2*/
		safe_sub_func_int32_t_s_s_0_2 = (arg_si1 ^ arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %3 = and i32 %2, -2147483648*/
		safe_sub_func_int32_t_s_s_0_3 = (safe_sub_func_int32_t_s_s_0_2 & -32'd2147483648);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %4 = xor i32 %3, %si1*/
		safe_sub_func_int32_t_s_s_0_4 = (safe_sub_func_int32_t_s_s_0_3 ^ arg_si1);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %5 = sub nsw i32 %4, %si2*/
		safe_sub_func_int32_t_s_s_0_5 = (safe_sub_func_int32_t_s_s_0_4 - arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %6 = xor i32 %5, %si2*/
		safe_sub_func_int32_t_s_s_0_6 = (safe_sub_func_int32_t_s_s_0_5 ^ arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %7 = and i32 %1, %6*/
		safe_sub_func_int32_t_s_s_0_7 = (safe_sub_func_int32_t_s_s_0_1 & safe_sub_func_int32_t_s_s_0_6);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %0*/
	/*   %8 = icmp slt i32 %7, 0*/
		safe_sub_func_int32_t_s_s_0_8 = ($signed(safe_sub_func_int32_t_s_s_0_7) < $signed(32'd0));
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %10*/
	/*   %11 = sub nsw i32 %si1, %si2*/
		safe_sub_func_int32_t_s_s_10_11 = (arg_si1 - arg_si2);
end
always @(*) begin
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_sub_func_int32_t_s_s_12_13 = arg_si1;
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_sub_func_int32_t_s_s_12_13 = safe_sub_func_int32_t_s_s_10_11;
	end
end
always @(posedge clk) begin
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__9_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_sub_func_int32_t_s_s_12_13_reg <= safe_sub_func_int32_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_12_13_reg"); $finish; end
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   %13 = phi i32 [ %si1, %9 ], [ %11, %10 ]*/
	if (((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__10_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_sub_func_int32_t_s_s_12_13_reg <= safe_sub_func_int32_t_s_s_12_13;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_12_13_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   ret i32 %13*/
	if ((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_sub_func_int32_t_s_s: %12*/
	/*   ret i32 %13*/
	if ((cur_state == LEGUP_F_safe_sub_func_int32_t_s_s_BB__12_4)) begin
		return_val <= safe_sub_func_int32_t_s_s_12_13_reg;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_12_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mod_func_uint32_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__2_2 = 6'd2;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_3 = 6'd3;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_4 = 6'd4;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_5 = 6'd5;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_6 = 6'd6;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_7 = 6'd7;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_8 = 6'd8;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_9 = 6'd9;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_10 = 6'd10;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_11 = 6'd11;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_12 = 6'd12;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_13 = 6'd13;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_14 = 6'd14;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_15 = 6'd15;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_16 = 6'd16;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_17 = 6'd17;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_18 = 6'd18;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_19 = 6'd19;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_20 = 6'd20;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_21 = 6'd21;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_22 = 6'd22;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_23 = 6'd23;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_24 = 6'd24;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_25 = 6'd25;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_26 = 6'd26;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_27 = 6'd27;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_28 = 6'd28;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_29 = 6'd29;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_30 = 6'd30;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_31 = 6'd31;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_32 = 6'd32;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_33 = 6'd33;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_34 = 6'd34;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_35 = 6'd35;
parameter [5:0] LEGUP_F_safe_mod_func_uint32_t_u_u_BB__5_36 = 6'd36;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_ui1;
input [31:0] arg_ui2;
reg [5:0] cur_state;
reg [5:0] next_state;
reg  safe_mod_func_uint32_t_u_u_0_1;
reg [31:0] safe_mod_func_uint32_t_u_u_3_4;
reg [31:0] safe_mod_func_uint32_t_u_u_5_6;
reg [31:0] safe_mod_func_uint32_t_u_u_5_6_reg;
reg [31:0] safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0_op0;
reg [31:0] safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0_op1;
wire [31:0] lpm_divide_safe_mod_func_uint32_t_u_u_3_4_temp_out;
wire [31:0] safe_mod_func_uint32_t_u_u_3_4_unused;
reg  lpm_divide_safe_mod_func_uint32_t_u_u_3_4_en;
reg [31:0] lpm_divide_safe_mod_func_uint32_t_u_u_3_4_out;
reg [31:0] safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0;

/*   %4 = urem i32 %ui1, %ui2*/
lpm_divide lpm_divide_safe_mod_func_uint32_t_u_u_3_4 (
	.quotient (safe_mod_func_uint32_t_u_u_3_4_unused),
	.remain (lpm_divide_safe_mod_func_uint32_t_u_u_3_4_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_safe_mod_func_uint32_t_u_u_3_4_en),
	.numer (safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0_op0),
	.denom (safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0_op1)
);

defparam
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4.lpm_pipeline = 32,
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4.lpm_widthn = 32,
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4.lpm_widthd = 32,
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4.lpm_drepresentation = "UNSIGNED",
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__0_1;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__0_1:
	if ((safe_mod_func_uint32_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__2_2;
	else if ((safe_mod_func_uint32_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_3;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__5_36;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_10:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_11;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_11:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_12;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_12:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_13;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_13:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_14;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_14:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_15;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_15:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_16;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_16:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_17;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_17:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_18;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_18:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_19;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_19:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_20;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_20:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_21;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_21:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_22;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_22:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_23;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_23:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_24;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_24:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_25;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_25:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_26;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_26:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_27;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_27:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_28;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_28:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_29;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_29:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_30;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_3:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_4;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_30:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_31;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_31:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_32;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_32:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_33;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_33:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_34;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_34:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_35;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_35:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__5_36;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_4:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_5;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_5:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_6;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_6:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_7;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_7:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_8;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_8:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_9;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_9:
		next_state = LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_10;
LEGUP_F_safe_mod_func_uint32_t_u_u_BB__5_36:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_mod_func_uint32_t_u_u: %0*/
	/*   %1 = icmp eq i32 %ui2, 0*/
		safe_mod_func_uint32_t_u_u_0_1 = (arg_ui2 == 32'd0);
end
always @(*) begin
	safe_mod_func_uint32_t_u_u_3_4 = safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0;
end
always @(*) begin
	/* safe_mod_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_uint32_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_uint32_t_u_u_5_6 = arg_ui1;
	end
	/* safe_mod_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	else /* if (((cur_state == LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_mod_func_uint32_t_u_u_5_6 = safe_mod_func_uint32_t_u_u_3_4;
	end
end
always @(posedge clk) begin
	/* safe_mod_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_uint32_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_uint32_t_u_u_5_6_reg <= safe_mod_func_uint32_t_u_u_5_6;
		if (start == 1'b0 && ^(safe_mod_func_uint32_t_u_u_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_5_6_reg"); $finish; end
	end
	/* safe_mod_func_uint32_t_u_u: %5*/
	/*   %6 = phi i32 [ %ui1, %2 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_safe_mod_func_uint32_t_u_u_BB__3_35) & (memory_controller_waitrequest == 1'd0))) begin
		safe_mod_func_uint32_t_u_u_5_6_reg <= safe_mod_func_uint32_t_u_u_5_6;
		if (start == 1'b0 && ^(safe_mod_func_uint32_t_u_u_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_5_6_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_mod_func_uint32_t_u_u: %3*/
	/*   %4 = urem i32 %ui1, %ui2*/
		safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0_op0 = arg_ui1;
end
always @(*) begin
	/* safe_mod_func_uint32_t_u_u: %3*/
	/*   %4 = urem i32 %ui1, %ui2*/
		safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0_op1 = arg_ui2;
end
always @(*) begin
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_safe_mod_func_uint32_t_u_u_3_4_out = lpm_divide_safe_mod_func_uint32_t_u_u_3_4_temp_out;
end
always @(*) begin
	safe_mod_func_uint32_t_u_u_unsigned_modulus_32_0 = lpm_divide_safe_mod_func_uint32_t_u_u_3_4_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mod_func_uint32_t_u_u: %5*/
	/*   ret i32 %6*/
	if ((cur_state == LEGUP_F_safe_mod_func_uint32_t_u_u_BB__5_36)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mod_func_uint32_t_u_u: %5*/
	/*   ret i32 %6*/
	if ((cur_state == LEGUP_F_safe_mod_func_uint32_t_u_u_BB__5_36)) begin
		return_val <= safe_mod_func_uint32_t_u_u_5_6_reg;
		if (start == 1'b0 && ^(safe_mod_func_uint32_t_u_u_5_6_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_int8_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6 = 3'd6;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_int8_t_s_s_0_1;
reg  safe_lshift_func_int8_t_s_s_2_3;
reg  safe_lshift_func_int8_t_s_s_4_5;
reg [31:0] safe_lshift_func_int8_t_s_s_6_7;
reg [31:0] safe_lshift_func_int8_t_s_s_6_8;
reg  safe_lshift_func_int8_t_s_s_6_9;
reg [31:0] safe_lshift_func_int8_t_s_s_10_11;
reg [31:0] safe_lshift_func_int8_t_s_s_12_13;
reg [31:0] safe_lshift_func_int8_t_s_s_12_14;
reg [31:0] safe_lshift_func_int8_t_s_s_15_16;
reg [31:0] safe_lshift_func_int8_t_s_s_15_16_reg;
reg [7:0] safe_lshift_func_int8_t_s_s_15_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__0_1;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__0_1:
	if ((safe_lshift_func_int8_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__2_2;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6:
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__2_2:
	if ((safe_lshift_func_int8_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__4_3;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__4_3:
	if ((safe_lshift_func_int8_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__6_4;
LEGUP_F_safe_lshift_func_int8_t_s_s_BB__6_4:
	if ((safe_lshift_func_int8_t_s_s_6_9 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int8_t_s_s_6_9 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %0*/
	/*   %1 = icmp slt i8 %left, 0*/
		safe_lshift_func_int8_t_s_s_0_1 = ($signed(arg_left) < $signed(8'd0));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %2*/
	/*   %3 = icmp slt i32 %right, 0*/
		safe_lshift_func_int8_t_s_s_2_3 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %4*/
	/*   %5 = icmp sgt i32 %right, 31*/
		safe_lshift_func_int8_t_s_s_4_5 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %6*/
	/*   %7 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_s_6_7 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %6*/
	/*   %8 = lshr i32 127, %right*/
		safe_lshift_func_int8_t_s_s_6_8 = (32'd127 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %6*/
	/*   %9 = icmp sgt i32 %7, %8*/
		safe_lshift_func_int8_t_s_s_6_9 = ($signed(safe_lshift_func_int8_t_s_s_6_7) > $signed(safe_lshift_func_int8_t_s_s_6_8));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %10*/
	/*   %11 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_s_10_11 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %12*/
	/*   %13 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_s_12_13 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %12*/
	/*   %14 = shl i32 %13, %right*/
		safe_lshift_func_int8_t_s_s_12_14 = (safe_lshift_func_int8_t_s_s_12_13 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_s_15_16 = safe_lshift_func_int8_t_s_s_10_11;
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_int8_t_s_s_15_16 = safe_lshift_func_int8_t_s_s_12_14;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_s_15_16_reg <= safe_lshift_func_int8_t_s_s_15_16;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_15_16_reg"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__12_6) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_s_15_16_reg <= safe_lshift_func_int8_t_s_s_15_16;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   %17 = trunc i32 %16 to i8*/
		safe_lshift_func_int8_t_s_s_15_17 = safe_lshift_func_int8_t_s_s_15_16_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   ret i8 %17*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_s: %15*/
	/*   ret i8 %17*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_s_BB__15_7)) begin
		return_val <= safe_lshift_func_int8_t_s_s_15_17;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5 = 3'd5;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_uint16_t_u_u_0_1;
reg [31:0] safe_lshift_func_uint16_t_u_u_2_3;
reg [31:0] safe_lshift_func_uint16_t_u_u_2_4;
reg  safe_lshift_func_uint16_t_u_u_2_5;
reg [31:0] safe_lshift_func_uint16_t_u_u_6_7;
reg [31:0] safe_lshift_func_uint16_t_u_u_8_9;
reg [31:0] safe_lshift_func_uint16_t_u_u_8_10;
reg [31:0] safe_lshift_func_uint16_t_u_u_11_12;
reg [31:0] safe_lshift_func_uint16_t_u_u_11_12_reg;
reg [15:0] safe_lshift_func_uint16_t_u_u_11_13;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__0_1:
	if ((safe_lshift_func_uint16_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3;
	else if ((safe_lshift_func_uint16_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__2_2;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__2_2:
	if ((safe_lshift_func_uint16_t_u_u_2_5 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3;
	else if ((safe_lshift_func_uint16_t_u_u_2_5 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5;
LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_lshift_func_uint16_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %2*/
	/*   %3 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %2*/
	/*   %4 = lshr i32 65535, %right*/
		safe_lshift_func_uint16_t_u_u_2_4 = (32'd65535 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %2*/
	/*   %5 = icmp sgt i32 %3, %4*/
		safe_lshift_func_uint16_t_u_u_2_5 = ($signed(safe_lshift_func_uint16_t_u_u_2_3) > $signed(safe_lshift_func_uint16_t_u_u_2_4));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %6*/
	/*   %7 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_u_6_7 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %8*/
	/*   %9 = zext i16 %left to i32*/
		safe_lshift_func_uint16_t_u_u_8_9 = arg_left;
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %8*/
	/*   %10 = shl i32 %9, %right*/
		safe_lshift_func_uint16_t_u_u_8_10 = (safe_lshift_func_uint16_t_u_u_8_9 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_u_11_12 = safe_lshift_func_uint16_t_u_u_6_7;
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_uint16_t_u_u_11_12 = safe_lshift_func_uint16_t_u_u_8_10;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__6_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_u_11_12_reg <= safe_lshift_func_uint16_t_u_u_11_12;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_11_12_reg"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %12 = phi i32 [ %7, %6 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_uint16_t_u_u_11_12_reg <= safe_lshift_func_uint16_t_u_u_11_12;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   %13 = trunc i32 %12 to i16*/
		safe_lshift_func_uint16_t_u_u_11_13 = safe_lshift_func_uint16_t_u_u_11_12_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_uint16_t_u_u: %11*/
	/*   ret i16 %13*/
	if ((cur_state == LEGUP_F_safe_lshift_func_uint16_t_u_u_BB__11_5)) begin
		return_val <= safe_lshift_func_uint16_t_u_u_11_13;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__6_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__12_6 = 3'd6;
parameter [2:0] LEGUP_F_safe_lshift_func_int16_t_s_s_BB__15_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_int16_t_s_s_0_1;
reg  safe_lshift_func_int16_t_s_s_2_3;
reg  safe_lshift_func_int16_t_s_s_4_5;
reg [31:0] safe_lshift_func_int16_t_s_s_6_7;
reg [31:0] safe_lshift_func_int16_t_s_s_6_8;
reg  safe_lshift_func_int16_t_s_s_6_9;
reg [31:0] safe_lshift_func_int16_t_s_s_10_11;
reg [31:0] safe_lshift_func_int16_t_s_s_12_13;
reg [31:0] safe_lshift_func_int16_t_s_s_12_14;
reg [31:0] safe_lshift_func_int16_t_s_s_15_16;
reg [31:0] safe_lshift_func_int16_t_s_s_15_16_reg;
reg [15:0] safe_lshift_func_int16_t_s_s_15_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__0_1:
	if ((safe_lshift_func_int16_t_s_s_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int16_t_s_s_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__2_2;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__15_7;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__12_6:
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__15_7;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__15_7:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__2_2:
	if ((safe_lshift_func_int16_t_s_s_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int16_t_s_s_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__4_3;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__4_3:
	if ((safe_lshift_func_int16_t_s_s_4_5 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int16_t_s_s_4_5 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__6_4;
LEGUP_F_safe_lshift_func_int16_t_s_s_BB__6_4:
	if ((safe_lshift_func_int16_t_s_s_6_9 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5;
	else if ((safe_lshift_func_int16_t_s_s_6_9 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int16_t_s_s_BB__12_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %0*/
	/*   %1 = icmp slt i16 %left, 0*/
		safe_lshift_func_int16_t_s_s_0_1 = ($signed(arg_left) < $signed(16'd0));
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %2*/
	/*   %3 = icmp slt i32 %right, 0*/
		safe_lshift_func_int16_t_s_s_2_3 = ($signed(arg_right) < $signed(32'd0));
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %4*/
	/*   %5 = icmp sgt i32 %right, 31*/
		safe_lshift_func_int16_t_s_s_4_5 = ($signed(arg_right) > $signed(32'd31));
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %6*/
	/*   %7 = sext i16 %left to i32*/
		safe_lshift_func_int16_t_s_s_6_7 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %6*/
	/*   %8 = lshr i32 32767, %right*/
		safe_lshift_func_int16_t_s_s_6_8 = (32'd32767 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %6*/
	/*   %9 = icmp sgt i32 %7, %8*/
		safe_lshift_func_int16_t_s_s_6_9 = ($signed(safe_lshift_func_int16_t_s_s_6_7) > $signed(safe_lshift_func_int16_t_s_s_6_8));
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %10*/
	/*   %11 = sext i16 %left to i32*/
		safe_lshift_func_int16_t_s_s_10_11 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %12*/
	/*   %13 = sext i16 %left to i32*/
		safe_lshift_func_int16_t_s_s_12_13 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %12*/
	/*   %14 = shl i32 %13, %right*/
		safe_lshift_func_int16_t_s_s_12_14 = (safe_lshift_func_int16_t_s_s_12_13 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int16_t_s_s_15_16 = safe_lshift_func_int16_t_s_s_10_11;
	end
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_int16_t_s_s_BB__12_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_int16_t_s_s_15_16 = safe_lshift_func_int16_t_s_s_12_14;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int16_t_s_s_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int16_t_s_s_15_16_reg <= safe_lshift_func_int16_t_s_s_15_16;
		if (start == 1'b0 && ^(safe_lshift_func_int16_t_s_s_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_15_16_reg"); $finish; end
	end
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   %16 = phi i32 [ %11, %10 ], [ %14, %12 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int16_t_s_s_BB__12_6) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int16_t_s_s_15_16_reg <= safe_lshift_func_int16_t_s_s_15_16;
		if (start == 1'b0 && ^(safe_lshift_func_int16_t_s_s_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   %17 = trunc i32 %16 to i16*/
		safe_lshift_func_int16_t_s_s_15_17 = safe_lshift_func_int16_t_s_s_15_16_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   ret i16 %17*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int16_t_s_s_BB__15_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_int16_t_s_s: %15*/
	/*   ret i16 %17*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int16_t_s_s_BB__15_7)) begin
		return_val <= safe_lshift_func_int16_t_s_s_15_17;
		if (start == 1'b0 && ^(safe_lshift_func_int16_t_s_s_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_mul_func_int16_t_s_s
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_si1,
	arg_si2
);

parameter [1:0] LEGUP_0 = 2'd0;
parameter [1:0] LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_1 = 2'd1;
parameter [1:0] LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2 = 2'd2;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_si1;
input [15:0] arg_si2;
reg [1:0] cur_state;
reg [1:0] next_state;
reg [15:0] safe_mul_func_int16_t_s_s_0_1;
reg  lpm_mult_safe_mul_func_int16_t_s_s_0_1_en;
reg [15:0] safe_mul_func_int16_t_s_s_0_1_stage0_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_1;
LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_1:
		next_state = LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2;
LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	safe_mul_func_int16_t_s_s_0_1 = safe_mul_func_int16_t_s_s_0_1_stage0_reg;
end
always @(*) begin
	lpm_mult_safe_mul_func_int16_t_s_s_0_1_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* safe_mul_func_int16_t_s_s: %0*/
	/*   %1 = mul i16 %si1, %si2*/
	if ((lpm_mult_safe_mul_func_int16_t_s_s_0_1_en == 1'd1)) begin
		safe_mul_func_int16_t_s_s_0_1_stage0_reg <= (arg_si1 * arg_si2);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_mul_func_int16_t_s_s: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_mul_func_int16_t_s_s: %0*/
	/*   ret i16 %1*/
	if ((cur_state == LEGUP_F_safe_mul_func_int16_t_s_s_BB__0_2)) begin
		return_val <= safe_mul_func_int16_t_s_s_0_1;
		if (start == 1'b0 && ^(safe_mul_func_int16_t_s_s_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_lshift_func_int8_t_s_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_u_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4 = 3'd4;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_u_BB__10_5 = 3'd5;
parameter [2:0] LEGUP_F_safe_lshift_func_int8_t_s_u_BB__13_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_lshift_func_int8_t_s_u_0_1;
reg  safe_lshift_func_int8_t_s_u_2_3;
reg [31:0] safe_lshift_func_int8_t_s_u_4_5;
reg [31:0] safe_lshift_func_int8_t_s_u_4_6;
reg  safe_lshift_func_int8_t_s_u_4_7;
reg [31:0] safe_lshift_func_int8_t_s_u_8_9;
reg [31:0] safe_lshift_func_int8_t_s_u_10_11;
reg [31:0] safe_lshift_func_int8_t_s_u_10_12;
reg [31:0] safe_lshift_func_int8_t_s_u_13_14;
reg [31:0] safe_lshift_func_int8_t_s_u_13_14_reg;
reg [7:0] safe_lshift_func_int8_t_s_u_13_15;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__0_1;
LEGUP_F_safe_lshift_func_int8_t_s_u_BB__0_1:
	if ((safe_lshift_func_int8_t_s_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4;
	else if ((safe_lshift_func_int8_t_s_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__2_2;
LEGUP_F_safe_lshift_func_int8_t_s_u_BB__10_5:
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__13_6;
LEGUP_F_safe_lshift_func_int8_t_s_u_BB__13_6:
		next_state = LEGUP_0;
LEGUP_F_safe_lshift_func_int8_t_s_u_BB__2_2:
	if ((safe_lshift_func_int8_t_s_u_2_3 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4;
	else if ((safe_lshift_func_int8_t_s_u_2_3 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__4_3;
LEGUP_F_safe_lshift_func_int8_t_s_u_BB__4_3:
	if ((safe_lshift_func_int8_t_s_u_4_7 == 1'd1))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4;
	else if ((safe_lshift_func_int8_t_s_u_4_7 == 1'd0))
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__10_5;
LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4:
		next_state = LEGUP_F_safe_lshift_func_int8_t_s_u_BB__13_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %0*/
	/*   %1 = icmp slt i8 %left, 0*/
		safe_lshift_func_int8_t_s_u_0_1 = ($signed(arg_left) < $signed(8'd0));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %2*/
	/*   %3 = icmp ugt i32 %right, 31*/
		safe_lshift_func_int8_t_s_u_2_3 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %4*/
	/*   %5 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_u_4_5 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %4*/
	/*   %6 = lshr i32 127, %right*/
		safe_lshift_func_int8_t_s_u_4_6 = (32'd127 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %4*/
	/*   %7 = icmp sgt i32 %5, %6*/
		safe_lshift_func_int8_t_s_u_4_7 = ($signed(safe_lshift_func_int8_t_s_u_4_5) > $signed(safe_lshift_func_int8_t_s_u_4_6));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %8*/
	/*   %9 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_u_8_9 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %10*/
	/*   %11 = sext i8 %left to i32*/
		safe_lshift_func_int8_t_s_u_10_11 = $signed(arg_left);
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %10*/
	/*   %12 = shl i32 %11, %right*/
		safe_lshift_func_int8_t_s_u_10_12 = (safe_lshift_func_int8_t_s_u_10_11 <<< (arg_right % 32));
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_u_13_14 = safe_lshift_func_int8_t_s_u_8_9;
	end
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	else /* if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_u_BB__10_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_lshift_func_int8_t_s_u_13_14 = safe_lshift_func_int8_t_s_u_10_12;
	end
end
always @(posedge clk) begin
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_u_BB__8_4) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_u_13_14_reg <= safe_lshift_func_int8_t_s_u_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_u_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_13_14_reg"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   %14 = phi i32 [ %9, %8 ], [ %12, %10 ]*/
	if (((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_u_BB__10_5) & (memory_controller_waitrequest == 1'd0))) begin
		safe_lshift_func_int8_t_s_u_13_14_reg <= safe_lshift_func_int8_t_s_u_13_14;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_u_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   %15 = trunc i32 %14 to i8*/
		safe_lshift_func_int8_t_s_u_13_15 = safe_lshift_func_int8_t_s_u_13_14_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_u_BB__13_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_lshift_func_int8_t_s_u: %13*/
	/*   ret i8 %15*/
	if ((cur_state == LEGUP_F_safe_lshift_func_int8_t_s_u_BB__13_6)) begin
		return_val <= safe_lshift_func_int8_t_s_u_13_15;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_u_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_add_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_ui1,
	arg_ui2
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_ui1;
input [7:0] arg_ui2;
reg  cur_state;
reg  next_state;
reg [7:0] safe_add_func_uint8_t_u_u_0_1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   %1 = add i8 %ui1, %ui2*/
		safe_add_func_uint8_t_u_u_0_1 = (arg_ui1 + arg_ui2);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_add_func_uint8_t_u_u: %0*/
	/*   ret i8 %1*/
	if ((cur_state == LEGUP_F_safe_add_func_uint8_t_u_u_BB__0_1)) begin
		return_val <= safe_add_func_uint8_t_u_u_0_1;
		if (start == 1'b0 && ^(safe_add_func_uint8_t_u_u_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint8_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__7_4 = 3'd4;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [7:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint8_t_u_u_0_1;
reg [31:0] safe_rshift_func_uint8_t_u_u_2_3;
reg [31:0] safe_rshift_func_uint8_t_u_u_4_5;
reg [31:0] safe_rshift_func_uint8_t_u_u_4_6;
reg [31:0] safe_rshift_func_uint8_t_u_u_7_8;
reg [31:0] safe_rshift_func_uint8_t_u_u_7_8_reg;
reg [7:0] safe_rshift_func_uint8_t_u_u_7_9;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__0_1;
LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__0_1:
	if ((safe_rshift_func_uint8_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__2_2;
	else if ((safe_rshift_func_uint8_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__4_3;
LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__7_4:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_rshift_func_uint8_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_u: %2*/
	/*   %3 = zext i8 %left to i32*/
		safe_rshift_func_uint8_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_u: %4*/
	/*   %5 = zext i8 %left to i32*/
		safe_rshift_func_uint8_t_u_u_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_u: %4*/
	/*   %6 = lshr i32 %5, %right*/
		safe_rshift_func_uint8_t_u_u_4_6 = (safe_rshift_func_uint8_t_u_u_4_5 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint8_t_u_u_7_8 = safe_rshift_func_uint8_t_u_u_2_3;
	end
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint8_t_u_u_7_8 = safe_rshift_func_uint8_t_u_u_4_6;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint8_t_u_u_7_8_reg <= safe_rshift_func_uint8_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_7_8_reg"); $finish; end
	end
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint8_t_u_u_7_8_reg <= safe_rshift_func_uint8_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   %9 = trunc i32 %8 to i8*/
		safe_rshift_func_uint8_t_u_u_7_9 = safe_rshift_func_uint8_t_u_u_7_8_reg[7:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   ret i8 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__7_4)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint8_t_u_u: %7*/
	/*   ret i8 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint8_t_u_u_BB__7_4)) begin
		return_val <= safe_rshift_func_uint8_t_u_u_7_9;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_u_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module safe_rshift_func_uint16_t_u_u
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_left,
	arg_right
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2 = 3'd2;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3 = 3'd3;
parameter [2:0] LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4 = 3'd4;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [15:0] return_val;
input [15:0] arg_left;
input [31:0] arg_right;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  safe_rshift_func_uint16_t_u_u_0_1;
reg [31:0] safe_rshift_func_uint16_t_u_u_2_3;
reg [31:0] safe_rshift_func_uint16_t_u_u_4_5;
reg [31:0] safe_rshift_func_uint16_t_u_u_4_6;
reg [31:0] safe_rshift_func_uint16_t_u_u_7_8;
reg [31:0] safe_rshift_func_uint16_t_u_u_7_8_reg;
reg [15:0] safe_rshift_func_uint16_t_u_u_7_9;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__0_1:
	if ((safe_rshift_func_uint16_t_u_u_0_1 == 1'd1))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2;
	else if ((safe_rshift_func_uint16_t_u_u_0_1 == 1'd0))
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3:
		next_state = LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4;
LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %0*/
	/*   %1 = icmp ugt i32 %right, 31*/
		safe_rshift_func_uint16_t_u_u_0_1 = (arg_right > 32'd31);
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %2*/
	/*   %3 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_u_2_3 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %4*/
	/*   %5 = zext i16 %left to i32*/
		safe_rshift_func_uint16_t_u_u_4_5 = arg_left;
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %4*/
	/*   %6 = lshr i32 %5, %right*/
		safe_rshift_func_uint16_t_u_u_4_6 = (safe_rshift_func_uint16_t_u_u_4_5 >>> (arg_right % 32));
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8 = safe_rshift_func_uint16_t_u_u_2_3;
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	else /* if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) */ begin
		safe_rshift_func_uint16_t_u_u_7_8 = safe_rshift_func_uint16_t_u_u_4_6;
	end
end
always @(posedge clk) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8_reg <= safe_rshift_func_uint16_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_7_8_reg"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %8 = phi i32 [ %3, %2 ], [ %6, %4 ]*/
	if (((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__4_3) & (memory_controller_waitrequest == 1'd0))) begin
		safe_rshift_func_uint16_t_u_u_7_8_reg <= safe_rshift_func_uint16_t_u_u_7_8;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   %9 = trunc i32 %8 to i16*/
		safe_rshift_func_uint16_t_u_u_7_9 = safe_rshift_func_uint16_t_u_u_7_8_reg[15:0];
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   ret i16 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* safe_rshift_func_uint16_t_u_u: %7*/
	/*   ret i16 %9*/
	if ((cur_state == LEGUP_F_safe_rshift_func_uint16_t_u_u_BB__7_4)) begin
		return_val <= safe_rshift_func_uint16_t_u_u_7_9;
		if (start == 1'b0 && ^(safe_rshift_func_uint16_t_u_u_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_2
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__5_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__9_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_2_BB__15_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_0_3_reg;
reg [31:0] legup_memcpy_2_0_4;
reg [31:0] legup_memcpy_2_0_4_reg;
reg [31:0] legup_memcpy_2_5_6;
reg [31:0] legup_memcpy_2_5_7;
reg  legup_memcpy_2_5_8;
reg  legup_memcpy_2_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_11;
reg [15:0] legup_memcpy_2_9_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_9_14_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_2_BB__0_1;
LEGUP_F_legup_memcpy_2_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_2_BB__0_2;
LEGUP_F_legup_memcpy_2_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_2_BB__0_3;
LEGUP_F_legup_memcpy_2_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_4;
LEGUP_F_legup_memcpy_2_BB__15_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_2_BB__5_4:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_5;
LEGUP_F_legup_memcpy_2_BB__5_5:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_6;
LEGUP_F_legup_memcpy_2_BB__5_6:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_7;
LEGUP_F_legup_memcpy_2_BB__5_7:
	if ((legup_memcpy_2_5_8_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_2_BB__15_14;
	else if ((legup_memcpy_2_5_8_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_2_BB__9_8;
LEGUP_F_legup_memcpy_2_BB__9_10:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_11;
LEGUP_F_legup_memcpy_2_BB__9_11:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_12;
LEGUP_F_legup_memcpy_2_BB__9_12:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_13;
LEGUP_F_legup_memcpy_2_BB__9_13:
		next_state = LEGUP_F_legup_memcpy_2_BB__5_4;
LEGUP_F_legup_memcpy_2_BB__9_8:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_9;
LEGUP_F_legup_memcpy_2_BB__9_9:
		next_state = LEGUP_F_legup_memcpy_2_BB__9_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_2: %0*/
	/*   %2 = bitcast i8* %d to i16**/
		legup_memcpy_2_0_2 = arg_d;
end
always @(*) begin
	/* legup_memcpy_2: %0*/
	/*   %3 = bitcast i8* %s to i16**/
		legup_memcpy_2_0_3 = arg_s;
end
always @(posedge clk) begin
	/* legup_memcpy_2: %0*/
	/*   %3 = bitcast i8* %s to i16**/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		legup_memcpy_2_0_3_reg <= legup_memcpy_2_0_3;
		if (start == 1'b0 && ^(legup_memcpy_2_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %0*/
	/*   %4 = lshr i32 %n, 1*/
		legup_memcpy_2_0_4 = (arg_n >>> (32'd1 % 32));
end
always @(posedge clk) begin
	/* legup_memcpy_2: %0*/
	/*   %4 = lshr i32 %n, 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		legup_memcpy_2_0_4_reg <= legup_memcpy_2_0_4;
		if (start == 1'b0 && ^(legup_memcpy_2_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
		legup_memcpy_2_5_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_2: %5*/
	/*   %7 = add i32 %6, -1*/
		legup_memcpy_2_5_7 = (legup_memcpy_2_5_6 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_2: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
		legup_memcpy_2_5_8 = (legup_memcpy_2_5_6 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_2: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		legup_memcpy_2_5_8_reg <= legup_memcpy_2_5_8;
		if (start == 1'b0 && ^(legup_memcpy_2_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
		legup_memcpy_2_9_10 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %11 = getelementptr inbounds i16* %10, i32 1*/
		legup_memcpy_2_9_11 = (legup_memcpy_2_9_10 + (2 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
		legup_memcpy_2_9_12 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
		legup_memcpy_2_9_13 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		legup_memcpy_2_9_13_reg <= legup_memcpy_2_9_13;
		if (start == 1'b0 && ^(legup_memcpy_2_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_2: %9*/
	/*   %14 = getelementptr inbounds i16* %13, i32 1*/
		legup_memcpy_2_9_14 = (legup_memcpy_2_9_13 + (2 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_2: %9*/
	/*   %14 = getelementptr inbounds i16* %13, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		legup_memcpy_2_9_14_reg <= legup_memcpy_2_9_14;
		if (start == 1'b0 && ^(legup_memcpy_2_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_9_14_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_2: %15*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__15_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_1_a;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_st_a;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_2_0_st_a;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_address_a = legup_memcpy_2_9_13_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_in_a = legup_memcpy_2_0_4_reg;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_in_a = legup_memcpy_2_5_7;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_in_a = legup_memcpy_2_9_11;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_in_a = legup_memcpy_2_9_12;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__5_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   %10 = load i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %11, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16 %12, i16* %13, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_12)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_dt_a;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_st_a;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_dt_a;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_address_b = legup_memcpy_2_9_10;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_2_0_dt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_in_b = legup_memcpy_2_0_2;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_in_b = legup_memcpy_2_0_3_reg;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_in_b = legup_memcpy_2_9_14_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %2, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_2: %0*/
	/*   store i16* %3, i16** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   %13 = load i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_2: %9*/
	/*   %12 = load i16* %10, align 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_10)) begin
		memory_controller_size_b = 2'd1;
	end
	/* legup_memcpy_2: %9*/
	/*   store i16* %14, i16** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_2_BB__9_11)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__15_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_3_reg;
reg [31:0] legup_memcpy_4_0_4;
reg [31:0] legup_memcpy_4_0_4_reg;
reg [31:0] legup_memcpy_4_5_6;
reg [31:0] legup_memcpy_4_5_7;
reg  legup_memcpy_4_5_8;
reg  legup_memcpy_4_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_11;
reg [31:0] legup_memcpy_4_9_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_14_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_4_BB__0_1;
LEGUP_F_legup_memcpy_4_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_4_BB__0_2;
LEGUP_F_legup_memcpy_4_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_4_BB__0_3;
LEGUP_F_legup_memcpy_4_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_4;
LEGUP_F_legup_memcpy_4_BB__15_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_4_BB__5_4:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_5;
LEGUP_F_legup_memcpy_4_BB__5_5:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_6;
LEGUP_F_legup_memcpy_4_BB__5_6:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_7;
LEGUP_F_legup_memcpy_4_BB__5_7:
	if ((legup_memcpy_4_5_8_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_4_BB__15_14;
	else if ((legup_memcpy_4_5_8_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_4_BB__9_8;
LEGUP_F_legup_memcpy_4_BB__9_10:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_11;
LEGUP_F_legup_memcpy_4_BB__9_11:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_12;
LEGUP_F_legup_memcpy_4_BB__9_12:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_13;
LEGUP_F_legup_memcpy_4_BB__9_13:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_4;
LEGUP_F_legup_memcpy_4_BB__9_8:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_9;
LEGUP_F_legup_memcpy_4_BB__9_9:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %2 = bitcast i8* %d to i32**/
		legup_memcpy_4_0_2 = arg_d;
end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %3 = bitcast i8* %s to i32**/
		legup_memcpy_4_0_3 = arg_s;
end
always @(posedge clk) begin
	/* legup_memcpy_4: %0*/
	/*   %3 = bitcast i8* %s to i32**/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		legup_memcpy_4_0_3_reg <= legup_memcpy_4_0_3;
		if (start == 1'b0 && ^(legup_memcpy_4_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %4 = lshr i32 %n, 2*/
		legup_memcpy_4_0_4 = (arg_n >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* legup_memcpy_4: %0*/
	/*   %4 = lshr i32 %n, 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		legup_memcpy_4_0_4_reg <= legup_memcpy_4_0_4;
		if (start == 1'b0 && ^(legup_memcpy_4_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
		legup_memcpy_4_5_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %7 = add i32 %6, -1*/
		legup_memcpy_4_5_7 = (legup_memcpy_4_5_6 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
		legup_memcpy_4_5_8 = (legup_memcpy_4_5_6 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_4: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		legup_memcpy_4_5_8_reg <= legup_memcpy_4_5_8;
		if (start == 1'b0 && ^(legup_memcpy_4_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
		legup_memcpy_4_9_10 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %11 = getelementptr inbounds i32* %10, i32 1*/
		legup_memcpy_4_9_11 = (legup_memcpy_4_9_10 + (4 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
		legup_memcpy_4_9_12 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
		legup_memcpy_4_9_13 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		legup_memcpy_4_9_13_reg <= legup_memcpy_4_9_13;
		if (start == 1'b0 && ^(legup_memcpy_4_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %14 = getelementptr inbounds i32* %13, i32 1*/
		legup_memcpy_4_9_14 = (legup_memcpy_4_9_13 + (4 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_4: %9*/
	/*   %14 = getelementptr inbounds i32* %13, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		legup_memcpy_4_9_14_reg <= legup_memcpy_4_9_14;
		if (start == 1'b0 && ^(legup_memcpy_4_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_9_14_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_4: %15*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__15_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_address_a = legup_memcpy_4_9_13_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_in_a = legup_memcpy_4_0_4_reg;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_in_a = legup_memcpy_4_5_7;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_in_a = legup_memcpy_4_9_11;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_in_a = legup_memcpy_4_9_12;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_address_b = legup_memcpy_4_9_10;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_in_b = legup_memcpy_4_0_2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_in_b = legup_memcpy_4_0_3_reg;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_in_b = legup_memcpy_4_9_14_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_8bytes
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_13 = 5'd13;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_15 = 5'd15;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_17 = 5'd17;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_2 = 5'd2;
parameter [4:0] LEGUP_function_call_4 = 5'd4;
parameter [4:0] LEGUP_function_call_6 = 5'd6;
parameter [4:0] LEGUP_function_call_8 = 5'd8;
parameter [4:0] LEGUP_function_call_10 = 5'd10;
parameter [4:0] LEGUP_function_call_12 = 5'd12;
parameter [4:0] LEGUP_function_call_14 = 5'd14;
parameter [4:0] LEGUP_function_call_16 = 5'd16;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [7:0] crc32_8bytes_0_1;
reg [63:0] crc32_8bytes_0_2;
reg [7:0] crc32_8bytes_0_3;
reg [7:0] crc32_8bytes_0_3_reg;
reg [63:0] crc32_8bytes_0_4;
reg [7:0] crc32_8bytes_0_5;
reg [7:0] crc32_8bytes_0_5_reg;
reg [63:0] crc32_8bytes_0_6;
reg [7:0] crc32_8bytes_0_7;
reg [7:0] crc32_8bytes_0_7_reg;
reg [63:0] crc32_8bytes_0_8;
reg [7:0] crc32_8bytes_0_9;
reg [7:0] crc32_8bytes_0_9_reg;
reg [63:0] crc32_8bytes_0_10;
reg [7:0] crc32_8bytes_0_11;
reg [7:0] crc32_8bytes_0_11_reg;
reg [63:0] crc32_8bytes_0_12;
reg [7:0] crc32_8bytes_0_13;
reg [7:0] crc32_8bytes_0_13_reg;
reg [63:0] crc32_8bytes_0_14;
reg [7:0] crc32_8bytes_0_15;
reg [7:0] crc32_8bytes_0_15_reg;
reg  crc32_byte_start;
reg [7:0] crc32_byte_arg_b;
wire  crc32_byte_memory_controller_enable_a;
wire  crc32_byte_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_a;
wire [1:0] crc32_byte_memory_controller_size_a;
wire  crc32_byte_memory_controller_enable_b;
wire  crc32_byte_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_b;
wire [1:0] crc32_byte_memory_controller_size_b;
reg  crc32_byte_finish_final;
reg  crc32_byte_finish_reg;
wire  crc32_byte_finish;


crc32_byte crc32_byte (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_byte_memory_controller_enable_a),
	.memory_controller_address_a (crc32_byte_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_byte_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_byte_memory_controller_in_a),
	.memory_controller_size_a (crc32_byte_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_byte_memory_controller_enable_b),
	.memory_controller_address_b (crc32_byte_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_byte_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_byte_memory_controller_in_b),
	.memory_controller_size_b (crc32_byte_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_byte_start),
	.finish (crc32_byte_finish),
	.arg_b (crc32_byte_arg_b)
);

defparam
	crc32_byte.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_1;
LEGUP_F_crc32_8bytes_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_crc32_8bytes_BB__0_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_crc32_8bytes_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_crc32_8bytes_BB__0_15:
		next_state = LEGUP_function_call_16;
LEGUP_F_crc32_8bytes_BB__0_17:
		next_state = LEGUP_0;
LEGUP_F_crc32_8bytes_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_crc32_8bytes_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_crc32_8bytes_BB__0_7:
		next_state = LEGUP_function_call_8;
LEGUP_F_crc32_8bytes_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_function_call_10:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_11;
LEGUP_function_call_12:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_13;
LEGUP_function_call_14:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_15;
LEGUP_function_call_16:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_17;
LEGUP_function_call_2:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_3;
LEGUP_function_call_4:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_5;
LEGUP_function_call_6:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_7;
LEGUP_function_call_8:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %1 = trunc i64 %val to i8*/
		crc32_8bytes_0_1 = arg_val[7:0];
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %2 = lshr i64 %val, 8*/
		crc32_8bytes_0_2 = (arg_val >>> (64'd8 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
		crc32_8bytes_0_3 = crc32_8bytes_0_2[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_3_reg <= crc32_8bytes_0_3;
		if (start == 1'b0 && ^(crc32_8bytes_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %4 = lshr i64 %val, 16*/
		crc32_8bytes_0_4 = (arg_val >>> (64'd16 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
		crc32_8bytes_0_5 = crc32_8bytes_0_4[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_5_reg <= crc32_8bytes_0_5;
		if (start == 1'b0 && ^(crc32_8bytes_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %6 = lshr i64 %val, 24*/
		crc32_8bytes_0_6 = (arg_val >>> (64'd24 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
		crc32_8bytes_0_7 = crc32_8bytes_0_6[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_7_reg <= crc32_8bytes_0_7;
		if (start == 1'b0 && ^(crc32_8bytes_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %8 = lshr i64 %val, 32*/
		crc32_8bytes_0_8 = (arg_val >>> (64'd32 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
		crc32_8bytes_0_9 = crc32_8bytes_0_8[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_9_reg <= crc32_8bytes_0_9;
		if (start == 1'b0 && ^(crc32_8bytes_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %10 = lshr i64 %val, 40*/
		crc32_8bytes_0_10 = (arg_val >>> (64'd40 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
		crc32_8bytes_0_11 = crc32_8bytes_0_10[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_11_reg <= crc32_8bytes_0_11;
		if (start == 1'b0 && ^(crc32_8bytes_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %12 = lshr i64 %val, 48*/
		crc32_8bytes_0_12 = (arg_val >>> (64'd48 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
		crc32_8bytes_0_13 = crc32_8bytes_0_12[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_13_reg <= crc32_8bytes_0_13;
		if (start == 1'b0 && ^(crc32_8bytes_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %14 = lshr i64 %val, 56*/
		crc32_8bytes_0_14 = (arg_val >>> (64'd56 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
		crc32_8bytes_0_15 = crc32_8bytes_0_14[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_15_reg <= crc32_8bytes_0_15;
		if (start == 1'b0 && ^(crc32_8bytes_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_15_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_1;
		if (start == 1'b0 && ^(crc32_8bytes_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_3_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_5_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_7_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_9_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_11_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_13_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_15_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
end
always @(*) begin
	crc32_byte_finish_final = crc32_byte_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_1))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_3))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_5))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_7))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_9))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_11))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_13))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_15))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_17)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_7
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_p_8,
	arg_p_9,
	arg_p_10
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_func_7_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_func_7_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_func_7_BB__0_5 = 7'd5;
parameter [6:0] LEGUP_F_func_7_BB__0_7 = 7'd7;
parameter [6:0] LEGUP_F_func_7_BB__0_9 = 7'd9;
parameter [6:0] LEGUP_F_func_7_BB__0_10 = 7'd10;
parameter [6:0] LEGUP_F_func_7_BB__0_11 = 7'd11;
parameter [6:0] LEGUP_F_func_7_BB__0_13 = 7'd13;
parameter [6:0] LEGUP_F_func_7_BB__0_14 = 7'd14;
parameter [6:0] LEGUP_F_func_7_BB__0_15 = 7'd15;
parameter [6:0] LEGUP_F_func_7_BB__0_17 = 7'd17;
parameter [6:0] LEGUP_F_func_7_BB__0_19 = 7'd19;
parameter [6:0] LEGUP_F_func_7_BB__0_21 = 7'd21;
parameter [6:0] LEGUP_F_func_7_BB__0_22 = 7'd22;
parameter [6:0] LEGUP_F_func_7_BB__0_23 = 7'd23;
parameter [6:0] LEGUP_F_func_7_BB__22_24 = 7'd24;
parameter [6:0] LEGUP_F_func_7_BB__23_25 = 7'd25;
parameter [6:0] LEGUP_F_func_7_BB__33_26 = 7'd26;
parameter [6:0] LEGUP_F_func_7_BB__34_27 = 7'd27;
parameter [6:0] LEGUP_F_func_7_BB__34_29 = 7'd29;
parameter [6:0] LEGUP_F_func_7_BB__34_30 = 7'd30;
parameter [6:0] LEGUP_F_func_7_BB__34_31 = 7'd31;
parameter [6:0] LEGUP_F_func_7_BB__34_33 = 7'd33;
parameter [6:0] LEGUP_F_func_7_BB__34_34 = 7'd34;
parameter [6:0] LEGUP_F_func_7_BB__34_35 = 7'd35;
parameter [6:0] LEGUP_F_func_7_BB__34_36 = 7'd36;
parameter [6:0] LEGUP_F_func_7_BB__34_38 = 7'd38;
parameter [6:0] LEGUP_F_func_7_BB__48_39 = 7'd39;
parameter [6:0] LEGUP_F_func_7_BB__48_40 = 7'd40;
parameter [6:0] LEGUP_F_func_7_BB__48_41 = 7'd41;
parameter [6:0] LEGUP_F_func_7_BB__52_42 = 7'd42;
parameter [6:0] LEGUP_F_func_7_BB__52_43 = 7'd43;
parameter [6:0] LEGUP_F_func_7_BB__52_44 = 7'd44;
parameter [6:0] LEGUP_F_func_7_BB__52_45 = 7'd45;
parameter [6:0] LEGUP_F_func_7_BB__52_47 = 7'd47;
parameter [6:0] LEGUP_F_func_7_BB__52_49 = 7'd49;
parameter [6:0] LEGUP_F_func_7_BB__52_50 = 7'd50;
parameter [6:0] LEGUP_F_func_7_BB__52_51 = 7'd51;
parameter [6:0] LEGUP_F_func_7_BB__52_53 = 7'd53;
parameter [6:0] LEGUP_F_func_7_BB__52_54 = 7'd54;
parameter [6:0] LEGUP_F_func_7_BB__52_55 = 7'd55;
parameter [6:0] LEGUP_F_func_7_BB__52_57 = 7'd57;
parameter [6:0] LEGUP_F_func_7_BB__52_58 = 7'd58;
parameter [6:0] LEGUP_F_func_7_BB__52_59 = 7'd59;
parameter [6:0] LEGUP_F_func_7_BB__52_61 = 7'd61;
parameter [6:0] LEGUP_F_func_7_BB__82_62 = 7'd62;
parameter [6:0] LEGUP_F_func_7_BB__83_63 = 7'd63;
parameter [6:0] LEGUP_F_func_7_BB__83_64 = 7'd64;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_2 = 7'd2;
parameter [6:0] LEGUP_function_call_4 = 7'd4;
parameter [6:0] LEGUP_function_call_6 = 7'd6;
parameter [6:0] LEGUP_function_call_8 = 7'd8;
parameter [6:0] LEGUP_function_call_12 = 7'd12;
parameter [6:0] LEGUP_function_call_16 = 7'd16;
parameter [6:0] LEGUP_function_call_18 = 7'd18;
parameter [6:0] LEGUP_function_call_20 = 7'd20;
parameter [6:0] LEGUP_function_call_28 = 7'd28;
parameter [6:0] LEGUP_function_call_32 = 7'd32;
parameter [6:0] LEGUP_function_call_37 = 7'd37;
parameter [6:0] LEGUP_function_call_46 = 7'd46;
parameter [6:0] LEGUP_function_call_48 = 7'd48;
parameter [6:0] LEGUP_function_call_52 = 7'd52;
parameter [6:0] LEGUP_function_call_56 = 7'd56;
parameter [6:0] LEGUP_function_call_60 = 7'd60;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [7:0] return_val;
input [15:0] arg_p_8;
input [15:0] arg_p_9;
input [31:0] arg_p_10;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_0_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_0_2_reg;
reg [15:0] func_7_0_3;
reg [15:0] func_7_0_3_reg;
reg  func_7_0_4;
reg [31:0] func_7_0_5;
reg [31:0] func_7_0_5_reg;
reg [7:0] func_7_0_6;
reg [7:0] func_7_0_6_reg;
reg [31:0] func_7_0_7;
reg [31:0] func_7_0_7_reg;
reg [7:0] func_7_0_8;
reg [7:0] func_7_0_8_reg;
reg [15:0] func_7_0_9;
reg [15:0] func_7_0_9_reg;
reg [31:0] func_7_0_10;
reg [7:0] func_7_0_11;
reg [7:0] func_7_0_12;
reg [7:0] func_7_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_0_13_reg;
reg [15:0] func_7_0_14;
reg [7:0] func_7_0_15;
reg [7:0] func_7_0_16;
reg [7:0] func_7_0_16_reg;
reg [15:0] func_7_0_17;
reg [15:0] func_7_0_18;
reg [15:0] func_7_0_18_reg;
reg [15:0] func_7_0_19;
reg [15:0] func_7_0_19_reg;
reg [31:0] func_7_0_20;
reg [31:0] func_7_0_20_reg;
reg [31:0] func_7_0_21;
reg [31:0] func_7_0_21_reg;
reg [31:0] func_7_23_p_10not;
reg [31:0] func_7_23_24;
reg  func_7_23_25;
reg [31:0] func_7_23_26;
reg  func_7_23_27;
reg [31:0] func_7_23_28;
reg  func_7_23_29;
reg [31:0] func_7_23_30;
reg [31:0] func_7_23_31;
reg  func_7_23_32;
reg [15:0] func_7_34_35;
reg [15:0] func_7_34_35_reg;
reg [31:0] func_7_34_37;
reg [7:0] func_7_34_38;
reg [7:0] func_7_34_39;
reg [7:0] func_7_34_39_reg;
reg [31:0] func_7_34_40;
reg [31:0] func_7_34_41;
reg [31:0] func_7_34_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_34_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_34_42_reg;
reg [31:0] func_7_34_43;
reg [31:0] func_7_34_44;
reg [15:0] func_7_34_45;
reg [15:0] func_7_34_45_reg;
reg [15:0] func_7_34_46;
reg [15:0] func_7_34_46_reg;
reg  func_7_34_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_48_49;
reg [15:0] func_7_48_50;
reg  func_7_48_51;
reg  func_7_52_53;
reg  func_7_52_53_reg;
reg [31:0] func_7_52_54;
reg  func_7_52_55;
reg [31:0] func_7_52_56;
reg [31:0] func_7_52_57;
reg  func_7_52_58;
reg [31:0] func_7_52_59;
reg [31:0] func_7_52_59_reg;
reg [31:0] func_7_52_60;
reg [31:0] func_7_52_61;
reg [31:0] func_7_52_61_reg;
reg [31:0] func_7_52_62;
reg [31:0] func_7_52_62_reg;
reg [31:0] func_7_52_63;
reg [31:0] func_7_52_63_reg;
reg [31:0] func_7_52_64;
reg [7:0] func_7_52_65;
reg [7:0] func_7_52_66;
reg [7:0] func_7_52_66_reg;
reg [31:0] func_7_52_67;
reg [31:0] func_7_52_68;
reg  func_7_52_69;
reg [31:0] func_7_52_70;
reg [31:0] func_7_52_70_reg;
reg [31:0] func_7_52_71;
reg [31:0] func_7_52_73;
reg [31:0] func_7_52_73_reg;
reg [31:0] func_7_52_74;
reg [31:0] func_7_52_75;
reg [31:0] func_7_52_75_reg;
reg [7:0] func_7_52_76;
reg [7:0] func_7_52_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_52_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_52_77_reg;
reg [15:0] func_7_52_78;
reg [7:0] func_7_52_79;
reg [7:0] func_7_52_80;
reg [7:0] func_7_52_80_reg;
reg  func_7_52_81;
reg [15:0] func_7_83_84;
reg [15:0] func_7_83_84_reg;
reg [7:0] func_7_83_85;
reg [7:0] func_7_83_85_reg;
reg  legup_memcpy_2_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_arg_s;
reg [31:0] legup_memcpy_2_arg_n;
wire  legup_memcpy_2_memory_controller_enable_a;
wire  legup_memcpy_2_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_2_memory_controller_in_a;
wire [1:0] legup_memcpy_2_memory_controller_size_a;
wire  legup_memcpy_2_memory_controller_enable_b;
wire  legup_memcpy_2_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_2_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_2_memory_controller_in_b;
wire [1:0] legup_memcpy_2_memory_controller_size_b;
reg  legup_memcpy_2_finish_final;
reg  legup_memcpy_2_finish_reg;
wire  legup_memcpy_2_finish;
reg  legup_memcpy_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_s;
reg [31:0] legup_memcpy_4_arg_n;
wire  legup_memcpy_4_memory_controller_enable_a;
wire  legup_memcpy_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_a;
wire [1:0] legup_memcpy_4_memory_controller_size_a;
wire  legup_memcpy_4_memory_controller_enable_b;
wire  legup_memcpy_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_b;
wire [1:0] legup_memcpy_4_memory_controller_size_b;
reg  legup_memcpy_4_finish_final;
reg  legup_memcpy_4_finish_reg;
wire  legup_memcpy_4_finish;
reg  safe_lshift_func_int8_t_s_s_start;
reg [7:0] safe_lshift_func_int8_t_s_s_arg_left;
reg [31:0] safe_lshift_func_int8_t_s_s_arg_right;
wire  safe_lshift_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_int8_t_s_s_memory_controller_size_a;
wire  safe_lshift_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_int8_t_s_s_memory_controller_size_b;
reg  safe_lshift_func_int8_t_s_s_finish_final;
reg  safe_lshift_func_int8_t_s_s_finish_reg;
wire  safe_lshift_func_int8_t_s_s_finish;
wire [7:0] safe_lshift_func_int8_t_s_s_return_val;
reg [7:0] safe_lshift_func_int8_t_s_s_return_val_reg;
reg  safe_lshift_func_int8_t_s_u_start;
reg [7:0] safe_lshift_func_int8_t_s_u_arg_left;
reg [31:0] safe_lshift_func_int8_t_s_u_arg_right;
wire  safe_lshift_func_int8_t_s_u_memory_controller_enable_a;
wire  safe_lshift_func_int8_t_s_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int8_t_s_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int8_t_s_u_memory_controller_in_a;
wire [1:0] safe_lshift_func_int8_t_s_u_memory_controller_size_a;
wire  safe_lshift_func_int8_t_s_u_memory_controller_enable_b;
wire  safe_lshift_func_int8_t_s_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int8_t_s_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int8_t_s_u_memory_controller_in_b;
wire [1:0] safe_lshift_func_int8_t_s_u_memory_controller_size_b;
reg  safe_lshift_func_int8_t_s_u_finish_final;
reg  safe_lshift_func_int8_t_s_u_finish_reg;
wire  safe_lshift_func_int8_t_s_u_finish;
wire [7:0] safe_lshift_func_int8_t_s_u_return_val;
reg [7:0] safe_lshift_func_int8_t_s_u_return_val_reg;
reg  safe_rshift_func_uint8_t_u_u_start;
reg [7:0] safe_rshift_func_uint8_t_u_u_arg_left;
reg [31:0] safe_rshift_func_uint8_t_u_u_arg_right;
wire  safe_rshift_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_rshift_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_rshift_func_uint8_t_u_u_finish_final;
reg  safe_rshift_func_uint8_t_u_u_finish_reg;
wire  safe_rshift_func_uint8_t_u_u_finish;
wire [7:0] safe_rshift_func_uint8_t_u_u_return_val;
reg [7:0] safe_rshift_func_uint8_t_u_u_return_val_reg;
reg  safe_add_func_uint8_t_u_u_start;
reg [7:0] safe_add_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_add_func_uint8_t_u_u_arg_ui2;
wire  safe_add_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_add_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_add_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_add_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_add_func_uint8_t_u_u_finish_final;
reg  safe_add_func_uint8_t_u_u_finish_reg;
wire  safe_add_func_uint8_t_u_u_finish;
wire [7:0] safe_add_func_uint8_t_u_u_return_val;
reg [7:0] safe_add_func_uint8_t_u_u_return_val_reg;
reg  safe_mul_func_int16_t_s_s_start;
reg [15:0] safe_mul_func_int16_t_s_s_arg_si1;
reg [15:0] safe_mul_func_int16_t_s_s_arg_si2;
wire  safe_mul_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_mul_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_mul_func_int16_t_s_s_memory_controller_size_a;
wire  safe_mul_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_mul_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_mul_func_int16_t_s_s_memory_controller_size_b;
reg  safe_mul_func_int16_t_s_s_finish_final;
reg  safe_mul_func_int16_t_s_s_finish_reg;
wire  safe_mul_func_int16_t_s_s_finish;
wire [15:0] safe_mul_func_int16_t_s_s_return_val;
reg [15:0] safe_mul_func_int16_t_s_s_return_val_reg;
reg  safe_lshift_func_int16_t_s_s_start;
reg [15:0] safe_lshift_func_int16_t_s_s_arg_left;
reg [31:0] safe_lshift_func_int16_t_s_s_arg_right;
wire  safe_lshift_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_lshift_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_lshift_func_int16_t_s_s_memory_controller_size_a;
wire  safe_lshift_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_lshift_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_lshift_func_int16_t_s_s_memory_controller_size_b;
reg  safe_lshift_func_int16_t_s_s_finish_final;
reg  safe_lshift_func_int16_t_s_s_finish_reg;
wire  safe_lshift_func_int16_t_s_s_finish;
wire [15:0] safe_lshift_func_int16_t_s_s_return_val;
reg [15:0] safe_lshift_func_int16_t_s_s_return_val_reg;
reg  safe_rshift_func_uint16_t_u_u_start;
reg [15:0] safe_rshift_func_uint16_t_u_u_arg_left;
reg [31:0] safe_rshift_func_uint16_t_u_u_arg_right;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_rshift_func_uint16_t_u_u_finish_final;
reg  safe_rshift_func_uint16_t_u_u_finish_reg;
wire  safe_rshift_func_uint16_t_u_u_finish;
wire [15:0] safe_rshift_func_uint16_t_u_u_return_val;
reg  safe_lshift_func_uint16_t_u_u_start;
reg [15:0] safe_lshift_func_uint16_t_u_u_arg_left;
reg [31:0] safe_lshift_func_uint16_t_u_u_arg_right;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_lshift_func_uint16_t_u_u_finish_final;
reg  safe_lshift_func_uint16_t_u_u_finish_reg;
wire  safe_lshift_func_uint16_t_u_u_finish;
wire [15:0] safe_lshift_func_uint16_t_u_u_return_val;
reg [15:0] safe_lshift_func_uint16_t_u_u_return_val_reg;
reg  safe_sub_func_int32_t_s_s_start;
reg [31:0] safe_sub_func_int32_t_s_s_arg_si1;
reg [31:0] safe_sub_func_int32_t_s_s_arg_si2;
wire  safe_sub_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_sub_func_int32_t_s_s_memory_controller_size_a;
wire  safe_sub_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_sub_func_int32_t_s_s_memory_controller_size_b;
reg  safe_sub_func_int32_t_s_s_finish_final;
reg  safe_sub_func_int32_t_s_s_finish_reg;
wire  safe_sub_func_int32_t_s_s_finish;
wire [31:0] safe_sub_func_int32_t_s_s_return_val;
reg [31:0] safe_sub_func_int32_t_s_s_return_val_reg;
reg  safe_add_func_int8_t_s_s_start;
reg [7:0] safe_add_func_int8_t_s_s_arg_si1;
reg [7:0] safe_add_func_int8_t_s_s_arg_si2;
wire  safe_add_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_add_func_int8_t_s_s_memory_controller_size_a;
wire  safe_add_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_add_func_int8_t_s_s_memory_controller_size_b;
reg  safe_add_func_int8_t_s_s_finish_final;
reg  safe_add_func_int8_t_s_s_finish_reg;
wire  safe_add_func_int8_t_s_s_finish;
wire [7:0] safe_add_func_int8_t_s_s_return_val;
reg [7:0] safe_add_func_int8_t_s_s_return_val_reg;
reg  safe_mod_func_uint32_t_u_u_start;
reg [31:0] safe_mod_func_uint32_t_u_u_arg_ui1;
reg [31:0] safe_mod_func_uint32_t_u_u_arg_ui2;
wire  safe_mod_func_uint32_t_u_u_memory_controller_enable_a;
wire  safe_mod_func_uint32_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_uint32_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_uint32_t_u_u_memory_controller_in_a;
wire [1:0] safe_mod_func_uint32_t_u_u_memory_controller_size_a;
wire  safe_mod_func_uint32_t_u_u_memory_controller_enable_b;
wire  safe_mod_func_uint32_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mod_func_uint32_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mod_func_uint32_t_u_u_memory_controller_in_b;
wire [1:0] safe_mod_func_uint32_t_u_u_memory_controller_size_b;
reg  safe_mod_func_uint32_t_u_u_finish_final;
reg  safe_mod_func_uint32_t_u_u_finish_reg;
wire  safe_mod_func_uint32_t_u_u_finish;
wire [31:0] safe_mod_func_uint32_t_u_u_return_val;
reg  safe_div_func_uint8_t_u_u_start;
reg [7:0] safe_div_func_uint8_t_u_u_arg_ui1;
reg [7:0] safe_div_func_uint8_t_u_u_arg_ui2;
wire  safe_div_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_div_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_div_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_div_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_div_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_div_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_div_func_uint8_t_u_u_finish_final;
reg  safe_div_func_uint8_t_u_u_finish_reg;
wire  safe_div_func_uint8_t_u_u_finish;
wire [7:0] safe_div_func_uint8_t_u_u_return_val;
reg [7:0] safe_div_func_uint8_t_u_u_return_val_reg;


legup_memcpy_2 legup_memcpy_2 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_2_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_2_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_2_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_2_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_2_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_2_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_2_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_2_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_2_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_2_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_2_start),
	.finish (legup_memcpy_2_finish),
	.arg_d (legup_memcpy_2_arg_d),
	.arg_s (legup_memcpy_2_arg_s),
	.arg_n (legup_memcpy_2_arg_n)
);

defparam
	legup_memcpy_2.tag_offset = tag_offset;


legup_memcpy_4 legup_memcpy_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_4_start),
	.finish (legup_memcpy_4_finish),
	.arg_d (legup_memcpy_4_arg_d),
	.arg_s (legup_memcpy_4_arg_s),
	.arg_n (legup_memcpy_4_arg_n)
);

defparam
	legup_memcpy_4.tag_offset = tag_offset;


safe_lshift_func_int8_t_s_s safe_lshift_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_int8_t_s_s_start),
	.finish (safe_lshift_func_int8_t_s_s_finish),
	.return_val (safe_lshift_func_int8_t_s_s_return_val),
	.arg_left (safe_lshift_func_int8_t_s_s_arg_left),
	.arg_right (safe_lshift_func_int8_t_s_s_arg_right)
);

defparam
	safe_lshift_func_int8_t_s_s.tag_offset = tag_offset;


safe_lshift_func_int8_t_s_u safe_lshift_func_int8_t_s_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_int8_t_s_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_int8_t_s_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_int8_t_s_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_int8_t_s_u_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_int8_t_s_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_int8_t_s_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_int8_t_s_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_int8_t_s_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_int8_t_s_u_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_int8_t_s_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_int8_t_s_u_start),
	.finish (safe_lshift_func_int8_t_s_u_finish),
	.return_val (safe_lshift_func_int8_t_s_u_return_val),
	.arg_left (safe_lshift_func_int8_t_s_u_arg_left),
	.arg_right (safe_lshift_func_int8_t_s_u_arg_right)
);

defparam
	safe_lshift_func_int8_t_s_u.tag_offset = tag_offset;


safe_rshift_func_uint8_t_u_u safe_rshift_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint8_t_u_u_start),
	.finish (safe_rshift_func_uint8_t_u_u_finish),
	.return_val (safe_rshift_func_uint8_t_u_u_return_val),
	.arg_left (safe_rshift_func_uint8_t_u_u_arg_left),
	.arg_right (safe_rshift_func_uint8_t_u_u_arg_right)
);

defparam
	safe_rshift_func_uint8_t_u_u.tag_offset = tag_offset;


safe_add_func_uint8_t_u_u safe_add_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_uint8_t_u_u_start),
	.finish (safe_add_func_uint8_t_u_u_finish),
	.return_val (safe_add_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_add_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_add_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_add_func_uint8_t_u_u.tag_offset = tag_offset;


safe_mul_func_int16_t_s_s safe_mul_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_int16_t_s_s_start),
	.finish (safe_mul_func_int16_t_s_s_finish),
	.return_val (safe_mul_func_int16_t_s_s_return_val),
	.arg_si1 (safe_mul_func_int16_t_s_s_arg_si1),
	.arg_si2 (safe_mul_func_int16_t_s_s_arg_si2)
);

defparam
	safe_mul_func_int16_t_s_s.tag_offset = tag_offset;


safe_lshift_func_int16_t_s_s safe_lshift_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_int16_t_s_s_start),
	.finish (safe_lshift_func_int16_t_s_s_finish),
	.return_val (safe_lshift_func_int16_t_s_s_return_val),
	.arg_left (safe_lshift_func_int16_t_s_s_arg_left),
	.arg_right (safe_lshift_func_int16_t_s_s_arg_right)
);

defparam
	safe_lshift_func_int16_t_s_s.tag_offset = tag_offset;


safe_rshift_func_uint16_t_u_u safe_rshift_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_uint16_t_u_u_start),
	.finish (safe_rshift_func_uint16_t_u_u_finish),
	.return_val (safe_rshift_func_uint16_t_u_u_return_val),
	.arg_left (safe_rshift_func_uint16_t_u_u_arg_left),
	.arg_right (safe_rshift_func_uint16_t_u_u_arg_right)
);

defparam
	safe_rshift_func_uint16_t_u_u.tag_offset = tag_offset;


safe_lshift_func_uint16_t_u_u safe_lshift_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint16_t_u_u_start),
	.finish (safe_lshift_func_uint16_t_u_u_finish),
	.return_val (safe_lshift_func_uint16_t_u_u_return_val),
	.arg_left (safe_lshift_func_uint16_t_u_u_arg_left),
	.arg_right (safe_lshift_func_uint16_t_u_u_arg_right)
);

defparam
	safe_lshift_func_uint16_t_u_u.tag_offset = tag_offset;


safe_sub_func_int32_t_s_s safe_sub_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_int32_t_s_s_start),
	.finish (safe_sub_func_int32_t_s_s_finish),
	.return_val (safe_sub_func_int32_t_s_s_return_val),
	.arg_si1 (safe_sub_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_sub_func_int32_t_s_s_arg_si2)
);

defparam
	safe_sub_func_int32_t_s_s.tag_offset = tag_offset;


safe_add_func_int8_t_s_s safe_add_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_int8_t_s_s_start),
	.finish (safe_add_func_int8_t_s_s_finish),
	.return_val (safe_add_func_int8_t_s_s_return_val),
	.arg_si1 (safe_add_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_add_func_int8_t_s_s_arg_si2)
);

defparam
	safe_add_func_int8_t_s_s.tag_offset = tag_offset;


safe_mod_func_uint32_t_u_u safe_mod_func_uint32_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mod_func_uint32_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_mod_func_uint32_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mod_func_uint32_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mod_func_uint32_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_mod_func_uint32_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mod_func_uint32_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_mod_func_uint32_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mod_func_uint32_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mod_func_uint32_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_mod_func_uint32_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mod_func_uint32_t_u_u_start),
	.finish (safe_mod_func_uint32_t_u_u_finish),
	.return_val (safe_mod_func_uint32_t_u_u_return_val),
	.arg_ui1 (safe_mod_func_uint32_t_u_u_arg_ui1),
	.arg_ui2 (safe_mod_func_uint32_t_u_u_arg_ui2)
);

defparam
	safe_mod_func_uint32_t_u_u.tag_offset = tag_offset;


safe_div_func_uint8_t_u_u safe_div_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_uint8_t_u_u_start),
	.finish (safe_div_func_uint8_t_u_u_finish),
	.return_val (safe_div_func_uint8_t_u_u_return_val),
	.arg_ui1 (safe_div_func_uint8_t_u_u_arg_ui1),
	.arg_ui2 (safe_div_func_uint8_t_u_u_arg_ui2)
);

defparam
	safe_div_func_uint8_t_u_u.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_1;
LEGUP_F_func_7_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_func_7_BB__0_10:
		next_state = LEGUP_F_func_7_BB__0_11;
LEGUP_F_func_7_BB__0_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_func_7_BB__0_13:
		next_state = LEGUP_F_func_7_BB__0_14;
LEGUP_F_func_7_BB__0_14:
		next_state = LEGUP_F_func_7_BB__0_15;
LEGUP_F_func_7_BB__0_15:
		next_state = LEGUP_function_call_16;
LEGUP_F_func_7_BB__0_17:
		next_state = LEGUP_function_call_18;
LEGUP_F_func_7_BB__0_19:
		next_state = LEGUP_function_call_20;
LEGUP_F_func_7_BB__0_21:
		next_state = LEGUP_F_func_7_BB__0_22;
LEGUP_F_func_7_BB__0_22:
		next_state = LEGUP_F_func_7_BB__0_23;
LEGUP_F_func_7_BB__0_23:
	if ((1'd1 == 1'd1))
		next_state = LEGUP_F_func_7_BB__23_25;
	else if ((1'd1 == 1'd0))
		next_state = LEGUP_F_func_7_BB__22_24;
LEGUP_F_func_7_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_func_7_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_func_7_BB__0_7:
		next_state = LEGUP_function_call_8;
LEGUP_F_func_7_BB__0_9:
		next_state = LEGUP_F_func_7_BB__0_10;
LEGUP_F_func_7_BB__22_24:
		next_state = LEGUP_F_func_7_BB__23_25;
LEGUP_F_func_7_BB__23_25:
	if ((func_7_23_32 == 1'd1))
		next_state = LEGUP_F_func_7_BB__34_27;
	else if ((func_7_23_32 == 1'd0))
		next_state = LEGUP_F_func_7_BB__33_26;
LEGUP_F_func_7_BB__33_26:
		next_state = LEGUP_F_func_7_BB__34_27;
LEGUP_F_func_7_BB__34_27:
		next_state = LEGUP_function_call_28;
LEGUP_F_func_7_BB__34_29:
		next_state = LEGUP_F_func_7_BB__34_30;
LEGUP_F_func_7_BB__34_30:
		next_state = LEGUP_F_func_7_BB__34_31;
LEGUP_F_func_7_BB__34_31:
		next_state = LEGUP_function_call_32;
LEGUP_F_func_7_BB__34_33:
		next_state = LEGUP_F_func_7_BB__34_34;
LEGUP_F_func_7_BB__34_34:
		next_state = LEGUP_F_func_7_BB__34_35;
LEGUP_F_func_7_BB__34_35:
		next_state = LEGUP_F_func_7_BB__34_36;
LEGUP_F_func_7_BB__34_36:
		next_state = LEGUP_function_call_37;
LEGUP_F_func_7_BB__34_38:
	if ((func_7_34_47 == 1'd1))
		next_state = LEGUP_F_func_7_BB__48_39;
	else if ((func_7_34_47 == 1'd0))
		next_state = LEGUP_F_func_7_BB__52_42;
LEGUP_F_func_7_BB__48_39:
		next_state = LEGUP_F_func_7_BB__48_40;
LEGUP_F_func_7_BB__48_40:
		next_state = LEGUP_F_func_7_BB__48_41;
LEGUP_F_func_7_BB__48_41:
		next_state = LEGUP_F_func_7_BB__52_42;
LEGUP_F_func_7_BB__52_42:
		next_state = LEGUP_F_func_7_BB__52_43;
LEGUP_F_func_7_BB__52_43:
		next_state = LEGUP_F_func_7_BB__52_44;
LEGUP_F_func_7_BB__52_44:
		next_state = LEGUP_F_func_7_BB__52_45;
LEGUP_F_func_7_BB__52_45:
		next_state = LEGUP_function_call_46;
LEGUP_F_func_7_BB__52_47:
		next_state = LEGUP_function_call_48;
LEGUP_F_func_7_BB__52_49:
		next_state = LEGUP_F_func_7_BB__52_50;
LEGUP_F_func_7_BB__52_50:
		next_state = LEGUP_F_func_7_BB__52_51;
LEGUP_F_func_7_BB__52_51:
		next_state = LEGUP_function_call_52;
LEGUP_F_func_7_BB__52_53:
		next_state = LEGUP_F_func_7_BB__52_54;
LEGUP_F_func_7_BB__52_54:
		next_state = LEGUP_F_func_7_BB__52_55;
LEGUP_F_func_7_BB__52_55:
		next_state = LEGUP_function_call_56;
LEGUP_F_func_7_BB__52_57:
		next_state = LEGUP_F_func_7_BB__52_58;
LEGUP_F_func_7_BB__52_58:
		next_state = LEGUP_F_func_7_BB__52_59;
LEGUP_F_func_7_BB__52_59:
		next_state = LEGUP_function_call_60;
LEGUP_F_func_7_BB__52_61:
	if ((func_7_52_81 == 1'd1))
		next_state = LEGUP_F_func_7_BB__83_63;
	else if ((func_7_52_81 == 1'd0))
		next_state = LEGUP_F_func_7_BB__82_62;
LEGUP_F_func_7_BB__82_62:
		next_state = LEGUP_F_func_7_BB__83_63;
LEGUP_F_func_7_BB__83_63:
		next_state = LEGUP_F_func_7_BB__83_64;
LEGUP_F_func_7_BB__83_64:
		next_state = LEGUP_0;
LEGUP_function_call_12:
	if ((safe_rshift_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_13;
LEGUP_function_call_16:
	if ((safe_add_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_17;
LEGUP_function_call_18:
	if ((safe_mul_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_19;
LEGUP_function_call_2:
	if ((legup_memcpy_2_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_3;
LEGUP_function_call_20:
	if ((safe_lshift_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_21;
LEGUP_function_call_28:
	if ((safe_rshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__34_29;
LEGUP_function_call_32:
	if ((safe_add_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__34_33;
LEGUP_function_call_37:
	if ((safe_lshift_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__34_38;
LEGUP_function_call_4:
	if ((legup_memcpy_4_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_5;
LEGUP_function_call_46:
	if ((safe_sub_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__52_47;
LEGUP_function_call_48:
	if ((safe_add_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__52_49;
LEGUP_function_call_52:
	if ((safe_mod_func_uint32_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__52_53;
LEGUP_function_call_56:
	if ((safe_sub_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__52_57;
LEGUP_function_call_6:
	if ((safe_lshift_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_7;
LEGUP_function_call_60:
	if ((safe_div_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__52_61;
LEGUP_function_call_8:
	if ((safe_lshift_func_int8_t_s_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_7_BB__0_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_7: %0*/
	/*   %1 = bitcast [8 x i16]* %l_51 to i8**/
if (reset) begin func_7_0_1 = 0; end
		func_7_0_1 = `TAG_func_7_0_l_51_a;
end
always @(*) begin
	/* func_7: %0*/
	/*   %2 = bitcast [2 x [8 x i32]]* %l_76 to i8**/
if (reset) begin func_7_0_2 = 0; end
		func_7_0_2 = `TAG_func_7_0_l_76_a;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %2 = bitcast [2 x [8 x i32]]* %l_76 to i8**/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		func_7_0_2_reg <= func_7_0_2;
		if (start == 1'b0 && ^(func_7_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %3 = add i16 %p_9, -1*/
		func_7_0_3 = (arg_p_9 + -16'd1);
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %3 = add i16 %p_9, -1*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		func_7_0_3_reg <= func_7_0_3;
		if (start == 1'b0 && ^(func_7_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %4 = icmp ult i16 %3, 6*/
		func_7_0_4 = (func_7_0_3 < 16'd6);
end
always @(*) begin
	/* func_7: %0*/
	/*   %5 = zext i1 %4 to i32*/
		func_7_0_5 = func_7_0_4;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %5 = zext i1 %4 to i32*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		func_7_0_5_reg <= func_7_0_5;
		if (start == 1'b0 && ^(func_7_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
		func_7_0_6 = safe_lshift_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		func_7_0_6_reg <= func_7_0_6;
		if (start == 1'b0 && ^(func_7_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %7 = zext i8 %6 to i32*/
		func_7_0_7 = func_7_0_6_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %7 = zext i8 %6 to i32*/
	if ((cur_state == LEGUP_F_func_7_BB__0_7)) begin
		func_7_0_7_reg <= func_7_0_7;
		if (start == 1'b0 && ^(func_7_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
		func_7_0_8 = safe_lshift_func_int8_t_s_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		func_7_0_8_reg <= func_7_0_8;
		if (start == 1'b0 && ^(func_7_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %9 = sext i8 %8 to i16*/
		func_7_0_9 = $signed(func_7_0_8_reg);
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %9 = sext i8 %8 to i16*/
	if ((cur_state == LEGUP_F_func_7_BB__0_9)) begin
		func_7_0_9_reg <= func_7_0_9;
		if (start == 1'b0 && ^(func_7_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %10 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
		func_7_0_10 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_7: %0*/
	/*   %11 = trunc i32 %10 to i8*/
		func_7_0_11 = func_7_0_10[7:0];
end
always @(*) begin
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
		func_7_0_12 = safe_rshift_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		func_7_0_12_reg <= func_7_0_12;
		if (start == 1'b0 && ^(func_7_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %13 = getelementptr inbounds [8 x i16]* %l_51, i32 0, i32 4*/
if (reset) begin func_7_0_13 = 0; end
		func_7_0_13 = (`TAG_func_7_0_l_51_a + (2 * 32'd4));
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %13 = getelementptr inbounds [8 x i16]* %l_51, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		func_7_0_13_reg <= func_7_0_13;
		if (start == 1'b0 && ^(func_7_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %14 = load i16* %13, align 2*/
		func_7_0_14 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_7: %0*/
	/*   %15 = trunc i16 %14 to i8*/
		func_7_0_15 = func_7_0_14[7:0];
end
always @(*) begin
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
		func_7_0_16 = safe_add_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		func_7_0_16_reg <= func_7_0_16;
		if (start == 1'b0 && ^(func_7_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %17 = zext i8 %16 to i16*/
		func_7_0_17 = func_7_0_16_reg;
end
always @(*) begin
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
		func_7_0_18 = safe_mul_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		func_7_0_18_reg <= func_7_0_18;
		if (start == 1'b0 && ^(func_7_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
		func_7_0_19 = safe_lshift_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		func_7_0_19_reg <= func_7_0_19;
		if (start == 1'b0 && ^(func_7_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %20 = zext i16 %19 to i32*/
		func_7_0_20 = func_7_0_19_reg;
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %20 = zext i16 %19 to i32*/
	if ((cur_state == LEGUP_F_func_7_BB__0_21)) begin
		func_7_0_20_reg <= func_7_0_20;
		if (start == 1'b0 && ^(func_7_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_20_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %0*/
	/*   %21 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
		func_7_0_21 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %21 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_23)) begin
		func_7_0_21_reg <= func_7_0_21;
		if (start == 1'b0 && ^(func_7_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %23*/
	/*   %p_10.not = and i32 %p_10, -2*/
		func_7_23_p_10not = (arg_p_10 & -32'd2);
end
always @(*) begin
	/* func_7: %23*/
	/*   %24 = xor i32 %p_10.not, -2*/
		func_7_23_24 = (func_7_23_p_10not ^ -32'd2);
end
always @(*) begin
	/* func_7: %23*/
	/*   %25 = icmp slt i32 %24, 26199*/
		func_7_23_25 = ($signed(func_7_23_24) < $signed(32'd26199));
end
always @(*) begin
	/* func_7: %23*/
	/*   %26 = zext i1 %25 to i32*/
		func_7_23_26 = func_7_23_25;
end
always @(*) begin
	/* func_7: %23*/
	/*   %27 = icmp eq i32 %26, %p_10*/
		func_7_23_27 = (func_7_23_26 == arg_p_10);
end
always @(*) begin
	/* func_7: %23*/
	/*   %28 = zext i1 %27 to i32*/
		func_7_23_28 = func_7_23_27;
end
always @(*) begin
	/* func_7: %23*/
	/*   %29 = icmp sge i32 %28, %p_10*/
		func_7_23_29 = ($signed(func_7_23_28) >= $signed(arg_p_10));
end
always @(*) begin
	/* func_7: %23*/
	/*   %30 = zext i1 %29 to i32*/
		func_7_23_30 = func_7_23_29;
end
always @(*) begin
	/* func_7: %23*/
	/*   %31 = and i32 %21, %30*/
		func_7_23_31 = (func_7_0_21_reg & func_7_23_30);
end
always @(*) begin
	/* func_7: %23*/
	/*   %32 = icmp eq i32 %31, 0*/
		func_7_23_32 = (func_7_23_31 == 32'd0);
end
always @(*) begin
	/* func_7: %34*/
	/*   %35 = phi i16 [ -10, %23 ], [ -9, %33 ]*/
	if ((((cur_state == LEGUP_F_func_7_BB__23_25) & (memory_controller_waitrequest == 1'd0)) & (func_7_23_32 == 1'd1))) begin
		func_7_34_35 = -16'd10;
	end
	/* func_7: %34*/
	/*   %35 = phi i16 [ -10, %23 ], [ -9, %33 ]*/
	else /* if (((cur_state == LEGUP_F_func_7_BB__33_26) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_7_34_35 = -16'd9;
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %35 = phi i16 [ -10, %23 ], [ -9, %33 ]*/
	if ((((cur_state == LEGUP_F_func_7_BB__23_25) & (memory_controller_waitrequest == 1'd0)) & (func_7_23_32 == 1'd1))) begin
		func_7_34_35_reg <= func_7_34_35;
		if (start == 1'b0 && ^(func_7_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_35_reg"); $finish; end
	end
	/* func_7: %34*/
	/*   %35 = phi i16 [ -10, %23 ], [ -9, %33 ]*/
	if (((cur_state == LEGUP_F_func_7_BB__33_26) & (memory_controller_waitrequest == 1'd0))) begin
		func_7_34_35_reg <= func_7_34_35;
		if (start == 1'b0 && ^(func_7_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %34*/
	/*   %37 = load i32* @g_37, align 4*/
		func_7_34_37 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_7: %34*/
	/*   %38 = trunc i32 %37 to i8*/
		func_7_34_38 = func_7_34_37[7:0];
end
always @(*) begin
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
		func_7_34_39 = safe_add_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		func_7_34_39_reg <= func_7_34_39;
		if (start == 1'b0 && ^(func_7_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_39_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %34*/
	/*   %40 = zext i8 %39 to i32*/
		func_7_34_40 = func_7_34_39_reg;
end
always @(*) begin
	/* func_7: %34*/
	/*   %41 = and i32 %20, %40*/
		func_7_34_41 = (func_7_0_20_reg & func_7_34_40);
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %41 = and i32 %20, %40*/
	if ((cur_state == LEGUP_F_func_7_BB__34_33)) begin
		func_7_34_41_reg <= func_7_34_41;
		if (start == 1'b0 && ^(func_7_34_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_41_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %34*/
	/*   %42 = getelementptr inbounds [2 x [8 x i32]]* %l_76, i32 0, i32 0, i32 3*/
if (reset) begin func_7_34_42 = 0; end
		func_7_34_42 = (`TAG_func_7_0_l_76_a + (4 * 32'd3));
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %42 = getelementptr inbounds [2 x [8 x i32]]* %l_76, i32 0, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_27)) begin
		func_7_34_42_reg <= func_7_34_42;
		if (start == 1'b0 && ^(func_7_34_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_42_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %34*/
	/*   %43 = load i32* %42, align 4*/
		func_7_34_43 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_7: %34*/
	/*   %44 = xor i32 %43, %41*/
		func_7_34_44 = (func_7_34_43 ^ func_7_34_41_reg);
end
always @(*) begin
	/* func_7: %34*/
	/*   %45 = trunc i32 %44 to i16*/
		func_7_34_45 = func_7_34_44[15:0];
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %45 = trunc i32 %44 to i16*/
	if ((cur_state == LEGUP_F_func_7_BB__34_35)) begin
		func_7_34_45_reg <= func_7_34_45;
		if (start == 1'b0 && ^(func_7_34_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_45_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
		func_7_34_46 = safe_lshift_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		func_7_34_46_reg <= func_7_34_46;
		if (start == 1'b0 && ^(func_7_34_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_34_46_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %34*/
	/*   %47 = icmp eq i16 %46, 0*/
		func_7_34_47 = (func_7_34_46_reg == 16'd0);
end
always @(*) begin
	/* func_7: %48*/
	/*   %49 = getelementptr inbounds [8 x i16]* %l_51, i32 0, i32 2*/
if (reset) begin func_7_48_49 = 0; end
		func_7_48_49 = (`TAG_func_7_0_l_51_a + (2 * 32'd2));
end
always @(*) begin
	/* func_7: %48*/
	/*   %50 = load i16* %49, align 2*/
		func_7_48_50 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_7: %48*/
	/*   %51 = icmp ne i16 %50, 0*/
		func_7_48_51 = (func_7_48_50 != 16'd0);
end
always @(*) begin
	/* func_7: %52*/
	/*   %53 = phi i1 [ true, %34 ], [ %51, %48 ]*/
	if ((((cur_state == LEGUP_F_func_7_BB__34_38) & (memory_controller_waitrequest == 1'd0)) & (func_7_34_47 == 1'd0))) begin
		func_7_52_53 = 1'd1;
	end
	/* func_7: %52*/
	/*   %53 = phi i1 [ true, %34 ], [ %51, %48 ]*/
	else /* if (((cur_state == LEGUP_F_func_7_BB__48_41) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_7_52_53 = func_7_48_51;
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %53 = phi i1 [ true, %34 ], [ %51, %48 ]*/
	if ((((cur_state == LEGUP_F_func_7_BB__34_38) & (memory_controller_waitrequest == 1'd0)) & (func_7_34_47 == 1'd0))) begin
		func_7_52_53_reg <= func_7_52_53;
		if (start == 1'b0 && ^(func_7_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_53_reg"); $finish; end
	end
	/* func_7: %52*/
	/*   %53 = phi i1 [ true, %34 ], [ %51, %48 ]*/
	if (((cur_state == LEGUP_F_func_7_BB__48_41) & (memory_controller_waitrequest == 1'd0))) begin
		func_7_52_53_reg <= func_7_52_53;
		if (start == 1'b0 && ^(func_7_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %54 = zext i1 %53 to i32*/
		func_7_52_54 = func_7_52_53_reg;
end
always @(*) begin
	/* func_7: %52*/
	/*   %55 = icmp sge i32 %54, %p_10*/
		func_7_52_55 = ($signed(func_7_52_54) >= $signed(arg_p_10));
end
always @(*) begin
	/* func_7: %52*/
	/*   %56 = zext i1 %55 to i32*/
		func_7_52_56 = func_7_52_55;
end
always @(*) begin
	/* func_7: %52*/
	/*   %57 = xor i32 %56, %p_10*/
		func_7_52_57 = (func_7_52_56 ^ arg_p_10);
end
always @(*) begin
	/* func_7: %52*/
	/*   %58 = icmp ult i32 %57, -1805883725*/
		func_7_52_58 = (func_7_52_57 < -32'd1805883725);
end
always @(*) begin
	/* func_7: %52*/
	/*   %59 = zext i1 %58 to i32*/
		func_7_52_59 = func_7_52_58;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %59 = zext i1 %58 to i32*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		func_7_52_59_reg <= func_7_52_59;
		if (start == 1'b0 && ^(func_7_52_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_59_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %60 = load i32* @g_77, align 4*/
		func_7_52_60 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_7: %52*/
	/*   %61 = and i32 %60, %59*/
		func_7_52_61 = (func_7_52_60 & func_7_52_59_reg);
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %61 = and i32 %60, %59*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		func_7_52_61_reg <= func_7_52_61;
		if (start == 1'b0 && ^(func_7_52_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_61_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %62 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 0), align 4*/
		func_7_52_62 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %62 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		func_7_52_62_reg <= func_7_52_62;
		if (start == 1'b0 && ^(func_7_52_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_62_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
		func_7_52_63 = safe_sub_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		func_7_52_63_reg <= func_7_52_63;
		if (start == 1'b0 && ^(func_7_52_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_63_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %64 = and i32 %7, %63*/
		func_7_52_64 = (func_7_0_7_reg & func_7_52_63_reg);
end
always @(*) begin
	/* func_7: %52*/
	/*   %65 = trunc i32 %64 to i8*/
		func_7_52_65 = func_7_52_64[7:0];
end
always @(*) begin
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
		func_7_52_66 = safe_add_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		func_7_52_66_reg <= func_7_52_66;
		if (start == 1'b0 && ^(func_7_52_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_66_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %67 = zext i8 %66 to i32*/
		func_7_52_67 = func_7_52_66_reg;
end
always @(*) begin
	/* func_7: %52*/
	/*   %68 = and i32 %67, 7*/
		func_7_52_68 = (func_7_52_67 & 32'd7);
end
always @(*) begin
	/* func_7: %52*/
	/*   %69 = icmp ne i32 %68, %p_10*/
		func_7_52_69 = (func_7_52_68 != arg_p_10);
end
always @(*) begin
	/* func_7: %52*/
	/*   %70 = zext i1 %69 to i32*/
		func_7_52_70 = func_7_52_69;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %70 = zext i1 %69 to i32*/
	if ((cur_state == LEGUP_F_func_7_BB__52_49)) begin
		func_7_52_70_reg <= func_7_52_70;
		if (start == 1'b0 && ^(func_7_52_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_70_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %71 = load volatile i32* @g_22, align 4*/
		func_7_52_71 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_7: %52*/
	/*   %73 = zext i16 %3 to i32*/
		func_7_52_73 = func_7_0_3_reg;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %73 = zext i16 %3 to i32*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		func_7_52_73_reg <= func_7_52_73;
		if (start == 1'b0 && ^(func_7_52_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_73_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %74 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
		func_7_52_74 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
		func_7_52_75 = safe_sub_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		func_7_52_75_reg <= func_7_52_75;
		if (start == 1'b0 && ^(func_7_52_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_75_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %76 = trunc i32 %75 to i8*/
		func_7_52_76 = func_7_52_75_reg[7:0];
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %76 = trunc i32 %75 to i8*/
	if ((cur_state == LEGUP_F_func_7_BB__52_57)) begin
		func_7_52_76_reg <= func_7_52_76;
		if (start == 1'b0 && ^(func_7_52_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_76_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %77 = getelementptr inbounds [8 x i16]* %l_51, i32 0, i32 5*/
if (reset) begin func_7_52_77 = 0; end
		func_7_52_77 = (`TAG_func_7_0_l_51_a + (2 * 32'd5));
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %77 = getelementptr inbounds [8 x i16]* %l_51, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		func_7_52_77_reg <= func_7_52_77;
		if (start == 1'b0 && ^(func_7_52_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_77_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %78 = load i16* %77, align 2*/
		func_7_52_78 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* func_7: %52*/
	/*   %79 = trunc i16 %78 to i8*/
		func_7_52_79 = func_7_52_78[7:0];
end
always @(*) begin
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
		func_7_52_80 = safe_div_func_uint8_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		func_7_52_80_reg <= func_7_52_80;
		if (start == 1'b0 && ^(func_7_52_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_52_80_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %52*/
	/*   %81 = icmp eq i8 %80, 0*/
		func_7_52_81 = (func_7_52_80_reg == 8'd0);
end
always @(*) begin
	/* func_7: %83*/
	/*   %84 = phi i16 [ 0, %52 ], [ 1, %82 ]*/
	if ((((cur_state == LEGUP_F_func_7_BB__52_61) & (memory_controller_waitrequest == 1'd0)) & (func_7_52_81 == 1'd1))) begin
		func_7_83_84 = 16'd0;
	end
	/* func_7: %83*/
	/*   %84 = phi i16 [ 0, %52 ], [ 1, %82 ]*/
	else /* if (((cur_state == LEGUP_F_func_7_BB__82_62) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_7_83_84 = 16'd1;
	end
end
always @(posedge clk) begin
	/* func_7: %83*/
	/*   %84 = phi i16 [ 0, %52 ], [ 1, %82 ]*/
	if ((((cur_state == LEGUP_F_func_7_BB__52_61) & (memory_controller_waitrequest == 1'd0)) & (func_7_52_81 == 1'd1))) begin
		func_7_83_84_reg <= func_7_83_84;
		if (start == 1'b0 && ^(func_7_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_83_84_reg"); $finish; end
	end
	/* func_7: %83*/
	/*   %84 = phi i16 [ 0, %52 ], [ 1, %82 ]*/
	if (((cur_state == LEGUP_F_func_7_BB__82_62) & (memory_controller_waitrequest == 1'd0))) begin
		func_7_83_84_reg <= func_7_83_84;
		if (start == 1'b0 && ^(func_7_83_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_83_84_reg"); $finish; end
	end
end
always @(*) begin
	/* func_7: %83*/
	/*   %85 = trunc i16 %3 to i8*/
		func_7_83_85 = func_7_0_3_reg[7:0];
end
always @(posedge clk) begin
	/* func_7: %83*/
	/*   %85 = trunc i16 %3 to i8*/
	if ((cur_state == LEGUP_F_func_7_BB__83_63)) begin
		func_7_83_85_reg <= func_7_83_85;
		if (start == 1'b0 && ^(func_7_83_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_83_85_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		legup_memcpy_2_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memcpy_2_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		legup_memcpy_2_arg_d <= func_7_0_1;
		if (start == 1'b0 && ^(func_7_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		legup_memcpy_2_arg_s <= `TAG_g_func_7l_51_a;
		if (start == 1'b0 && ^(`TAG_g_func_7l_51_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_1)) begin
		legup_memcpy_2_arg_n <= 32'd16;
		if (start == 1'b0 && ^(32'd16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_2_finish_final = legup_memcpy_2_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_1))) begin
		legup_memcpy_2_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_finish_reg"); $finish; end
	end
	if (legup_memcpy_2_finish) begin
		legup_memcpy_2_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_2_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_3)) begin
		legup_memcpy_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		legup_memcpy_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_3)) begin
		legup_memcpy_4_arg_d <= func_7_0_2_reg;
		if (start == 1'b0 && ^(func_7_0_2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_3)) begin
		legup_memcpy_4_arg_s <= `TAG_g_func_7l_76_a;
		if (start == 1'b0 && ^(`TAG_g_func_7l_76_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_F_func_7_BB__0_3)) begin
		legup_memcpy_4_arg_n <= 32'd64;
		if (start == 1'b0 && ^(32'd64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_4_finish_final = legup_memcpy_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_3))) begin
		legup_memcpy_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
	if (legup_memcpy_4_finish) begin
		legup_memcpy_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_5)) begin
		safe_lshift_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		safe_lshift_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_5)) begin
		safe_lshift_func_int8_t_s_s_arg_left <= 8'd6;
		if (start == 1'b0 && ^(8'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_5)) begin
		safe_lshift_func_int8_t_s_s_arg_right <= func_7_0_5_reg;
		if (start == 1'b0 && ^(func_7_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_int8_t_s_s_finish_final = safe_lshift_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_5))) begin
		safe_lshift_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_int8_t_s_s_finish) begin
		safe_lshift_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_5))) begin
		safe_lshift_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_int8_t_s_s_finish) begin
		safe_lshift_func_int8_t_s_s_return_val_reg <= safe_lshift_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_7)) begin
		safe_lshift_func_int8_t_s_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		safe_lshift_func_int8_t_s_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_7)) begin
		safe_lshift_func_int8_t_s_u_arg_left <= -8'd1;
		if (start == 1'b0 && ^(-8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_7)) begin
		safe_lshift_func_int8_t_s_u_arg_right <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_int8_t_s_u_finish_final = safe_lshift_func_int8_t_s_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_7))) begin
		safe_lshift_func_int8_t_s_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_finish_reg"); $finish; end
	end
	if (safe_lshift_func_int8_t_s_u_finish) begin
		safe_lshift_func_int8_t_s_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_7))) begin
		safe_lshift_func_int8_t_s_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_int8_t_s_u_finish) begin
		safe_lshift_func_int8_t_s_u_return_val_reg <= safe_lshift_func_int8_t_s_u_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_int8_t_s_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int8_t_s_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_11)) begin
		safe_rshift_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		safe_rshift_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_11)) begin
		safe_rshift_func_uint8_t_u_u_arg_left <= func_7_0_11;
		if (start == 1'b0 && ^(func_7_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_11)) begin
		safe_rshift_func_uint8_t_u_u_arg_right <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint8_t_u_u_finish_final = safe_rshift_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_11))) begin
		safe_rshift_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint8_t_u_u_finish) begin
		safe_rshift_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_11))) begin
		safe_rshift_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_uint8_t_u_u_finish) begin
		safe_rshift_func_uint8_t_u_u_return_val_reg <= safe_rshift_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_15)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_31)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		safe_add_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_15)) begin
		safe_add_func_uint8_t_u_u_arg_ui1 <= func_7_0_12_reg;
		if (start == 1'b0 && ^(func_7_0_12_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_31)) begin
		safe_add_func_uint8_t_u_u_arg_ui1 <= func_7_34_38;
		if (start == 1'b0 && ^(func_7_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_15)) begin
		safe_add_func_uint8_t_u_u_arg_ui2 <= func_7_0_15;
		if (start == 1'b0 && ^(func_7_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_31)) begin
		safe_add_func_uint8_t_u_u_arg_ui2 <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_uint8_t_u_u_finish_final = safe_add_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_15))) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_7_BB__34_31))) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_15))) begin
		safe_add_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_return_val_reg <= safe_add_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_add_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_7_BB__34_31))) begin
		safe_add_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_add_func_uint8_t_u_u_finish) begin
		safe_add_func_uint8_t_u_u_return_val_reg <= safe_add_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_add_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_17)) begin
		safe_mul_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		safe_mul_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_17)) begin
		safe_mul_func_int16_t_s_s_arg_si1 <= func_7_0_9_reg;
		if (start == 1'b0 && ^(func_7_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_17)) begin
		safe_mul_func_int16_t_s_s_arg_si2 <= func_7_0_17;
		if (start == 1'b0 && ^(func_7_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_int16_t_s_s_finish_final = safe_mul_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_17))) begin
		safe_mul_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int16_t_s_s_finish) begin
		safe_mul_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_17))) begin
		safe_mul_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mul_func_int16_t_s_s_finish) begin
		safe_mul_func_int16_t_s_s_return_val_reg <= safe_mul_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mul_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_19)) begin
		safe_lshift_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_20)) begin
		safe_lshift_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_19)) begin
		safe_lshift_func_int16_t_s_s_arg_left <= func_7_0_18_reg;
		if (start == 1'b0 && ^(func_7_0_18_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__0_19)) begin
		safe_lshift_func_int16_t_s_s_arg_right <= 32'd10;
		if (start == 1'b0 && ^(32'd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_int16_t_s_s_finish_final = safe_lshift_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_19))) begin
		safe_lshift_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_lshift_func_int16_t_s_s_finish) begin
		safe_lshift_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__0_19))) begin
		safe_lshift_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_int16_t_s_s_finish) begin
		safe_lshift_func_int16_t_s_s_return_val_reg <= safe_lshift_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_27)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		safe_rshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_27)) begin
		safe_rshift_func_uint16_t_u_u_arg_left <= func_7_34_35_reg;
		if (start == 1'b0 && ^(func_7_34_35_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_27)) begin
		safe_rshift_func_uint16_t_u_u_arg_right <= 32'd14;
		if (start == 1'b0 && ^(32'd14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_uint16_t_u_u_finish_final = safe_rshift_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__34_27))) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_rshift_func_uint16_t_u_u_finish) begin
		safe_rshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_36)) begin
		safe_lshift_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_37)) begin
		safe_lshift_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_36)) begin
		safe_lshift_func_uint16_t_u_u_arg_left <= func_7_34_45_reg;
		if (start == 1'b0 && ^(func_7_34_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__34_36)) begin
		safe_lshift_func_uint16_t_u_u_arg_right <= 32'd12;
		if (start == 1'b0 && ^(32'd12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint16_t_u_u_finish_final = safe_lshift_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__34_36))) begin
		safe_lshift_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_u_finish) begin
		safe_lshift_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__34_36))) begin
		safe_lshift_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_lshift_func_uint16_t_u_u_finish) begin
		safe_lshift_func_uint16_t_u_u_return_val_reg <= safe_lshift_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_lshift_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_45)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_55)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_56)) begin
		safe_sub_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_45)) begin
		safe_sub_func_int32_t_s_s_arg_si1 <= func_7_52_61_reg;
		if (start == 1'b0 && ^(func_7_52_61_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si1"); $finish; end
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_55)) begin
		safe_sub_func_int32_t_s_s_arg_si1 <= func_7_52_73_reg;
		if (start == 1'b0 && ^(func_7_52_73_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_45)) begin
		safe_sub_func_int32_t_s_s_arg_si2 <= func_7_52_62_reg;
		if (start == 1'b0 && ^(func_7_52_62_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si2"); $finish; end
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_55)) begin
		safe_sub_func_int32_t_s_s_arg_si2 <= func_7_52_74;
		if (start == 1'b0 && ^(func_7_52_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_int32_t_s_s_finish_final = safe_sub_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_45))) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_55))) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_45))) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= safe_sub_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_55))) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_sub_func_int32_t_s_s_finish) begin
		safe_sub_func_int32_t_s_s_return_val_reg <= safe_sub_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_sub_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int32_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_47)) begin
		safe_add_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		safe_add_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_47)) begin
		safe_add_func_int8_t_s_s_arg_si1 <= func_7_52_65;
		if (start == 1'b0 && ^(func_7_52_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_47)) begin
		safe_add_func_int8_t_s_s_arg_si2 <= -8'd1;
		if (start == 1'b0 && ^(-8'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_int8_t_s_s_finish_final = safe_add_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_47))) begin
		safe_add_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_add_func_int8_t_s_s_finish) begin
		safe_add_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_47))) begin
		safe_add_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_add_func_int8_t_s_s_finish) begin
		safe_add_func_int8_t_s_s_return_val_reg <= safe_add_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_add_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_51)) begin
		safe_mod_func_uint32_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_52)) begin
		safe_mod_func_uint32_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_51)) begin
		safe_mod_func_uint32_t_u_u_arg_ui1 <= func_7_52_70_reg;
		if (start == 1'b0 && ^(func_7_52_70_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_51)) begin
		safe_mod_func_uint32_t_u_u_arg_ui2 <= func_7_52_71;
		if (start == 1'b0 && ^(func_7_52_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_mod_func_uint32_t_u_u_finish_final = safe_mod_func_uint32_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_51))) begin
		safe_mod_func_uint32_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_finish_reg"); $finish; end
	end
	if (safe_mod_func_uint32_t_u_u_finish) begin
		safe_mod_func_uint32_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mod_func_uint32_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_59)) begin
		safe_div_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		safe_div_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_59)) begin
		safe_div_func_uint8_t_u_u_arg_ui1 <= func_7_52_76_reg;
		if (start == 1'b0 && ^(func_7_52_76_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_F_func_7_BB__52_59)) begin
		safe_div_func_uint8_t_u_u_arg_ui2 <= func_7_52_79;
		if (start == 1'b0 && ^(func_7_52_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_uint8_t_u_u_finish_final = safe_div_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_59))) begin
		safe_div_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_div_func_uint8_t_u_u_finish) begin
		safe_div_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_7_BB__52_59))) begin
		safe_div_func_uint8_t_u_u_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_div_func_uint8_t_u_u_finish) begin
		safe_div_func_uint8_t_u_u_return_val_reg <= safe_div_func_uint8_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_div_func_uint8_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_uint8_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_7: %83*/
	/*   ret i8 %85*/
	if ((cur_state == LEGUP_F_func_7_BB__83_64)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_2_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_2_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = safe_lshift_func_int8_t_s_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = safe_lshift_func_int8_t_s_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = safe_rshift_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = safe_rshift_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_a = safe_mul_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_a = safe_mul_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_a = safe_lshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_a = safe_lshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_a = safe_add_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_a = safe_add_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_a = safe_add_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_a = safe_mod_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_a = safe_mod_func_uint32_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_a = safe_sub_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_a = safe_div_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_a = safe_div_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_7: %0*/
	/*   %10 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_7: %0*/
	/*   %14 = load i16* %13, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_7: %48*/
	/*   %50 = load i16* %49, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__48_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_7: %52*/
	/*   %60 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_7: %52*/
	/*   store i32 %61, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_7: %83*/
	/*   store i16 %84, i16* getelementptr inbounds ([6 x i16]* @g_78, i32 0, i32 2), align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__83_63)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_7: %0*/
	/*   %10 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_g_38_a + (4 * 32'd2));
	end
	/* func_7: %0*/
	/*   %14 = load i16* %13, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__0_13)) begin
		memory_controller_address_a = func_7_0_13_reg;
	end
	/* func_7: %48*/
	/*   %50 = load i16* %49, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__48_39)) begin
		memory_controller_address_a = func_7_48_49;
	end
	/* func_7: %52*/
	/*   %60 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* func_7: %52*/
	/*   store i32 %61, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* func_7: %83*/
	/*   store i16 %84, i16* getelementptr inbounds ([6 x i16]* @g_78, i32 0, i32 2), align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__83_63)) begin
		memory_controller_address_a = (`TAG_g_g_78_a + (2 * 32'd2));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_2_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_2_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = safe_lshift_func_int8_t_s_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = safe_lshift_func_int8_t_s_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_a = safe_mul_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_a = safe_mul_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_a = safe_lshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_a = safe_lshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_a = safe_add_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_a = safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_a = safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_a = safe_mod_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_a = safe_mod_func_uint32_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_a = safe_sub_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_a = safe_div_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_a = safe_div_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_7: %0*/
	/*   %10 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_7: %0*/
	/*   %14 = load i16* %13, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_7: %48*/
	/*   %50 = load i16* %49, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__48_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_7: %52*/
	/*   %60 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_7: %52*/
	/*   store i32 %61, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_7: %83*/
	/*   store i16 %84, i16* getelementptr inbounds ([6 x i16]* @g_78, i32 0, i32 2), align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__83_63)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_7: %52*/
	/*   store i32 %61, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		memory_controller_in_a = func_7_52_61;
	end
	/* func_7: %83*/
	/*   store i16 %84, i16* getelementptr inbounds ([6 x i16]* @g_78, i32 0, i32 2), align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__83_63)) begin
		memory_controller_in_a = func_7_83_84_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_2_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_2_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int8_t_s_u_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int8_t_s_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_a[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_a[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_a[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_a[1:0] = safe_mod_func_uint32_t_u_u_memory_controller_size_a;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_a[1:0] = safe_mod_func_uint32_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_a[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_7: %0*/
	/*   %10 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_7: %0*/
	/*   %14 = load i16* %13, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__0_13)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_7: %48*/
	/*   %50 = load i16* %49, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__48_39)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_7: %52*/
	/*   %60 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_7: %52*/
	/*   store i32 %61, i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_7: %83*/
	/*   store i16 %84, i16* getelementptr inbounds ([6 x i16]* @g_78, i32 0, i32 2), align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__83_63)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_2_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_2_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = safe_lshift_func_int8_t_s_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = safe_lshift_func_int8_t_s_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = safe_rshift_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = safe_rshift_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_b = safe_mul_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_b = safe_mul_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_b = safe_lshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_b = safe_lshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_enable_b = safe_add_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_b = safe_add_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_b = safe_add_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_b = safe_mod_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_b = safe_mod_func_uint32_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_enable_b = safe_sub_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_b = safe_div_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_b = safe_div_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_7: %0*/
	/*   %21 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %34*/
	/*   %37 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %34*/
	/*   %43 = load i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %34*/
	/*   store i32 %44, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %52*/
	/*   %62 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %52*/
	/*   %71 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %52*/
	/*   %74 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_7: %52*/
	/*   %78 = load i16* %77, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__52_57)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_2_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_7: %0*/
	/*   %21 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_21)) begin
		memory_controller_address_b = (`TAG_g_g_38_a + (4 * 32'd2));
	end
	/* func_7: %34*/
	/*   %37 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_29)) begin
		memory_controller_address_b = `TAG_g_g_37_a;
	end
	/* func_7: %34*/
	/*   %43 = load i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_33)) begin
		memory_controller_address_b = func_7_34_42_reg;
	end
	/* func_7: %34*/
	/*   store i32 %44, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_35)) begin
		memory_controller_address_b = func_7_34_42_reg;
	end
	/* func_7: %52*/
	/*   %62 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_address_b = `TAG_g_g_38_a;
	end
	/* func_7: %52*/
	/*   %71 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_49)) begin
		memory_controller_address_b = `TAG_g_g_22_a;
	end
	/* func_7: %52*/
	/*   %74 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_53)) begin
		memory_controller_address_b = (`TAG_g_g_38_a + (4 * 32'd2));
	end
	/* func_7: %52*/
	/*   %78 = load i16* %77, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__52_57)) begin
		memory_controller_address_b = func_7_52_77_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_2_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_2_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = safe_lshift_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = safe_lshift_func_int8_t_s_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = safe_lshift_func_int8_t_s_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_b = safe_mul_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_b = safe_mul_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_b = safe_lshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_b = safe_lshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = safe_rshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_write_enable_b = safe_add_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_b = safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_b = safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_b = safe_mod_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_b = safe_mod_func_uint32_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_write_enable_b = safe_sub_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_b = safe_div_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_b = safe_div_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_7: %0*/
	/*   %21 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_7: %34*/
	/*   %37 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_7: %34*/
	/*   %43 = load i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_7: %34*/
	/*   store i32 %44, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_35)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_7: %52*/
	/*   %62 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_7: %52*/
	/*   %71 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_7: %52*/
	/*   %74 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_7: %52*/
	/*   %78 = load i16* %77, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__52_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_2_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int8_t_s_u_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mod_func_uint32_t_u_u_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_7: %34*/
	/*   store i32 %44, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_35)) begin
		memory_controller_in_b = func_7_34_44;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_2_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_2(i8* %1, i8* bitcast ([8 x i16]* @func_7.l_51 to i8*), i32 16)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_2_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   call void @legup_memcpy_4(i8* %2, i8* bitcast ([2 x [8 x i32]]* @func_7.l_76 to i8*), i32 64)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %6 = call signext i8 @safe_lshift_func_int8_t_s_s(i8 signext 6, i32 %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int8_t_s_u_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %8 = call signext i8 @safe_lshift_func_int8_t_s_u(i8 signext -1, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int8_t_s_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %12 = call zeroext i8 @safe_rshift_func_uint8_t_u_u(i8 zeroext %11, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %16 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %12, i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %18 = call signext i16 @safe_mul_func_int16_t_s_s(i16 signext %9, i16 signext %17) #3*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %19 = call signext i16 @safe_lshift_func_int16_t_s_s(i16 signext %18, i32 10) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_7: %34*/
	/*   %36 = call zeroext i16 @safe_rshift_func_uint16_t_u_u(i16 zeroext %35, i32 14) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_7: %34*/
	/*   %39 = call zeroext i8 @safe_add_func_uint8_t_u_u(i8 zeroext %38, i8 zeroext 0) #3*/
	if ((cur_state == LEGUP_function_call_32)) begin
		memory_controller_size_b[1:0] = safe_add_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_7: %34*/
	/*   %46 = call zeroext i16 @safe_lshift_func_uint16_t_u_u(i16 zeroext %45, i32 12) #3*/
	if ((cur_state == LEGUP_function_call_37)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint16_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_7: %52*/
	/*   %63 = call i32 @safe_sub_func_int32_t_s_s(i32 %61, i32 %62) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_b[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_7: %52*/
	/*   %66 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext %65, i8 signext -1) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_b[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_b[1:0] = safe_mod_func_uint32_t_u_u_memory_controller_size_b;
	end
	/* func_7: %52*/
	/*   %72 = call i32 @safe_mod_func_uint32_t_u_u(i32 %70, i32 %71) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_b[1:0] = safe_mod_func_uint32_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_7: %52*/
	/*   %75 = call i32 @safe_sub_func_int32_t_s_s(i32 %73, i32 %74) #3*/
	if ((cur_state == LEGUP_function_call_56)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int32_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_7: %52*/
	/*   %80 = call zeroext i8 @safe_div_func_uint8_t_u_u(i8 zeroext %76, i8 zeroext %79) #3*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_b[1:0] = safe_div_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_7: %0*/
	/*   %21 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %34*/
	/*   %37 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %34*/
	/*   %43 = load i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %34*/
	/*   store i32 %44, i32* %42, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__34_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %52*/
	/*   %62 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %52*/
	/*   %71 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %52*/
	/*   %74 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_7_BB__52_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_7: %52*/
	/*   %78 = load i16* %77, align 2*/
	if ((cur_state == LEGUP_F_func_7_BB__52_57)) begin
		memory_controller_size_b = 2'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_7: %83*/
	/*   ret i8 %85*/
	if ((cur_state == LEGUP_F_func_7_BB__83_64)) begin
		return_val <= func_7_83_85_reg;
		if (start == 1'b0 && ^(func_7_83_85_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_func_1_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_func_1_BB__1_2 = 6'd2;
parameter [5:0] LEGUP_F_func_1_BB__3_3 = 6'd3;
parameter [5:0] LEGUP_F_func_1_BB__3_4 = 6'd4;
parameter [5:0] LEGUP_F_func_1_BB__4_5 = 6'd5;
parameter [5:0] LEGUP_F_func_1_BB__6_6 = 6'd6;
parameter [5:0] LEGUP_F_func_1_BB__6_7 = 6'd7;
parameter [5:0] LEGUP_F_func_1_BB__6_8 = 6'd8;
parameter [5:0] LEGUP_F_func_1_BB__6_10 = 6'd10;
parameter [5:0] LEGUP_F_func_1_BB__6_11 = 6'd11;
parameter [5:0] LEGUP_F_func_1_BB__6_12 = 6'd12;
parameter [5:0] LEGUP_F_func_1_BB__6_14 = 6'd14;
parameter [5:0] LEGUP_F_func_1_BB__6_15 = 6'd15;
parameter [5:0] LEGUP_F_func_1_BB__6_16 = 6'd16;
parameter [5:0] LEGUP_F_func_1_BB__6_18 = 6'd18;
parameter [5:0] LEGUP_F_func_1_BB__6_19 = 6'd19;
parameter [5:0] LEGUP_F_func_1_BB__6_20 = 6'd20;
parameter [5:0] LEGUP_F_func_1_BB__6_22 = 6'd22;
parameter [5:0] LEGUP_F_func_1_BB__6_23 = 6'd23;
parameter [5:0] LEGUP_F_func_1_BB__6_24 = 6'd24;
parameter [5:0] LEGUP_F_func_1_BB__6_26 = 6'd26;
parameter [5:0] LEGUP_F_func_1_BB__28_27 = 6'd27;
parameter [5:0] LEGUP_F_func_1_BB__29_28 = 6'd28;
parameter [5:0] LEGUP_F_func_1_BB__29_29 = 6'd29;
parameter [5:0] LEGUP_F_func_1_BB__29_30 = 6'd30;
parameter [5:0] LEGUP_F_func_1_BB__29_32 = 6'd32;
parameter [5:0] LEGUP_F_func_1_BB__29_33 = 6'd33;
parameter [5:0] LEGUP_F_func_1_BB__29_34 = 6'd34;
parameter [5:0] LEGUP_F_func_1_BB__29_35 = 6'd35;
parameter [5:0] LEGUP_F_func_1_BB__29_37 = 6'd37;
parameter [5:0] LEGUP_F_func_1_BB__29_38 = 6'd38;
parameter [5:0] LEGUP_F_func_1_BB__29_39 = 6'd39;
parameter [5:0] LEGUP_F_func_1_BB__29_41 = 6'd41;
parameter [5:0] LEGUP_F_func_1_BB__29_42 = 6'd42;
parameter [5:0] LEGUP_F_func_1_BB__29_43 = 6'd43;
parameter [5:0] LEGUP_F_func_1_BB__29_45 = 6'd45;
parameter [5:0] LEGUP_F_func_1_BB__29_46 = 6'd46;
parameter [5:0] LEGUP_F_func_1_BB__29_47 = 6'd47;
parameter [5:0] LEGUP_F_func_1_BB__29_49 = 6'd49;
parameter [5:0] LEGUP_F_func_1_BB__29_51 = 6'd51;
parameter [5:0] LEGUP_F_func_1_BB__29_53 = 6'd53;
parameter [5:0] LEGUP_F_func_1_BB__29_54 = 6'd54;
parameter [5:0] LEGUP_F_func_1_BB__29_55 = 6'd55;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_9 = 6'd9;
parameter [5:0] LEGUP_function_call_13 = 6'd13;
parameter [5:0] LEGUP_function_call_17 = 6'd17;
parameter [5:0] LEGUP_function_call_21 = 6'd21;
parameter [5:0] LEGUP_function_call_25 = 6'd25;
parameter [5:0] LEGUP_function_call_31 = 6'd31;
parameter [5:0] LEGUP_function_call_36 = 6'd36;
parameter [5:0] LEGUP_function_call_40 = 6'd40;
parameter [5:0] LEGUP_function_call_44 = 6'd44;
parameter [5:0] LEGUP_function_call_48 = 6'd48;
parameter [5:0] LEGUP_function_call_50 = 6'd50;
parameter [5:0] LEGUP_function_call_52 = 6'd52;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] func_1_1_2;
reg [31:0] func_1_1_2_reg;
reg  func_1_1_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_3_scevgep;
reg [31:0] func_1_4_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_7;
reg [15:0] func_1_6_8;
reg [15:0] func_1_6_8_reg;
reg [31:0] func_1_6_9;
reg [31:0] func_1_6_9_reg;
reg [7:0] func_1_6_10;
reg [7:0] func_1_6_10_reg;
reg [31:0] func_1_6_11;
reg [7:0] func_1_6_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_14_reg;
reg [15:0] func_1_6_15;
reg [7:0] func_1_6_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_18_reg;
reg [15:0] func_1_6_19;
reg [7:0] func_1_6_20;
reg [7:0] func_1_6_21;
reg [7:0] func_1_6_21_reg;
reg [15:0] func_1_6_22;
reg [15:0] func_1_6_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_6_23_reg;
reg [15:0] func_1_6_24;
reg [31:0] func_1_6_25;
reg [15:0] func_1_6_26;
reg [15:0] func_1_6_26_reg;
reg  func_1_6_27;
reg [7:0] func_1_29_30;
reg [7:0] func_1_29_30_reg;
reg [31:0] func_1_29_31;
reg [7:0] func_1_29_32;
reg [7:0] func_1_29_33;
reg [7:0] func_1_29_33_reg;
reg [31:0] func_1_29_34;
reg [31:0] func_1_29_34_reg;
reg [31:0] func_1_29_35;
reg [31:0] func_1_29_36;
reg [31:0] func_1_29_37;
reg [7:0] func_1_29_38;
reg [7:0] func_1_29_38_reg;
reg [31:0] func_1_29_39;
reg [31:0] func_1_29_39_reg;
reg [7:0] func_1_29_40;
reg [7:0] func_1_29_40_reg;
reg [15:0] func_1_29_41;
reg [15:0] func_1_29_41_reg;
reg [15:0] func_1_29_42;
reg [15:0] func_1_29_42_reg;
reg [31:0] func_1_29_43;
reg [7:0] func_1_29_44;
reg [31:0] func_1_29_45;
reg [31:0] func_1_29_45_reg;
reg [31:0] func_1_29_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_29_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_29_48_reg;
reg [15:0] func_1_29_49;
reg [7:0] func_1_29_50;
reg [7:0] func_1_29_50_reg;
reg [7:0] func_1_29_51;
reg [7:0] func_1_29_51_reg;
reg [15:0] func_1_29_52;
reg [15:0] func_1_29_53;
reg [15:0] func_1_29_53_reg;
reg [31:0] func_1_29_54;
reg [31:0] func_1_29_55;
reg [31:0] func_1_29_56;
reg  safe_div_func_int32_t_s_s_start;
reg [31:0] safe_div_func_int32_t_s_s_arg_si1;
reg [31:0] safe_div_func_int32_t_s_s_arg_si2;
wire  safe_div_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_div_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_div_func_int32_t_s_s_memory_controller_size_a;
wire  safe_div_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_div_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_div_func_int32_t_s_s_memory_controller_size_b;
reg  safe_div_func_int32_t_s_s_finish_final;
reg  safe_div_func_int32_t_s_s_finish_reg;
wire  safe_div_func_int32_t_s_s_finish;
wire [31:0] safe_div_func_int32_t_s_s_return_val;
reg [31:0] safe_div_func_int32_t_s_s_return_val_reg;
reg  safe_sub_func_int8_t_s_s_start;
reg [7:0] safe_sub_func_int8_t_s_s_arg_si1;
reg [7:0] safe_sub_func_int8_t_s_s_arg_si2;
wire  safe_sub_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_sub_func_int8_t_s_s_memory_controller_size_a;
wire  safe_sub_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_sub_func_int8_t_s_s_memory_controller_size_b;
reg  safe_sub_func_int8_t_s_s_finish_final;
reg  safe_sub_func_int8_t_s_s_finish_reg;
wire  safe_sub_func_int8_t_s_s_finish;
wire [7:0] safe_sub_func_int8_t_s_s_return_val;
reg  safe_lshift_func_uint8_t_u_u_start;
reg [7:0] safe_lshift_func_uint8_t_u_u_arg_left;
reg [31:0] safe_lshift_func_uint8_t_u_u_arg_right;
wire  safe_lshift_func_uint8_t_u_u_memory_controller_enable_a;
wire  safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint8_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint8_t_u_u_memory_controller_in_a;
wire [1:0] safe_lshift_func_uint8_t_u_u_memory_controller_size_a;
wire  safe_lshift_func_uint8_t_u_u_memory_controller_enable_b;
wire  safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_lshift_func_uint8_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_lshift_func_uint8_t_u_u_memory_controller_in_b;
wire [1:0] safe_lshift_func_uint8_t_u_u_memory_controller_size_b;
reg  safe_lshift_func_uint8_t_u_u_finish_final;
reg  safe_lshift_func_uint8_t_u_u_finish_reg;
wire  safe_lshift_func_uint8_t_u_u_finish;
wire [7:0] safe_lshift_func_uint8_t_u_u_return_val;
reg  safe_add_func_int8_t_s_s_start;
reg [7:0] safe_add_func_int8_t_s_s_arg_si1;
reg [7:0] safe_add_func_int8_t_s_s_arg_si2;
wire  safe_add_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_add_func_int8_t_s_s_memory_controller_size_a;
wire  safe_add_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_add_func_int8_t_s_s_memory_controller_size_b;
reg  safe_add_func_int8_t_s_s_finish_final;
reg  safe_add_func_int8_t_s_s_finish_reg;
wire  safe_add_func_int8_t_s_s_finish;
wire [7:0] safe_add_func_int8_t_s_s_return_val;
reg [7:0] safe_add_func_int8_t_s_s_return_val_reg;
reg  safe_rshift_func_int16_t_s_s_start;
reg [15:0] safe_rshift_func_int16_t_s_s_arg_left;
reg [31:0] safe_rshift_func_int16_t_s_s_arg_right;
wire  safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
wire  safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_in_a;
wire [1:0] safe_rshift_func_int16_t_s_s_memory_controller_size_a;
wire  safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
wire  safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_rshift_func_int16_t_s_s_memory_controller_in_b;
wire [1:0] safe_rshift_func_int16_t_s_s_memory_controller_size_b;
reg  safe_rshift_func_int16_t_s_s_finish_final;
reg  safe_rshift_func_int16_t_s_s_finish_reg;
wire  safe_rshift_func_int16_t_s_s_finish;
wire [15:0] safe_rshift_func_int16_t_s_s_return_val;
reg [15:0] safe_rshift_func_int16_t_s_s_return_val_reg;
reg  safe_div_func_int8_t_s_s_start;
reg [7:0] safe_div_func_int8_t_s_s_arg_si1;
reg [7:0] safe_div_func_int8_t_s_s_arg_si2;
wire  safe_div_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_div_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_div_func_int8_t_s_s_memory_controller_size_a;
wire  safe_div_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_div_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_div_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_div_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_div_func_int8_t_s_s_memory_controller_size_b;
reg  safe_div_func_int8_t_s_s_finish_final;
reg  safe_div_func_int8_t_s_s_finish_reg;
wire  safe_div_func_int8_t_s_s_finish;
wire [7:0] safe_div_func_int8_t_s_s_return_val;
reg [7:0] safe_div_func_int8_t_s_s_return_val_reg;
reg  func_25_start;
reg [7:0] func_25_arg_p_26;
reg [31:0] func_25_arg_p_27;
reg [7:0] func_25_arg_p_28;
reg [31:0] func_25_arg_p_29;
reg [15:0] func_25_arg_p_30;
wire  func_25_memory_controller_enable_a;
wire  func_25_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_25_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_25_memory_controller_in_a;
wire [1:0] func_25_memory_controller_size_a;
wire  func_25_memory_controller_enable_b;
wire  func_25_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_25_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_25_memory_controller_in_b;
wire [1:0] func_25_memory_controller_size_b;
reg  func_25_finish_final;
reg  func_25_finish_reg;
wire  func_25_finish;
wire [15:0] func_25_return_val;
reg [15:0] func_25_return_val_reg;
reg  func_13_start;
reg [15:0] func_13_arg_p_14;
reg [15:0] func_13_arg_p_15;
reg [7:0] func_13_arg_p_16;
wire  func_13_memory_controller_enable_a;
wire  func_13_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_13_memory_controller_in_a;
wire [1:0] func_13_memory_controller_size_a;
wire  func_13_memory_controller_enable_b;
wire  func_13_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_13_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_13_memory_controller_in_b;
wire [1:0] func_13_memory_controller_size_b;
reg  func_13_finish_final;
reg  func_13_finish_reg;
wire  func_13_finish;
wire [31:0] func_13_return_val;
reg [31:0] func_13_return_val_reg;
reg  safe_add_func_int32_t_s_s_start;
reg [31:0] safe_add_func_int32_t_s_s_arg_si1;
reg [31:0] safe_add_func_int32_t_s_s_arg_si2;
wire  safe_add_func_int32_t_s_s_memory_controller_enable_a;
wire  safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_in_a;
wire [1:0] safe_add_func_int32_t_s_s_memory_controller_size_a;
wire  safe_add_func_int32_t_s_s_memory_controller_enable_b;
wire  safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_add_func_int32_t_s_s_memory_controller_in_b;
wire [1:0] safe_add_func_int32_t_s_s_memory_controller_size_b;
reg  safe_add_func_int32_t_s_s_finish_final;
reg  safe_add_func_int32_t_s_s_finish_reg;
wire  safe_add_func_int32_t_s_s_finish;
wire [31:0] safe_add_func_int32_t_s_s_return_val;
reg  func_7_start;
reg [15:0] func_7_arg_p_8;
reg [15:0] func_7_arg_p_9;
reg [31:0] func_7_arg_p_10;
wire  func_7_memory_controller_enable_a;
wire  func_7_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_7_memory_controller_in_a;
wire [1:0] func_7_memory_controller_size_a;
wire  func_7_memory_controller_enable_b;
wire  func_7_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_7_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_7_memory_controller_in_b;
wire [1:0] func_7_memory_controller_size_b;
reg  func_7_finish_final;
reg  func_7_finish_reg;
wire  func_7_finish;
wire [7:0] func_7_return_val;
reg [7:0] func_7_return_val_reg;
reg  safe_mul_func_int8_t_s_s_start;
reg [7:0] safe_mul_func_int8_t_s_s_arg_si1;
reg [7:0] safe_mul_func_int8_t_s_s_arg_si2;
wire  safe_mul_func_int8_t_s_s_memory_controller_enable_a;
wire  safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_in_a;
wire [1:0] safe_mul_func_int8_t_s_s_memory_controller_size_a;
wire  safe_mul_func_int8_t_s_s_memory_controller_enable_b;
wire  safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_mul_func_int8_t_s_s_memory_controller_in_b;
wire [1:0] safe_mul_func_int8_t_s_s_memory_controller_size_b;
reg  safe_mul_func_int8_t_s_s_finish_final;
reg  safe_mul_func_int8_t_s_s_finish_reg;
wire  safe_mul_func_int8_t_s_s_finish;
wire [7:0] safe_mul_func_int8_t_s_s_return_val;
reg [7:0] safe_mul_func_int8_t_s_s_return_val_reg;
reg  safe_sub_func_uint16_t_u_u_start;
reg [15:0] safe_sub_func_uint16_t_u_u_arg_ui1;
reg [15:0] safe_sub_func_uint16_t_u_u_arg_ui2;
wire  safe_sub_func_uint16_t_u_u_memory_controller_enable_a;
wire  safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_in_a;
wire [1:0] safe_sub_func_uint16_t_u_u_memory_controller_size_a;
wire  safe_sub_func_uint16_t_u_u_memory_controller_enable_b;
wire  safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] safe_sub_func_uint16_t_u_u_memory_controller_in_b;
wire [1:0] safe_sub_func_uint16_t_u_u_memory_controller_size_b;
reg  safe_sub_func_uint16_t_u_u_finish_final;
reg  safe_sub_func_uint16_t_u_u_finish_reg;
wire  safe_sub_func_uint16_t_u_u_finish;
wire [15:0] safe_sub_func_uint16_t_u_u_return_val;
reg [15:0] safe_sub_func_uint16_t_u_u_return_val_reg;


safe_div_func_int32_t_s_s safe_div_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_int32_t_s_s_start),
	.finish (safe_div_func_int32_t_s_s_finish),
	.return_val (safe_div_func_int32_t_s_s_return_val),
	.arg_si1 (safe_div_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_div_func_int32_t_s_s_arg_si2)
);

defparam
	safe_div_func_int32_t_s_s.tag_offset = tag_offset;


safe_sub_func_int8_t_s_s safe_sub_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_int8_t_s_s_start),
	.finish (safe_sub_func_int8_t_s_s_finish),
	.return_val (safe_sub_func_int8_t_s_s_return_val),
	.arg_si1 (safe_sub_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_sub_func_int8_t_s_s_arg_si2)
);

defparam
	safe_sub_func_int8_t_s_s.tag_offset = tag_offset;


safe_lshift_func_uint8_t_u_u safe_lshift_func_uint8_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_lshift_func_uint8_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_lshift_func_uint8_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_lshift_func_uint8_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_lshift_func_uint8_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_lshift_func_uint8_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_lshift_func_uint8_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_lshift_func_uint8_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_lshift_func_uint8_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_lshift_func_uint8_t_u_u_start),
	.finish (safe_lshift_func_uint8_t_u_u_finish),
	.return_val (safe_lshift_func_uint8_t_u_u_return_val),
	.arg_left (safe_lshift_func_uint8_t_u_u_arg_left),
	.arg_right (safe_lshift_func_uint8_t_u_u_arg_right)
);

defparam
	safe_lshift_func_uint8_t_u_u.tag_offset = tag_offset;


safe_add_func_int8_t_s_s safe_add_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_int8_t_s_s_start),
	.finish (safe_add_func_int8_t_s_s_finish),
	.return_val (safe_add_func_int8_t_s_s_return_val),
	.arg_si1 (safe_add_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_add_func_int8_t_s_s_arg_si2)
);

defparam
	safe_add_func_int8_t_s_s.tag_offset = tag_offset;


safe_rshift_func_int16_t_s_s safe_rshift_func_int16_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_rshift_func_int16_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_rshift_func_int16_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_rshift_func_int16_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_rshift_func_int16_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_rshift_func_int16_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_rshift_func_int16_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_rshift_func_int16_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_rshift_func_int16_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_rshift_func_int16_t_s_s_start),
	.finish (safe_rshift_func_int16_t_s_s_finish),
	.return_val (safe_rshift_func_int16_t_s_s_return_val),
	.arg_left (safe_rshift_func_int16_t_s_s_arg_left),
	.arg_right (safe_rshift_func_int16_t_s_s_arg_right)
);

defparam
	safe_rshift_func_int16_t_s_s.tag_offset = tag_offset;


safe_div_func_int8_t_s_s safe_div_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_div_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_div_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_div_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_div_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_div_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_div_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_div_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_div_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_div_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_div_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_div_func_int8_t_s_s_start),
	.finish (safe_div_func_int8_t_s_s_finish),
	.return_val (safe_div_func_int8_t_s_s_return_val),
	.arg_si1 (safe_div_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_div_func_int8_t_s_s_arg_si2)
);

defparam
	safe_div_func_int8_t_s_s.tag_offset = tag_offset;


func_25 func_25 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_25_memory_controller_enable_a),
	.memory_controller_address_a (func_25_memory_controller_address_a),
	.memory_controller_write_enable_a (func_25_memory_controller_write_enable_a),
	.memory_controller_in_a (func_25_memory_controller_in_a),
	.memory_controller_size_a (func_25_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_25_memory_controller_enable_b),
	.memory_controller_address_b (func_25_memory_controller_address_b),
	.memory_controller_write_enable_b (func_25_memory_controller_write_enable_b),
	.memory_controller_in_b (func_25_memory_controller_in_b),
	.memory_controller_size_b (func_25_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_25_start),
	.finish (func_25_finish),
	.return_val (func_25_return_val),
	.arg_p_26 (func_25_arg_p_26),
	.arg_p_27 (func_25_arg_p_27),
	.arg_p_28 (func_25_arg_p_28),
	.arg_p_29 (func_25_arg_p_29),
	.arg_p_30 (func_25_arg_p_30)
);

defparam
	func_25.tag_offset = tag_offset;


func_13 func_13 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_13_memory_controller_enable_a),
	.memory_controller_address_a (func_13_memory_controller_address_a),
	.memory_controller_write_enable_a (func_13_memory_controller_write_enable_a),
	.memory_controller_in_a (func_13_memory_controller_in_a),
	.memory_controller_size_a (func_13_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_13_memory_controller_enable_b),
	.memory_controller_address_b (func_13_memory_controller_address_b),
	.memory_controller_write_enable_b (func_13_memory_controller_write_enable_b),
	.memory_controller_in_b (func_13_memory_controller_in_b),
	.memory_controller_size_b (func_13_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_13_start),
	.finish (func_13_finish),
	.return_val (func_13_return_val),
	.arg_p_14 (func_13_arg_p_14),
	.arg_p_15 (func_13_arg_p_15),
	.arg_p_16 (func_13_arg_p_16)
);

defparam
	func_13.tag_offset = tag_offset;


safe_add_func_int32_t_s_s safe_add_func_int32_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_add_func_int32_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_add_func_int32_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_add_func_int32_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_add_func_int32_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_add_func_int32_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_add_func_int32_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_add_func_int32_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_add_func_int32_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_add_func_int32_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_add_func_int32_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_add_func_int32_t_s_s_start),
	.finish (safe_add_func_int32_t_s_s_finish),
	.return_val (safe_add_func_int32_t_s_s_return_val),
	.arg_si1 (safe_add_func_int32_t_s_s_arg_si1),
	.arg_si2 (safe_add_func_int32_t_s_s_arg_si2)
);

defparam
	safe_add_func_int32_t_s_s.tag_offset = tag_offset;


func_7 func_7 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_7_memory_controller_enable_a),
	.memory_controller_address_a (func_7_memory_controller_address_a),
	.memory_controller_write_enable_a (func_7_memory_controller_write_enable_a),
	.memory_controller_in_a (func_7_memory_controller_in_a),
	.memory_controller_size_a (func_7_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_7_memory_controller_enable_b),
	.memory_controller_address_b (func_7_memory_controller_address_b),
	.memory_controller_write_enable_b (func_7_memory_controller_write_enable_b),
	.memory_controller_in_b (func_7_memory_controller_in_b),
	.memory_controller_size_b (func_7_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_7_start),
	.finish (func_7_finish),
	.return_val (func_7_return_val),
	.arg_p_8 (func_7_arg_p_8),
	.arg_p_9 (func_7_arg_p_9),
	.arg_p_10 (func_7_arg_p_10)
);

defparam
	func_7.tag_offset = tag_offset;


safe_mul_func_int8_t_s_s safe_mul_func_int8_t_s_s (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_mul_func_int8_t_s_s_memory_controller_enable_a),
	.memory_controller_address_a (safe_mul_func_int8_t_s_s_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_mul_func_int8_t_s_s_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_mul_func_int8_t_s_s_memory_controller_in_a),
	.memory_controller_size_a (safe_mul_func_int8_t_s_s_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_mul_func_int8_t_s_s_memory_controller_enable_b),
	.memory_controller_address_b (safe_mul_func_int8_t_s_s_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_mul_func_int8_t_s_s_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_mul_func_int8_t_s_s_memory_controller_in_b),
	.memory_controller_size_b (safe_mul_func_int8_t_s_s_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_mul_func_int8_t_s_s_start),
	.finish (safe_mul_func_int8_t_s_s_finish),
	.return_val (safe_mul_func_int8_t_s_s_return_val),
	.arg_si1 (safe_mul_func_int8_t_s_s_arg_si1),
	.arg_si2 (safe_mul_func_int8_t_s_s_arg_si2)
);

defparam
	safe_mul_func_int8_t_s_s.tag_offset = tag_offset;


safe_sub_func_uint16_t_u_u safe_sub_func_uint16_t_u_u (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (safe_sub_func_uint16_t_u_u_memory_controller_enable_a),
	.memory_controller_address_a (safe_sub_func_uint16_t_u_u_memory_controller_address_a),
	.memory_controller_write_enable_a (safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a),
	.memory_controller_in_a (safe_sub_func_uint16_t_u_u_memory_controller_in_a),
	.memory_controller_size_a (safe_sub_func_uint16_t_u_u_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (safe_sub_func_uint16_t_u_u_memory_controller_enable_b),
	.memory_controller_address_b (safe_sub_func_uint16_t_u_u_memory_controller_address_b),
	.memory_controller_write_enable_b (safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b),
	.memory_controller_in_b (safe_sub_func_uint16_t_u_u_memory_controller_in_b),
	.memory_controller_size_b (safe_sub_func_uint16_t_u_u_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (safe_sub_func_uint16_t_u_u_start),
	.finish (safe_sub_func_uint16_t_u_u_finish),
	.return_val (safe_sub_func_uint16_t_u_u_return_val),
	.arg_ui1 (safe_sub_func_uint16_t_u_u_arg_ui1),
	.arg_ui2 (safe_sub_func_uint16_t_u_u_arg_ui2)
);

defparam
	safe_sub_func_uint16_t_u_u.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_1;
LEGUP_F_func_1_BB__0_1:
		next_state = LEGUP_F_func_1_BB__1_2;
LEGUP_F_func_1_BB__1_2:
	if ((func_1_1_exitcond == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_6;
	else if ((func_1_1_exitcond == 1'd0))
		next_state = LEGUP_F_func_1_BB__3_3;
LEGUP_F_func_1_BB__28_27:
		next_state = LEGUP_F_func_1_BB__29_28;
LEGUP_F_func_1_BB__29_28:
		next_state = LEGUP_F_func_1_BB__29_29;
LEGUP_F_func_1_BB__29_29:
		next_state = LEGUP_F_func_1_BB__29_30;
LEGUP_F_func_1_BB__29_30:
		next_state = LEGUP_function_call_31;
LEGUP_F_func_1_BB__29_32:
		next_state = LEGUP_F_func_1_BB__29_33;
LEGUP_F_func_1_BB__29_33:
		next_state = LEGUP_F_func_1_BB__29_34;
LEGUP_F_func_1_BB__29_34:
		next_state = LEGUP_F_func_1_BB__29_35;
LEGUP_F_func_1_BB__29_35:
		next_state = LEGUP_function_call_36;
LEGUP_F_func_1_BB__29_37:
		next_state = LEGUP_F_func_1_BB__29_38;
LEGUP_F_func_1_BB__29_38:
		next_state = LEGUP_F_func_1_BB__29_39;
LEGUP_F_func_1_BB__29_39:
		next_state = LEGUP_function_call_40;
LEGUP_F_func_1_BB__29_41:
		next_state = LEGUP_F_func_1_BB__29_42;
LEGUP_F_func_1_BB__29_42:
		next_state = LEGUP_F_func_1_BB__29_43;
LEGUP_F_func_1_BB__29_43:
		next_state = LEGUP_function_call_44;
LEGUP_F_func_1_BB__29_45:
		next_state = LEGUP_F_func_1_BB__29_46;
LEGUP_F_func_1_BB__29_46:
		next_state = LEGUP_F_func_1_BB__29_47;
LEGUP_F_func_1_BB__29_47:
		next_state = LEGUP_function_call_48;
LEGUP_F_func_1_BB__29_49:
		next_state = LEGUP_function_call_50;
LEGUP_F_func_1_BB__29_51:
		next_state = LEGUP_function_call_52;
LEGUP_F_func_1_BB__29_53:
		next_state = LEGUP_F_func_1_BB__29_54;
LEGUP_F_func_1_BB__29_54:
		next_state = LEGUP_F_func_1_BB__29_55;
LEGUP_F_func_1_BB__29_55:
		next_state = LEGUP_0;
LEGUP_F_func_1_BB__3_3:
		next_state = LEGUP_F_func_1_BB__3_4;
LEGUP_F_func_1_BB__3_4:
		next_state = LEGUP_F_func_1_BB__4_5;
LEGUP_F_func_1_BB__4_5:
		next_state = LEGUP_F_func_1_BB__1_2;
LEGUP_F_func_1_BB__6_10:
		next_state = LEGUP_F_func_1_BB__6_11;
LEGUP_F_func_1_BB__6_11:
		next_state = LEGUP_F_func_1_BB__6_12;
LEGUP_F_func_1_BB__6_12:
		next_state = LEGUP_function_call_13;
LEGUP_F_func_1_BB__6_14:
		next_state = LEGUP_F_func_1_BB__6_15;
LEGUP_F_func_1_BB__6_15:
		next_state = LEGUP_F_func_1_BB__6_16;
LEGUP_F_func_1_BB__6_16:
		next_state = LEGUP_function_call_17;
LEGUP_F_func_1_BB__6_18:
		next_state = LEGUP_F_func_1_BB__6_19;
LEGUP_F_func_1_BB__6_19:
		next_state = LEGUP_F_func_1_BB__6_20;
LEGUP_F_func_1_BB__6_20:
		next_state = LEGUP_function_call_21;
LEGUP_F_func_1_BB__6_22:
		next_state = LEGUP_F_func_1_BB__6_23;
LEGUP_F_func_1_BB__6_23:
		next_state = LEGUP_F_func_1_BB__6_24;
LEGUP_F_func_1_BB__6_24:
		next_state = LEGUP_function_call_25;
LEGUP_F_func_1_BB__6_26:
	if ((func_1_6_27 == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_28;
	else if ((func_1_6_27 == 1'd0))
		next_state = LEGUP_F_func_1_BB__28_27;
LEGUP_F_func_1_BB__6_6:
		next_state = LEGUP_F_func_1_BB__6_7;
LEGUP_F_func_1_BB__6_7:
		next_state = LEGUP_F_func_1_BB__6_8;
LEGUP_F_func_1_BB__6_8:
		next_state = LEGUP_function_call_9;
LEGUP_function_call_13:
	if ((safe_sub_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_14;
LEGUP_function_call_17:
	if ((safe_lshift_func_uint8_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_18;
LEGUP_function_call_21:
	if ((safe_add_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_22;
LEGUP_function_call_25:
	if ((safe_rshift_func_int16_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_26;
LEGUP_function_call_31:
	if ((safe_div_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_32;
LEGUP_function_call_36:
	if ((func_25_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_37;
LEGUP_function_call_40:
	if ((func_13_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_41;
LEGUP_function_call_44:
	if ((safe_add_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_45;
LEGUP_function_call_48:
	if ((func_7_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_49;
LEGUP_function_call_50:
	if ((safe_mul_func_int8_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_51;
LEGUP_function_call_52:
	if ((safe_sub_func_uint16_t_u_u_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__29_53;
LEGUP_function_call_9:
	if ((safe_div_func_int32_t_s_s_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__6_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_1_2 = 32'd0;
	end
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__4_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_1_2 = func_1_4_5;
	end
end
always @(posedge clk) begin
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_1_2_reg <= func_1_1_2;
		if (start == 1'b0 && ^(func_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_1_2_reg"); $finish; end
	end
	/* func_1: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__4_5) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_1_2_reg <= func_1_1_2;
		if (start == 1'b0 && ^(func_1_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %1*/
	/*   %exitcond = icmp eq i32 %2, 7*/
		func_1_1_exitcond = (func_1_1_2_reg == 32'd7);
end
always @(*) begin
	/* func_1: %3*/
	/*   %scevgep = getelementptr [7 x i16]* %l_4, i32 0, i32 %2*/
		func_1_3_scevgep = (`TAG_func_1_0_l_4_a + (2 * func_1_1_2_reg));
end
always @(*) begin
	/* func_1: %4*/
	/*   %5 = add nsw i32 %2, 1*/
		func_1_4_5 = (func_1_1_2_reg + 32'd1);
end
always @(*) begin
	/* func_1: %6*/
	/*   %7 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 2*/
if (reset) begin func_1_6_7 = 0; end
		func_1_6_7 = (`TAG_func_1_0_l_4_a + (2 * 32'd2));
end
always @(*) begin
	/* func_1: %6*/
	/*   %8 = load i16* %7, align 2*/
		func_1_6_8 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %8 = load i16* %7, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_8)) begin
		func_1_6_8_reg <= func_1_6_8;
		if (start == 1'b0 && ^(func_1_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_8_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
		func_1_6_9 = safe_div_func_int32_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		func_1_6_9_reg <= func_1_6_9;
		if (start == 1'b0 && ^(func_1_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_9_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %10 = trunc i32 %9 to i8*/
		func_1_6_10 = func_1_6_9_reg[7:0];
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %10 = trunc i32 %9 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__6_10)) begin
		func_1_6_10_reg <= func_1_6_10;
		if (start == 1'b0 && ^(func_1_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_10_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %11 = load volatile i32* @g_22, align 4*/
		func_1_6_11 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %12 = trunc i32 %11 to i8*/
		func_1_6_12 = func_1_6_11[7:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %14 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 2*/
if (reset) begin func_1_6_14 = 0; end
		func_1_6_14 = (`TAG_func_1_0_l_4_a + (2 * 32'd2));
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %14 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		func_1_6_14_reg <= func_1_6_14;
		if (start == 1'b0 && ^(func_1_6_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_14_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %15 = load i16* %14, align 2*/
		func_1_6_15 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %16 = trunc i16 %15 to i8*/
		func_1_6_16 = func_1_6_15[7:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %18 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 2*/
if (reset) begin func_1_6_18 = 0; end
		func_1_6_18 = (`TAG_func_1_0_l_4_a + (2 * 32'd2));
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %18 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		func_1_6_18_reg <= func_1_6_18;
		if (start == 1'b0 && ^(func_1_6_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_18_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %19 = load i16* %18, align 2*/
		func_1_6_19 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %20 = trunc i16 %19 to i8*/
		func_1_6_20 = func_1_6_19[7:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
		func_1_6_21 = safe_add_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		func_1_6_21_reg <= func_1_6_21;
		if (start == 1'b0 && ^(func_1_6_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_21_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %22 = sext i8 %21 to i16*/
		func_1_6_22 = $signed(func_1_6_21_reg);
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %22 = sext i8 %21 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__6_22)) begin
		func_1_6_22_reg <= func_1_6_22;
		if (start == 1'b0 && ^(func_1_6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_22_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %23 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 6*/
if (reset) begin func_1_6_23 = 0; end
		func_1_6_23 = (`TAG_func_1_0_l_4_a + (2 * 32'd6));
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %23 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		func_1_6_23_reg <= func_1_6_23;
		if (start == 1'b0 && ^(func_1_6_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_23_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %24 = load i16* %23, align 2*/
		func_1_6_24 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* func_1: %6*/
	/*   %25 = zext i16 %24 to i32*/
		func_1_6_25 = func_1_6_24;
end
always @(*) begin
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
		func_1_6_26 = safe_rshift_func_int16_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		func_1_6_26_reg <= func_1_6_26;
		if (start == 1'b0 && ^(func_1_6_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_6_26_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %6*/
	/*   %27 = icmp eq i16 %26, 0*/
		func_1_6_27 = (func_1_6_26_reg == 16'd0);
end
always @(*) begin
	/* func_1: %29*/
	/*   %30 = phi i8 [ 0, %6 ], [ 1, %28 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__6_26) & (memory_controller_waitrequest == 1'd0)) & (func_1_6_27 == 1'd1))) begin
		func_1_29_30 = 8'd0;
	end
	/* func_1: %29*/
	/*   %30 = phi i8 [ 0, %6 ], [ 1, %28 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__28_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_29_30 = 8'd1;
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %30 = phi i8 [ 0, %6 ], [ 1, %28 ]*/
	if ((((cur_state == LEGUP_F_func_1_BB__6_26) & (memory_controller_waitrequest == 1'd0)) & (func_1_6_27 == 1'd1))) begin
		func_1_29_30_reg <= func_1_29_30;
		if (start == 1'b0 && ^(func_1_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_30_reg"); $finish; end
	end
	/* func_1: %29*/
	/*   %30 = phi i8 [ 0, %6 ], [ 1, %28 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__28_27) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_29_30_reg <= func_1_29_30;
		if (start == 1'b0 && ^(func_1_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_30_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %31 = load i32* @g_37, align 4*/
		func_1_29_31 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %32 = trunc i32 %31 to i8*/
		func_1_29_32 = func_1_29_31[7:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
		func_1_29_33 = safe_div_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		func_1_29_33_reg <= func_1_29_33;
		if (start == 1'b0 && ^(func_1_29_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_33_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %34 = sext i8 %33 to i32*/
		func_1_29_34 = $signed(func_1_29_33_reg);
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %34 = sext i8 %33 to i32*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		func_1_29_34_reg <= func_1_29_34;
		if (start == 1'b0 && ^(func_1_29_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_34_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %35 = load i32* @g_37, align 4*/
		func_1_29_35 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %36 = or i32 %34, %35*/
		func_1_29_36 = (func_1_29_34_reg | func_1_29_35);
end
always @(*) begin
	/* func_1: %29*/
	/*   %37 = or i32 %36, 1*/
		func_1_29_37 = (func_1_29_36 | 32'd1);
end
always @(*) begin
	/* func_1: %29*/
	/*   %38 = trunc i32 %37 to i8*/
		func_1_29_38 = func_1_29_37[7:0];
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %38 = trunc i32 %37 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		func_1_29_38_reg <= func_1_29_38;
		if (start == 1'b0 && ^(func_1_29_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_38_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %39 = load i32* @g_37, align 4*/
		func_1_29_39 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %39 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		func_1_29_39_reg <= func_1_29_39;
		if (start == 1'b0 && ^(func_1_29_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_39_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %40 = trunc i32 %39 to i8*/
		func_1_29_40 = func_1_29_39[7:0];
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %40 = trunc i32 %39 to i8*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		func_1_29_40_reg <= func_1_29_40;
		if (start == 1'b0 && ^(func_1_29_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_40_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %41 = trunc i32 %39 to i16*/
		func_1_29_41 = func_1_29_39[15:0];
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %41 = trunc i32 %39 to i16*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		func_1_29_41_reg <= func_1_29_41;
		if (start == 1'b0 && ^(func_1_29_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_41_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
		func_1_29_42 = func_25_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		func_1_29_42_reg <= func_1_29_42;
		if (start == 1'b0 && ^(func_1_29_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_42_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %43 = load i32* @g_37, align 4*/
		func_1_29_43 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %44 = trunc i32 %43 to i8*/
		func_1_29_44 = func_1_29_43[7:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
		func_1_29_45 = func_13_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		func_1_29_45_reg <= func_1_29_45;
		if (start == 1'b0 && ^(func_1_29_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_45_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %46 = load i32* @g_37, align 4*/
		func_1_29_46 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %48 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 6*/
if (reset) begin func_1_29_48 = 0; end
		func_1_29_48 = (`TAG_func_1_0_l_4_a + (2 * 32'd6));
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %48 = getelementptr inbounds [7 x i16]* %l_4, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_func_1_BB__29_28)) begin
		func_1_29_48_reg <= func_1_29_48;
		if (start == 1'b0 && ^(func_1_29_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_48_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %49 = load i16* %48, align 2*/
		func_1_29_49 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
		func_1_29_50 = func_7_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		func_1_29_50_reg <= func_1_29_50;
		if (start == 1'b0 && ^(func_1_29_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_50_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
		func_1_29_51 = safe_mul_func_int8_t_s_s_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		func_1_29_51_reg <= func_1_29_51;
		if (start == 1'b0 && ^(func_1_29_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_51_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %52 = sext i8 %51 to i16*/
		func_1_29_52 = $signed(func_1_29_51_reg);
end
always @(*) begin
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
		func_1_29_53 = safe_sub_func_uint16_t_u_u_return_val_reg;
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		func_1_29_53_reg <= func_1_29_53;
		if (start == 1'b0 && ^(func_1_29_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_29_53_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %29*/
	/*   %54 = zext i16 %53 to i32*/
		func_1_29_54 = func_1_29_53_reg;
end
always @(*) begin
	/* func_1: %29*/
	/*   %55 = or i32 %54, 7*/
		func_1_29_55 = (func_1_29_54 | 32'd7);
end
always @(*) begin
	/* func_1: %29*/
	/*   %56 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 5), align 4*/
		func_1_29_56 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_8)) begin
		safe_div_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_9)) begin
		safe_div_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_8)) begin
		safe_div_func_int32_t_s_s_arg_si1 <= -32'd4;
		if (start == 1'b0 && ^(-32'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_8)) begin
		safe_div_func_int32_t_s_s_arg_si2 <= 32'd9;
		if (start == 1'b0 && ^(32'd9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_int32_t_s_s_finish_final = safe_div_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_8))) begin
		safe_div_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_div_func_int32_t_s_s_finish) begin
		safe_div_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_8))) begin
		safe_div_func_int32_t_s_s_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_div_func_int32_t_s_s_finish) begin
		safe_div_func_int32_t_s_s_return_val_reg <= safe_div_func_int32_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_div_func_int32_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int32_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_12)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		safe_sub_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_12)) begin
		safe_sub_func_int8_t_s_s_arg_si1 <= func_1_6_10_reg;
		if (start == 1'b0 && ^(func_1_6_10_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_12)) begin
		safe_sub_func_int8_t_s_s_arg_si2 <= func_1_6_12;
		if (start == 1'b0 && ^(func_1_6_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_int8_t_s_s_finish_final = safe_sub_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_12))) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_sub_func_int8_t_s_s_finish) begin
		safe_sub_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_16)) begin
		safe_lshift_func_uint8_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		safe_lshift_func_uint8_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_16)) begin
		safe_lshift_func_uint8_t_u_u_arg_left <= func_1_6_16;
		if (start == 1'b0 && ^(func_1_6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_16)) begin
		safe_lshift_func_uint8_t_u_u_arg_right <= 32'd5;
		if (start == 1'b0 && ^(32'd5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_lshift_func_uint8_t_u_u_finish_final = safe_lshift_func_uint8_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_16))) begin
		safe_lshift_func_uint8_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_finish_reg"); $finish; end
	end
	if (safe_lshift_func_uint8_t_u_u_finish) begin
		safe_lshift_func_uint8_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_lshift_func_uint8_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_20)) begin
		safe_add_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_21)) begin
		safe_add_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_20)) begin
		safe_add_func_int8_t_s_s_arg_si1 <= -8'd108;
		if (start == 1'b0 && ^(-8'd108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_20)) begin
		safe_add_func_int8_t_s_s_arg_si2 <= func_1_6_20;
		if (start == 1'b0 && ^(func_1_6_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_int8_t_s_s_finish_final = safe_add_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_20))) begin
		safe_add_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_add_func_int8_t_s_s_finish) begin
		safe_add_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_20))) begin
		safe_add_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_add_func_int8_t_s_s_finish) begin
		safe_add_func_int8_t_s_s_return_val_reg <= safe_add_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_add_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_24)) begin
		safe_rshift_func_int16_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_25)) begin
		safe_rshift_func_int16_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_24)) begin
		safe_rshift_func_int16_t_s_s_arg_left <= func_1_6_22_reg;
		if (start == 1'b0 && ^(func_1_6_22_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_arg_left"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__6_24)) begin
		safe_rshift_func_int16_t_s_s_arg_right <= func_1_6_25;
		if (start == 1'b0 && ^(func_1_6_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_arg_right"); $finish; end
	end
end
always @(*) begin
	safe_rshift_func_int16_t_s_s_finish_final = safe_rshift_func_int16_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_24))) begin
		safe_rshift_func_int16_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
	if (safe_rshift_func_int16_t_s_s_finish) begin
		safe_rshift_func_int16_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__6_24))) begin
		safe_rshift_func_int16_t_s_s_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_rshift_func_int16_t_s_s_finish) begin
		safe_rshift_func_int16_t_s_s_return_val_reg <= safe_rshift_func_int16_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_rshift_func_int16_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_rshift_func_int16_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_30)) begin
		safe_div_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		safe_div_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_30)) begin
		safe_div_func_int8_t_s_s_arg_si1 <= func_1_29_30_reg;
		if (start == 1'b0 && ^(func_1_29_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_30)) begin
		safe_div_func_int8_t_s_s_arg_si2 <= func_1_29_32;
		if (start == 1'b0 && ^(func_1_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_div_func_int8_t_s_s_finish_final = safe_div_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_30))) begin
		safe_div_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_div_func_int8_t_s_s_finish) begin
		safe_div_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_30))) begin
		safe_div_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_div_func_int8_t_s_s_finish) begin
		safe_div_func_int8_t_s_s_return_val_reg <= safe_div_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_div_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_div_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_35)) begin
		func_25_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		func_25_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_35)) begin
		func_25_arg_p_26 <= func_1_29_38_reg;
		if (start == 1'b0 && ^(func_1_29_38_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_arg_p_26"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_35)) begin
		func_25_arg_p_27 <= 32'd7;
		if (start == 1'b0 && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_arg_p_27"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_35)) begin
		func_25_arg_p_28 <= func_1_29_40_reg;
		if (start == 1'b0 && ^(func_1_29_40_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_arg_p_28"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_35)) begin
		func_25_arg_p_29 <= func_1_29_39_reg;
		if (start == 1'b0 && ^(func_1_29_39_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_arg_p_29"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_35)) begin
		func_25_arg_p_30 <= func_1_29_41_reg;
		if (start == 1'b0 && ^(func_1_29_41_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_arg_p_30"); $finish; end
	end
end
always @(*) begin
	func_25_finish_final = func_25_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_35))) begin
		func_25_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_finish_reg"); $finish; end
	end
	if (func_25_finish) begin
		func_25_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_35))) begin
		func_25_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_return_val_reg"); $finish; end
	end
	if (func_25_finish) begin
		func_25_return_val_reg <= func_25_return_val;
		if (start == 1'b0 && ^(func_25_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_25_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_39)) begin
		func_13_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_40)) begin
		func_13_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_39)) begin
		func_13_arg_p_14 <= 16'd1;
		if (start == 1'b0 && ^(16'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_arg_p_14"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_39)) begin
		func_13_arg_p_15 <= func_1_29_42_reg;
		if (start == 1'b0 && ^(func_1_29_42_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_arg_p_15"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_39)) begin
		func_13_arg_p_16 <= func_1_29_44;
		if (start == 1'b0 && ^(func_1_29_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_arg_p_16"); $finish; end
	end
end
always @(*) begin
	func_13_finish_final = func_13_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_39))) begin
		func_13_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_finish_reg"); $finish; end
	end
	if (func_13_finish) begin
		func_13_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_39))) begin
		func_13_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_return_val_reg"); $finish; end
	end
	if (func_13_finish) begin
		func_13_return_val_reg <= func_13_return_val;
		if (start == 1'b0 && ^(func_13_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_13_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_43)) begin
		safe_add_func_int32_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_44)) begin
		safe_add_func_int32_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_43)) begin
		safe_add_func_int32_t_s_s_arg_si1 <= func_1_29_45_reg;
		if (start == 1'b0 && ^(func_1_29_45_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_43)) begin
		safe_add_func_int32_t_s_s_arg_si2 <= func_1_29_46;
		if (start == 1'b0 && ^(func_1_29_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_add_func_int32_t_s_s_finish_final = safe_add_func_int32_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_43))) begin
		safe_add_func_int32_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_finish_reg"); $finish; end
	end
	if (safe_add_func_int32_t_s_s_finish) begin
		safe_add_func_int32_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_add_func_int32_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_47)) begin
		func_7_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		func_7_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_47)) begin
		func_7_arg_p_8 <= -16'd1;
		if (start == 1'b0 && ^(-16'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_arg_p_8"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_47)) begin
		func_7_arg_p_9 <= func_1_29_49;
		if (start == 1'b0 && ^(func_1_29_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_arg_p_9"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_47)) begin
		func_7_arg_p_10 <= 32'd7;
		if (start == 1'b0 && ^(32'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_arg_p_10"); $finish; end
	end
end
always @(*) begin
	func_7_finish_final = func_7_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_47))) begin
		func_7_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_finish_reg"); $finish; end
	end
	if (func_7_finish) begin
		func_7_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_47))) begin
		func_7_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_return_val_reg"); $finish; end
	end
	if (func_7_finish) begin
		func_7_return_val_reg <= func_7_return_val;
		if (start == 1'b0 && ^(func_7_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_7_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_49)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		safe_mul_func_int8_t_s_s_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_49)) begin
		safe_mul_func_int8_t_s_s_arg_si1 <= 8'd70;
		if (start == 1'b0 && ^(8'd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_49)) begin
		safe_mul_func_int8_t_s_s_arg_si2 <= func_1_29_50_reg;
		if (start == 1'b0 && ^(func_1_29_50_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_arg_si2"); $finish; end
	end
end
always @(*) begin
	safe_mul_func_int8_t_s_s_finish_final = safe_mul_func_int8_t_s_s_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_49))) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_49))) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
	if (safe_mul_func_int8_t_s_s_finish) begin
		safe_mul_func_int8_t_s_s_return_val_reg <= safe_mul_func_int8_t_s_s_return_val;
		if (start == 1'b0 && ^(safe_mul_func_int8_t_s_s_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_mul_func_int8_t_s_s_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_51)) begin
		safe_sub_func_uint16_t_u_u_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_52)) begin
		safe_sub_func_uint16_t_u_u_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_51)) begin
		safe_sub_func_uint16_t_u_u_arg_ui1 <= func_1_6_8_reg;
		if (start == 1'b0 && ^(func_1_6_8_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_arg_ui1"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_F_func_1_BB__29_51)) begin
		safe_sub_func_uint16_t_u_u_arg_ui2 <= func_1_29_52;
		if (start == 1'b0 && ^(func_1_29_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_arg_ui2"); $finish; end
	end
end
always @(*) begin
	safe_sub_func_uint16_t_u_u_finish_final = safe_sub_func_uint16_t_u_u_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_51))) begin
		safe_sub_func_uint16_t_u_u_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_finish_reg"); $finish; end
	end
	if (safe_sub_func_uint16_t_u_u_finish) begin
		safe_sub_func_uint16_t_u_u_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__29_51))) begin
		safe_sub_func_uint16_t_u_u_return_val_reg <= 16'd0;
		if (start == 1'b0 && ^(16'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
	if (safe_sub_func_uint16_t_u_u_finish) begin
		safe_sub_func_uint16_t_u_u_return_val_reg <= safe_sub_func_uint16_t_u_u_return_val;
		if (start == 1'b0 && ^(safe_sub_func_uint16_t_u_u_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to safe_sub_func_uint16_t_u_u_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_1: %29*/
	/*   ret i32 %56*/
	if ((cur_state == LEGUP_F_func_1_BB__29_55)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_a = safe_div_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_a = safe_div_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_a = safe_sub_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_a = safe_lshift_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_a = safe_lshift_func_uint8_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_enable_a = safe_add_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_enable_a = safe_add_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = safe_div_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = safe_div_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_a = func_25_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_a = func_25_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_enable_a = func_13_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_enable_a = func_13_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_a = safe_add_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_a = safe_add_func_int32_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_a = func_7_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_a = func_7_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_a = safe_mul_func_int8_t_s_s_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_enable_a;
	end
	/* func_1: %3*/
	/*   store i16 -28672, i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %6*/
	/*   %8 = load i16* %7, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %6*/
	/*   %11 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__6_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %6*/
	/*   %15 = load i16* %14, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %6*/
	/*   %19 = load i16* %18, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %6*/
	/*   %24 = load i16* %23, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %29*/
	/*   %31 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %29*/
	/*   %35 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %29*/
	/*   store i32 %36, i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %29*/
	/*   store i32 %55, i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_25_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_25_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_7_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_7_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_a;
	end
	/* func_1: %3*/
	/*   store i16 -28672, i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_address_a = func_1_3_scevgep;
	end
	/* func_1: %6*/
	/*   %8 = load i16* %7, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		memory_controller_address_a = func_1_6_7;
	end
	/* func_1: %6*/
	/*   %11 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__6_10)) begin
		memory_controller_address_a = `TAG_g_g_22_a;
	end
	/* func_1: %6*/
	/*   %15 = load i16* %14, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_14)) begin
		memory_controller_address_a = func_1_6_14_reg;
	end
	/* func_1: %6*/
	/*   %19 = load i16* %18, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_18)) begin
		memory_controller_address_a = func_1_6_18_reg;
	end
	/* func_1: %6*/
	/*   %24 = load i16* %23, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_22)) begin
		memory_controller_address_a = func_1_6_23_reg;
	end
	/* func_1: %29*/
	/*   %31 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_28)) begin
		memory_controller_address_a = `TAG_g_g_37_a;
	end
	/* func_1: %29*/
	/*   %35 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_address_a = `TAG_g_g_37_a;
	end
	/* func_1: %29*/
	/*   store i32 %36, i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		memory_controller_address_a = (`TAG_g_g_38_a + (4 * 32'd2));
	end
	/* func_1: %29*/
	/*   store i32 %55, i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_address_a = `TAG_g_g_79_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_a = safe_div_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_a = safe_div_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_a = safe_sub_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_a = safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_write_enable_a = safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_write_enable_a = safe_add_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_a = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = safe_div_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = safe_div_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_a = func_25_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_a = func_25_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_write_enable_a = func_13_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_write_enable_a = func_13_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_a = safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_a = safe_add_func_int32_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_a = func_7_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_a = func_7_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_a = safe_mul_func_int8_t_s_s_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_a = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_a;
	end
	/* func_1: %3*/
	/*   store i16 -28672, i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %6*/
	/*   %8 = load i16* %7, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %6*/
	/*   %11 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__6_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %6*/
	/*   %15 = load i16* %14, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %6*/
	/*   %19 = load i16* %18, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %6*/
	/*   %24 = load i16* %23, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %29*/
	/*   %31 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %29*/
	/*   %35 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %29*/
	/*   store i32 %36, i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %29*/
	/*   store i32 %55, i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_25_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_25_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_7_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_7_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_a;
	end
	/* func_1: %3*/
	/*   store i16 -28672, i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_in_a = -16'd28672;
	end
	/* func_1: %29*/
	/*   store i32 %36, i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		memory_controller_in_a = func_1_29_36;
	end
	/* func_1: %29*/
	/*   store i32 %55, i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_in_a = func_1_29_55;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_a[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_a[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_a[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_size_a;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_a[1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_size_a[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_size_a[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_a;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_a[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = safe_div_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = safe_div_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_a[1:0] = func_25_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_a[1:0] = func_25_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_size_a[1:0] = func_13_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_size_a[1:0] = func_13_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_a[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_a[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_a[1:0] = func_7_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_a[1:0] = func_7_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_a[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_a[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_a;
	end
	/* func_1: %3*/
	/*   store i16 -28672, i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__3_3)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %6*/
	/*   %8 = load i16* %7, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_6)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %6*/
	/*   %11 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__6_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %6*/
	/*   %15 = load i16* %14, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_14)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %6*/
	/*   %19 = load i16* %18, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_18)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %6*/
	/*   %24 = load i16* %23, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__6_22)) begin
		memory_controller_size_a = 2'd1;
	end
	/* func_1: %29*/
	/*   %31 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %29*/
	/*   %35 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %29*/
	/*   store i32 %36, i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %29*/
	/*   store i32 %55, i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_b = safe_div_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_enable_b = safe_div_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_b = safe_sub_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_b = safe_lshift_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_enable_b = safe_lshift_func_uint8_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_enable_b = safe_add_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_enable_b = safe_add_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = safe_div_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = safe_div_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_b = func_25_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_b = func_25_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_enable_b = func_13_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_enable_b = func_13_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_b = safe_add_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_b = safe_add_func_int32_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_b = func_7_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_enable_b = func_7_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_enable_b = safe_mul_func_int8_t_s_s_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_enable_b;
	end
	/* func_1: %29*/
	/*   %39 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %29*/
	/*   %43 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %29*/
	/*   %46 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %29*/
	/*   %49 = load i16* %48, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__29_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %29*/
	/*   %56 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_25_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_25_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_13_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_7_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_7_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_address_b;
	end
	/* func_1: %29*/
	/*   %39 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_address_b = `TAG_g_g_37_a;
	end
	/* func_1: %29*/
	/*   %43 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_37)) begin
		memory_controller_address_b = `TAG_g_g_37_a;
	end
	/* func_1: %29*/
	/*   %46 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_41)) begin
		memory_controller_address_b = `TAG_g_g_37_a;
	end
	/* func_1: %29*/
	/*   %49 = load i16* %48, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__29_45)) begin
		memory_controller_address_b = func_1_29_48_reg;
	end
	/* func_1: %29*/
	/*   %56 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_address_b = (`TAG_g_g_38_a + (4 * 32'd5));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_b = safe_div_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_write_enable_b = safe_div_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_b = safe_sub_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_write_enable_b = safe_lshift_func_uint8_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_write_enable_b = safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_write_enable_b = safe_add_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_write_enable_b = safe_rshift_func_int16_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = safe_div_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = safe_div_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_b = func_25_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_b = func_25_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_write_enable_b = func_13_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_write_enable_b = func_13_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_b = safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_b = safe_add_func_int32_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_b = func_7_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_write_enable_b = func_7_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_write_enable_b = safe_mul_func_int8_t_s_s_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_write_enable_b = safe_sub_func_uint16_t_u_u_memory_controller_write_enable_b;
	end
	/* func_1: %29*/
	/*   %39 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %29*/
	/*   %43 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %29*/
	/*   %46 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %29*/
	/*   %49 = load i16* %48, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__29_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %29*/
	/*   %56 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_rshift_func_int16_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_div_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_25_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_25_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_13_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_add_func_int32_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_7_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_7_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_mul_func_int8_t_s_s_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = safe_sub_func_uint16_t_u_u_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_b[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_1: %6*/
	/*   %9 = call i32 @safe_div_func_int32_t_s_s(i32 -4, i32 9) #3*/
	if ((cur_state == LEGUP_function_call_9)) begin
		memory_controller_size_b[1:0] = safe_div_func_int32_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %6*/
	/*   %13 = call signext i8 @safe_sub_func_int8_t_s_s(i8 signext %10, i8 signext %12) #3*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_b[1:0] = safe_sub_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_size_b;
	end
	/* func_1: %6*/
	/*   %17 = call zeroext i8 @safe_lshift_func_uint8_t_u_u(i8 zeroext %16, i32 5) #3*/
	if ((cur_state == LEGUP_function_call_17)) begin
		memory_controller_size_b[1:0] = safe_lshift_func_uint8_t_u_u_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_size_b[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %6*/
	/*   %21 = call signext i8 @safe_add_func_int8_t_s_s(i8 signext -108, i8 signext %20) #3*/
	if ((cur_state == LEGUP_function_call_21)) begin
		memory_controller_size_b[1:0] = safe_add_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_b;
	end
	/* func_1: %6*/
	/*   %26 = call signext i16 @safe_rshift_func_int16_t_s_s(i16 signext %22, i32 %25) #3*/
	if ((cur_state == LEGUP_function_call_25)) begin
		memory_controller_size_b[1:0] = safe_rshift_func_int16_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = safe_div_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %33 = call signext i8 @safe_div_func_int8_t_s_s(i8 signext %30, i8 signext %32) #3*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = safe_div_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_b[1:0] = func_25_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %42 = call signext i16 @func_25(i8 signext %38, i32 7, i8 zeroext %40, i32 %39, i16 signext %41) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_b[1:0] = func_25_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_size_b[1:0] = func_13_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %45 = call i32 @func_13(i16 zeroext 1, i16 signext %42, i8 signext %44) #3*/
	if ((cur_state == LEGUP_function_call_40)) begin
		memory_controller_size_b[1:0] = func_13_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_b[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %47 = call i32 @safe_add_func_int32_t_s_s(i32 %45, i32 %46) #3*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_b[1:0] = safe_add_func_int32_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_b[1:0] = func_7_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %50 = call zeroext i8 @func_7(i16 zeroext -1, i16 zeroext %49, i32 7) #3*/
	if ((cur_state == LEGUP_function_call_48)) begin
		memory_controller_size_b[1:0] = func_7_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %51 = call signext i8 @safe_mul_func_int8_t_s_s(i8 signext 70, i8 signext %50) #3*/
	if ((cur_state == LEGUP_function_call_50)) begin
		memory_controller_size_b[1:0] = safe_mul_func_int8_t_s_s_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %53 = call zeroext i16 @safe_sub_func_uint16_t_u_u(i16 zeroext %8, i16 zeroext %52) #3*/
	if ((cur_state == LEGUP_function_call_52)) begin
		memory_controller_size_b[1:0] = safe_sub_func_uint16_t_u_u_memory_controller_size_b;
	end
	/* func_1: %29*/
	/*   %39 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %29*/
	/*   %43 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %29*/
	/*   %46 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %29*/
	/*   %49 = load i16* %48, align 2*/
	if ((cur_state == LEGUP_F_func_1_BB__29_45)) begin
		memory_controller_size_b = 2'd1;
	end
	/* func_1: %29*/
	/*   %56 = load i32* getelementptr inbounds ([7 x i32]* @g_38, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__29_53)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_1: %29*/
	/*   ret i32 %56*/
	if ((cur_state == LEGUP_F_func_1_BB__29_55)) begin
		return_val <= func_1_29_56;
		if (start == 1'b0 && ^(func_1_29_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module transparent_crc
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val,
	arg_vname,
	arg_flag
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_4 = 3'd4;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_5 = 3'd5;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_6 = 3'd6;
parameter [2:0] LEGUP_F_transparent_crc_BB__6_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_2 = 3'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_vname;
input [31:0] arg_flag;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  transparent_crc_0_1;
reg  transparent_crc_0_1_reg;
reg [31:0] transparent_crc_2_3;
reg [31:0] transparent_crc_2_4;
reg  crc32_8bytes_start;
reg [63:0] crc32_8bytes_arg_val;
wire  crc32_8bytes_memory_controller_enable_a;
wire  crc32_8bytes_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_a;
wire [1:0] crc32_8bytes_memory_controller_size_a;
wire  crc32_8bytes_memory_controller_enable_b;
wire  crc32_8bytes_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_b;
wire [1:0] crc32_8bytes_memory_controller_size_b;
reg  crc32_8bytes_finish_final;
reg  crc32_8bytes_finish_reg;
wire  crc32_8bytes_finish;


crc32_8bytes crc32_8bytes (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_8bytes_memory_controller_enable_a),
	.memory_controller_address_a (crc32_8bytes_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_8bytes_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_8bytes_memory_controller_in_a),
	.memory_controller_size_a (crc32_8bytes_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_8bytes_memory_controller_enable_b),
	.memory_controller_address_b (crc32_8bytes_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_8bytes_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_8bytes_memory_controller_in_b),
	.memory_controller_size_b (crc32_8bytes_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_8bytes_start),
	.finish (crc32_8bytes_finish),
	.arg_val (crc32_8bytes_arg_val)
);

defparam
	crc32_8bytes.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* transparent_crc: %2*/
	/*   %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str8, i32 0, i32 0), i8* %vname, i32 %4) #4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_6)) begin
		$write("...checksum after hashing %s : %lX\n", $signed(arg_vname), $signed(transparent_crc_2_4));
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_vname) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(transparent_crc_2_4) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_1;
LEGUP_F_transparent_crc_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_transparent_crc_BB__0_3:
	if ((transparent_crc_0_1_reg == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__6_7;
	else if ((transparent_crc_0_1_reg == 1'd0))
		next_state = LEGUP_F_transparent_crc_BB__2_4;
LEGUP_F_transparent_crc_BB__2_4:
		next_state = LEGUP_F_transparent_crc_BB__2_5;
LEGUP_F_transparent_crc_BB__2_5:
		next_state = LEGUP_F_transparent_crc_BB__2_6;
LEGUP_F_transparent_crc_BB__2_6:
		next_state = LEGUP_F_transparent_crc_BB__6_7;
LEGUP_F_transparent_crc_BB__6_7:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((crc32_8bytes_finish_final == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
		transparent_crc_0_1 = (arg_flag == 32'd0);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		transparent_crc_0_1_reg <= transparent_crc_0_1;
		if (start == 1'b0 && ^(transparent_crc_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
		transparent_crc_2_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %4 = xor i32 %3, -1*/
		transparent_crc_2_4 = (transparent_crc_2_3 ^ -32'd1);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_8bytes_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_arg_val <= arg_val;
		if (start == 1'b0 && ^(arg_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_arg_val"); $finish; end
	end
end
always @(*) begin
	crc32_8bytes_finish_final = crc32_8bytes_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_transparent_crc_BB__0_1))) begin
		crc32_8bytes_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
	if (crc32_8bytes_finish) begin
		crc32_8bytes_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* transparent_crc: %6*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__6_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_argc,
	arg_argv
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__0_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__0_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__0_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__0_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__0_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__0_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__0_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__0_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__6_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__8_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__8_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__8_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__11_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__12_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__13_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__15_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__15_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__15_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__15_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__18_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__20_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__20_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB__20_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__20_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__23_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__24_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB__25_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB__27_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB__27_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB__27_41 = 6'd41;
parameter [5:0] LEGUP_F_main_BB__27_43 = 6'd43;
parameter [5:0] LEGUP_F_main_BB__27_44 = 6'd44;
parameter [5:0] LEGUP_F_main_BB__27_45 = 6'd45;
parameter [5:0] LEGUP_F_main_BB__27_47 = 6'd47;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_2 = 6'd2;
parameter [5:0] LEGUP_function_call_4 = 6'd4;
parameter [5:0] LEGUP_function_call_6 = 6'd6;
parameter [5:0] LEGUP_function_call_10 = 6'd10;
parameter [5:0] LEGUP_function_call_14 = 6'd14;
parameter [5:0] LEGUP_function_call_20 = 6'd20;
parameter [5:0] LEGUP_function_call_28 = 6'd28;
parameter [5:0] LEGUP_function_call_34 = 6'd34;
parameter [5:0] LEGUP_function_call_42 = 6'd42;
parameter [5:0] LEGUP_function_call_46 = 6'd46;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_argc;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_argv;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_0_2;
reg [63:0] main_0_3;
reg [31:0] main_0_4;
reg [63:0] main_0_5;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg  main_6_exitcond1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_scevgep2;
reg [31:0] main_8_9;
reg [63:0] main_8_10;
reg [31:0] main_13_14;
reg [31:0] main_15_16;
reg [63:0] main_15_17;
reg [31:0] main_18_19;
reg [31:0] main_18_19_reg;
reg  main_18_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_scevgep;
reg [15:0] main_20_21;
reg [63:0] main_20_22;
reg [31:0] main_25_26;
reg [31:0] main_27_28;
reg [63:0] main_27_29;
reg [31:0] main_27_30;
reg [31:0] main_27_31;
reg [31:0] main_27_32;
reg [31:0] main_27_32_reg;
reg  platform_main_begin_start;
wire  platform_main_begin_memory_controller_enable_a;
wire  platform_main_begin_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_a;
wire [1:0] platform_main_begin_memory_controller_size_a;
wire  platform_main_begin_memory_controller_enable_b;
wire  platform_main_begin_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_b;
wire [1:0] platform_main_begin_memory_controller_size_b;
reg  platform_main_begin_finish_final;
reg  platform_main_begin_finish_reg;
wire  platform_main_begin_finish;
reg  crc32_gentab_start;
wire  crc32_gentab_memory_controller_enable_a;
wire  crc32_gentab_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_a;
wire [1:0] crc32_gentab_memory_controller_size_a;
wire  crc32_gentab_memory_controller_enable_b;
wire  crc32_gentab_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_b;
wire [1:0] crc32_gentab_memory_controller_size_b;
reg  crc32_gentab_finish_final;
reg  crc32_gentab_finish_reg;
wire  crc32_gentab_finish;
reg  func_1_start;
wire  func_1_memory_controller_enable_a;
wire  func_1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_a;
wire [1:0] func_1_memory_controller_size_a;
wire  func_1_memory_controller_enable_b;
wire  func_1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_b;
wire [1:0] func_1_memory_controller_size_b;
reg  func_1_finish_final;
reg  func_1_finish_reg;
wire  func_1_finish;
wire [31:0] func_1_return_val;
reg  transparent_crc_start;
reg [63:0] transparent_crc_arg_val;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_arg_vname;
reg [31:0] transparent_crc_arg_flag;
wire  transparent_crc_memory_controller_enable_a;
wire  transparent_crc_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_a;
wire [1:0] transparent_crc_memory_controller_size_a;
wire  transparent_crc_memory_controller_enable_b;
wire  transparent_crc_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_b;
wire [1:0] transparent_crc_memory_controller_size_b;
reg  transparent_crc_finish_final;
reg  transparent_crc_finish_reg;
wire  transparent_crc_finish;
reg  platform_main_end_start;
reg [31:0] platform_main_end_arg_crc;
reg [31:0] platform_main_end_arg_flag;
wire  platform_main_end_memory_controller_enable_a;
wire  platform_main_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_a;
wire [1:0] platform_main_end_memory_controller_size_a;
wire  platform_main_end_memory_controller_enable_b;
wire  platform_main_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_b;
wire [1:0] platform_main_end_memory_controller_size_b;
reg  platform_main_end_finish_final;
reg  platform_main_end_finish_reg;
wire  platform_main_end_finish;
wire [31:0] platform_main_end_return_val;
reg [31:0] platform_main_end_return_val_reg;


platform_main_begin platform_main_begin (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_begin_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_begin_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_begin_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_begin_memory_controller_in_a),
	.memory_controller_size_a (platform_main_begin_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_begin_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_begin_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_begin_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_begin_memory_controller_in_b),
	.memory_controller_size_b (platform_main_begin_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_begin_start),
	.finish (platform_main_begin_finish)
);

defparam
	platform_main_begin.tag_offset = tag_offset;


crc32_gentab crc32_gentab (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_gentab_memory_controller_enable_a),
	.memory_controller_address_a (crc32_gentab_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_gentab_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_gentab_memory_controller_in_a),
	.memory_controller_size_a (crc32_gentab_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_gentab_memory_controller_enable_b),
	.memory_controller_address_b (crc32_gentab_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_gentab_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_gentab_memory_controller_in_b),
	.memory_controller_size_b (crc32_gentab_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_gentab_start),
	.finish (crc32_gentab_finish)
);

defparam
	crc32_gentab.tag_offset = tag_offset;


func_1 func_1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_1_memory_controller_enable_a),
	.memory_controller_address_a (func_1_memory_controller_address_a),
	.memory_controller_write_enable_a (func_1_memory_controller_write_enable_a),
	.memory_controller_in_a (func_1_memory_controller_in_a),
	.memory_controller_size_a (func_1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_1_memory_controller_enable_b),
	.memory_controller_address_b (func_1_memory_controller_address_b),
	.memory_controller_write_enable_b (func_1_memory_controller_write_enable_b),
	.memory_controller_in_b (func_1_memory_controller_in_b),
	.memory_controller_size_b (func_1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_1_start),
	.finish (func_1_finish),
	.return_val (func_1_return_val)
);

defparam
	func_1.tag_offset = tag_offset;


transparent_crc transparent_crc (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (transparent_crc_memory_controller_enable_a),
	.memory_controller_address_a (transparent_crc_memory_controller_address_a),
	.memory_controller_write_enable_a (transparent_crc_memory_controller_write_enable_a),
	.memory_controller_in_a (transparent_crc_memory_controller_in_a),
	.memory_controller_size_a (transparent_crc_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (transparent_crc_memory_controller_enable_b),
	.memory_controller_address_b (transparent_crc_memory_controller_address_b),
	.memory_controller_write_enable_b (transparent_crc_memory_controller_write_enable_b),
	.memory_controller_in_b (transparent_crc_memory_controller_in_b),
	.memory_controller_size_b (transparent_crc_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (transparent_crc_start),
	.finish (transparent_crc_finish),
	.arg_val (transparent_crc_arg_val),
	.arg_vname (transparent_crc_arg_vname),
	.arg_flag (transparent_crc_arg_flag)
);

defparam
	transparent_crc.tag_offset = tag_offset;


platform_main_end platform_main_end (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_end_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_end_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_end_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_end_memory_controller_in_a),
	.memory_controller_size_a (platform_main_end_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_end_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_end_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_end_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_end_memory_controller_in_b),
	.memory_controller_size_b (platform_main_end_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_end_start),
	.finish (platform_main_end_finish),
	.return_val (platform_main_end_return_val),
	.arg_crc (platform_main_end_arg_crc),
	.arg_flag (platform_main_end_arg_flag)
);

defparam
	platform_main_end.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_F_main_BB__11_22:
		next_state = LEGUP_F_main_BB__12_23;
LEGUP_F_main_BB__12_23:
		next_state = LEGUP_F_main_BB__13_24;
LEGUP_F_main_BB__13_24:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__15_25:
		next_state = LEGUP_F_main_BB__15_26;
LEGUP_F_main_BB__15_26:
		next_state = LEGUP_F_main_BB__15_27;
LEGUP_F_main_BB__15_27:
		next_state = LEGUP_function_call_28;
LEGUP_F_main_BB__15_29:
		next_state = LEGUP_F_main_BB__18_30;
LEGUP_F_main_BB__18_30:
	if ((main_18_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__27_39;
	else if ((main_18_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__20_31;
LEGUP_F_main_BB__20_31:
		next_state = LEGUP_F_main_BB__20_32;
LEGUP_F_main_BB__20_32:
		next_state = LEGUP_F_main_BB__20_33;
LEGUP_F_main_BB__20_33:
		next_state = LEGUP_function_call_34;
LEGUP_F_main_BB__20_35:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__23_36;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__24_37;
LEGUP_F_main_BB__23_36:
		next_state = LEGUP_F_main_BB__24_37;
LEGUP_F_main_BB__24_37:
		next_state = LEGUP_F_main_BB__25_38;
LEGUP_F_main_BB__25_38:
		next_state = LEGUP_F_main_BB__18_30;
LEGUP_F_main_BB__27_39:
		next_state = LEGUP_F_main_BB__27_40;
LEGUP_F_main_BB__27_40:
		next_state = LEGUP_F_main_BB__27_41;
LEGUP_F_main_BB__27_41:
		next_state = LEGUP_function_call_42;
LEGUP_F_main_BB__27_43:
		next_state = LEGUP_F_main_BB__27_44;
LEGUP_F_main_BB__27_44:
		next_state = LEGUP_F_main_BB__27_45;
LEGUP_F_main_BB__27_45:
		next_state = LEGUP_function_call_46;
LEGUP_F_main_BB__27_47:
		next_state = LEGUP_0;
LEGUP_F_main_BB__6_16:
	if ((main_6_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__15_25;
	else if ((main_6_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__8_17;
LEGUP_F_main_BB__8_17:
		next_state = LEGUP_F_main_BB__8_18;
LEGUP_F_main_BB__8_18:
		next_state = LEGUP_F_main_BB__8_19;
LEGUP_F_main_BB__8_19:
		next_state = LEGUP_function_call_20;
LEGUP_F_main_BB__8_21:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__11_22;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__12_23;
LEGUP_function_call_10:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_function_call_14:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_function_call_2:
	if ((platform_main_begin_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_function_call_20:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__8_21;
LEGUP_function_call_28:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__15_29;
LEGUP_function_call_34:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__20_35;
LEGUP_function_call_4:
	if ((crc32_gentab_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_function_call_42:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__27_43;
LEGUP_function_call_46:
	if ((platform_main_end_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__27_47;
LEGUP_function_call_6:
	if ((func_1_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %2 = load volatile i32* @g_22, align 4*/
		main_0_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %3 = sext i32 %2 to i64*/
		main_0_3 = $signed(main_0_2);
end
always @(*) begin
	/* main: %0*/
	/*   %4 = load i32* @g_37, align 4*/
		main_0_4 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %5 = zext i32 %4 to i64*/
		main_0_5 = main_0_4;
end
always @(*) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7 = 32'd0;
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__13_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_6_7 = main_13_14;
	end
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %14, %13 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %exitcond1 = icmp eq i32 %7, 7*/
		main_6_exitcond1 = (main_6_7_reg == 32'd7);
end
always @(*) begin
	/* main: %8*/
	/*   %scevgep2 = getelementptr [7 x i32]* @g_38, i32 0, i32 %7*/
		main_8_scevgep2 = (`TAG_g_g_38_a + (4 * main_6_7_reg));
end
always @(*) begin
	/* main: %8*/
	/*   %9 = load i32* %scevgep2, align 4*/
		main_8_9 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %8*/
	/*   %10 = zext i32 %9 to i64*/
		main_8_10 = main_8_9;
end
always @(*) begin
	/* main: %13*/
	/*   %14 = add nsw i32 %7, 1*/
		main_13_14 = (main_6_7_reg + 32'd1);
end
always @(*) begin
	/* main: %15*/
	/*   %16 = load i32* @g_77, align 4*/
		main_15_16 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %15*/
	/*   %17 = sext i32 %16 to i64*/
		main_15_17 = $signed(main_15_16);
end
always @(*) begin
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %15 ], [ %26, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19 = 32'd0;
	end
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %15 ], [ %26, %25 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__25_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_18_19 = main_25_26;
	end
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %15 ], [ %26, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__15_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
	/* main: %18*/
	/*   %19 = phi i32 [ 0, %15 ], [ %26, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__25_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %exitcond = icmp eq i32 %19, 6*/
		main_18_exitcond = (main_18_19_reg == 32'd6);
end
always @(*) begin
	/* main: %20*/
	/*   %scevgep = getelementptr [6 x i16]* @g_78, i32 0, i32 %19*/
		main_20_scevgep = (`TAG_g_g_78_a + (2 * main_18_19_reg));
end
always @(*) begin
	/* main: %20*/
	/*   %21 = load i16* %scevgep, align 2*/
		main_20_21 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %20*/
	/*   %22 = zext i16 %21 to i64*/
		main_20_22 = main_20_21;
end
always @(*) begin
	/* main: %25*/
	/*   %26 = add nsw i32 %19, 1*/
		main_25_26 = (main_18_19_reg + 32'd1);
end
always @(*) begin
	/* main: %27*/
	/*   %28 = load i32* @g_79, align 4*/
		main_27_28 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %29 = sext i32 %28 to i64*/
		main_27_29 = $signed(main_27_28);
end
always @(*) begin
	/* main: %27*/
	/*   %30 = load i32* @crc32_context, align 4*/
		main_27_30 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %31 = xor i32 %30, -1*/
		main_27_31 = (main_27_30 ^ -32'd1);
end
always @(*) begin
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
		main_27_32 = platform_main_end_return_val_reg;
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		main_27_32_reg <= main_27_32;
		if (start == 1'b0 && ^(main_27_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_32_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		platform_main_begin_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		platform_main_begin_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
end
always @(*) begin
	platform_main_begin_finish_final = platform_main_begin_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		platform_main_begin_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
	if (platform_main_begin_finish) begin
		platform_main_begin_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		crc32_gentab_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_gentab_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
end
always @(*) begin
	crc32_gentab_finish_final = crc32_gentab_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_3))) begin
		crc32_gentab_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
	if (crc32_gentab_finish) begin
		crc32_gentab_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		func_1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		func_1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
end
always @(*) begin
	func_1_finish_final = func_1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_5))) begin
		func_1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
	if (func_1_finish) begin
		func_1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__8_19)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_20)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__15_27)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_41)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_val <= main_0_3;
		if (start == 1'b0 && ^(main_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_val <= main_0_5;
		if (start == 1'b0 && ^(main_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__8_19)) begin
		transparent_crc_arg_val <= main_8_10;
		if (start == 1'b0 && ^(main_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__15_27)) begin
		transparent_crc_arg_val <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		transparent_crc_arg_val <= main_20_22;
		if (start == 1'b0 && ^(main_20_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_41)) begin
		transparent_crc_arg_val <= main_27_29;
		if (start == 1'b0 && ^(main_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_vname <= `TAG_g_str_a;
		if (start == 1'b0 && ^(`TAG_g_str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_vname <= `TAG_g_str1_a;
		if (start == 1'b0 && ^(`TAG_g_str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__8_19)) begin
		transparent_crc_arg_vname <= `TAG_g_str2_a;
		if (start == 1'b0 && ^(`TAG_g_str2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__15_27)) begin
		transparent_crc_arg_vname <= `TAG_g_str4_a;
		if (start == 1'b0 && ^(`TAG_g_str4_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		transparent_crc_arg_vname <= `TAG_g_str5_a;
		if (start == 1'b0 && ^(`TAG_g_str5_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_41)) begin
		transparent_crc_arg_vname <= `TAG_g_str6_a;
		if (start == 1'b0 && ^(`TAG_g_str6_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__8_19)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__15_27)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__20_33)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_41)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
end
always @(*) begin
	transparent_crc_finish_final = transparent_crc_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_9))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__0_13))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__8_19))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__15_27))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__20_33))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__27_41))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_45)) begin
		platform_main_end_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		platform_main_end_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_45)) begin
		platform_main_end_arg_crc <= main_27_31;
		if (start == 1'b0 && ^(main_27_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_crc"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_45)) begin
		platform_main_end_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_flag"); $finish; end
	end
end
always @(*) begin
	platform_main_end_finish_final = platform_main_end_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__27_45))) begin
		platform_main_end_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__27_45))) begin
		platform_main_end_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_return_val_reg <= platform_main_end_return_val;
		if (start == 1'b0 && ^(platform_main_end_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__27_47)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   %9 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   %16 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   %21 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__20_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %27*/
	/*   %28 = load i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %27*/
	/*   %30 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_43)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_g_22_a;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = `TAG_g_g_37_a;
	end
	/* main: %8*/
	/*   %9 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_address_a = main_8_scevgep2;
	end
	/* main: %15*/
	/*   %16 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_25)) begin
		memory_controller_address_a = `TAG_g_g_77_a;
	end
	/* main: %20*/
	/*   %21 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__20_31)) begin
		memory_controller_address_a = main_20_scevgep;
	end
	/* main: %27*/
	/*   %28 = load i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_39)) begin
		memory_controller_address_a = `TAG_g_g_79_a;
	end
	/* main: %27*/
	/*   %30 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_43)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %8*/
	/*   %9 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %15*/
	/*   %16 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %21 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__20_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %27*/
	/*   %28 = load i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %27*/
	/*   %30 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %2 = load volatile i32* @g_22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_37, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %8*/
	/*   %9 = load i32* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB__8_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %15*/
	/*   %16 = load i32* @g_77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__15_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %20*/
	/*   %21 = load i16* %scevgep, align 2*/
	if ((cur_state == LEGUP_F_main_BB__20_31)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %27*/
	/*   %28 = load i32* @g_79, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %27*/
	/*   %30 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_43)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([5 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([5 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %8*/
	/*   call void @transparent_crc(i64 %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_20)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %15*/
	/*   call void @transparent_crc(i64 %17, i8* getelementptr inbounds ([5 x i8]* @.str4, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %20*/
	/*   call void @transparent_crc(i64 %22, i8* getelementptr inbounds ([8 x i8]* @.str5, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_34)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %27*/
	/*   call void @transparent_crc(i64 %29, i8* getelementptr inbounds ([5 x i8]* @.str6, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
	/* main: %27*/
	/*   %32 = call i32 @platform_main_end(i32 %31, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_46)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__27_47)) begin
		return_val <= main_27_32_reg;
		if (start == 1'b0 && ^(main_27_32_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
