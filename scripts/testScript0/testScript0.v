//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  5 16:23:28 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 12 19:47:24 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 13
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %l_2 = alloca [3 x [2 x [5 x i32]]], align 4
`define TAG_func_1_0_l_2 `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_func_1_0_l_2_a {`TAG_func_1_0_l_2, 23'd0}
// @crc32_context = internal global i32 -1, align 4
`define TAG_g_crc32_context `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_crc32_context_a {`TAG_g_crc32_context, 23'd0}
// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
`define TAG_g_crc32_tab `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_crc32_tab_a {`TAG_g_crc32_tab, 23'd0}
// @func_1.l_2 = private unnamed_addr constant [3 x [2 x [5 x i32]]] [[2 x [5 x i32]] [[5 x i32] [i32 -7, i32 1899644734, i32 950756765, i32 950756765, i32 1899644734], [5 x i32] [i32 2, i32 -6, i32 1, i...
`define TAG_g_func_1l_2 `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_func_1l_2_a {`TAG_g_func_1l_2, 23'd0}
// @g_3 = internal global i32 1831765384, align 4
`define TAG_g_g_3 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_g_3_a {`TAG_g_g_3, 23'd0}
// @g_4 = internal global i32 9, align 4
`define TAG_g_g_4 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_g_4_a {`TAG_g_g_4, 23'd0}
// @g_5 = internal global [5 x [3 x [6 x i32]]] [[3 x [6 x i32]] [[6 x i32] [i32 103435029, i32 803739424, i32 -1, i32 377235658, i32 303236908, i32 -1], [6 x i32] [i32 103435029, i32 -1, i32 377235658, ...
`define TAG_g_g_5 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_g_5_a {`TAG_g_g_5, 23'd0}
// @.str = private unnamed_addr constant [4 x i8] c"g_3\00", align 1
`define TAG_g_str `MEMORY_CONTROLLER_TAG_SIZE'd3
// @.str1 = private unnamed_addr constant [4 x i8] c"g_4\00", align 1
`define TAG_g_str1 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_str1_a {`TAG_g_str1, 23'd0}
// @.str2 = private unnamed_addr constant [13 x i8] c"g_5[i][j][k]\00", align 1
`define TAG_g_str2 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_str2_a {`TAG_g_str2, 23'd0}
`define TAG_g_str_a {`TAG_g_str, 23'd0}
//   %1 = alloca i32, align 4
`define TAG_legup_memcpy_4_0_1 `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_legup_memcpy_4_0_1_a {`TAG_legup_memcpy_4_0_1, 23'd0}
//   %dt = alloca i32*, align 4
`define TAG_legup_memcpy_4_0_dt `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_legup_memcpy_4_0_dt_a {`TAG_legup_memcpy_4_0_dt, 23'd0}
//   %st = alloca i32*, align 4
`define TAG_legup_memcpy_4_0_st `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_legup_memcpy_4_0_st_a {`TAG_legup_memcpy_4_0_st, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] g_3_address_a;
reg [0:0] g_3_address_b;
reg g_3_write_enable_a;
reg g_3_write_enable_b;
reg [31:0] g_3_in_a;
reg [31:0] g_3_in_b;
wire [31:0] g_3_out_a;
wire [31:0] g_3_out_b;

// @g_3 = internal global i32 1831765384, align 4
ram_dual_port g_3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_3_address_a ),
	.address_b( g_3_address_b ),
	.wren_a( g_3_write_enable_a ),
	.wren_b( g_3_write_enable_b ),
	.data_a( g_3_in_a ),
	.data_b( g_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_3_out_a ),
	.q_b( g_3_out_b)
);
defparam g_3.width_a = 32;
defparam g_3.width_b = 32;
defparam g_3.widthad_a = 1;
defparam g_3.widthad_b = 1;
defparam g_3.width_be_a = 1;
defparam g_3.width_be_b = 1;
defparam g_3.numwords_a = 1;
defparam g_3.numwords_b = 1;
defparam g_3.latency = ram_latency;
defparam g_3.init_file = "g_3.mif";

reg [1:0] str_address_a;
reg [1:0] str_address_b;
reg str_write_enable_a;
reg str_write_enable_b;
reg [7:0] str_in_a;
reg [7:0] str_in_b;
wire [7:0] str_out_a;
wire [7:0] str_out_b;

// @.str = private unnamed_addr constant [4 x i8] c"g_3\00", align 1
rom_dual_port str (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str_address_a ),
	.address_b( str_address_b ),
	.q_a( str_out_a ),
	.q_b( str_out_b)
);
defparam str.width_a = 8;
defparam str.width_b = 8;
defparam str.widthad_a = 2;
defparam str.widthad_b = 2;
defparam str.numwords_a = 4;
defparam str.numwords_b = 4;
defparam str.latency = ram_latency;
defparam str.init_file = "str.mif";

reg [0:0] g_4_address_a;
reg [0:0] g_4_address_b;
reg g_4_write_enable_a;
reg g_4_write_enable_b;
reg [31:0] g_4_in_a;
reg [31:0] g_4_in_b;
wire [31:0] g_4_out_a;
wire [31:0] g_4_out_b;

// @g_4 = internal global i32 9, align 4
ram_dual_port g_4 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_4_address_a ),
	.address_b( g_4_address_b ),
	.wren_a( g_4_write_enable_a ),
	.wren_b( g_4_write_enable_b ),
	.data_a( g_4_in_a ),
	.data_b( g_4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_4_out_a ),
	.q_b( g_4_out_b)
);
defparam g_4.width_a = 32;
defparam g_4.width_b = 32;
defparam g_4.widthad_a = 1;
defparam g_4.widthad_b = 1;
defparam g_4.width_be_a = 1;
defparam g_4.width_be_b = 1;
defparam g_4.numwords_a = 1;
defparam g_4.numwords_b = 1;
defparam g_4.latency = ram_latency;
defparam g_4.init_file = "g_4.mif";

reg [1:0] str1_address_a;
reg [1:0] str1_address_b;
reg str1_write_enable_a;
reg str1_write_enable_b;
reg [7:0] str1_in_a;
reg [7:0] str1_in_b;
wire [7:0] str1_out_a;
wire [7:0] str1_out_b;

// @.str1 = private unnamed_addr constant [4 x i8] c"g_4\00", align 1
rom_dual_port str1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str1_address_a ),
	.address_b( str1_address_b ),
	.q_a( str1_out_a ),
	.q_b( str1_out_b)
);
defparam str1.width_a = 8;
defparam str1.width_b = 8;
defparam str1.widthad_a = 2;
defparam str1.widthad_b = 2;
defparam str1.numwords_a = 4;
defparam str1.numwords_b = 4;
defparam str1.latency = ram_latency;
defparam str1.init_file = "str1.mif";

reg [6:0] g_5_address_a;
reg [6:0] g_5_address_b;
reg g_5_write_enable_a;
reg g_5_write_enable_b;
reg [31:0] g_5_in_a;
reg [31:0] g_5_in_b;
wire [31:0] g_5_out_a;
wire [31:0] g_5_out_b;

// @g_5 = internal global [5 x [3 x [6 x i32]]] [[3 x [6 x i32]] [[6 x i32] [i32 103435029, i32 803739424, i32 -1, i32 377235658, i32 303236908, i32 -1], [6 x i32] [i32 103435029, i32 -1, i32 377235658, ...
ram_dual_port g_5 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_5_address_a ),
	.address_b( g_5_address_b ),
	.wren_a( g_5_write_enable_a ),
	.wren_b( g_5_write_enable_b ),
	.data_a( g_5_in_a ),
	.data_b( g_5_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_5_out_a ),
	.q_b( g_5_out_b)
);
defparam g_5.width_a = 32;
defparam g_5.width_b = 32;
defparam g_5.widthad_a = 7;
defparam g_5.widthad_b = 7;
defparam g_5.width_be_a = 1;
defparam g_5.width_be_b = 1;
defparam g_5.numwords_a = 90;
defparam g_5.numwords_b = 90;
defparam g_5.latency = ram_latency;
defparam g_5.init_file = "g_5.mif";

reg [3:0] str2_address_a;
reg [3:0] str2_address_b;
reg str2_write_enable_a;
reg str2_write_enable_b;
reg [7:0] str2_in_a;
reg [7:0] str2_in_b;
wire [7:0] str2_out_a;
wire [7:0] str2_out_b;

// @.str2 = private unnamed_addr constant [13 x i8] c"g_5[i][j][k]\00", align 1
rom_dual_port str2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( str2_address_a ),
	.address_b( str2_address_b ),
	.q_a( str2_out_a ),
	.q_b( str2_out_b)
);
defparam str2.width_a = 8;
defparam str2.width_b = 8;
defparam str2.widthad_a = 4;
defparam str2.widthad_b = 4;
defparam str2.numwords_a = 13;
defparam str2.numwords_b = 13;
defparam str2.latency = ram_latency;
defparam str2.init_file = "str2.mif";

reg [0:0] crc32_context_address_a;
reg [0:0] crc32_context_address_b;
reg crc32_context_write_enable_a;
reg crc32_context_write_enable_b;
reg [31:0] crc32_context_in_a;
reg [31:0] crc32_context_in_b;
wire [31:0] crc32_context_out_a;
wire [31:0] crc32_context_out_b;

// @crc32_context = internal global i32 -1, align 4
ram_dual_port crc32_context (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_context_address_a ),
	.address_b( crc32_context_address_b ),
	.wren_a( crc32_context_write_enable_a ),
	.wren_b( crc32_context_write_enable_b ),
	.data_a( crc32_context_in_a ),
	.data_b( crc32_context_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_context_out_a ),
	.q_b( crc32_context_out_b)
);
defparam crc32_context.width_a = 32;
defparam crc32_context.width_b = 32;
defparam crc32_context.widthad_a = 1;
defparam crc32_context.widthad_b = 1;
defparam crc32_context.width_be_a = 1;
defparam crc32_context.width_be_b = 1;
defparam crc32_context.numwords_a = 1;
defparam crc32_context.numwords_b = 1;
defparam crc32_context.latency = ram_latency;
defparam crc32_context.init_file = "crc32_context.mif";

reg [7:0] crc32_tab_address_a;
reg [7:0] crc32_tab_address_b;
reg crc32_tab_write_enable_a;
reg crc32_tab_write_enable_b;
reg [31:0] crc32_tab_in_a;
reg [31:0] crc32_tab_in_b;
wire [31:0] crc32_tab_out_a;
wire [31:0] crc32_tab_out_b;

// @crc32_tab = internal global [256 x i32] zeroinitializer, align 4
ram_dual_port crc32_tab (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( crc32_tab_address_a ),
	.address_b( crc32_tab_address_b ),
	.wren_a( crc32_tab_write_enable_a ),
	.wren_b( crc32_tab_write_enable_b ),
	.data_a( crc32_tab_in_a ),
	.data_b( crc32_tab_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( crc32_tab_out_a ),
	.q_b( crc32_tab_out_b)
);
defparam crc32_tab.width_a = 32;
defparam crc32_tab.width_b = 32;
defparam crc32_tab.widthad_a = 8;
defparam crc32_tab.widthad_b = 8;
defparam crc32_tab.width_be_a = 1;
defparam crc32_tab.width_be_b = 1;
defparam crc32_tab.numwords_a = 256;
defparam crc32_tab.numwords_b = 256;
defparam crc32_tab.latency = ram_latency;
defparam crc32_tab.init_file = "crc32_tab.mif";

reg [4:0] func_1l_2_address_a;
reg [4:0] func_1l_2_address_b;
reg func_1l_2_write_enable_a;
reg func_1l_2_write_enable_b;
reg [31:0] func_1l_2_in_a;
reg [31:0] func_1l_2_in_b;
wire [31:0] func_1l_2_out_a;
wire [31:0] func_1l_2_out_b;

// @func_1.l_2 = private unnamed_addr constant [3 x [2 x [5 x i32]]] [[2 x [5 x i32]] [[5 x i32] [i32 -7, i32 1899644734, i32 950756765, i32 950756765, i32 1899644734], [5 x i32] [i32 2, i32 -6, i32 1, i...
rom_dual_port func_1l_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1l_2_address_a ),
	.address_b( func_1l_2_address_b ),
	.q_a( func_1l_2_out_a ),
	.q_b( func_1l_2_out_b)
);
defparam func_1l_2.width_a = 32;
defparam func_1l_2.width_b = 32;
defparam func_1l_2.widthad_a = 5;
defparam func_1l_2.widthad_b = 5;
defparam func_1l_2.numwords_a = 30;
defparam func_1l_2.numwords_b = 30;
defparam func_1l_2.latency = ram_latency;
defparam func_1l_2.init_file = "func_1l_2.mif";

reg [4:0] func_1_0_l_2_address_a;
reg [4:0] func_1_0_l_2_address_b;
reg func_1_0_l_2_write_enable_a;
reg func_1_0_l_2_write_enable_b;
reg [31:0] func_1_0_l_2_in_a;
reg [31:0] func_1_0_l_2_in_b;
wire [31:0] func_1_0_l_2_out_a;
wire [31:0] func_1_0_l_2_out_b;

//   %l_2 = alloca [3 x [2 x [5 x i32]]], align 4
ram_dual_port func_1_0_l_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( func_1_0_l_2_address_a ),
	.address_b( func_1_0_l_2_address_b ),
	.wren_a( func_1_0_l_2_write_enable_a ),
	.wren_b( func_1_0_l_2_write_enable_b ),
	.data_a( func_1_0_l_2_in_a ),
	.data_b( func_1_0_l_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( func_1_0_l_2_out_a ),
	.q_b( func_1_0_l_2_out_b)
);
defparam func_1_0_l_2.width_a = 32;
defparam func_1_0_l_2.width_b = 32;
defparam func_1_0_l_2.widthad_a = 5;
defparam func_1_0_l_2.widthad_b = 5;
defparam func_1_0_l_2.width_be_a = 1;
defparam func_1_0_l_2.width_be_b = 1;
defparam func_1_0_l_2.numwords_a = 30;
defparam func_1_0_l_2.numwords_b = 30;
defparam func_1_0_l_2.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_1_address_a;
reg [0:0] legup_memcpy_4_0_1_address_b;
reg legup_memcpy_4_0_1_write_enable_a;
reg legup_memcpy_4_0_1_write_enable_b;
reg [31:0] legup_memcpy_4_0_1_in_a;
reg [31:0] legup_memcpy_4_0_1_in_b;
wire [31:0] legup_memcpy_4_0_1_out_a;
wire [31:0] legup_memcpy_4_0_1_out_b;

//   %1 = alloca i32, align 4
ram_dual_port legup_memcpy_4_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_1_address_a ),
	.address_b( legup_memcpy_4_0_1_address_b ),
	.wren_a( legup_memcpy_4_0_1_write_enable_a ),
	.wren_b( legup_memcpy_4_0_1_write_enable_b ),
	.data_a( legup_memcpy_4_0_1_in_a ),
	.data_b( legup_memcpy_4_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_1_out_a ),
	.q_b( legup_memcpy_4_0_1_out_b)
);
defparam legup_memcpy_4_0_1.width_a = 32;
defparam legup_memcpy_4_0_1.width_b = 32;
defparam legup_memcpy_4_0_1.widthad_a = 1;
defparam legup_memcpy_4_0_1.widthad_b = 1;
defparam legup_memcpy_4_0_1.width_be_a = 1;
defparam legup_memcpy_4_0_1.width_be_b = 1;
defparam legup_memcpy_4_0_1.numwords_a = 1;
defparam legup_memcpy_4_0_1.numwords_b = 1;
defparam legup_memcpy_4_0_1.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_dt_address_a;
reg [0:0] legup_memcpy_4_0_dt_address_b;
reg legup_memcpy_4_0_dt_write_enable_a;
reg legup_memcpy_4_0_dt_write_enable_b;
reg [31:0] legup_memcpy_4_0_dt_in_a;
reg [31:0] legup_memcpy_4_0_dt_in_b;
wire [31:0] legup_memcpy_4_0_dt_out_a;
wire [31:0] legup_memcpy_4_0_dt_out_b;

//   %dt = alloca i32*, align 4
ram_dual_port legup_memcpy_4_0_dt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_dt_address_a ),
	.address_b( legup_memcpy_4_0_dt_address_b ),
	.wren_a( legup_memcpy_4_0_dt_write_enable_a ),
	.wren_b( legup_memcpy_4_0_dt_write_enable_b ),
	.data_a( legup_memcpy_4_0_dt_in_a ),
	.data_b( legup_memcpy_4_0_dt_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_dt_out_a ),
	.q_b( legup_memcpy_4_0_dt_out_b)
);
defparam legup_memcpy_4_0_dt.width_a = 32;
defparam legup_memcpy_4_0_dt.width_b = 32;
defparam legup_memcpy_4_0_dt.widthad_a = 1;
defparam legup_memcpy_4_0_dt.widthad_b = 1;
defparam legup_memcpy_4_0_dt.width_be_a = 1;
defparam legup_memcpy_4_0_dt.width_be_b = 1;
defparam legup_memcpy_4_0_dt.numwords_a = 1;
defparam legup_memcpy_4_0_dt.numwords_b = 1;
defparam legup_memcpy_4_0_dt.latency = ram_latency;

reg [0:0] legup_memcpy_4_0_st_address_a;
reg [0:0] legup_memcpy_4_0_st_address_b;
reg legup_memcpy_4_0_st_write_enable_a;
reg legup_memcpy_4_0_st_write_enable_b;
reg [31:0] legup_memcpy_4_0_st_in_a;
reg [31:0] legup_memcpy_4_0_st_in_b;
wire [31:0] legup_memcpy_4_0_st_out_a;
wire [31:0] legup_memcpy_4_0_st_out_b;

//   %st = alloca i32*, align 4
ram_dual_port legup_memcpy_4_0_st (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memcpy_4_0_st_address_a ),
	.address_b( legup_memcpy_4_0_st_address_b ),
	.wren_a( legup_memcpy_4_0_st_write_enable_a ),
	.wren_b( legup_memcpy_4_0_st_write_enable_b ),
	.data_a( legup_memcpy_4_0_st_in_a ),
	.data_b( legup_memcpy_4_0_st_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memcpy_4_0_st_out_a ),
	.q_b( legup_memcpy_4_0_st_out_b)
);
defparam legup_memcpy_4_0_st.width_a = 32;
defparam legup_memcpy_4_0_st.width_b = 32;
defparam legup_memcpy_4_0_st.widthad_a = 1;
defparam legup_memcpy_4_0_st.widthad_b = 1;
defparam legup_memcpy_4_0_st.width_be_a = 1;
defparam legup_memcpy_4_0_st.width_be_b = 1;
defparam legup_memcpy_4_0_st.numwords_a = 1;
defparam legup_memcpy_4_0_st.numwords_b = 1;
defparam legup_memcpy_4_0_st.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_g_3_a;
assign select_g_3_a = (tag_a == `TAG_g_g_3);
reg [ram_latency:0] select_g_3_reg_a;
wire [31:0] memory_controller_g_3_out_a;
assign memory_controller_g_3_out_a = {32{ select_g_3_reg_a[ram_latency]}} & g_3_out_a;

wire select_str_a;
assign select_str_a = (tag_a == `TAG_g_str);
reg [ram_latency:0] select_str_reg_a;
wire [7:0] memory_controller_str_out_a;
assign memory_controller_str_out_a = {8{ select_str_reg_a[ram_latency]}} & str_out_a;

wire select_g_4_a;
assign select_g_4_a = (tag_a == `TAG_g_g_4);
reg [ram_latency:0] select_g_4_reg_a;
wire [31:0] memory_controller_g_4_out_a;
assign memory_controller_g_4_out_a = {32{ select_g_4_reg_a[ram_latency]}} & g_4_out_a;

wire select_str1_a;
assign select_str1_a = (tag_a == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_a;
wire [7:0] memory_controller_str1_out_a;
assign memory_controller_str1_out_a = {8{ select_str1_reg_a[ram_latency]}} & str1_out_a;

wire select_g_5_a;
assign select_g_5_a = (tag_a == `TAG_g_g_5);
reg [ram_latency:0] select_g_5_reg_a;
wire [31:0] memory_controller_g_5_out_a;
assign memory_controller_g_5_out_a = {32{ select_g_5_reg_a[ram_latency]}} & g_5_out_a;

wire select_str2_a;
assign select_str2_a = (tag_a == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_a;
wire [7:0] memory_controller_str2_out_a;
assign memory_controller_str2_out_a = {8{ select_str2_reg_a[ram_latency]}} & str2_out_a;

wire select_crc32_context_a;
assign select_crc32_context_a = (tag_a == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_a;
wire [31:0] memory_controller_crc32_context_out_a;
assign memory_controller_crc32_context_out_a = {32{ select_crc32_context_reg_a[ram_latency]}} & crc32_context_out_a;

wire select_crc32_tab_a;
assign select_crc32_tab_a = (tag_a == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_a;
wire [31:0] memory_controller_crc32_tab_out_a;
assign memory_controller_crc32_tab_out_a = {32{ select_crc32_tab_reg_a[ram_latency]}} & crc32_tab_out_a;

wire select_func_1l_2_a;
assign select_func_1l_2_a = (tag_a == `TAG_g_func_1l_2);
reg [ram_latency:0] select_func_1l_2_reg_a;
wire [31:0] memory_controller_func_1l_2_out_a;
assign memory_controller_func_1l_2_out_a = {32{ select_func_1l_2_reg_a[ram_latency]}} & func_1l_2_out_a;

wire select_func_1_0_l_2_a;
assign select_func_1_0_l_2_a = (tag_a == `TAG_func_1_0_l_2);
reg [ram_latency:0] select_func_1_0_l_2_reg_a;
wire [31:0] memory_controller_func_1_0_l_2_out_a;
assign memory_controller_func_1_0_l_2_out_a = {32{ select_func_1_0_l_2_reg_a[ram_latency]}} & func_1_0_l_2_out_a;

wire select_legup_memcpy_4_0_1_a;
assign select_legup_memcpy_4_0_1_a = (tag_a == `TAG_legup_memcpy_4_0_1);
reg [ram_latency:0] select_legup_memcpy_4_0_1_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_1_out_a;
assign memory_controller_legup_memcpy_4_0_1_out_a = {32{ select_legup_memcpy_4_0_1_reg_a[ram_latency]}} & legup_memcpy_4_0_1_out_a;

wire select_legup_memcpy_4_0_dt_a;
assign select_legup_memcpy_4_0_dt_a = (tag_a == `TAG_legup_memcpy_4_0_dt);
reg [ram_latency:0] select_legup_memcpy_4_0_dt_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_dt_out_a;
assign memory_controller_legup_memcpy_4_0_dt_out_a = {32{ select_legup_memcpy_4_0_dt_reg_a[ram_latency]}} & legup_memcpy_4_0_dt_out_a;

wire select_legup_memcpy_4_0_st_a;
assign select_legup_memcpy_4_0_st_a = (tag_a == `TAG_legup_memcpy_4_0_st);
reg [ram_latency:0] select_legup_memcpy_4_0_st_reg_a;
wire [31:0] memory_controller_legup_memcpy_4_0_st_out_a;
assign memory_controller_legup_memcpy_4_0_st_out_a = {32{ select_legup_memcpy_4_0_st_reg_a[ram_latency]}} & legup_memcpy_4_0_st_out_a;

always @(*)
begin
	g_3_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_3_a}};
	g_3_write_enable_a = memory_controller_write_enable_a & select_g_3_a;
	g_3_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str_address_a = memory_controller_address_a [2-1+0:0] & {2{select_str_a}};
	str_write_enable_a = memory_controller_write_enable_a & select_str_a;
	str_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_4_address_a = memory_controller_address_a [1-1+2:2] & {1{select_g_4_a}};
	g_4_write_enable_a = memory_controller_write_enable_a & select_g_4_a;
	g_4_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str1_address_a = memory_controller_address_a [2-1+0:0] & {2{select_str1_a}};
	str1_write_enable_a = memory_controller_write_enable_a & select_str1_a;
	str1_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	g_5_address_a = memory_controller_address_a [7-1+2:2] & {7{select_g_5_a}};
	g_5_write_enable_a = memory_controller_write_enable_a & select_g_5_a;
	g_5_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	str2_address_a = memory_controller_address_a [4-1+0:0] & {4{select_str2_a}};
	str2_write_enable_a = memory_controller_write_enable_a & select_str2_a;
	str2_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	crc32_context_address_a = memory_controller_address_a [1-1+2:2] & {1{select_crc32_context_a}};
	crc32_context_write_enable_a = memory_controller_write_enable_a & select_crc32_context_a;
	crc32_context_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	crc32_tab_address_a = memory_controller_address_a [8-1+2:2] & {8{select_crc32_tab_a}};
	crc32_tab_write_enable_a = memory_controller_write_enable_a & select_crc32_tab_a;
	crc32_tab_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1l_2_address_a = memory_controller_address_a [5-1+2:2] & {5{select_func_1l_2_a}};
	func_1l_2_write_enable_a = memory_controller_write_enable_a & select_func_1l_2_a;
	func_1l_2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	func_1_0_l_2_address_a = memory_controller_address_a [5-1+2:2] & {5{select_func_1_0_l_2_a}};
	func_1_0_l_2_write_enable_a = memory_controller_write_enable_a & select_func_1_0_l_2_a;
	func_1_0_l_2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_1_a}};
	legup_memcpy_4_0_1_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_1_a;
	legup_memcpy_4_0_1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_dt_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_dt_a}};
	legup_memcpy_4_0_dt_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_dt_a;
	legup_memcpy_4_0_dt_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	legup_memcpy_4_0_st_address_a = memory_controller_address_a [1-1+2:2] & {1{select_legup_memcpy_4_0_st_a}};
	legup_memcpy_4_0_st_write_enable_a = memory_controller_write_enable_a & select_legup_memcpy_4_0_st_a;
	legup_memcpy_4_0_st_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_g_3_reg_a[ram_latency]}} | {2{select_g_4_reg_a[ram_latency]}} | {2{select_g_5_reg_a[ram_latency]}} | {2{select_crc32_context_reg_a[ram_latency]}} | {2{select_crc32_tab_reg_a[ram_latency]}} | {2{select_func_1l_2_reg_a[ram_latency]}} | {2{select_func_1_0_l_2_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_1_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_dt_reg_a[ram_latency]}} | {2{select_legup_memcpy_4_0_st_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_g_3_out_a | memory_controller_str_out_a | memory_controller_g_4_out_a | memory_controller_str1_out_a | memory_controller_g_5_out_a | memory_controller_str2_out_a | memory_controller_crc32_context_out_a | memory_controller_crc32_tab_out_a | memory_controller_func_1l_2_out_a | memory_controller_func_1_0_l_2_out_a | memory_controller_legup_memcpy_4_0_1_out_a | memory_controller_legup_memcpy_4_0_dt_out_a | memory_controller_legup_memcpy_4_0_st_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_3_reg_a[j+1] <= select_g_3_reg_a[j];
select_str_reg_a[j+1] <= select_str_reg_a[j];
select_g_4_reg_a[j+1] <= select_g_4_reg_a[j];
select_str1_reg_a[j+1] <= select_str1_reg_a[j];
select_g_5_reg_a[j+1] <= select_g_5_reg_a[j];
select_str2_reg_a[j+1] <= select_str2_reg_a[j];
select_crc32_context_reg_a[j+1] <= select_crc32_context_reg_a[j];
select_crc32_tab_reg_a[j+1] <= select_crc32_tab_reg_a[j];
select_func_1l_2_reg_a[j+1] <= select_func_1l_2_reg_a[j];
select_func_1_0_l_2_reg_a[j+1] <= select_func_1_0_l_2_reg_a[j];
select_legup_memcpy_4_0_1_reg_a[j+1] <= select_legup_memcpy_4_0_1_reg_a[j];
select_legup_memcpy_4_0_dt_reg_a[j+1] <= select_legup_memcpy_4_0_dt_reg_a[j];
select_legup_memcpy_4_0_st_reg_a[j+1] <= select_legup_memcpy_4_0_st_reg_a[j];
end
always @(*)
begin
select_g_3_reg_a[0] <= select_g_3_a;
select_str_reg_a[0] <= select_str_a;
select_g_4_reg_a[0] <= select_g_4_a;
select_str1_reg_a[0] <= select_str1_a;
select_g_5_reg_a[0] <= select_g_5_a;
select_str2_reg_a[0] <= select_str2_a;
select_crc32_context_reg_a[0] <= select_crc32_context_a;
select_crc32_tab_reg_a[0] <= select_crc32_tab_a;
select_func_1l_2_reg_a[0] <= select_func_1l_2_a;
select_func_1_0_l_2_reg_a[0] <= select_func_1_0_l_2_a;
select_legup_memcpy_4_0_1_reg_a[0] <= select_legup_memcpy_4_0_1_a;
select_legup_memcpy_4_0_dt_reg_a[0] <= select_legup_memcpy_4_0_dt_a;
select_legup_memcpy_4_0_st_reg_a[0] <= select_legup_memcpy_4_0_st_a;
end

reg [2:0] select_not_struct_b;

wire select_g_3_b;
assign select_g_3_b = (tag_b == `TAG_g_g_3);
reg [ram_latency:0] select_g_3_reg_b;
wire [31:0] memory_controller_g_3_out_b;
assign memory_controller_g_3_out_b = {32{ select_g_3_reg_b[ram_latency]}} & g_3_out_b;

wire select_str_b;
assign select_str_b = (tag_b == `TAG_g_str);
reg [ram_latency:0] select_str_reg_b;
wire [7:0] memory_controller_str_out_b;
assign memory_controller_str_out_b = {8{ select_str_reg_b[ram_latency]}} & str_out_b;

wire select_g_4_b;
assign select_g_4_b = (tag_b == `TAG_g_g_4);
reg [ram_latency:0] select_g_4_reg_b;
wire [31:0] memory_controller_g_4_out_b;
assign memory_controller_g_4_out_b = {32{ select_g_4_reg_b[ram_latency]}} & g_4_out_b;

wire select_str1_b;
assign select_str1_b = (tag_b == `TAG_g_str1);
reg [ram_latency:0] select_str1_reg_b;
wire [7:0] memory_controller_str1_out_b;
assign memory_controller_str1_out_b = {8{ select_str1_reg_b[ram_latency]}} & str1_out_b;

wire select_g_5_b;
assign select_g_5_b = (tag_b == `TAG_g_g_5);
reg [ram_latency:0] select_g_5_reg_b;
wire [31:0] memory_controller_g_5_out_b;
assign memory_controller_g_5_out_b = {32{ select_g_5_reg_b[ram_latency]}} & g_5_out_b;

wire select_str2_b;
assign select_str2_b = (tag_b == `TAG_g_str2);
reg [ram_latency:0] select_str2_reg_b;
wire [7:0] memory_controller_str2_out_b;
assign memory_controller_str2_out_b = {8{ select_str2_reg_b[ram_latency]}} & str2_out_b;

wire select_crc32_context_b;
assign select_crc32_context_b = (tag_b == `TAG_g_crc32_context);
reg [ram_latency:0] select_crc32_context_reg_b;
wire [31:0] memory_controller_crc32_context_out_b;
assign memory_controller_crc32_context_out_b = {32{ select_crc32_context_reg_b[ram_latency]}} & crc32_context_out_b;

wire select_crc32_tab_b;
assign select_crc32_tab_b = (tag_b == `TAG_g_crc32_tab);
reg [ram_latency:0] select_crc32_tab_reg_b;
wire [31:0] memory_controller_crc32_tab_out_b;
assign memory_controller_crc32_tab_out_b = {32{ select_crc32_tab_reg_b[ram_latency]}} & crc32_tab_out_b;

wire select_func_1l_2_b;
assign select_func_1l_2_b = (tag_b == `TAG_g_func_1l_2);
reg [ram_latency:0] select_func_1l_2_reg_b;
wire [31:0] memory_controller_func_1l_2_out_b;
assign memory_controller_func_1l_2_out_b = {32{ select_func_1l_2_reg_b[ram_latency]}} & func_1l_2_out_b;

wire select_func_1_0_l_2_b;
assign select_func_1_0_l_2_b = (tag_b == `TAG_func_1_0_l_2);
reg [ram_latency:0] select_func_1_0_l_2_reg_b;
wire [31:0] memory_controller_func_1_0_l_2_out_b;
assign memory_controller_func_1_0_l_2_out_b = {32{ select_func_1_0_l_2_reg_b[ram_latency]}} & func_1_0_l_2_out_b;

wire select_legup_memcpy_4_0_1_b;
assign select_legup_memcpy_4_0_1_b = (tag_b == `TAG_legup_memcpy_4_0_1);
reg [ram_latency:0] select_legup_memcpy_4_0_1_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_1_out_b;
assign memory_controller_legup_memcpy_4_0_1_out_b = {32{ select_legup_memcpy_4_0_1_reg_b[ram_latency]}} & legup_memcpy_4_0_1_out_b;

wire select_legup_memcpy_4_0_dt_b;
assign select_legup_memcpy_4_0_dt_b = (tag_b == `TAG_legup_memcpy_4_0_dt);
reg [ram_latency:0] select_legup_memcpy_4_0_dt_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_dt_out_b;
assign memory_controller_legup_memcpy_4_0_dt_out_b = {32{ select_legup_memcpy_4_0_dt_reg_b[ram_latency]}} & legup_memcpy_4_0_dt_out_b;

wire select_legup_memcpy_4_0_st_b;
assign select_legup_memcpy_4_0_st_b = (tag_b == `TAG_legup_memcpy_4_0_st);
reg [ram_latency:0] select_legup_memcpy_4_0_st_reg_b;
wire [31:0] memory_controller_legup_memcpy_4_0_st_out_b;
assign memory_controller_legup_memcpy_4_0_st_out_b = {32{ select_legup_memcpy_4_0_st_reg_b[ram_latency]}} & legup_memcpy_4_0_st_out_b;

always @(*)
begin
	g_3_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_3_b}};
	g_3_write_enable_b = memory_controller_write_enable_b & select_g_3_b;
	g_3_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str_address_b = memory_controller_address_b [2-1+0:0] & {2{select_str_b}};
	str_write_enable_b = memory_controller_write_enable_b & select_str_b;
	str_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_4_address_b = memory_controller_address_b [1-1+2:2] & {1{select_g_4_b}};
	g_4_write_enable_b = memory_controller_write_enable_b & select_g_4_b;
	g_4_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str1_address_b = memory_controller_address_b [2-1+0:0] & {2{select_str1_b}};
	str1_write_enable_b = memory_controller_write_enable_b & select_str1_b;
	str1_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	g_5_address_b = memory_controller_address_b [7-1+2:2] & {7{select_g_5_b}};
	g_5_write_enable_b = memory_controller_write_enable_b & select_g_5_b;
	g_5_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	str2_address_b = memory_controller_address_b [4-1+0:0] & {4{select_str2_b}};
	str2_write_enable_b = memory_controller_write_enable_b & select_str2_b;
	str2_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	crc32_context_address_b = memory_controller_address_b [1-1+2:2] & {1{select_crc32_context_b}};
	crc32_context_write_enable_b = memory_controller_write_enable_b & select_crc32_context_b;
	crc32_context_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	crc32_tab_address_b = memory_controller_address_b [8-1+2:2] & {8{select_crc32_tab_b}};
	crc32_tab_write_enable_b = memory_controller_write_enable_b & select_crc32_tab_b;
	crc32_tab_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1l_2_address_b = memory_controller_address_b [5-1+2:2] & {5{select_func_1l_2_b}};
	func_1l_2_write_enable_b = memory_controller_write_enable_b & select_func_1l_2_b;
	func_1l_2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	func_1_0_l_2_address_b = memory_controller_address_b [5-1+2:2] & {5{select_func_1_0_l_2_b}};
	func_1_0_l_2_write_enable_b = memory_controller_write_enable_b & select_func_1_0_l_2_b;
	func_1_0_l_2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_1_b}};
	legup_memcpy_4_0_1_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_1_b;
	legup_memcpy_4_0_1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_dt_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_dt_b}};
	legup_memcpy_4_0_dt_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_dt_b;
	legup_memcpy_4_0_dt_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	legup_memcpy_4_0_st_address_b = memory_controller_address_b [1-1+2:2] & {1{select_legup_memcpy_4_0_st_b}};
	legup_memcpy_4_0_st_write_enable_b = memory_controller_write_enable_b & select_legup_memcpy_4_0_st_b;
	legup_memcpy_4_0_st_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_g_3_reg_b[ram_latency]}} | {2{select_g_4_reg_b[ram_latency]}} | {2{select_g_5_reg_b[ram_latency]}} | {2{select_crc32_context_reg_b[ram_latency]}} | {2{select_crc32_tab_reg_b[ram_latency]}} | {2{select_func_1l_2_reg_b[ram_latency]}} | {2{select_func_1_0_l_2_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_1_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_dt_reg_b[ram_latency]}} | {2{select_legup_memcpy_4_0_st_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_g_3_out_b | memory_controller_str_out_b | memory_controller_g_4_out_b | memory_controller_str1_out_b | memory_controller_g_5_out_b | memory_controller_str2_out_b | memory_controller_crc32_context_out_b | memory_controller_crc32_tab_out_b | memory_controller_func_1l_2_out_b | memory_controller_func_1_0_l_2_out_b | memory_controller_legup_memcpy_4_0_1_out_b | memory_controller_legup_memcpy_4_0_dt_out_b | memory_controller_legup_memcpy_4_0_st_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_g_3_reg_b[j+1] <= select_g_3_reg_b[j];
select_str_reg_b[j+1] <= select_str_reg_b[j];
select_g_4_reg_b[j+1] <= select_g_4_reg_b[j];
select_str1_reg_b[j+1] <= select_str1_reg_b[j];
select_g_5_reg_b[j+1] <= select_g_5_reg_b[j];
select_str2_reg_b[j+1] <= select_str2_reg_b[j];
select_crc32_context_reg_b[j+1] <= select_crc32_context_reg_b[j];
select_crc32_tab_reg_b[j+1] <= select_crc32_tab_reg_b[j];
select_func_1l_2_reg_b[j+1] <= select_func_1l_2_reg_b[j];
select_func_1_0_l_2_reg_b[j+1] <= select_func_1_0_l_2_reg_b[j];
select_legup_memcpy_4_0_1_reg_b[j+1] <= select_legup_memcpy_4_0_1_reg_b[j];
select_legup_memcpy_4_0_dt_reg_b[j+1] <= select_legup_memcpy_4_0_dt_reg_b[j];
select_legup_memcpy_4_0_st_reg_b[j+1] <= select_legup_memcpy_4_0_st_reg_b[j];
end
always @(*)
begin
select_g_3_reg_b[0] <= select_g_3_b;
select_str_reg_b[0] <= select_str_b;
select_g_4_reg_b[0] <= select_g_4_b;
select_str1_reg_b[0] <= select_str1_b;
select_g_5_reg_b[0] <= select_g_5_b;
select_str2_reg_b[0] <= select_str2_b;
select_crc32_context_reg_b[0] <= select_crc32_context_b;
select_crc32_tab_reg_b[0] <= select_crc32_tab_b;
select_func_1l_2_reg_b[0] <= select_func_1l_2_b;
select_func_1_0_l_2_reg_b[0] <= select_func_1_0_l_2_b;
select_legup_memcpy_4_0_1_reg_b[0] <= select_legup_memcpy_4_0_1_b;
select_legup_memcpy_4_0_dt_reg_b[0] <= select_legup_memcpy_4_0_dt_b;
select_legup_memcpy_4_0_st_reg_b[0] <= select_legup_memcpy_4_0_st_b;
end

endmodule 

`timescale 1 ns / 1 ns
module platform_main_begin
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_begin_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg  cur_state;
reg  next_state;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_begin_BB__0_1;
LEGUP_F_platform_main_begin_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_begin: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_platform_main_begin_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_gentab
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_crc32_gentab_BB__1_1 = 4'd1;
parameter [3:0] LEGUP_F_crc32_gentab_BB__3_2 = 4'd2;
parameter [3:0] LEGUP_F_crc32_gentab_BB__4_3 = 4'd3;
parameter [3:0] LEGUP_F_crc32_gentab_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_crc32_gentab_BB__8_5 = 4'd5;
parameter [3:0] LEGUP_F_crc32_gentab_BB__11_6 = 4'd6;
parameter [3:0] LEGUP_F_crc32_gentab_BB__13_7 = 4'd7;
parameter [3:0] LEGUP_F_crc32_gentab_BB__14_8 = 4'd8;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_9 = 4'd9;
parameter [3:0] LEGUP_F_crc32_gentab_BB__15_10 = 4'd10;
parameter [3:0] LEGUP_F_crc32_gentab_BB__16_11 = 4'd11;
parameter [3:0] LEGUP_F_crc32_gentab_BB__18_12 = 4'd12;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] crc32_gentab_1_2;
reg [31:0] crc32_gentab_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_1_scevgep_reg;
reg  crc32_gentab_1_exitcond1;
reg [31:0] crc32_gentab_4_indvar;
reg [31:0] crc32_gentab_4_indvar_reg;
reg [31:0] crc32_gentab_4_crc0;
reg [31:0] crc32_gentab_4_crc0_reg;
reg  crc32_gentab_4_exitcond;
reg [31:0] crc32_gentab_5_6;
reg  crc32_gentab_5_7;
reg [31:0] crc32_gentab_8_9;
reg [31:0] crc32_gentab_8_10;
reg [31:0] crc32_gentab_11_12;
reg [31:0] crc32_gentab_13_crc1;
reg [31:0] crc32_gentab_13_crc1_reg;
reg [31:0] crc32_gentab_14_indvarnext;
reg [31:0] crc32_gentab_16_17;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__11_6:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
LEGUP_F_crc32_gentab_BB__13_7:
		next_state = LEGUP_F_crc32_gentab_BB__14_8;
LEGUP_F_crc32_gentab_BB__14_8:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__15_10:
		next_state = LEGUP_F_crc32_gentab_BB__16_11;
LEGUP_F_crc32_gentab_BB__15_9:
		next_state = LEGUP_F_crc32_gentab_BB__15_10;
LEGUP_F_crc32_gentab_BB__16_11:
		next_state = LEGUP_F_crc32_gentab_BB__1_1;
LEGUP_F_crc32_gentab_BB__18_12:
		next_state = LEGUP_0;
LEGUP_F_crc32_gentab_BB__1_1:
	if ((crc32_gentab_1_exitcond1 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__18_12;
	else if ((crc32_gentab_1_exitcond1 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__3_2;
LEGUP_F_crc32_gentab_BB__3_2:
		next_state = LEGUP_F_crc32_gentab_BB__4_3;
LEGUP_F_crc32_gentab_BB__4_3:
	if ((crc32_gentab_4_exitcond == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__15_9;
	else if ((crc32_gentab_4_exitcond == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__5_4;
LEGUP_F_crc32_gentab_BB__5_4:
	if ((crc32_gentab_5_7 == 1'd1))
		next_state = LEGUP_F_crc32_gentab_BB__11_6;
	else if ((crc32_gentab_5_7 == 1'd0))
		next_state = LEGUP_F_crc32_gentab_BB__8_5;
LEGUP_F_crc32_gentab_BB__8_5:
		next_state = LEGUP_F_crc32_gentab_BB__13_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2 = 32'd0;
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_1_2 = crc32_gentab_16_17;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
	/* crc32_gentab: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %17, %16 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__16_11) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_1_2_reg <= crc32_gentab_1_2;
		if (start == 1'b0 && ^(crc32_gentab_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
		crc32_gentab_1_scevgep = (`TAG_g_crc32_tab_a + (4 * crc32_gentab_1_2_reg));
end
always @(posedge clk) begin
	/* crc32_gentab: %1*/
	/*   %scevgep = getelementptr [256 x i32]* @crc32_tab, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__1_1)) begin
		crc32_gentab_1_scevgep_reg <= crc32_gentab_1_scevgep;
		if (start == 1'b0 && ^(crc32_gentab_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %1*/
	/*   %exitcond1 = icmp eq i32 %2, 256*/
		crc32_gentab_1_exitcond1 = (crc32_gentab_1_2_reg == 32'd256);
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar = 32'd0;
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_indvar = crc32_gentab_14_indvarnext;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %indvar = phi i32 [ %indvar.next, %14 ], [ 0, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_indvar_reg <= crc32_gentab_4_indvar;
		if (start == 1'b0 && ^(crc32_gentab_4_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0 = crc32_gentab_1_2_reg;
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_4_crc0 = crc32_gentab_13_crc1_reg;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__3_2) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
	/* crc32_gentab: %4*/
	/*   %crc.0 = phi i32 [ %crc.1, %14 ], [ %2, %3 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__14_8) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_4_crc0_reg <= crc32_gentab_4_crc0;
		if (start == 1'b0 && ^(crc32_gentab_4_crc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_4_crc0_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %4*/
	/*   %exitcond = icmp eq i32 %indvar, 8*/
		crc32_gentab_4_exitcond = (crc32_gentab_4_indvar_reg == 32'd8);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %6 = and i32 %crc.0, 1*/
		crc32_gentab_5_6 = (crc32_gentab_4_crc0_reg & 32'd1);
end
always @(*) begin
	/* crc32_gentab: %5*/
	/*   %7 = icmp eq i32 %6, 0*/
		crc32_gentab_5_7 = (crc32_gentab_5_6 == 32'd0);
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %9 = lshr i32 %crc.0, 1*/
		crc32_gentab_8_9 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %8*/
	/*   %10 = xor i32 %9, -306674912*/
		crc32_gentab_8_10 = (crc32_gentab_8_9 ^ -32'd306674912);
end
always @(*) begin
	/* crc32_gentab: %11*/
	/*   %12 = lshr i32 %crc.0, 1*/
		crc32_gentab_11_12 = (crc32_gentab_4_crc0_reg >>> (32'd1 % 32));
end
always @(*) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1 = crc32_gentab_8_10;
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	else /* if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) */ begin
		crc32_gentab_13_crc1 = crc32_gentab_11_12;
	end
end
always @(posedge clk) begin
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__8_5) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
	/* crc32_gentab: %13*/
	/*   %crc.1 = phi i32 [ %10, %8 ], [ %12, %11 ]*/
	if (((cur_state == LEGUP_F_crc32_gentab_BB__11_6) & (memory_controller_waitrequest == 1'd0))) begin
		crc32_gentab_13_crc1_reg <= crc32_gentab_13_crc1;
		if (start == 1'b0 && ^(crc32_gentab_13_crc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_13_crc1_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_gentab: %14*/
	/*   %indvar.next = add i32 %indvar, 1*/
		crc32_gentab_14_indvarnext = (crc32_gentab_4_indvar_reg + 32'd1);
end
always @(*) begin
	/* crc32_gentab: %16*/
	/*   %17 = add nsw i32 %2, 1*/
		crc32_gentab_16_17 = (crc32_gentab_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_gentab: %18*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__18_12)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_address_a = crc32_gentab_1_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_in_a = crc32_gentab_4_crc0_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_gentab: %15*/
	/*   store i32 %crc.0, i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_crc32_gentab_BB__15_9)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module platform_main_end
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_crc,
	arg_flag
);

parameter  LEGUP_0 = 1'd0;
parameter  LEGUP_F_platform_main_end_BB__0_1 = 1'd1;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_crc;
input [31:0] arg_flag;
reg  cur_state;
reg  next_state;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* platform_main_end: %0*/
	/*   %1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str4, i32 0, i32 0), i32 %crc) #3*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		$write("checksum = %d\n", arg_crc);
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_crc) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_platform_main_end_BB__0_1;
LEGUP_F_platform_main_end_BB__0_1:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* platform_main_end: %0*/
	/*   ret i32 %crc*/
	if ((cur_state == LEGUP_F_platform_main_end_BB__0_1)) begin
		return_val <= arg_crc;
		if (start == 1'b0 && ^(arg_crc) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_byte
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_b
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_2 = 3'd2;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_4 = 3'd4;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_5 = 3'd5;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_6 = 3'd6;
parameter [2:0] LEGUP_F_crc32_byte_BB__0_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [7:0] arg_b;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] crc32_byte_0_1;
reg [31:0] crc32_byte_0_2;
reg [31:0] crc32_byte_0_2_reg;
reg [31:0] crc32_byte_0_3;
reg [31:0] crc32_byte_0_3_reg;
reg [31:0] crc32_byte_0_masked;
reg [31:0] crc32_byte_0_4;
reg [31:0] crc32_byte_0_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_0_5;
reg [31:0] crc32_byte_0_6;
reg [31:0] crc32_byte_0_7;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_byte_BB__0_1;
LEGUP_F_crc32_byte_BB__0_1:
		next_state = LEGUP_F_crc32_byte_BB__0_2;
LEGUP_F_crc32_byte_BB__0_2:
		next_state = LEGUP_F_crc32_byte_BB__0_3;
LEGUP_F_crc32_byte_BB__0_3:
		next_state = LEGUP_F_crc32_byte_BB__0_4;
LEGUP_F_crc32_byte_BB__0_4:
		next_state = LEGUP_F_crc32_byte_BB__0_5;
LEGUP_F_crc32_byte_BB__0_5:
		next_state = LEGUP_F_crc32_byte_BB__0_6;
LEGUP_F_crc32_byte_BB__0_6:
		next_state = LEGUP_F_crc32_byte_BB__0_7;
LEGUP_F_crc32_byte_BB__0_7:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
		crc32_byte_0_1 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
		crc32_byte_0_2 = (crc32_byte_0_1 >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %2 = lshr i32 %1, 8*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_2_reg <= crc32_byte_0_2;
		if (start == 1'b0 && ^(crc32_byte_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
		crc32_byte_0_3 = arg_b;
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %3 = zext i8 %b to i32*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		crc32_byte_0_3_reg <= crc32_byte_0_3;
		if (start == 1'b0 && ^(crc32_byte_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %.masked = and i32 %1, 255*/
		crc32_byte_0_masked = (crc32_byte_0_1 & 32'd255);
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
		crc32_byte_0_4 = (crc32_byte_0_masked ^ crc32_byte_0_3_reg);
end
always @(posedge clk) begin
	/* crc32_byte: %0*/
	/*   %4 = xor i32 %.masked, %3*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_3)) begin
		crc32_byte_0_4_reg <= crc32_byte_0_4;
		if (start == 1'b0 && ^(crc32_byte_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %5 = getelementptr inbounds [256 x i32]* @crc32_tab, i32 0, i32 %4*/
		crc32_byte_0_5 = (`TAG_g_crc32_tab_a + (4 * crc32_byte_0_4_reg));
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
		crc32_byte_0_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* crc32_byte: %0*/
	/*   %7 = xor i32 %2, %6*/
		crc32_byte_0_7 = (crc32_byte_0_2_reg ^ crc32_byte_0_6);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_byte: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_address_a = crc32_byte_0_5;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_in_a = crc32_byte_0_7;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* crc32_byte: %0*/
	/*   %1 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   %6 = load i32* %5, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* crc32_byte: %0*/
	/*   store i32 %7, i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_crc32_byte_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module legup_memcpy_4
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_d,
	arg_s,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__5_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__9_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memcpy_4_BB__15_14 = 4'd14;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_d;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_s;
input [31:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_0_3_reg;
reg [31:0] legup_memcpy_4_0_4;
reg [31:0] legup_memcpy_4_0_4_reg;
reg [31:0] legup_memcpy_4_5_6;
reg [31:0] legup_memcpy_4_5_7;
reg  legup_memcpy_4_5_8;
reg  legup_memcpy_4_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_11;
reg [31:0] legup_memcpy_4_9_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_9_14_reg;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memcpy_4_BB__0_1;
LEGUP_F_legup_memcpy_4_BB__0_1:
		next_state = LEGUP_F_legup_memcpy_4_BB__0_2;
LEGUP_F_legup_memcpy_4_BB__0_2:
		next_state = LEGUP_F_legup_memcpy_4_BB__0_3;
LEGUP_F_legup_memcpy_4_BB__0_3:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_4;
LEGUP_F_legup_memcpy_4_BB__15_14:
		next_state = LEGUP_0;
LEGUP_F_legup_memcpy_4_BB__5_4:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_5;
LEGUP_F_legup_memcpy_4_BB__5_5:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_6;
LEGUP_F_legup_memcpy_4_BB__5_6:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_7;
LEGUP_F_legup_memcpy_4_BB__5_7:
	if ((legup_memcpy_4_5_8_reg == 1'd1))
		next_state = LEGUP_F_legup_memcpy_4_BB__15_14;
	else if ((legup_memcpy_4_5_8_reg == 1'd0))
		next_state = LEGUP_F_legup_memcpy_4_BB__9_8;
LEGUP_F_legup_memcpy_4_BB__9_10:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_11;
LEGUP_F_legup_memcpy_4_BB__9_11:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_12;
LEGUP_F_legup_memcpy_4_BB__9_12:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_13;
LEGUP_F_legup_memcpy_4_BB__9_13:
		next_state = LEGUP_F_legup_memcpy_4_BB__5_4;
LEGUP_F_legup_memcpy_4_BB__9_8:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_9;
LEGUP_F_legup_memcpy_4_BB__9_9:
		next_state = LEGUP_F_legup_memcpy_4_BB__9_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %2 = bitcast i8* %d to i32**/
		legup_memcpy_4_0_2 = arg_d;
end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %3 = bitcast i8* %s to i32**/
		legup_memcpy_4_0_3 = arg_s;
end
always @(posedge clk) begin
	/* legup_memcpy_4: %0*/
	/*   %3 = bitcast i8* %s to i32**/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		legup_memcpy_4_0_3_reg <= legup_memcpy_4_0_3;
		if (start == 1'b0 && ^(legup_memcpy_4_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %0*/
	/*   %4 = lshr i32 %n, 2*/
		legup_memcpy_4_0_4 = (arg_n >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* legup_memcpy_4: %0*/
	/*   %4 = lshr i32 %n, 2*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		legup_memcpy_4_0_4_reg <= legup_memcpy_4_0_4;
		if (start == 1'b0 && ^(legup_memcpy_4_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
		legup_memcpy_4_5_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %7 = add i32 %6, -1*/
		legup_memcpy_4_5_7 = (legup_memcpy_4_5_6 + -32'd1);
end
always @(*) begin
	/* legup_memcpy_4: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
		legup_memcpy_4_5_8 = (legup_memcpy_4_5_6 == 32'd0);
end
always @(posedge clk) begin
	/* legup_memcpy_4: %5*/
	/*   %8 = icmp eq i32 %6, 0*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		legup_memcpy_4_5_8_reg <= legup_memcpy_4_5_8;
		if (start == 1'b0 && ^(legup_memcpy_4_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
		legup_memcpy_4_9_10 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %11 = getelementptr inbounds i32* %10, i32 1*/
		legup_memcpy_4_9_11 = (legup_memcpy_4_9_10 + (4 * 32'd1));
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
		legup_memcpy_4_9_12 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
		legup_memcpy_4_9_13 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		legup_memcpy_4_9_13_reg <= legup_memcpy_4_9_13;
		if (start == 1'b0 && ^(legup_memcpy_4_9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memcpy_4: %9*/
	/*   %14 = getelementptr inbounds i32* %13, i32 1*/
		legup_memcpy_4_9_14 = (legup_memcpy_4_9_13 + (4 * 32'd1));
end
always @(posedge clk) begin
	/* legup_memcpy_4: %9*/
	/*   %14 = getelementptr inbounds i32* %13, i32 1*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		legup_memcpy_4_9_14_reg <= legup_memcpy_4_9_14;
		if (start == 1'b0 && ^(legup_memcpy_4_9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_9_14_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memcpy_4: %15*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__15_14)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_1_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_address_a = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_address_a = legup_memcpy_4_9_13_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_in_a = arg_n;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_in_a = legup_memcpy_4_0_4_reg;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_in_a = legup_memcpy_4_5_7;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_in_a = legup_memcpy_4_9_11;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_in_a = legup_memcpy_4_9_12;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %n, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32 %4, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %5*/
	/*   %6 = load i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %5*/
	/*   store i32 %7, i32* %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__5_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %10 = load i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %11, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32 %12, i32* %13, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_12)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_st_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_address_b = legup_memcpy_4_9_10;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_address_b = `TAG_legup_memcpy_4_0_dt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_in_b = legup_memcpy_4_0_2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_in_b = legup_memcpy_4_0_3_reg;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_in_b = legup_memcpy_4_9_14_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %2, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %0*/
	/*   store i32* %3, i32** %st, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %13 = load i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   %12 = load i32* %10, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* legup_memcpy_4: %9*/
	/*   store i32* %14, i32** %dt, align 4*/
	if ((cur_state == LEGUP_F_legup_memcpy_4_BB__9_11)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module func_1
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_func_1_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_func_1_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_func_1_BB__2_4 = 5'd4;
parameter [4:0] LEGUP_F_func_1_BB__2_5 = 5'd5;
parameter [4:0] LEGUP_F_func_1_BB__4_6 = 5'd6;
parameter [4:0] LEGUP_F_func_1_BB__5_7 = 5'd7;
parameter [4:0] LEGUP_F_func_1_BB__5_8 = 5'd8;
parameter [4:0] LEGUP_F_func_1_BB__7_9 = 5'd9;
parameter [4:0] LEGUP_F_func_1_BB__8_10 = 5'd10;
parameter [4:0] LEGUP_F_func_1_BB__8_11 = 5'd11;
parameter [4:0] LEGUP_F_func_1_BB__10_12 = 5'd12;
parameter [4:0] LEGUP_F_func_1_BB__10_13 = 5'd13;
parameter [4:0] LEGUP_F_func_1_BB__10_14 = 5'd14;
parameter [4:0] LEGUP_F_func_1_BB__10_15 = 5'd15;
parameter [4:0] LEGUP_F_func_1_BB__10_16 = 5'd16;
parameter [4:0] LEGUP_F_func_1_BB__15_17 = 5'd17;
parameter [4:0] LEGUP_F_func_1_BB__15_18 = 5'd18;
parameter [4:0] LEGUP_F_func_1_BB__15_19 = 5'd19;
parameter [4:0] LEGUP_F_func_1_BB__18_20 = 5'd20;
parameter [4:0] LEGUP_F_func_1_BB__19_21 = 5'd21;
parameter [4:0] LEGUP_F_func_1_BB__19_22 = 5'd22;
parameter [4:0] LEGUP_F_func_1_BB__19_23 = 5'd23;
parameter [4:0] LEGUP_F_func_1_BB__22_24 = 5'd24;
parameter [4:0] LEGUP_F_func_1_BB__23_25 = 5'd25;
parameter [4:0] LEGUP_F_func_1_BB__23_26 = 5'd26;
parameter [4:0] LEGUP_F_func_1_BB__23_27 = 5'd27;
parameter [4:0] LEGUP_F_func_1_BB__26_28 = 5'd28;
parameter [4:0] LEGUP_F_func_1_BB__26_29 = 5'd29;
parameter [4:0] LEGUP_F_func_1_BB__26_30 = 5'd30;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_2 = 5'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_0_1;
reg [31:0] func_1_2_storemerge;
reg [31:0] func_1_2_storemerge_reg;
reg  func_1_2_3;
reg  func_1_2_3_reg;
reg [31:0] func_1_5_storemerge1;
reg [31:0] func_1_5_storemerge1_reg;
reg  func_1_5_6;
reg  func_1_5_6_reg;
reg [31:0] func_1_8_storemerge2;
reg [31:0] func_1_8_storemerge2_reg;
reg  func_1_8_9;
reg  func_1_8_9_reg;
reg [31:0] func_1_10_11;
reg [31:0] func_1_10_11_reg;
reg [31:0] func_1_10_12;
reg [31:0] func_1_10_12_reg;
reg [31:0] func_1_10_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_10_14;
reg [31:0] func_1_15_16;
reg [31:0] func_1_15_17;
reg [31:0] func_1_19_20;
reg [31:0] func_1_19_21;
reg [31:0] func_1_23_24;
reg [31:0] func_1_23_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_26_27;
reg [31:0] func_1_26_28;
reg  legup_memcpy_4_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_d;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_arg_s;
reg [31:0] legup_memcpy_4_arg_n;
wire  legup_memcpy_4_memory_controller_enable_a;
wire  legup_memcpy_4_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_a;
wire [1:0] legup_memcpy_4_memory_controller_size_a;
wire  legup_memcpy_4_memory_controller_enable_b;
wire  legup_memcpy_4_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memcpy_4_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memcpy_4_memory_controller_in_b;
wire [1:0] legup_memcpy_4_memory_controller_size_b;
reg  legup_memcpy_4_finish_final;
reg  legup_memcpy_4_finish_reg;
wire  legup_memcpy_4_finish;


legup_memcpy_4 legup_memcpy_4 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memcpy_4_memory_controller_enable_a),
	.memory_controller_address_a (legup_memcpy_4_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memcpy_4_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memcpy_4_memory_controller_in_a),
	.memory_controller_size_a (legup_memcpy_4_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memcpy_4_memory_controller_enable_b),
	.memory_controller_address_b (legup_memcpy_4_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memcpy_4_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memcpy_4_memory_controller_in_b),
	.memory_controller_size_b (legup_memcpy_4_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memcpy_4_start),
	.finish (legup_memcpy_4_finish),
	.arg_d (legup_memcpy_4_arg_d),
	.arg_s (legup_memcpy_4_arg_s),
	.arg_n (legup_memcpy_4_arg_n)
);

defparam
	legup_memcpy_4.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_1;
LEGUP_F_func_1_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_func_1_BB__0_3:
		next_state = LEGUP_F_func_1_BB__2_4;
LEGUP_F_func_1_BB__10_12:
		next_state = LEGUP_F_func_1_BB__10_13;
LEGUP_F_func_1_BB__10_13:
		next_state = LEGUP_F_func_1_BB__10_14;
LEGUP_F_func_1_BB__10_14:
		next_state = LEGUP_F_func_1_BB__10_15;
LEGUP_F_func_1_BB__10_15:
		next_state = LEGUP_F_func_1_BB__10_16;
LEGUP_F_func_1_BB__10_16:
		next_state = LEGUP_F_func_1_BB__15_17;
LEGUP_F_func_1_BB__15_17:
		next_state = LEGUP_F_func_1_BB__15_18;
LEGUP_F_func_1_BB__15_18:
		next_state = LEGUP_F_func_1_BB__15_19;
LEGUP_F_func_1_BB__15_19:
		next_state = LEGUP_F_func_1_BB__8_10;
LEGUP_F_func_1_BB__18_20:
		next_state = LEGUP_F_func_1_BB__19_21;
LEGUP_F_func_1_BB__19_21:
		next_state = LEGUP_F_func_1_BB__19_22;
LEGUP_F_func_1_BB__19_22:
		next_state = LEGUP_F_func_1_BB__19_23;
LEGUP_F_func_1_BB__19_23:
		next_state = LEGUP_F_func_1_BB__5_7;
LEGUP_F_func_1_BB__22_24:
		next_state = LEGUP_F_func_1_BB__23_25;
LEGUP_F_func_1_BB__23_25:
		next_state = LEGUP_F_func_1_BB__23_26;
LEGUP_F_func_1_BB__23_26:
		next_state = LEGUP_F_func_1_BB__23_27;
LEGUP_F_func_1_BB__23_27:
		next_state = LEGUP_F_func_1_BB__2_4;
LEGUP_F_func_1_BB__26_28:
		next_state = LEGUP_F_func_1_BB__26_29;
LEGUP_F_func_1_BB__26_29:
		next_state = LEGUP_F_func_1_BB__26_30;
LEGUP_F_func_1_BB__26_30:
		next_state = LEGUP_0;
LEGUP_F_func_1_BB__2_4:
		next_state = LEGUP_F_func_1_BB__2_5;
LEGUP_F_func_1_BB__2_5:
	if ((func_1_2_3_reg == 1'd1))
		next_state = LEGUP_F_func_1_BB__4_6;
	else if ((func_1_2_3_reg == 1'd0))
		next_state = LEGUP_F_func_1_BB__26_28;
LEGUP_F_func_1_BB__4_6:
		next_state = LEGUP_F_func_1_BB__5_7;
LEGUP_F_func_1_BB__5_7:
		next_state = LEGUP_F_func_1_BB__5_8;
LEGUP_F_func_1_BB__5_8:
	if ((func_1_5_6_reg == 1'd1))
		next_state = LEGUP_F_func_1_BB__7_9;
	else if ((func_1_5_6_reg == 1'd0))
		next_state = LEGUP_F_func_1_BB__22_24;
LEGUP_F_func_1_BB__7_9:
		next_state = LEGUP_F_func_1_BB__8_10;
LEGUP_F_func_1_BB__8_10:
		next_state = LEGUP_F_func_1_BB__8_11;
LEGUP_F_func_1_BB__8_11:
	if ((func_1_8_9_reg == 1'd1))
		next_state = LEGUP_F_func_1_BB__10_12;
	else if ((func_1_8_9_reg == 1'd0))
		next_state = LEGUP_F_func_1_BB__18_20;
LEGUP_function_call_2:
	if ((legup_memcpy_4_finish_final == 1'd1))
		next_state = LEGUP_F_func_1_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* func_1: %0*/
	/*   %1 = bitcast [3 x [2 x [5 x i32]]]* %l_2 to i8**/
if (reset) begin func_1_0_1 = 0; end
		func_1_0_1 = `TAG_func_1_0_l_2_a;
end
always @(*) begin
	/* func_1: %2*/
	/*   %storemerge = phi i32 [ 0, %0 ], [ %25, %23 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_2_storemerge = 32'd0;
	end
	/* func_1: %2*/
	/*   %storemerge = phi i32 [ 0, %0 ], [ %25, %23 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__23_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_2_storemerge = func_1_23_25;
	end
end
always @(posedge clk) begin
	/* func_1: %2*/
	/*   %storemerge = phi i32 [ 0, %0 ], [ %25, %23 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_2_storemerge_reg <= func_1_2_storemerge;
		if (start == 1'b0 && ^(func_1_2_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_2_storemerge_reg"); $finish; end
	end
	/* func_1: %2*/
	/*   %storemerge = phi i32 [ 0, %0 ], [ %25, %23 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__23_27) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_2_storemerge_reg <= func_1_2_storemerge;
		if (start == 1'b0 && ^(func_1_2_storemerge) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_2_storemerge_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %2*/
	/*   %3 = icmp slt i32 %storemerge, 3*/
		func_1_2_3 = ($signed(func_1_2_storemerge_reg) < $signed(32'd3));
end
always @(posedge clk) begin
	/* func_1: %2*/
	/*   %3 = icmp slt i32 %storemerge, 3*/
	if ((cur_state == LEGUP_F_func_1_BB__2_4)) begin
		func_1_2_3_reg <= func_1_2_3;
		if (start == 1'b0 && ^(func_1_2_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_2_3_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %5*/
	/*   %storemerge1 = phi i32 [ 0, %4 ], [ %21, %19 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__4_6) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_5_storemerge1 = 32'd0;
	end
	/* func_1: %5*/
	/*   %storemerge1 = phi i32 [ 0, %4 ], [ %21, %19 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__19_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_5_storemerge1 = func_1_19_21;
	end
end
always @(posedge clk) begin
	/* func_1: %5*/
	/*   %storemerge1 = phi i32 [ 0, %4 ], [ %21, %19 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__4_6) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_5_storemerge1_reg <= func_1_5_storemerge1;
		if (start == 1'b0 && ^(func_1_5_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_5_storemerge1_reg"); $finish; end
	end
	/* func_1: %5*/
	/*   %storemerge1 = phi i32 [ 0, %4 ], [ %21, %19 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__19_23) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_5_storemerge1_reg <= func_1_5_storemerge1;
		if (start == 1'b0 && ^(func_1_5_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_5_storemerge1_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %5*/
	/*   %6 = icmp slt i32 %storemerge1, 2*/
		func_1_5_6 = ($signed(func_1_5_storemerge1_reg) < $signed(32'd2));
end
always @(posedge clk) begin
	/* func_1: %5*/
	/*   %6 = icmp slt i32 %storemerge1, 2*/
	if ((cur_state == LEGUP_F_func_1_BB__5_7)) begin
		func_1_5_6_reg <= func_1_5_6;
		if (start == 1'b0 && ^(func_1_5_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_5_6_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %8*/
	/*   %storemerge2 = phi i32 [ 0, %7 ], [ %17, %15 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__7_9) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_8_storemerge2 = 32'd0;
	end
	/* func_1: %8*/
	/*   %storemerge2 = phi i32 [ 0, %7 ], [ %17, %15 ]*/
	else /* if (((cur_state == LEGUP_F_func_1_BB__15_19) & (memory_controller_waitrequest == 1'd0))) */ begin
		func_1_8_storemerge2 = func_1_15_17;
	end
end
always @(posedge clk) begin
	/* func_1: %8*/
	/*   %storemerge2 = phi i32 [ 0, %7 ], [ %17, %15 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__7_9) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_8_storemerge2_reg <= func_1_8_storemerge2;
		if (start == 1'b0 && ^(func_1_8_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_8_storemerge2_reg"); $finish; end
	end
	/* func_1: %8*/
	/*   %storemerge2 = phi i32 [ 0, %7 ], [ %17, %15 ]*/
	if (((cur_state == LEGUP_F_func_1_BB__15_19) & (memory_controller_waitrequest == 1'd0))) begin
		func_1_8_storemerge2_reg <= func_1_8_storemerge2;
		if (start == 1'b0 && ^(func_1_8_storemerge2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_8_storemerge2_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %8*/
	/*   %9 = icmp slt i32 %storemerge2, 5*/
		func_1_8_9 = ($signed(func_1_8_storemerge2_reg) < $signed(32'd5));
end
always @(posedge clk) begin
	/* func_1: %8*/
	/*   %9 = icmp slt i32 %storemerge2, 5*/
	if ((cur_state == LEGUP_F_func_1_BB__8_10)) begin
		func_1_8_9_reg <= func_1_8_9;
		if (start == 1'b0 && ^(func_1_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %10*/
	/*   %11 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
		func_1_10_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* func_1: %10*/
	/*   %11 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_14)) begin
		func_1_10_11_reg <= func_1_10_11;
		if (start == 1'b0 && ^(func_1_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_10_11_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %10*/
	/*   %12 = load i32* @g_4, align 4*/
		func_1_10_12 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %10*/
	/*   %12 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_14)) begin
		func_1_10_12_reg <= func_1_10_12;
		if (start == 1'b0 && ^(func_1_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_10_12_reg"); $finish; end
	end
end
always @(*) begin
	/* func_1: %10*/
	/*   %13 = load i32* @g_3, align 4*/
		func_1_10_13 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* func_1: %10*/
	/*   %14 = getelementptr inbounds [3 x [2 x [5 x i32]]]* %l_2, i32 0, i32 %13, i32 %12, i32 %11*/
		func_1_10_14 = (`TAG_func_1_0_l_2_a + (((40 * func_1_10_13) + (20 * func_1_10_12_reg)) + (4 * func_1_10_11_reg)));
end
always @(*) begin
	/* func_1: %15*/
	/*   %16 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
		func_1_15_16 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %15*/
	/*   %17 = add nsw i32 %16, 1*/
		func_1_15_17 = (func_1_15_16 + 32'd1);
end
always @(*) begin
	/* func_1: %19*/
	/*   %20 = load i32* @g_4, align 4*/
		func_1_19_20 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %19*/
	/*   %21 = add nsw i32 %20, 1*/
		func_1_19_21 = (func_1_19_20 + 32'd1);
end
always @(*) begin
	/* func_1: %23*/
	/*   %24 = load i32* @g_3, align 4*/
		func_1_23_24 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* func_1: %23*/
	/*   %25 = add nsw i32 %24, 1*/
		func_1_23_25 = (func_1_23_24 + 32'd1);
end
always @(*) begin
	/* func_1: %26*/
	/*   %27 = getelementptr inbounds [3 x [2 x [5 x i32]]]* %l_2, i32 0, i32 2, i32 0, i32 2*/
if (reset) begin func_1_26_27 = 0; end
		func_1_26_27 = (`TAG_func_1_0_l_2_a + ((40 * 32'd2) + (4 * 32'd2)));
end
always @(*) begin
	/* func_1: %26*/
	/*   %28 = load i32* %27, align 4*/
		func_1_26_28 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		legup_memcpy_4_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_arg_d <= func_1_0_1;
		if (start == 1'b0 && ^(func_1_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_d"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_arg_s <= `TAG_g_func_1l_2_a;
		if (start == 1'b0 && ^(`TAG_g_func_1l_2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_s"); $finish; end
	end
end
always @(posedge clk) begin
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_F_func_1_BB__0_1)) begin
		legup_memcpy_4_arg_n <= 32'd120;
		if (start == 1'b0 && ^(32'd120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_arg_n"); $finish; end
	end
end
always @(*) begin
	legup_memcpy_4_finish_final = legup_memcpy_4_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_func_1_BB__0_1))) begin
		legup_memcpy_4_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
	if (legup_memcpy_4_finish) begin
		legup_memcpy_4_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memcpy_4_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* func_1: %26*/
	/*   ret i32 %28*/
	if ((cur_state == LEGUP_F_func_1_BB__26_30)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = legup_memcpy_4_memory_controller_enable_a;
	end
	/* func_1: %2*/
	/*   store i32 %storemerge, i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %5*/
	/*   store i32 %storemerge1, i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__5_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %8*/
	/*   store i32 %storemerge2, i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__8_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %10*/
	/*   %11 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* func_1: %10*/
	/*   %13 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_13)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_a;
	end
	/* func_1: %2*/
	/*   store i32 %storemerge, i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__2_4)) begin
		memory_controller_address_a = `TAG_g_g_3_a;
	end
	/* func_1: %5*/
	/*   store i32 %storemerge1, i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__5_7)) begin
		memory_controller_address_a = `TAG_g_g_4_a;
	end
	/* func_1: %8*/
	/*   store i32 %storemerge2, i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__8_10)) begin
		memory_controller_address_a = (`TAG_g_g_5_a + (((72 * 32'd1) + (24 * 32'd1)) + (4 * 32'd5)));
	end
	/* func_1: %10*/
	/*   %11 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_address_a = (`TAG_g_g_5_a + (((72 * 32'd1) + (24 * 32'd1)) + (4 * 32'd5)));
	end
	/* func_1: %10*/
	/*   %13 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_13)) begin
		memory_controller_address_a = `TAG_g_g_3_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = legup_memcpy_4_memory_controller_write_enable_a;
	end
	/* func_1: %2*/
	/*   store i32 %storemerge, i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %5*/
	/*   store i32 %storemerge1, i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__5_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %8*/
	/*   store i32 %storemerge2, i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__8_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* func_1: %10*/
	/*   %11 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* func_1: %10*/
	/*   %13 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_a;
	end
	/* func_1: %2*/
	/*   store i32 %storemerge, i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__2_4)) begin
		memory_controller_in_a = func_1_2_storemerge_reg;
	end
	/* func_1: %5*/
	/*   store i32 %storemerge1, i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__5_7)) begin
		memory_controller_in_a = func_1_5_storemerge1_reg;
	end
	/* func_1: %8*/
	/*   store i32 %storemerge2, i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__8_10)) begin
		memory_controller_in_a = func_1_8_storemerge2_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = legup_memcpy_4_memory_controller_size_a;
	end
	/* func_1: %2*/
	/*   store i32 %storemerge, i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %5*/
	/*   store i32 %storemerge1, i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__5_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %8*/
	/*   store i32 %storemerge2, i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__8_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %10*/
	/*   %11 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* func_1: %10*/
	/*   %13 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_13)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = legup_memcpy_4_memory_controller_enable_b;
	end
	/* func_1: %10*/
	/*   %12 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %10*/
	/*   store i32 581676169, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %15*/
	/*   %16 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__15_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %19*/
	/*   %20 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__19_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %23*/
	/*   %24 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__23_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* func_1: %26*/
	/*   %28 = load i32* %27, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__26_28)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memcpy_4_memory_controller_address_b;
	end
	/* func_1: %10*/
	/*   %12 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_address_b = `TAG_g_g_4_a;
	end
	/* func_1: %10*/
	/*   store i32 581676169, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_15)) begin
		memory_controller_address_b = func_1_10_14;
	end
	/* func_1: %15*/
	/*   %16 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__15_17)) begin
		memory_controller_address_b = (`TAG_g_g_5_a + (((72 * 32'd1) + (24 * 32'd1)) + (4 * 32'd5)));
	end
	/* func_1: %19*/
	/*   %20 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__19_21)) begin
		memory_controller_address_b = `TAG_g_g_4_a;
	end
	/* func_1: %23*/
	/*   %24 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__23_25)) begin
		memory_controller_address_b = `TAG_g_g_3_a;
	end
	/* func_1: %26*/
	/*   %28 = load i32* %27, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__26_28)) begin
		memory_controller_address_b = func_1_26_27;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = legup_memcpy_4_memory_controller_write_enable_b;
	end
	/* func_1: %10*/
	/*   %12 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %10*/
	/*   store i32 581676169, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* func_1: %15*/
	/*   %16 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__15_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %19*/
	/*   %20 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__19_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %23*/
	/*   %24 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__23_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* func_1: %26*/
	/*   %28 = load i32* %27, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__26_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memcpy_4_memory_controller_in_b;
	end
	/* func_1: %10*/
	/*   store i32 581676169, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_15)) begin
		memory_controller_in_b = 32'd581676169;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	/* func_1: %0*/
	/*   call void @legup_memcpy_4(i8* %1, i8* bitcast ([3 x [2 x [5 x i32]]]* @func_1.l_2 to i8*), i32 120)*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = legup_memcpy_4_memory_controller_size_b;
	end
	/* func_1: %10*/
	/*   %12 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %10*/
	/*   store i32 581676169, i32* %14, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__10_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %15*/
	/*   %16 = load i32* getelementptr inbounds ([5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 1, i32 1, i32 5), align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__15_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %19*/
	/*   %20 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__19_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %23*/
	/*   %24 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__23_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* func_1: %26*/
	/*   %28 = load i32* %27, align 4*/
	if ((cur_state == LEGUP_F_func_1_BB__26_28)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* func_1: %26*/
	/*   ret i32 %28*/
	if ((cur_state == LEGUP_F_func_1_BB__26_30)) begin
		return_val <= func_1_26_28;
		if (start == 1'b0 && ^(func_1_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module crc32_8bytes
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_13 = 5'd13;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_15 = 5'd15;
parameter [4:0] LEGUP_F_crc32_8bytes_BB__0_17 = 5'd17;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [4:0] LEGUP_function_call_2 = 5'd2;
parameter [4:0] LEGUP_function_call_4 = 5'd4;
parameter [4:0] LEGUP_function_call_6 = 5'd6;
parameter [4:0] LEGUP_function_call_8 = 5'd8;
parameter [4:0] LEGUP_function_call_10 = 5'd10;
parameter [4:0] LEGUP_function_call_12 = 5'd12;
parameter [4:0] LEGUP_function_call_14 = 5'd14;
parameter [4:0] LEGUP_function_call_16 = 5'd16;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [7:0] crc32_8bytes_0_1;
reg [63:0] crc32_8bytes_0_2;
reg [7:0] crc32_8bytes_0_3;
reg [7:0] crc32_8bytes_0_3_reg;
reg [63:0] crc32_8bytes_0_4;
reg [7:0] crc32_8bytes_0_5;
reg [7:0] crc32_8bytes_0_5_reg;
reg [63:0] crc32_8bytes_0_6;
reg [7:0] crc32_8bytes_0_7;
reg [7:0] crc32_8bytes_0_7_reg;
reg [63:0] crc32_8bytes_0_8;
reg [7:0] crc32_8bytes_0_9;
reg [7:0] crc32_8bytes_0_9_reg;
reg [63:0] crc32_8bytes_0_10;
reg [7:0] crc32_8bytes_0_11;
reg [7:0] crc32_8bytes_0_11_reg;
reg [63:0] crc32_8bytes_0_12;
reg [7:0] crc32_8bytes_0_13;
reg [7:0] crc32_8bytes_0_13_reg;
reg [63:0] crc32_8bytes_0_14;
reg [7:0] crc32_8bytes_0_15;
reg [7:0] crc32_8bytes_0_15_reg;
reg  crc32_byte_start;
reg [7:0] crc32_byte_arg_b;
wire  crc32_byte_memory_controller_enable_a;
wire  crc32_byte_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_a;
wire [1:0] crc32_byte_memory_controller_size_a;
wire  crc32_byte_memory_controller_enable_b;
wire  crc32_byte_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_byte_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_byte_memory_controller_in_b;
wire [1:0] crc32_byte_memory_controller_size_b;
reg  crc32_byte_finish_final;
reg  crc32_byte_finish_reg;
wire  crc32_byte_finish;


crc32_byte crc32_byte (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_byte_memory_controller_enable_a),
	.memory_controller_address_a (crc32_byte_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_byte_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_byte_memory_controller_in_a),
	.memory_controller_size_a (crc32_byte_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_byte_memory_controller_enable_b),
	.memory_controller_address_b (crc32_byte_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_byte_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_byte_memory_controller_in_b),
	.memory_controller_size_b (crc32_byte_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_byte_start),
	.finish (crc32_byte_finish),
	.arg_b (crc32_byte_arg_b)
);

defparam
	crc32_byte.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_1;
LEGUP_F_crc32_8bytes_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_crc32_8bytes_BB__0_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_crc32_8bytes_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_crc32_8bytes_BB__0_15:
		next_state = LEGUP_function_call_16;
LEGUP_F_crc32_8bytes_BB__0_17:
		next_state = LEGUP_0;
LEGUP_F_crc32_8bytes_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_crc32_8bytes_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_crc32_8bytes_BB__0_7:
		next_state = LEGUP_function_call_8;
LEGUP_F_crc32_8bytes_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_function_call_10:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_11;
LEGUP_function_call_12:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_13;
LEGUP_function_call_14:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_15;
LEGUP_function_call_16:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_17;
LEGUP_function_call_2:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_3;
LEGUP_function_call_4:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_5;
LEGUP_function_call_6:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_7;
LEGUP_function_call_8:
	if ((crc32_byte_finish_final == 1'd1))
		next_state = LEGUP_F_crc32_8bytes_BB__0_9;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %1 = trunc i64 %val to i8*/
		crc32_8bytes_0_1 = arg_val[7:0];
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %2 = lshr i64 %val, 8*/
		crc32_8bytes_0_2 = (arg_val >>> (64'd8 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
		crc32_8bytes_0_3 = crc32_8bytes_0_2[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %3 = trunc i64 %2 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_3_reg <= crc32_8bytes_0_3;
		if (start == 1'b0 && ^(crc32_8bytes_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %4 = lshr i64 %val, 16*/
		crc32_8bytes_0_4 = (arg_val >>> (64'd16 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
		crc32_8bytes_0_5 = crc32_8bytes_0_4[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %5 = trunc i64 %4 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_5_reg <= crc32_8bytes_0_5;
		if (start == 1'b0 && ^(crc32_8bytes_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %6 = lshr i64 %val, 24*/
		crc32_8bytes_0_6 = (arg_val >>> (64'd24 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
		crc32_8bytes_0_7 = crc32_8bytes_0_6[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %7 = trunc i64 %6 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_7_reg <= crc32_8bytes_0_7;
		if (start == 1'b0 && ^(crc32_8bytes_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %8 = lshr i64 %val, 32*/
		crc32_8bytes_0_8 = (arg_val >>> (64'd32 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
		crc32_8bytes_0_9 = crc32_8bytes_0_8[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %9 = trunc i64 %8 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_9_reg <= crc32_8bytes_0_9;
		if (start == 1'b0 && ^(crc32_8bytes_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %10 = lshr i64 %val, 40*/
		crc32_8bytes_0_10 = (arg_val >>> (64'd40 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
		crc32_8bytes_0_11 = crc32_8bytes_0_10[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %11 = trunc i64 %10 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_11_reg <= crc32_8bytes_0_11;
		if (start == 1'b0 && ^(crc32_8bytes_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %12 = lshr i64 %val, 48*/
		crc32_8bytes_0_12 = (arg_val >>> (64'd48 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
		crc32_8bytes_0_13 = crc32_8bytes_0_12[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %13 = trunc i64 %12 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_13_reg <= crc32_8bytes_0_13;
		if (start == 1'b0 && ^(crc32_8bytes_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %14 = lshr i64 %val, 56*/
		crc32_8bytes_0_14 = (arg_val >>> (64'd56 % 64'd64));
end
always @(*) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
		crc32_8bytes_0_15 = crc32_8bytes_0_14[7:0];
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   %15 = trunc i64 %14 to i8*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_8bytes_0_15_reg <= crc32_8bytes_0_15;
		if (start == 1'b0 && ^(crc32_8bytes_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_0_15_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		crc32_byte_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_1)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_1;
		if (start == 1'b0 && ^(crc32_8bytes_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_3)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_3_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_3_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_5)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_5_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_5_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_7)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_7_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_9)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_9_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_9_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_11)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_11_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_11_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_13)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_13_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_13_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_15)) begin
		crc32_byte_arg_b <= crc32_8bytes_0_15_reg;
		if (start == 1'b0 && ^(crc32_8bytes_0_15_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_arg_b"); $finish; end
	end
end
always @(*) begin
	crc32_byte_finish_final = crc32_byte_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_1))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_3))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_5))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_7))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_9))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_11))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_13))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_crc32_8bytes_BB__0_15))) begin
		crc32_byte_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
	if (crc32_byte_finish) begin
		crc32_byte_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_byte_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* crc32_8bytes: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_crc32_8bytes_BB__0_17)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_a = crc32_byte_memory_controller_enable_a;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_a = crc32_byte_memory_controller_write_enable_a;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_a[1:0] = crc32_byte_memory_controller_size_a;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_enable_b = crc32_byte_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_byte_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_write_enable_b = crc32_byte_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_byte_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %1) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %3) #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %5) #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %7) #3*/
	if ((cur_state == LEGUP_function_call_8)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %9) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %11) #3*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %13) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
	/* crc32_8bytes: %0*/
	/*   call void @crc32_byte(i8 zeroext %15) #3*/
	if ((cur_state == LEGUP_function_call_16)) begin
		memory_controller_size_b[1:0] = crc32_byte_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module transparent_crc
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_val,
	arg_vname,
	arg_flag
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_1 = 3'd1;
parameter [2:0] LEGUP_F_transparent_crc_BB__0_3 = 3'd3;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_4 = 3'd4;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_5 = 3'd5;
parameter [2:0] LEGUP_F_transparent_crc_BB__2_6 = 3'd6;
parameter [2:0] LEGUP_F_transparent_crc_BB__6_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [2:0] LEGUP_function_call_2 = 3'd2;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [63:0] arg_val;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_vname;
input [31:0] arg_flag;
reg [2:0] cur_state;
reg [2:0] next_state;
reg  transparent_crc_0_1;
reg  transparent_crc_0_1_reg;
reg [31:0] transparent_crc_2_3;
reg [31:0] transparent_crc_2_4;
reg  crc32_8bytes_start;
reg [63:0] crc32_8bytes_arg_val;
wire  crc32_8bytes_memory_controller_enable_a;
wire  crc32_8bytes_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_a;
wire [1:0] crc32_8bytes_memory_controller_size_a;
wire  crc32_8bytes_memory_controller_enable_b;
wire  crc32_8bytes_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_8bytes_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_8bytes_memory_controller_in_b;
wire [1:0] crc32_8bytes_memory_controller_size_b;
reg  crc32_8bytes_finish_final;
reg  crc32_8bytes_finish_reg;
wire  crc32_8bytes_finish;


crc32_8bytes crc32_8bytes (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_8bytes_memory_controller_enable_a),
	.memory_controller_address_a (crc32_8bytes_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_8bytes_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_8bytes_memory_controller_in_a),
	.memory_controller_size_a (crc32_8bytes_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_8bytes_memory_controller_enable_b),
	.memory_controller_address_b (crc32_8bytes_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_8bytes_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_8bytes_memory_controller_in_b),
	.memory_controller_size_b (crc32_8bytes_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_8bytes_start),
	.finish (crc32_8bytes_finish),
	.arg_val (crc32_8bytes_arg_val)
);

defparam
	crc32_8bytes.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* transparent_crc: %2*/
	/*   %5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([36 x i8]* @.str5, i32 0, i32 0), i8* %vname, i32 %4) #4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_6)) begin
		$write("...checksum after hashing %s : %lX\n", $signed(arg_vname), $signed(transparent_crc_2_4));
		// to fix quartus warning
		if (reset == 1'b0 && ^(arg_vname) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(transparent_crc_2_4) === 1'bX) finish <= 0;
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_1;
LEGUP_F_transparent_crc_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_transparent_crc_BB__0_3:
	if ((transparent_crc_0_1_reg == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__6_7;
	else if ((transparent_crc_0_1_reg == 1'd0))
		next_state = LEGUP_F_transparent_crc_BB__2_4;
LEGUP_F_transparent_crc_BB__2_4:
		next_state = LEGUP_F_transparent_crc_BB__2_5;
LEGUP_F_transparent_crc_BB__2_5:
		next_state = LEGUP_F_transparent_crc_BB__2_6;
LEGUP_F_transparent_crc_BB__2_6:
		next_state = LEGUP_F_transparent_crc_BB__6_7;
LEGUP_F_transparent_crc_BB__6_7:
		next_state = LEGUP_0;
LEGUP_function_call_2:
	if ((crc32_8bytes_finish_final == 1'd1))
		next_state = LEGUP_F_transparent_crc_BB__0_3;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
		transparent_crc_0_1 = (arg_flag == 32'd0);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   %1 = icmp eq i32 %flag, 0*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		transparent_crc_0_1_reg <= transparent_crc_0_1;
		if (start == 1'b0 && ^(transparent_crc_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
		transparent_crc_2_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* transparent_crc: %2*/
	/*   %4 = xor i32 %3, -1*/
		transparent_crc_2_4 = (transparent_crc_2_3 ^ -32'd1);
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		crc32_8bytes_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__0_1)) begin
		crc32_8bytes_arg_val <= arg_val;
		if (start == 1'b0 && ^(arg_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_arg_val"); $finish; end
	end
end
always @(*) begin
	crc32_8bytes_finish_final = crc32_8bytes_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_transparent_crc_BB__0_1))) begin
		crc32_8bytes_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
	if (crc32_8bytes_finish) begin
		crc32_8bytes_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_8bytes_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* transparent_crc: %6*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__6_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = crc32_8bytes_memory_controller_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = crc32_8bytes_memory_controller_write_enable_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = crc32_8bytes_memory_controller_size_a;
	end
	/* transparent_crc: %2*/
	/*   %3 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_transparent_crc_BB__2_4)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = crc32_8bytes_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_8bytes_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = crc32_8bytes_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_8bytes_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
	/* transparent_crc: %0*/
	/*   call void @crc32_8bytes(i64 %val) #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = crc32_8bytes_memory_controller_size_b;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_argc,
	arg_argv
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__0_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__0_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__0_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__0_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__0_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__0_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__0_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__0_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__0_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__0_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__6_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__8_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__9_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__11_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__12_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB__14_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__14_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__14_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__14_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__17_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__18_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__19_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__21_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__22_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__24_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__25_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB__27_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__27_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__27_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__27_37 = 6'd37;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_2 = 6'd2;
parameter [5:0] LEGUP_function_call_4 = 6'd4;
parameter [5:0] LEGUP_function_call_6 = 6'd6;
parameter [5:0] LEGUP_function_call_10 = 6'd10;
parameter [5:0] LEGUP_function_call_14 = 6'd14;
parameter [5:0] LEGUP_function_call_24 = 6'd24;
parameter [5:0] LEGUP_function_call_36 = 6'd36;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_argc;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_argv;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_0_2;
reg [63:0] main_0_3;
reg [31:0] main_0_4;
reg [63:0] main_0_5;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg  main_6_exitcond3;
reg [31:0] main_9_10;
reg [31:0] main_9_10_reg;
reg  main_9_exitcond1;
reg [31:0] main_12_13;
reg [31:0] main_12_13_reg;
reg  main_12_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_14_scevgep;
reg [31:0] main_14_15;
reg [63:0] main_14_16;
reg [31:0] main_19_20;
reg [31:0] main_22_23;
reg [31:0] main_25_26;
reg [31:0] main_27_28;
reg [31:0] main_27_29;
reg [31:0] main_27_30;
reg [31:0] main_27_30_reg;
reg  platform_main_begin_start;
wire  platform_main_begin_memory_controller_enable_a;
wire  platform_main_begin_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_a;
wire [1:0] platform_main_begin_memory_controller_size_a;
wire  platform_main_begin_memory_controller_enable_b;
wire  platform_main_begin_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_begin_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_begin_memory_controller_in_b;
wire [1:0] platform_main_begin_memory_controller_size_b;
reg  platform_main_begin_finish_final;
reg  platform_main_begin_finish_reg;
wire  platform_main_begin_finish;
reg  crc32_gentab_start;
wire  crc32_gentab_memory_controller_enable_a;
wire  crc32_gentab_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_a;
wire [1:0] crc32_gentab_memory_controller_size_a;
wire  crc32_gentab_memory_controller_enable_b;
wire  crc32_gentab_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] crc32_gentab_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] crc32_gentab_memory_controller_in_b;
wire [1:0] crc32_gentab_memory_controller_size_b;
reg  crc32_gentab_finish_final;
reg  crc32_gentab_finish_reg;
wire  crc32_gentab_finish;
reg  func_1_start;
wire  func_1_memory_controller_enable_a;
wire  func_1_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_a;
wire [1:0] func_1_memory_controller_size_a;
wire  func_1_memory_controller_enable_b;
wire  func_1_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] func_1_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] func_1_memory_controller_in_b;
wire [1:0] func_1_memory_controller_size_b;
reg  func_1_finish_final;
reg  func_1_finish_reg;
wire  func_1_finish;
wire [31:0] func_1_return_val;
reg  transparent_crc_start;
reg [63:0] transparent_crc_arg_val;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_arg_vname;
reg [31:0] transparent_crc_arg_flag;
wire  transparent_crc_memory_controller_enable_a;
wire  transparent_crc_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_a;
wire [1:0] transparent_crc_memory_controller_size_a;
wire  transparent_crc_memory_controller_enable_b;
wire  transparent_crc_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] transparent_crc_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] transparent_crc_memory_controller_in_b;
wire [1:0] transparent_crc_memory_controller_size_b;
reg  transparent_crc_finish_final;
reg  transparent_crc_finish_reg;
wire  transparent_crc_finish;
reg  platform_main_end_start;
reg [31:0] platform_main_end_arg_crc;
reg [31:0] platform_main_end_arg_flag;
wire  platform_main_end_memory_controller_enable_a;
wire  platform_main_end_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_a;
wire [1:0] platform_main_end_memory_controller_size_a;
wire  platform_main_end_memory_controller_enable_b;
wire  platform_main_end_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] platform_main_end_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] platform_main_end_memory_controller_in_b;
wire [1:0] platform_main_end_memory_controller_size_b;
reg  platform_main_end_finish_final;
reg  platform_main_end_finish_reg;
wire  platform_main_end_finish;
wire [31:0] platform_main_end_return_val;
reg [31:0] platform_main_end_return_val_reg;


platform_main_begin platform_main_begin (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_begin_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_begin_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_begin_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_begin_memory_controller_in_a),
	.memory_controller_size_a (platform_main_begin_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_begin_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_begin_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_begin_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_begin_memory_controller_in_b),
	.memory_controller_size_b (platform_main_begin_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_begin_start),
	.finish (platform_main_begin_finish)
);

defparam
	platform_main_begin.tag_offset = tag_offset;


crc32_gentab crc32_gentab (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (crc32_gentab_memory_controller_enable_a),
	.memory_controller_address_a (crc32_gentab_memory_controller_address_a),
	.memory_controller_write_enable_a (crc32_gentab_memory_controller_write_enable_a),
	.memory_controller_in_a (crc32_gentab_memory_controller_in_a),
	.memory_controller_size_a (crc32_gentab_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (crc32_gentab_memory_controller_enable_b),
	.memory_controller_address_b (crc32_gentab_memory_controller_address_b),
	.memory_controller_write_enable_b (crc32_gentab_memory_controller_write_enable_b),
	.memory_controller_in_b (crc32_gentab_memory_controller_in_b),
	.memory_controller_size_b (crc32_gentab_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (crc32_gentab_start),
	.finish (crc32_gentab_finish)
);

defparam
	crc32_gentab.tag_offset = tag_offset;


func_1 func_1 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (func_1_memory_controller_enable_a),
	.memory_controller_address_a (func_1_memory_controller_address_a),
	.memory_controller_write_enable_a (func_1_memory_controller_write_enable_a),
	.memory_controller_in_a (func_1_memory_controller_in_a),
	.memory_controller_size_a (func_1_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (func_1_memory_controller_enable_b),
	.memory_controller_address_b (func_1_memory_controller_address_b),
	.memory_controller_write_enable_b (func_1_memory_controller_write_enable_b),
	.memory_controller_in_b (func_1_memory_controller_in_b),
	.memory_controller_size_b (func_1_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (func_1_start),
	.finish (func_1_finish),
	.return_val (func_1_return_val)
);

defparam
	func_1.tag_offset = tag_offset;


transparent_crc transparent_crc (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (transparent_crc_memory_controller_enable_a),
	.memory_controller_address_a (transparent_crc_memory_controller_address_a),
	.memory_controller_write_enable_a (transparent_crc_memory_controller_write_enable_a),
	.memory_controller_in_a (transparent_crc_memory_controller_in_a),
	.memory_controller_size_a (transparent_crc_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (transparent_crc_memory_controller_enable_b),
	.memory_controller_address_b (transparent_crc_memory_controller_address_b),
	.memory_controller_write_enable_b (transparent_crc_memory_controller_write_enable_b),
	.memory_controller_in_b (transparent_crc_memory_controller_in_b),
	.memory_controller_size_b (transparent_crc_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (transparent_crc_start),
	.finish (transparent_crc_finish),
	.arg_val (transparent_crc_arg_val),
	.arg_vname (transparent_crc_arg_vname),
	.arg_flag (transparent_crc_arg_flag)
);

defparam
	transparent_crc.tag_offset = tag_offset;


platform_main_end platform_main_end (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (platform_main_end_memory_controller_enable_a),
	.memory_controller_address_a (platform_main_end_memory_controller_address_a),
	.memory_controller_write_enable_a (platform_main_end_memory_controller_write_enable_a),
	.memory_controller_in_a (platform_main_end_memory_controller_in_a),
	.memory_controller_size_a (platform_main_end_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (platform_main_end_memory_controller_enable_b),
	.memory_controller_address_b (platform_main_end_memory_controller_address_b),
	.memory_controller_write_enable_b (platform_main_end_memory_controller_write_enable_b),
	.memory_controller_in_b (platform_main_end_memory_controller_in_b),
	.memory_controller_size_b (platform_main_end_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (platform_main_end_start),
	.finish (platform_main_end_finish),
	.return_val (platform_main_end_return_val),
	.arg_crc (platform_main_end_arg_crc),
	.arg_flag (platform_main_end_arg_flag)
);

defparam
	platform_main_end.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_function_call_2;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_function_call_14;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_function_call_6;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_function_call_10;
LEGUP_F_main_BB__11_19:
		next_state = LEGUP_F_main_BB__12_20;
LEGUP_F_main_BB__12_20:
	if ((main_12_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__21_29;
	else if ((main_12_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__14_21;
LEGUP_F_main_BB__14_21:
		next_state = LEGUP_F_main_BB__14_22;
LEGUP_F_main_BB__14_22:
		next_state = LEGUP_F_main_BB__14_23;
LEGUP_F_main_BB__14_23:
		next_state = LEGUP_function_call_24;
LEGUP_F_main_BB__14_25:
	if ((1'd0 == 1'd1))
		next_state = LEGUP_F_main_BB__17_26;
	else if ((1'd0 == 1'd0))
		next_state = LEGUP_F_main_BB__18_27;
LEGUP_F_main_BB__17_26:
		next_state = LEGUP_F_main_BB__18_27;
LEGUP_F_main_BB__18_27:
		next_state = LEGUP_F_main_BB__19_28;
LEGUP_F_main_BB__19_28:
		next_state = LEGUP_F_main_BB__12_20;
LEGUP_F_main_BB__21_29:
		next_state = LEGUP_F_main_BB__22_30;
LEGUP_F_main_BB__22_30:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__24_31:
		next_state = LEGUP_F_main_BB__25_32;
LEGUP_F_main_BB__25_32:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__27_33:
		next_state = LEGUP_F_main_BB__27_34;
LEGUP_F_main_BB__27_34:
		next_state = LEGUP_F_main_BB__27_35;
LEGUP_F_main_BB__27_35:
		next_state = LEGUP_function_call_36;
LEGUP_F_main_BB__27_37:
		next_state = LEGUP_0;
LEGUP_F_main_BB__6_16:
	if ((main_6_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB__27_33;
	else if ((main_6_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB__8_17;
LEGUP_F_main_BB__8_17:
		next_state = LEGUP_F_main_BB__9_18;
LEGUP_F_main_BB__9_18:
	if ((main_9_exitcond1 == 1'd1))
		next_state = LEGUP_F_main_BB__24_31;
	else if ((main_9_exitcond1 == 1'd0))
		next_state = LEGUP_F_main_BB__11_19;
LEGUP_function_call_10:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_function_call_14:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_function_call_2:
	if ((platform_main_begin_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_function_call_24:
	if ((transparent_crc_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__14_25;
LEGUP_function_call_36:
	if ((platform_main_end_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__27_37;
LEGUP_function_call_4:
	if ((crc32_gentab_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_function_call_6:
	if ((func_1_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_7;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %0*/
	/*   %2 = load i32* @g_3, align 4*/
		main_0_2 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %3 = sext i32 %2 to i64*/
		main_0_3 = $signed(main_0_2);
end
always @(*) begin
	/* main: %0*/
	/*   %4 = load i32* @g_4, align 4*/
		main_0_4 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %0*/
	/*   %5 = sext i32 %4 to i64*/
		main_0_5 = $signed(main_0_4);
end
always @(*) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %26, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7 = 32'd0;
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %26, %25 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__25_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_6_7 = main_25_26;
	end
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %26, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
	/* main: %6*/
	/*   %7 = phi i32 [ 0, %0 ], [ %26, %25 ]*/
	if (((cur_state == LEGUP_F_main_BB__25_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %exitcond3 = icmp eq i32 %7, 5*/
		main_6_exitcond3 = (main_6_7_reg == 32'd5);
end
always @(*) begin
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %23, %22 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10 = 32'd0;
	end
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %23, %22 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__22_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_9_10 = main_22_23;
	end
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %23, %22 ]*/
	if (((cur_state == LEGUP_F_main_BB__8_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
	/* main: %9*/
	/*   %10 = phi i32 [ 0, %8 ], [ %23, %22 ]*/
	if (((cur_state == LEGUP_F_main_BB__22_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %9*/
	/*   %exitcond1 = icmp eq i32 %10, 3*/
		main_9_exitcond1 = (main_9_10_reg == 32'd3);
end
always @(*) begin
	/* main: %12*/
	/*   %13 = phi i32 [ 0, %11 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__11_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_12_13 = 32'd0;
	end
	/* main: %12*/
	/*   %13 = phi i32 [ 0, %11 ], [ %20, %19 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__19_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_12_13 = main_19_20;
	end
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %13 = phi i32 [ 0, %11 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__11_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
	/* main: %12*/
	/*   %13 = phi i32 [ 0, %11 ], [ %20, %19 ]*/
	if (((cur_state == LEGUP_F_main_BB__19_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %exitcond = icmp eq i32 %13, 6*/
		main_12_exitcond = (main_12_13_reg == 32'd6);
end
always @(*) begin
	/* main: %14*/
	/*   %scevgep = getelementptr [5 x [3 x [6 x i32]]]* @g_5, i32 0, i32 %7, i32 %10, i32 %13*/
		main_14_scevgep = (`TAG_g_g_5_a + (((72 * main_6_7_reg) + (24 * main_9_10_reg)) + (4 * main_12_13_reg)));
end
always @(*) begin
	/* main: %14*/
	/*   %15 = load i32* %scevgep, align 4*/
		main_14_15 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %14*/
	/*   %16 = sext i32 %15 to i64*/
		main_14_16 = $signed(main_14_15);
end
always @(*) begin
	/* main: %19*/
	/*   %20 = add nsw i32 %13, 1*/
		main_19_20 = (main_12_13_reg + 32'd1);
end
always @(*) begin
	/* main: %22*/
	/*   %23 = add nsw i32 %10, 1*/
		main_22_23 = (main_9_10_reg + 32'd1);
end
always @(*) begin
	/* main: %25*/
	/*   %26 = add nsw i32 %7, 1*/
		main_25_26 = (main_6_7_reg + 32'd1);
end
always @(*) begin
	/* main: %27*/
	/*   %28 = load i32* @crc32_context, align 4*/
		main_27_28 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %29 = xor i32 %28, -1*/
		main_27_29 = (main_27_28 ^ -32'd1);
end
always @(*) begin
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
		main_27_30 = platform_main_end_return_val_reg;
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		main_27_30_reg <= main_27_30;
		if (start == 1'b0 && ^(main_27_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_30_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		platform_main_begin_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_2)) begin
		platform_main_begin_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_start"); $finish; end
	end
end
always @(*) begin
	platform_main_begin_finish_final = platform_main_begin_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_1))) begin
		platform_main_begin_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
	if (platform_main_begin_finish) begin
		platform_main_begin_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_begin_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		crc32_gentab_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		crc32_gentab_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_start"); $finish; end
	end
end
always @(*) begin
	crc32_gentab_finish_final = crc32_gentab_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_3))) begin
		crc32_gentab_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
	if (crc32_gentab_finish) begin
		crc32_gentab_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to crc32_gentab_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		func_1_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		func_1_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_start"); $finish; end
	end
end
always @(*) begin
	func_1_finish_final = func_1_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_5))) begin
		func_1_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
	if (func_1_finish) begin
		func_1_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to func_1_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__14_23)) begin
		transparent_crc_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		transparent_crc_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_val <= main_0_3;
		if (start == 1'b0 && ^(main_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_val <= main_0_5;
		if (start == 1'b0 && ^(main_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__14_23)) begin
		transparent_crc_arg_val <= main_14_16;
		if (start == 1'b0 && ^(main_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_val"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_vname <= `TAG_g_str_a;
		if (start == 1'b0 && ^(`TAG_g_str_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_vname <= `TAG_g_str1_a;
		if (start == 1'b0 && ^(`TAG_g_str1_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__14_23)) begin
		transparent_crc_arg_vname <= `TAG_g_str2_a;
		if (start == 1'b0 && ^(`TAG_g_str2_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_vname"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__14_23)) begin
		transparent_crc_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_arg_flag"); $finish; end
	end
end
always @(*) begin
	transparent_crc_finish_final = transparent_crc_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_9))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__0_13))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB__14_23))) begin
		transparent_crc_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
	if (transparent_crc_finish) begin
		transparent_crc_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to transparent_crc_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_35)) begin
		platform_main_end_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		platform_main_end_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_35)) begin
		platform_main_end_arg_crc <= main_27_29;
		if (start == 1'b0 && ^(main_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_crc"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_F_main_BB__27_35)) begin
		platform_main_end_arg_flag <= 32'd0;
		if (start == 1'b0 && ^(32'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_arg_flag"); $finish; end
	end
end
always @(*) begin
	platform_main_end_finish_final = platform_main_end_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__27_35))) begin
		platform_main_end_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__27_35))) begin
		platform_main_end_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
	if (platform_main_end_finish) begin
		platform_main_end_return_val_reg <= platform_main_end_return_val;
		if (start == 1'b0 && ^(platform_main_end_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to platform_main_end_return_val_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__27_37)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_a = platform_main_begin_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = crc32_gentab_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_a = func_1_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = transparent_crc_memory_controller_enable_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_a = platform_main_end_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %14*/
	/*   %15 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %27*/
	/*   %28 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_33)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_g_3_a;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = `TAG_g_g_4_a;
	end
	/* main: %14*/
	/*   %15 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_address_a = main_14_scevgep;
	end
	/* main: %27*/
	/*   %28 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_33)) begin
		memory_controller_address_a = `TAG_g_crc32_context_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_a = platform_main_begin_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = crc32_gentab_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_a = func_1_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = transparent_crc_memory_controller_write_enable_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_a = platform_main_end_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %14*/
	/*   %15 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %27*/
	/*   %28 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_a[1:0] = platform_main_begin_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = crc32_gentab_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_a[1:0] = func_1_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = transparent_crc_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_a[1:0] = platform_main_end_memory_controller_size_a;
	end
	/* main: %0*/
	/*   %2 = load i32* @g_3, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   %4 = load i32* @g_4, align 4*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %14*/
	/*   %15 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %27*/
	/*   %28 = load i32* @crc32_context, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_33)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_enable_b = platform_main_begin_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = crc32_gentab_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_enable_b = func_1_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = transparent_crc_memory_controller_enable_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_enable_b = platform_main_end_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_begin_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = crc32_gentab_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = func_1_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = transparent_crc_memory_controller_address_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = platform_main_end_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_write_enable_b = platform_main_begin_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = crc32_gentab_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_write_enable_b = func_1_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = transparent_crc_memory_controller_write_enable_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_write_enable_b = platform_main_end_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_begin_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = crc32_gentab_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = func_1_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = transparent_crc_memory_controller_in_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = platform_main_end_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @platform_main_begin() #3*/
	if ((cur_state == LEGUP_function_call_2)) begin
		memory_controller_size_b[1:0] = platform_main_begin_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @crc32_gentab() #3*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = crc32_gentab_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	/* main: %0*/
	/*   %1 = call i32 @func_1() #3*/
	if ((cur_state == LEGUP_function_call_6)) begin
		memory_controller_size_b[1:0] = func_1_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %3, i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_10)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @transparent_crc(i64 %5, i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_14)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	/* main: %14*/
	/*   call void @transparent_crc(i64 %16, i8* getelementptr inbounds ([13 x i8]* @.str2, i32 0, i32 0), i32 0) #3*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = transparent_crc_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
	/* main: %27*/
	/*   %30 = call i32 @platform_main_end(i32 %29, i32 0) #3*/
	if ((cur_state == LEGUP_function_call_36)) begin
		memory_controller_size_b[1:0] = platform_main_end_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %27*/
	/*   ret i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__27_37)) begin
		return_val <= main_27_30_reg;
		if (start == 1'b0 && ^(main_27_30_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
